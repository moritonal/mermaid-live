{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js"],"names":["conf","tsConf","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","tsLanguage","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer"],"mappings":";;;;;;;AAIA;;AAJA;AACA;AACA;AACA;AAEO,IAAIA,IAAI,GAAGC,gBAAX;;AACA,IAAIC,QAAQ,GAAG;AAClB;AACAC,EAAAA,YAAY,EAAE,SAFI;AAGlBC,EAAAA,YAAY,EAAE,KAHI;AAIlBC,EAAAA,QAAQ,EAAE,CACN,OADM,EAEN,MAFM,EAGN,OAHM,EAIN,OAJM,EAKN,UALM,EAMN,OANM,EAON,aAPM,EAQN,UARM,EASN,SATM,EAUN,QAVM,EAWN,IAXM,EAYN,MAZM,EAaN,QAbM,EAcN,SAdM,EAeN,OAfM,EAgBN,SAhBM,EAiBN,KAjBM,EAkBN,MAlBM,EAmBN,UAnBM,EAoBN,KApBM,EAqBN,IArBM,EAsBN,QAtBM,EAuBN,IAvBM,EAwBN,YAxBM,EAyBN,KAzBM,EA0BN,KA1BM,EA2BN,MA3BM,EA4BN,QA5BM,EA6BN,KA7BM,EA8BN,OA9BM,EA+BN,QA/BM,EAgCN,QAhCM,EAiCN,MAjCM,EAkCN,OAlCM,EAmCN,MAnCM,EAoCN,KApCM,EAqCN,QArCM,EAsCN,WAtCM,EAuCN,KAvCM,EAwCN,MAxCM,EAyCN,OAzCM,EA0CN,MA1CM,EA2CN,OA3CM,EA4CN,OA5CM,EA6CN,OA7CM,EA8CN,IA9CM,CAJQ;AAoDlBC,EAAAA,YAAY,EAAE,EApDI;AAqDlBC,EAAAA,SAAS,EAAEC,qBAAWD,SArDJ;AAsDlBE,EAAAA,OAAO,EAAED,qBAAWC,OAtDF;AAuDlBC,EAAAA,OAAO,EAAEF,qBAAWE,OAvDF;AAwDlBC,EAAAA,MAAM,EAAEH,qBAAWG,MAxDD;AAyDlBC,EAAAA,WAAW,EAAEJ,qBAAWI,WAzDN;AA0DlBC,EAAAA,YAAY,EAAEL,qBAAWK,YA1DP;AA2DlBC,EAAAA,SAAS,EAAEN,qBAAWM,SA3DJ;AA4DlBC,EAAAA,SAAS,EAAEP,qBAAWO,SA5DJ;AA6DlBC,EAAAA,SAAS,EAAER,qBAAWQ,SA7DJ;AA8DlBC,EAAAA,SAAS,EAAET,qBAAWS;AA9DJ,CAAf","file":"javascript.dfa94111.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js';\r\nexport var conf = tsConf;\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.js',\r\n    keywords: [\r\n        'break',\r\n        'case',\r\n        'catch',\r\n        'class',\r\n        'continue',\r\n        'const',\r\n        'constructor',\r\n        'debugger',\r\n        'default',\r\n        'delete',\r\n        'do',\r\n        'else',\r\n        'export',\r\n        'extends',\r\n        'false',\r\n        'finally',\r\n        'for',\r\n        'from',\r\n        'function',\r\n        'get',\r\n        'if',\r\n        'import',\r\n        'in',\r\n        'instanceof',\r\n        'let',\r\n        'new',\r\n        'null',\r\n        'return',\r\n        'set',\r\n        'super',\r\n        'switch',\r\n        'symbol',\r\n        'this',\r\n        'throw',\r\n        'true',\r\n        'try',\r\n        'typeof',\r\n        'undefined',\r\n        'var',\r\n        'void',\r\n        'while',\r\n        'with',\r\n        'yield',\r\n        'async',\r\n        'await',\r\n        'of'\r\n    ],\r\n    typeKeywords: [],\r\n    operators: tsLanguage.operators,\r\n    symbols: tsLanguage.symbols,\r\n    escapes: tsLanguage.escapes,\r\n    digits: tsLanguage.digits,\r\n    octaldigits: tsLanguage.octaldigits,\r\n    binarydigits: tsLanguage.binarydigits,\r\n    hexdigits: tsLanguage.hexdigits,\r\n    regexpctl: tsLanguage.regexpctl,\r\n    regexpesc: tsLanguage.regexpesc,\r\n    tokenizer: tsLanguage.tokenizer\r\n};\r\n"]}