// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/@braintree/sanitize-url/index.js":[function(require,module,exports) {
'use strict';

var invalidPrototcolRegex = /^(%20|\s)*(javascript|data)/im;
var ctrlCharactersRegex = /[^\x20-\x7E]/gmi;
var urlSchemeRegex = /^([^:]+):/gm;
var relativeFirstCharacters = ['.', '/']

function isRelativeUrl(url) {
  return relativeFirstCharacters.indexOf(url[0]) > -1;
}

function sanitizeUrl(url) {
  if (!url) {
    return 'about:blank';
  }

  var urlScheme, urlSchemeParseResults;
  var sanitizedUrl = url.replace(ctrlCharactersRegex, '').trim();

  if (isRelativeUrl(sanitizedUrl)) {
    return sanitizedUrl;
  }

  urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);

  if (!urlSchemeParseResults) {
    return 'about:blank';
  }

  urlScheme = urlSchemeParseResults[0];

  if (invalidPrototcolRegex.test(urlScheme)) {
    return 'about:blank';
  }

  return sanitizedUrl;
}

module.exports = {
  sanitizeUrl: sanitizeUrl
};

},{}],"node_modules/d3/dist/package.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencies = exports.devDependencies = exports.scripts = exports.files = exports.repository = exports.module = exports.jsdelivr = exports.unpkg = exports.main = exports.author = exports.license = exports.homepage = exports.keywords = exports.description = exports.version = exports.name = void 0;
var name = "d3";
exports.name = name;
var version = "5.16.0";
exports.version = version;
var description = "Data-Driven Documents";
exports.description = description;
var keywords = ["dom", "visualization", "svg", "animation", "canvas"];
exports.keywords = keywords;
var homepage = "https://d3js.org";
exports.homepage = homepage;
var license = "BSD-3-Clause";
exports.license = license;
var author = {
  "name": "Mike Bostock",
  "url": "https://bost.ocks.org/mike"
};
exports.author = author;
var main = "dist/d3.node.js";
exports.main = main;
var unpkg = "dist/d3.min.js";
exports.unpkg = unpkg;
var jsdelivr = "dist/d3.min.js";
exports.jsdelivr = jsdelivr;
var _module = "index.js";
exports.module = _module;
var repository = {
  "type": "git",
  "url": "https://github.com/d3/d3.git"
};
exports.repository = repository;
var files = ["dist/**/*.js", "index.js"];
exports.files = files;
var scripts = {
  "pretest": "rimraf dist && mkdir dist && json2module package.json > dist/package.js && rollup -c",
  "test": "tape 'test/**/*-test.js'",
  "prepublishOnly": "yarn test",
  "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m \"d3 ${npm_package_version}\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \"${npm_package_version}\" && git tag -am \"${npm_package_version}\" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js"
};
exports.scripts = scripts;
var devDependencies = {
  "json2module": "0.0",
  "rimraf": "2",
  "rollup": "1",
  "rollup-plugin-ascii": "0.0",
  "rollup-plugin-node-resolve": "3",
  "rollup-plugin-terser": "5",
  "tape": "4"
};
exports.devDependencies = devDependencies;
var dependencies = {
  "d3-array": "1",
  "d3-axis": "1",
  "d3-brush": "1",
  "d3-chord": "1",
  "d3-collection": "1",
  "d3-color": "1",
  "d3-contour": "1",
  "d3-dispatch": "1",
  "d3-drag": "1",
  "d3-dsv": "1",
  "d3-ease": "1",
  "d3-fetch": "1",
  "d3-force": "1",
  "d3-format": "1",
  "d3-geo": "1",
  "d3-hierarchy": "1",
  "d3-interpolate": "1",
  "d3-path": "1",
  "d3-polygon": "1",
  "d3-quadtree": "1",
  "d3-random": "1",
  "d3-scale": "2",
  "d3-scale-chromatic": "1",
  "d3-selection": "1",
  "d3-shape": "1",
  "d3-time": "1",
  "d3-time-format": "2",
  "d3-timer": "1",
  "d3-transition": "1",
  "d3-voronoi": "1",
  "d3-zoom": "1"
};
exports.dependencies = dependencies;
},{}],"node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-array/src/bisector.js"}],"node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"node_modules/d3-array/src/pairs.js"}],"node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"node_modules/d3-array/src/variance.js"}],"node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"node_modules/d3-array/src/array.js","./bisect":"node_modules/d3-array/src/bisect.js","./constant":"node_modules/d3-array/src/constant.js","./extent":"node_modules/d3-array/src/extent.js","./identity":"node_modules/d3-array/src/identity.js","./range":"node_modules/d3-array/src/range.js","./ticks":"node_modules/d3-array/src/ticks.js","./threshold/sturges":"node_modules/d3-array/src/threshold/sturges.js"}],"node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"node_modules/d3-array/src/array.js","../ascending":"node_modules/d3-array/src/ascending.js","../number":"node_modules/d3-array/src/number.js","../quantile":"node_modules/d3-array/src/quantile.js"}],"node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"node_modules/d3-array/src/deviation.js"}],"node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"node_modules/d3-array/src/ascending.js","./number":"node_modules/d3-array/src/number.js","./quantile":"node_modules/d3-array/src/quantile.js"}],"node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"node_modules/d3-array/src/min.js"}],"node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"node_modules/d3-array/src/transpose.js"}],"node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./bisect":"node_modules/d3-array/src/bisect.js","./ascending":"node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-array/src/bisector.js","./cross":"node_modules/d3-array/src/cross.js","./descending":"node_modules/d3-array/src/descending.js","./deviation":"node_modules/d3-array/src/deviation.js","./extent":"node_modules/d3-array/src/extent.js","./histogram":"node_modules/d3-array/src/histogram.js","./threshold/freedmanDiaconis":"node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott":"node_modules/d3-array/src/threshold/scott.js","./threshold/sturges":"node_modules/d3-array/src/threshold/sturges.js","./max":"node_modules/d3-array/src/max.js","./mean":"node_modules/d3-array/src/mean.js","./median":"node_modules/d3-array/src/median.js","./merge":"node_modules/d3-array/src/merge.js","./min":"node_modules/d3-array/src/min.js","./pairs":"node_modules/d3-array/src/pairs.js","./permute":"node_modules/d3-array/src/permute.js","./quantile":"node_modules/d3-array/src/quantile.js","./range":"node_modules/d3-array/src/range.js","./scan":"node_modules/d3-array/src/scan.js","./shuffle":"node_modules/d3-array/src/shuffle.js","./sum":"node_modules/d3-array/src/sum.js","./ticks":"node_modules/d3-array/src/ticks.js","./transpose":"node_modules/d3-array/src/transpose.js","./variance":"node_modules/d3-array/src/variance.js","./zip":"node_modules/d3-array/src/zip.js"}],"node_modules/d3-axis/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-axis/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-axis/src/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

var _array = require("./array");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function (d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.

  if (scale.round()) offset = Math.round(offset);
  return function (d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity.default : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");
    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function (d) {
        return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function (d) {
        var p = this.parentNode.__axis;
        return transform(p && isFinite(p = p(d)) ? p : position(d));
      });
    }

    tickExit.remove();
    path.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
    tick.attr("opacity", 1).attr("transform", function (d) {
      return transform(position(d));
    });
    line.attr(x + "2", k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection.each(function () {
      this.__axis = position;
    });
  }

  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function () {
    return tickArguments = _array.slice.call(arguments), axis;
  };

  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : _array.slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : _array.slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}
},{"./array":"node_modules/d3-axis/src/array.js","./identity":"node_modules/d3-axis/src/identity.js"}],"node_modules/d3-axis/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "axisTop", {
  enumerable: true,
  get: function () {
    return _axis.axisTop;
  }
});
Object.defineProperty(exports, "axisRight", {
  enumerable: true,
  get: function () {
    return _axis.axisRight;
  }
});
Object.defineProperty(exports, "axisBottom", {
  enumerable: true,
  get: function () {
    return _axis.axisBottom;
  }
});
Object.defineProperty(exports, "axisLeft", {
  enumerable: true,
  get: function () {
    return _axis.axisLeft;
  }
});

var _axis = require("./axis");
},{"./axis":"node_modules/d3-axis/src/axis.js"}],"node_modules/d3-dispatch/src/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"node_modules/d3-dispatch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./dispatch.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dispatch.js":"node_modules/d3-dispatch/src/dispatch.js"}],"node_modules/d3-selection/src/namespaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"node_modules/d3-selection/src/namespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"node_modules/d3-selection/src/namespaces.js"}],"node_modules/d3-selection/src/creator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"node_modules/d3-selection/src/namespace.js","./namespaces":"node_modules/d3-selection/src/namespaces.js"}],"node_modules/d3-selection/src/selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../selector":"node_modules/d3-selection/src/selector.js"}],"node_modules/d3-selection/src/selectorAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../selectorAll":"node_modules/d3-selection/src/selectorAll.js"}],"node_modules/d3-selection/src/matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(selector) {
  return function () {
    return this.matches(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../matcher":"node_modules/d3-selection/src/matcher.js"}],"node_modules/d3-selection/src/selection/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"node_modules/d3-selection/src/selection/enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"node_modules/d3-selection/src/selection/sparse.js","./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-selection/src/selection/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","./enter":"node_modules/d3-selection/src/selection/enter.js","../constant":"node_modules/d3-selection/src/constant.js"}],"node_modules/d3-selection/src/selection/exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"node_modules/d3-selection/src/selection/sparse.js","./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
},{}],"node_modules/d3-selection/src/selection/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/order.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"node_modules/d3-selection/src/selection/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/call.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"node_modules/d3-selection/src/selection/nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"node_modules/d3-selection/src/selection/node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"node_modules/d3-selection/src/selection/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"node_modules/d3-selection/src/selection/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"node_modules/d3-selection/src/selection/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"node_modules/d3-selection/src/selection/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"node_modules/d3-selection/src/namespace.js"}],"node_modules/d3-selection/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"node_modules/d3-selection/src/selection/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.styleValue = styleValue;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || (0, _window.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"node_modules/d3-selection/src/window.js"}],"node_modules/d3-selection/src/selection/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"node_modules/d3-selection/src/selection/classed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"node_modules/d3-selection/src/selection/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"node_modules/d3-selection/src/selection/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"node_modules/d3-selection/src/selection/raise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"node_modules/d3-selection/src/selection/lower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"node_modules/d3-selection/src/selection/append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"node_modules/d3-selection/src/creator.js"}],"node_modules/d3-selection/src/selection/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"node_modules/d3-selection/src/creator.js","../selector":"node_modules/d3-selection/src/selector.js"}],"node_modules/d3-selection/src/selection/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"node_modules/d3-selection/src/selection/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function selection_cloneShallow() {
  var clone = this.cloneNode(false),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function _default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
},{}],"node_modules/d3-selection/src/selection/datum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"node_modules/d3-selection/src/selection/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"node_modules/d3-selection/src/selection/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"node_modules/d3-selection/src/window.js"}],"node_modules/d3-selection/src/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _join = _interopRequireDefault(require("./join"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _clone = _interopRequireDefault(require("./clone"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  join: _join.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  clone: _clone.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"node_modules/d3-selection/src/selection/select.js","./selectAll":"node_modules/d3-selection/src/selection/selectAll.js","./filter":"node_modules/d3-selection/src/selection/filter.js","./data":"node_modules/d3-selection/src/selection/data.js","./enter":"node_modules/d3-selection/src/selection/enter.js","./exit":"node_modules/d3-selection/src/selection/exit.js","./join":"node_modules/d3-selection/src/selection/join.js","./merge":"node_modules/d3-selection/src/selection/merge.js","./order":"node_modules/d3-selection/src/selection/order.js","./sort":"node_modules/d3-selection/src/selection/sort.js","./call":"node_modules/d3-selection/src/selection/call.js","./nodes":"node_modules/d3-selection/src/selection/nodes.js","./node":"node_modules/d3-selection/src/selection/node.js","./size":"node_modules/d3-selection/src/selection/size.js","./empty":"node_modules/d3-selection/src/selection/empty.js","./each":"node_modules/d3-selection/src/selection/each.js","./attr":"node_modules/d3-selection/src/selection/attr.js","./style":"node_modules/d3-selection/src/selection/style.js","./property":"node_modules/d3-selection/src/selection/property.js","./classed":"node_modules/d3-selection/src/selection/classed.js","./text":"node_modules/d3-selection/src/selection/text.js","./html":"node_modules/d3-selection/src/selection/html.js","./raise":"node_modules/d3-selection/src/selection/raise.js","./lower":"node_modules/d3-selection/src/selection/lower.js","./append":"node_modules/d3-selection/src/selection/append.js","./insert":"node_modules/d3-selection/src/selection/insert.js","./remove":"node_modules/d3-selection/src/selection/remove.js","./clone":"node_modules/d3-selection/src/selection/clone.js","./datum":"node_modules/d3-selection/src/selection/datum.js","./on":"node_modules/d3-selection/src/selection/on.js","./dispatch":"node_modules/d3-selection/src/selection/dispatch.js"}],"node_modules/d3-selection/src/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("./creator"));

var _select = _interopRequireDefault(require("./select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return (0, _select.default)((0, _creator.default)(name).call(document.documentElement));
}
},{"./creator":"node_modules/d3-selection/src/creator.js","./select":"node_modules/d3-selection/src/select.js"}],"node_modules/d3-selection/src/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"node_modules/d3-selection/src/sourceEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"node_modules/d3-selection/src/selection/on.js"}],"node_modules/d3-selection/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"node_modules/d3-selection/src/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/touch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/touches.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.default;
  }
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "clientPoint", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "style", {
  enumerable: true,
  get: function () {
    return _style.styleValue;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _create = _interopRequireDefault(require("./create"));

var _creator = _interopRequireDefault(require("./creator"));

var _local = _interopRequireDefault(require("./local"));

var _matcher = _interopRequireDefault(require("./matcher"));

var _mouse = _interopRequireDefault(require("./mouse"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = _interopRequireDefault(require("./namespaces"));

var _point = _interopRequireDefault(require("./point"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _index = _interopRequireDefault(require("./selection/index"));

var _selector = _interopRequireDefault(require("./selector"));

var _selectorAll = _interopRequireDefault(require("./selectorAll"));

var _style = require("./selection/style");

var _touch = _interopRequireDefault(require("./touch"));

var _touches = _interopRequireDefault(require("./touches"));

var _window = _interopRequireDefault(require("./window"));

var _on = require("./selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./create":"node_modules/d3-selection/src/create.js","./creator":"node_modules/d3-selection/src/creator.js","./local":"node_modules/d3-selection/src/local.js","./matcher":"node_modules/d3-selection/src/matcher.js","./mouse":"node_modules/d3-selection/src/mouse.js","./namespace":"node_modules/d3-selection/src/namespace.js","./namespaces":"node_modules/d3-selection/src/namespaces.js","./point":"node_modules/d3-selection/src/point.js","./select":"node_modules/d3-selection/src/select.js","./selectAll":"node_modules/d3-selection/src/selectAll.js","./selection/index":"node_modules/d3-selection/src/selection/index.js","./selector":"node_modules/d3-selection/src/selector.js","./selectorAll":"node_modules/d3-selection/src/selectorAll.js","./selection/style":"node_modules/d3-selection/src/selection/style.js","./touch":"node_modules/d3-selection/src/touch.js","./touches":"node_modules/d3-selection/src/touches.js","./window":"node_modules/d3-selection/src/window.js","./selection/on":"node_modules/d3-selection/src/selection/on.js"}],"node_modules/d3-drag/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-drag/src/nodrag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.yesdrag = yesdrag;

var _d3Selection = require("d3-selection");

var _noevent = _interopRequireDefault(require("./noevent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(view) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", _noevent.default, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", _noevent.default, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", _noevent.default, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./noevent.js":"node_modules/d3-drag/src/noevent.js"}],"node_modules/d3-drag/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-drag/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DragEvent;

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function () {
  var value = this._.on.apply(this._, arguments);

  return value === this._ ? this : value;
};
},{}],"node_modules/d3-drag/src/drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Selection = require("d3-selection");

var _nodrag = _interopRequireWildcard(require("./nodrag.js"));

var _noevent = _interopRequireWildcard(require("./noevent.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {
    x: _d3Selection.event.x,
    y: _d3Selection.event.y
  } : d;
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function _default() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = (0, _d3Dispatch.dispatch)("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), _d3Selection.mouse, this, arguments);
    if (!gesture) return;
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    (0, _nodrag.default)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    mousemoving = false;
    mousedownx = _d3Selection.event.clientX;
    mousedowny = _d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    (0, _noevent.default)();

    if (!mousemoving) {
      var dx = _d3Selection.event.clientX - mousedownx,
          dy = _d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }

    gestures.mouse("drag");
  }

  function mouseupped() {
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    (0, _nodrag.yesdrag)(_d3Selection.event.view, mousemoving);
    (0, _noevent.default)();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, _d3Selection.touch, this, arguments)) {
        (0, _noevent.nopropagation)();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.default)();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, 500); // Ghost clicks are delayed!

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.nopropagation)();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id),
        s,
        dx,
        dy,
        sublisteners = listeners.copy();
    if (!(0, _d3Selection.customEvent)(new _event.default(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
      if ((_d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type) {
      var p0 = p,
          n;

      switch (type) {
        case "start":
          gestures[id] = gesture, n = active++;
          break;

        case "end":
          delete gestures[id], --active;
        // nobreak

        case "drag":
          p = point(container, id), n = active;
          break;
      }

      (0, _d3Selection.customEvent)(new _event.default(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : filter;
  };

  drag.container = function (_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : container;
  };

  drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : subject;
  };

  drag.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : touchable;
  };

  drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","./nodrag.js":"node_modules/d3-drag/src/nodrag.js","./noevent.js":"node_modules/d3-drag/src/noevent.js","./constant.js":"node_modules/d3-drag/src/constant.js","./event.js":"node_modules/d3-drag/src/event.js"}],"node_modules/d3-drag/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "drag", {
  enumerable: true,
  get: function () {
    return _drag.default;
  }
});
Object.defineProperty(exports, "dragDisable", {
  enumerable: true,
  get: function () {
    return _nodrag.default;
  }
});
Object.defineProperty(exports, "dragEnable", {
  enumerable: true,
  get: function () {
    return _nodrag.yesdrag;
  }
});

var _drag = _interopRequireDefault(require("./drag.js"));

var _nodrag = _interopRequireWildcard(require("./nodrag.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./drag.js":"node_modules/d3-drag/src/drag.js","./nodrag.js":"node_modules/d3-drag/src/nodrag.js"}],"node_modules/d3-color/src/define.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
},{}],"node_modules/d3-color/src/color.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.default = color;
exports.rgbConvert = rgbConvert;
exports.rgb = rgb;
exports.Rgb = Rgb;
exports.hslConvert = hslConvert;
exports.hsl = hsl;
exports.brighter = exports.darker = void 0;

var _define = _interopRequireWildcard(require("./define.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  copy: function (channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
},{"./define.js":"node_modules/d3-color/src/define.js"}],"node_modules/d3-color/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rad2deg = exports.deg2rad = void 0;
var deg2rad = Math.PI / 180;
exports.deg2rad = deg2rad;
var rad2deg = 180 / Math.PI;
exports.rad2deg = rad2deg;
},{}],"node_modules/d3-color/src/lab.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gray = gray;
exports.default = lab;
exports.Lab = Lab;
exports.lch = lch;
exports.hcl = hcl;
exports.Hcl = Hcl;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function (k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function () {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.rad2deg;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * _math.deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function (k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function () {
    return hcl2lab(this).rgb();
  }
}));
},{"./define.js":"node_modules/d3-color/src/define.js","./color.js":"node_modules/d3-color/src/color.js","./math.js":"node_modules/d3-color/src/math.js"}],"node_modules/d3-color/src/cubehelix.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cubehelix;
exports.Cubehelix = Cubehelix;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
},{"./define.js":"node_modules/d3-color/src/define.js","./color.js":"node_modules/d3-color/src/color.js","./math.js":"node_modules/d3-color/src/math.js"}],"node_modules/d3-color/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});

var _color = _interopRequireWildcard(require("./color.js"));

var _lab = _interopRequireWildcard(require("./lab.js"));

var _cubehelix = _interopRequireDefault(require("./cubehelix.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./color.js":"node_modules/d3-color/src/color.js","./lab.js":"node_modules/d3-color/src/lab.js","./cubehelix.js":"node_modules/d3-color/src/cubehelix.js"}],"node_modules/d3-interpolate/src/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{}],"node_modules/d3-interpolate/src/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{"./basis.js":"node_modules/d3-interpolate/src/basis.js"}],"node_modules/d3-interpolate/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-interpolate/src/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hue = hue;
exports.gamma = gamma;
exports.default = nogamma;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
},{"./constant.js":"node_modules/d3-interpolate/src/constant.js"}],"node_modules/d3-interpolate/src/rgb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _d3Color = require("d3-color");

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _d3Color.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
},{"d3-color":"node_modules/d3-color/src/index.js","./basis.js":"node_modules/d3-interpolate/src/basis.js","./basisClosed.js":"node_modules/d3-interpolate/src/basisClosed.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/numberArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.isNumberArray = isNumberArray;

function _default(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function (t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;

    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
},{}],"node_modules/d3-interpolate/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.genericArray = genericArray;

var _value = _interopRequireDefault(require("./value.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  return ((0, _numberArray.isNumberArray)(b) ? _numberArray.default : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
},{"./value.js":"node_modules/d3-interpolate/src/value.js","./numberArray.js":"node_modules/d3-interpolate/src/numberArray.js"}],"node_modules/d3-interpolate/src/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
},{}],"node_modules/d3-interpolate/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}
},{}],"node_modules/d3-interpolate/src/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
},{"./value.js":"node_modules/d3-interpolate/src/value.js"}],"node_modules/d3-interpolate/src/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
},{"./number.js":"node_modules/d3-interpolate/src/number.js"}],"node_modules/d3-interpolate/src/value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _rgb = _interopRequireDefault(require("./rgb.js"));

var _array = require("./array.js");

var _date = _interopRequireDefault(require("./date.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _d3Color.color ? _rgb.default : b instanceof Date ? _date.default : (0, _numberArray.isNumberArray)(b) ? _numberArray.default : Array.isArray(b) ? _array.genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
},{"d3-color":"node_modules/d3-color/src/index.js","./rgb.js":"node_modules/d3-interpolate/src/rgb.js","./array.js":"node_modules/d3-interpolate/src/array.js","./date.js":"node_modules/d3-interpolate/src/date.js","./number.js":"node_modules/d3-interpolate/src/number.js","./object.js":"node_modules/d3-interpolate/src/object.js","./string.js":"node_modules/d3-interpolate/src/string.js","./constant.js":"node_modules/d3-interpolate/src/constant.js","./numberArray.js":"node_modules/d3-interpolate/src/numberArray.js"}],"node_modules/d3-interpolate/src/discrete.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
},{}],"node_modules/d3-interpolate/src/hue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color.js");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
},{"./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
},{}],"node_modules/d3-interpolate/src/transform/decompose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
},{}],"node_modules/d3-interpolate/src/transform/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return _decompose.identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return (0, _decompose.default)(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
},{"./decompose.js":"node_modules/d3-interpolate/src/transform/decompose.js"}],"node_modules/d3-interpolate/src/transform/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number.js"));

var _parse = require("./parse.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
},{"../number.js":"node_modules/d3-interpolate/src/number.js","./parse.js":"node_modules/d3-interpolate/src/transform/parse.js"}],"node_modules/d3-interpolate/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
} // p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]


function _default(p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S; // Special case for u0 ≅ u1.

  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;

    i = function (t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  } // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;
  return i;
}
},{}],"node_modules/d3-interpolate/src/hsl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/lab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _d3Color = require("d3-color");

var _color = _interopRequireDefault(require("./color.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/hcl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubehelixLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/piecewise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

function piecewise(interpolate, values) {
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
},{}],"node_modules/d3-interpolate/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
},{}],"node_modules/d3-interpolate/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateNumberArray", {
  enumerable: true,
  get: function () {
    return _numberArray.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value.js"));

var _array = _interopRequireDefault(require("./array.js"));

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _date = _interopRequireDefault(require("./date.js"));

var _discrete = _interopRequireDefault(require("./discrete.js"));

var _hue = _interopRequireDefault(require("./hue.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _numberArray = _interopRequireDefault(require("./numberArray.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _round = _interopRequireDefault(require("./round.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _index = require("./transform/index.js");

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _rgb = _interopRequireWildcard(require("./rgb.js"));

var _hsl = _interopRequireWildcard(require("./hsl.js"));

var _lab = _interopRequireDefault(require("./lab.js"));

var _hcl = _interopRequireWildcard(require("./hcl.js"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix.js"));

var _piecewise = _interopRequireDefault(require("./piecewise.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./value.js":"node_modules/d3-interpolate/src/value.js","./array.js":"node_modules/d3-interpolate/src/array.js","./basis.js":"node_modules/d3-interpolate/src/basis.js","./basisClosed.js":"node_modules/d3-interpolate/src/basisClosed.js","./date.js":"node_modules/d3-interpolate/src/date.js","./discrete.js":"node_modules/d3-interpolate/src/discrete.js","./hue.js":"node_modules/d3-interpolate/src/hue.js","./number.js":"node_modules/d3-interpolate/src/number.js","./numberArray.js":"node_modules/d3-interpolate/src/numberArray.js","./object.js":"node_modules/d3-interpolate/src/object.js","./round.js":"node_modules/d3-interpolate/src/round.js","./string.js":"node_modules/d3-interpolate/src/string.js","./transform/index.js":"node_modules/d3-interpolate/src/transform/index.js","./zoom.js":"node_modules/d3-interpolate/src/zoom.js","./rgb.js":"node_modules/d3-interpolate/src/rgb.js","./hsl.js":"node_modules/d3-interpolate/src/hsl.js","./lab.js":"node_modules/d3-interpolate/src/lab.js","./hcl.js":"node_modules/d3-interpolate/src/hcl.js","./cubehelix.js":"node_modules/d3-interpolate/src/cubehelix.js","./piecewise.js":"node_modules/d3-interpolate/src/piecewise.js","./quantize.js":"node_modules/d3-interpolate/src/quantize.js"}],"node_modules/d3-timer/src/timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.now = now;
exports.Timer = Timer;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
},{}],"node_modules/d3-timer/src/timeout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
},{"./timer.js":"node_modules/d3-timer/src/timer.js"}],"node_modules/d3-timer/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? (0, _timer.now)() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
},{"./timer.js":"node_modules/d3-timer/src/timer.js"}],"node_modules/d3-timer/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});

var _timer = require("./timer.js");

var _timeout = _interopRequireDefault(require("./timeout.js"));

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./timer.js":"node_modules/d3-timer/src/timer.js","./timeout.js":"node_modules/d3-timer/src/timeout.js","./interval.js":"node_modules/d3-timer/src/interval.js"}],"node_modules/d3-transition/src/transition/schedule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.init = init;
exports.set = set;
exports.get = get;
exports.ENDED = exports.ENDING = exports.RUNNING = exports.STARTED = exports.STARTING = exports.SCHEDULED = exports.CREATED = void 0;

var _d3Dispatch = require("d3-dispatch");

var _d3Timer = require("d3-timer");

var emptyOn = (0, _d3Dispatch.dispatch)("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
exports.CREATED = CREATED;
var SCHEDULED = 1;
exports.SCHEDULED = SCHEDULED;
var STARTING = 2;
exports.STARTING = STARTING;
var STARTED = 3;
exports.STARTED = STARTED;
var RUNNING = 4;
exports.RUNNING = RUNNING;
var ENDING = 5;
exports.ENDING = ENDING;
var ENDED = 6;
exports.ENDED = ENDED;

function _default(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = (0, _d3Timer.timer)(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return (0, _d3Timer.timeout)(start); // Interrupt the active transition, if any.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions.
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    (0, _d3Timer.timeout)(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-transition/src/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./transition/schedule.js");

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > _schedule.STARTING && schedule.state < _schedule.ENDING;
    schedule.state = _schedule.ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}
},{"./transition/schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/selection/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _interrupt = _interopRequireDefault(require("../interrupt.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return this.each(function () {
    (0, _interrupt.default)(this, name);
  });
}
},{"../interrupt.js":"node_modules/d3-transition/src/interrupt.js"}],"node_modules/d3-transition/src/transition/tween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tweenValue = tweenValue;

var _schedule = require("./schedule.js");

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function _default(name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = (0, _schedule.get)(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = (0, _schedule.set)(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return (0, _schedule.get)(node, id).value[name];
  };
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

function _default(a, b) {
  var c;
  return (typeof b === "number" ? _d3Interpolate.interpolateNumber : b instanceof _d3Color.color ? _d3Interpolate.interpolateRgb : (c = (0, _d3Color.color)(b)) ? (b = c, _d3Interpolate.interpolateRgb) : _d3Interpolate.interpolateString)(a, b);
}
},{"d3-color":"node_modules/d3-color/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-transition/src/transition/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _tween = require("./tween.js");

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function _default(name, value) {
  var fullname = (0, _d3Selection.namespace)(name),
      i = fullname === "transform" ? _d3Interpolate.interpolateTransformSvg : _interpolate.default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0, _tween.tweenValue)(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}
},{"d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","./tween.js":"node_modules/d3-transition/src/transition/tween.js","./interpolate.js":"node_modules/d3-transition/src/transition/interpolate.js"}],"node_modules/d3-transition/src/transition/attrTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = (0, _d3Selection.namespace)(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-transition/src/transition/delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function delayFunction(id, value) {
  return function () {
    (0, _schedule.init)(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.init)(this, id).delay = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : (0, _schedule.get)(this.node(), id).delay;
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function durationFunction(id, value) {
  return function () {
    (0, _schedule.set)(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.set)(this, id).duration = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : (0, _schedule.get)(this.node(), id).duration;
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/ease.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    (0, _schedule.set)(this, id).ease = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : (0, _schedule.get)(this.node(), id).ease;
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

function _default(match) {
  if (typeof match !== "function") match = (0, _d3Selection.matcher)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, this._name, this._id);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./index.js":"node_modules/d3-transition/src/transition/index.js"}],"node_modules/d3-transition/src/transition/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index.js");

function _default(transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Transition(merges, this._parents, this._name, this._id);
}
},{"./index.js":"node_modules/d3-transition/src/transition/index.js"}],"node_modules/d3-transition/src/transition/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? _schedule.init : _schedule.set;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function _default(name, listener) {
  var id = this._id;
  return arguments.length < 2 ? (0, _schedule.get)(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function _default() {
  return this.on("end.remove", removeFunction(this._id));
}
},{}],"node_modules/d3-transition/src/transition/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selector)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        (0, _schedule.default)(subgroup[i], name, id, i, subgroup, (0, _schedule.get)(node, id));
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, name, id);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./index.js":"node_modules/d3-transition/src/transition/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selectorAll)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = (0, _schedule.get)(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            (0, _schedule.default)(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, parents, name, id);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./index.js":"node_modules/d3-transition/src/transition/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/selection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var Selection = _d3Selection.selection.prototype.constructor;

function _default() {
  return new Selection(this._groups, this._parents);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-transition/src/transition/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _schedule = require("./schedule.js");

var _tween = require("./tween.js");

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        string1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0,
      on1,
      listener0,
      key = "style." + name,
      event = "end." + key,
      remove;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}

function _default(name, value, priority) {
  var i = (name += "") === "transform" ? _d3Interpolate.interpolateTransformCss : _interpolate.default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, (0, _tween.tweenValue)(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}
},{"d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js","./tween.js":"node_modules/d3-transition/src/transition/tween.js","./interpolate.js":"node_modules/d3-transition/src/transition/interpolate.js"}],"node_modules/d3-transition/src/transition/styleTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }

  tween._value = value;
  return tween;
}

function _default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
},{}],"node_modules/d3-transition/src/transition/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _tween = require("./tween.js");

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function _default(value) {
  return this.tween("text", typeof value === "function" ? textFunction((0, _tween.tweenValue)(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
},{"./tween.js":"node_modules/d3-transition/src/transition/tween.js"}],"node_modules/d3-transition/src/transition/textTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textInterpolate(i) {
  return function (t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}
},{}],"node_modules/d3-transition/src/transition/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var name = this._name,
      id0 = this._id,
      id1 = (0, _index.newId)();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = (0, _schedule.get)(node, id0);
        (0, _schedule.default)(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id1);
}
},{"./index.js":"node_modules/d3-transition/src/transition/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/end.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function _default() {
  var on0,
      on1,
      that = this,
      id = that._id,
      size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
      value: reject
    },
        end = {
      value: function () {
        if (--size === 0) resolve();
      }
    };
    that.each(function () {
      var schedule = (0, _schedule.set)(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0) {
        on1 = (on0 = on).copy();

        on1._.cancel.push(cancel);

        on1._.interrupt.push(cancel);

        on1._.end.push(end);
      }

      schedule.on = on1;
    });
  });
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transition = Transition;
exports.default = transition;
exports.newId = newId;

var _d3Selection = require("d3-selection");

var _attr = _interopRequireDefault(require("./attr.js"));

var _attrTween = _interopRequireDefault(require("./attrTween.js"));

var _delay = _interopRequireDefault(require("./delay.js"));

var _duration = _interopRequireDefault(require("./duration.js"));

var _ease = _interopRequireDefault(require("./ease.js"));

var _filter = _interopRequireDefault(require("./filter.js"));

var _merge = _interopRequireDefault(require("./merge.js"));

var _on = _interopRequireDefault(require("./on.js"));

var _remove = _interopRequireDefault(require("./remove.js"));

var _select = _interopRequireDefault(require("./select.js"));

var _selectAll = _interopRequireDefault(require("./selectAll.js"));

var _selection = _interopRequireDefault(require("./selection.js"));

var _style = _interopRequireDefault(require("./style.js"));

var _styleTween = _interopRequireDefault(require("./styleTween.js"));

var _text = _interopRequireDefault(require("./text.js"));

var _textTween = _interopRequireDefault(require("./textTween.js"));

var _transition = _interopRequireDefault(require("./transition.js"));

var _tween = _interopRequireDefault(require("./tween.js"));

var _end = _interopRequireDefault(require("./end.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return (0, _d3Selection.selection)().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = _d3Selection.selection.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  merge: _merge.default,
  selection: _selection.default,
  transition: _transition.default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: _on.default,
  attr: _attr.default,
  attrTween: _attrTween.default,
  style: _style.default,
  styleTween: _styleTween.default,
  text: _text.default,
  textTween: _textTween.default,
  remove: _remove.default,
  tween: _tween.default,
  delay: _delay.default,
  duration: _duration.default,
  ease: _ease.default,
  end: _end.default
};
},{"d3-selection":"node_modules/d3-selection/src/index.js","./attr.js":"node_modules/d3-transition/src/transition/attr.js","./attrTween.js":"node_modules/d3-transition/src/transition/attrTween.js","./delay.js":"node_modules/d3-transition/src/transition/delay.js","./duration.js":"node_modules/d3-transition/src/transition/duration.js","./ease.js":"node_modules/d3-transition/src/transition/ease.js","./filter.js":"node_modules/d3-transition/src/transition/filter.js","./merge.js":"node_modules/d3-transition/src/transition/merge.js","./on.js":"node_modules/d3-transition/src/transition/on.js","./remove.js":"node_modules/d3-transition/src/transition/remove.js","./select.js":"node_modules/d3-transition/src/transition/select.js","./selectAll.js":"node_modules/d3-transition/src/transition/selectAll.js","./selection.js":"node_modules/d3-transition/src/transition/selection.js","./style.js":"node_modules/d3-transition/src/transition/style.js","./styleTween.js":"node_modules/d3-transition/src/transition/styleTween.js","./text.js":"node_modules/d3-transition/src/transition/text.js","./textTween.js":"node_modules/d3-transition/src/transition/textTween.js","./transition.js":"node_modules/d3-transition/src/transition/transition.js","./tween.js":"node_modules/d3-transition/src/transition/tween.js","./end.js":"node_modules/d3-transition/src/transition/end.js"}],"node_modules/d3-ease/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linear = linear;

function linear(t) {
  return +t;
}
},{}],"node_modules/d3-ease/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadIn = quadIn;
exports.quadOut = quadOut;
exports.quadInOut = quadInOut;

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
},{}],"node_modules/d3-ease/src/cubic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicIn = cubicIn;
exports.cubicOut = cubicOut;
exports.cubicInOut = cubicInOut;

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
},{}],"node_modules/d3-ease/src/poly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyInOut = exports.polyOut = exports.polyIn = void 0;
var exponent = 3;

var polyIn = function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;
  return polyIn;
}(exponent);

exports.polyIn = polyIn;

var polyOut = function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;
  return polyOut;
}(exponent);

exports.polyOut = polyOut;

var polyInOut = function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;
  return polyInOut;
}(exponent);

exports.polyInOut = polyInOut;
},{}],"node_modules/d3-ease/src/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinIn = sinIn;
exports.sinOut = sinOut;
exports.sinInOut = sinInOut;
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return +t === 1 ? 1 : 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
},{}],"node_modules/d3-ease/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tpmt = tpmt;

// tpmt is two power minus ten times t scaled to [0,1]
function tpmt(x) {
  return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
}
},{}],"node_modules/d3-ease/src/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expIn = expIn;
exports.expOut = expOut;
exports.expInOut = expInOut;

var _math = require("./math.js");

function expIn(t) {
  return (0, _math.tpmt)(1 - +t);
}

function expOut(t) {
  return 1 - (0, _math.tpmt)(t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? (0, _math.tpmt)(1 - t) : 2 - (0, _math.tpmt)(t - 1)) / 2;
}
},{"./math.js":"node_modules/d3-ease/src/math.js"}],"node_modules/d3-ease/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleIn = circleIn;
exports.circleOut = circleOut;
exports.circleInOut = circleInOut;

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
},{}],"node_modules/d3-ease/src/bounce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounceIn = bounceIn;
exports.bounceOut = bounceOut;
exports.bounceInOut = bounceInOut;
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
},{}],"node_modules/d3-ease/src/back.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backInOut = exports.backOut = exports.backIn = void 0;
var overshoot = 1.70158;

var backIn = function custom(s) {
  s = +s;

  function backIn(t) {
    return (t = +t) * t * (s * (t - 1) + t);
  }

  backIn.overshoot = custom;
  return backIn;
}(overshoot);

exports.backIn = backIn;

var backOut = function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((t + 1) * s + t) + 1;
  }

  backOut.overshoot = custom;
  return backOut;
}(overshoot);

exports.backOut = backOut;

var backInOut = function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;
  return backInOut;
}(overshoot);

exports.backInOut = backInOut;
},{}],"node_modules/d3-ease/src/elastic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elasticInOut = exports.elasticOut = exports.elasticIn = void 0;

var _math = require("./math.js");

var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * (0, _math.tpmt)(- --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticIn.period = function (p) {
    return custom(a, p);
  };

  return elasticIn;
}(amplitude, period);

exports.elasticIn = elasticIn;

var elasticOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * (0, _math.tpmt)(t = +t) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticOut.period = function (p) {
    return custom(a, p);
  };

  return elasticOut;
}(amplitude, period);

exports.elasticOut = elasticOut;

var elasticInOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * (0, _math.tpmt)(-t) * Math.sin((s - t) / p) : 2 - a * (0, _math.tpmt)(t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticInOut.period = function (p) {
    return custom(a, p);
  };

  return elasticInOut;
}(amplitude, period);

exports.elasticInOut = elasticInOut;
},{"./math.js":"node_modules/d3-ease/src/math.js"}],"node_modules/d3-ease/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "easeLinear", {
  enumerable: true,
  get: function () {
    return _linear.linear;
  }
});
Object.defineProperty(exports, "easeQuad", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadIn", {
  enumerable: true,
  get: function () {
    return _quad.quadIn;
  }
});
Object.defineProperty(exports, "easeQuadOut", {
  enumerable: true,
  get: function () {
    return _quad.quadOut;
  }
});
Object.defineProperty(exports, "easeQuadInOut", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeCubic", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicIn", {
  enumerable: true,
  get: function () {
    return _cubic.cubicIn;
  }
});
Object.defineProperty(exports, "easeCubicOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicOut;
  }
});
Object.defineProperty(exports, "easeCubicInOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easePoly", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyIn", {
  enumerable: true,
  get: function () {
    return _poly.polyIn;
  }
});
Object.defineProperty(exports, "easePolyOut", {
  enumerable: true,
  get: function () {
    return _poly.polyOut;
  }
});
Object.defineProperty(exports, "easePolyInOut", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easeSin", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinIn", {
  enumerable: true,
  get: function () {
    return _sin.sinIn;
  }
});
Object.defineProperty(exports, "easeSinOut", {
  enumerable: true,
  get: function () {
    return _sin.sinOut;
  }
});
Object.defineProperty(exports, "easeSinInOut", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeExp", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpIn", {
  enumerable: true,
  get: function () {
    return _exp.expIn;
  }
});
Object.defineProperty(exports, "easeExpOut", {
  enumerable: true,
  get: function () {
    return _exp.expOut;
  }
});
Object.defineProperty(exports, "easeExpInOut", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeCircle", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleIn", {
  enumerable: true,
  get: function () {
    return _circle.circleIn;
  }
});
Object.defineProperty(exports, "easeCircleOut", {
  enumerable: true,
  get: function () {
    return _circle.circleOut;
  }
});
Object.defineProperty(exports, "easeCircleInOut", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeBounce", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceIn", {
  enumerable: true,
  get: function () {
    return _bounce.bounceIn;
  }
});
Object.defineProperty(exports, "easeBounceOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceInOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceInOut;
  }
});
Object.defineProperty(exports, "easeBack", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackIn", {
  enumerable: true,
  get: function () {
    return _back.backIn;
  }
});
Object.defineProperty(exports, "easeBackOut", {
  enumerable: true,
  get: function () {
    return _back.backOut;
  }
});
Object.defineProperty(exports, "easeBackInOut", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeElastic", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticIn", {
  enumerable: true,
  get: function () {
    return _elastic.elasticIn;
  }
});
Object.defineProperty(exports, "easeElasticOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticInOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticInOut;
  }
});

var _linear = require("./linear.js");

var _quad = require("./quad.js");

var _cubic = require("./cubic.js");

var _poly = require("./poly.js");

var _sin = require("./sin.js");

var _exp = require("./exp.js");

var _circle = require("./circle.js");

var _bounce = require("./bounce.js");

var _back = require("./back.js");

var _elastic = require("./elastic.js");
},{"./linear.js":"node_modules/d3-ease/src/linear.js","./quad.js":"node_modules/d3-ease/src/quad.js","./cubic.js":"node_modules/d3-ease/src/cubic.js","./poly.js":"node_modules/d3-ease/src/poly.js","./sin.js":"node_modules/d3-ease/src/sin.js","./exp.js":"node_modules/d3-ease/src/exp.js","./circle.js":"node_modules/d3-ease/src/circle.js","./bounce.js":"node_modules/d3-ease/src/bounce.js","./back.js":"node_modules/d3-ease/src/back.js","./elastic.js":"node_modules/d3-ease/src/elastic.js"}],"node_modules/d3-transition/src/selection/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../transition/index.js");

var _schedule = _interopRequireDefault(require("../transition/schedule.js"));

var _d3Ease = require("d3-ease");

var _d3Timer = require("d3-timer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: _d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = (0, _d3Timer.now)(), defaultTiming;
    }
  }

  return timing;
}

function _default(name) {
  var id, timing;

  if (name instanceof _index.Transition) {
    id = name._id, name = name._name;
  } else {
    id = (0, _index.newId)(), (timing = defaultTiming).time = (0, _d3Timer.now)(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        (0, _schedule.default)(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id);
}
},{"../transition/index.js":"node_modules/d3-transition/src/transition/index.js","../transition/schedule.js":"node_modules/d3-transition/src/transition/schedule.js","d3-ease":"node_modules/d3-ease/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-transition/src/selection/index.js":[function(require,module,exports) {
"use strict";

var _d3Selection = require("d3-selection");

var _interrupt = _interopRequireDefault(require("./interrupt.js"));

var _transition = _interopRequireDefault(require("./transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_d3Selection.selection.prototype.interrupt = _interrupt.default;
_d3Selection.selection.prototype.transition = _transition.default;
},{"d3-selection":"node_modules/d3-selection/src/index.js","./interrupt.js":"node_modules/d3-transition/src/selection/interrupt.js","./transition.js":"node_modules/d3-transition/src/selection/transition.js"}],"node_modules/d3-transition/src/active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./transition/index.js");

var _schedule = require("./transition/schedule.js");

var root = [null];

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).state > _schedule.SCHEDULED && schedule.name === name) {
        return new _index.Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}
},{"./transition/index.js":"node_modules/d3-transition/src/transition/index.js","./transition/schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "transition", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "active", {
  enumerable: true,
  get: function () {
    return _active.default;
  }
});
Object.defineProperty(exports, "interrupt", {
  enumerable: true,
  get: function () {
    return _interrupt.default;
  }
});

require("./selection/index.js");

var _index2 = _interopRequireDefault(require("./transition/index.js"));

var _active = _interopRequireDefault(require("./active.js"));

var _interrupt = _interopRequireDefault(require("./interrupt.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./selection/index.js":"node_modules/d3-transition/src/selection/index.js","./transition/index.js":"node_modules/d3-transition/src/transition/index.js","./active.js":"node_modules/d3-transition/src/active.js","./interrupt.js":"node_modules/d3-transition/src/interrupt.js"}],"node_modules/d3-brush/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-brush/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}
},{}],"node_modules/d3-brush/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-brush/src/brush.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

var _noevent = _interopRequireWildcard(require("./noevent.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MODE_DRAG = {
  name: "drag"
},
    MODE_SPACE = {
  name: "space"
},
    MODE_HANDLE = {
  name: "handle"
},
    MODE_CENTER = {
  name: "center"
};

function number1(e) {
  return [+e[0], +e[1]];
}

function number2(e) {
  return [number1(e[0]), number1(e[1])];
}

function toucher(identifier) {
  return function (target) {
    return (0, _d3Selection.touch)(target, _d3Selection.event.touches, identifier);
  };
}

var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function (x, e) {
    return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]];
  },
  output: function (xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function (y, e) {
    return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]];
  },
  output: function (xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function (xy) {
    return xy == null ? null : number2(xy);
  },
  output: function (xy) {
    return xy;
  }
};
var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};
var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};
var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};
var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};
var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {
    type: t
  };
} // Ignore right-click, since that should open the context menu.


function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;

  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }

  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
} // Like d3.local, but with the name “__brush” rather than auto-generated.


function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;

  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush(X);
}

function brushY() {
  return brush(Y);
}

function _default() {
  return brush(XY);
}

function brush(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      touchable = defaultTouchable,
      keys = true,
      listeners = (0, _d3Dispatch.dispatch)("start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function () {
      var extent = local(this).extent;
      (0, _d3Selection.select)(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function (d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function (d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function (d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  brush.move = function (group, selection) {
    if (group.selection) {
      group.on("start.brush", function () {
        emitter(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function () {
        emitter(this, arguments).end();
      }).tween("brush", function () {
        var that = this,
            state = that.__brush,
            emit = emitter(that, arguments),
            selection0 = state.selection,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
            i = (0, _d3Interpolate.interpolate)(selection0, selection1);

        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i(t);
          redraw.call(that);
          emit.brush();
        }

        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group.each(function () {
        var that = this,
            args = arguments,
            state = that.__brush,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
            emit = emitter(that, args).beforestart();
        (0, _d3Transition.interrupt)(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start().brush().end();
      });
    }
  };

  brush.clear = function (group) {
    brush.move(group, null);
  };

  function redraw() {
    var group = (0, _d3Selection.select)(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function (d) {
        return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
      }).attr("y", function (d) {
        return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
      }).attr("width", function (d) {
        return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
      }).attr("height", function (d) {
        return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }

  function emitter(that, args, clean) {
    var emit = that.__brush.emitter;
    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
  }

  function Emitter(that, args, clean) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
    this.clean = clean;
  }

  Emitter.prototype = {
    beforestart: function () {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function () {
      if (this.starting) this.starting = false, this.emit("start");else this.emit("brush");
      return this;
    },
    brush: function () {
      this.emit("brush");
      return this;
    },
    end: function () {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (touchending && !_d3Selection.event.touches) return;
    if (!filter.apply(this, arguments)) return;
    var that = this,
        type = _d3Selection.event.target.__data__.type,
        mode = (keys && _d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : keys && _d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE,
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0],
        w0,
        w1,
        N = extent[0][1],
        n0,
        n1,
        E = extent[1][0],
        e0,
        e1,
        S = extent[1][1],
        s0,
        s1,
        dx = 0,
        dy = 0,
        moving,
        shifting = signX && signY && keys && _d3Selection.event.shiftKey,
        lockX,
        lockY,
        pointer = _d3Selection.event.touches ? toucher(_d3Selection.event.changedTouches[0].identifier) : _d3Selection.mouse,
        point0 = pointer(that),
        point = point0,
        emit = emitter(that, arguments, true).beforestart();

    if (type === "overlay") {
      if (selection) moving = true;
      state.selection = selection = [[w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]], [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = (0, _d3Selection.select)(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);

    if (_d3Selection.event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys) view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    }

    (0, _noevent.nopropagation)();
    (0, _d3Transition.interrupt)(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = pointer(that);

      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;else lockX = true;
      }

      point = point1;
      moving = true;
      (0, _noevent.default)();
      move();
    }

    function move() {
      var t;
      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG:
          {
            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
            break;
          }

        case MODE_HANDLE:
          {
            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
            break;
          }

        case MODE_CENTER:
          {
            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
            break;
          }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!

      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      (0, _noevent.nopropagation)();

      if (_d3Selection.event.touches) {
        if (_d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function () {
          touchending = null;
        }, 500); // Ghost clicks are delayed!
      } else {
        (0, _d3Drag.dragEnable)(_d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }

      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!

      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            shifting = signX && signY;
            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_HANDLE) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              if (signX < 0) e0 = e1 - dx;else if (signX > 0) w0 = w1 - dx;
              if (signY < 0) s0 = s1 - dy;else if (signY > 0) n0 = n1 - dy;
              mode = MODE_SPACE;
              overlay.attr("cursor", cursors.selection);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }

    function keyupped() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false;
              move();
            }

            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_CENTER) {
              if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE
            if (mode === MODE_SPACE) {
              if (_d3Selection.event.altKey) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
              } else {
                if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
              }

              overlay.attr("cursor", cursors[type]);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }
  }

  function touchmoved() {
    emitter(this, arguments).moved();
  }

  function touchended() {
    emitter(this, arguments).ended();
  }

  function initialize() {
    var state = this.__brush || {
      selection: null
    };
    state.extent = number2(extent.apply(this, arguments));
    state.dim = dim;
    return state;
  }

  brush.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)(number2(_)), brush) : extent;
  };

  brush.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : filter;
  };

  brush.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : touchable;
  };

  brush.handleSize = function (_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.keyModifiers = function (_) {
    return arguments.length ? (keys = !!_, brush) : keys;
  };

  brush.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-drag":"node_modules/d3-drag/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","d3-transition":"node_modules/d3-transition/src/index.js","./constant.js":"node_modules/d3-brush/src/constant.js","./event.js":"node_modules/d3-brush/src/event.js","./noevent.js":"node_modules/d3-brush/src/noevent.js"}],"node_modules/d3-brush/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "brush", {
  enumerable: true,
  get: function () {
    return _brush.default;
  }
});
Object.defineProperty(exports, "brushX", {
  enumerable: true,
  get: function () {
    return _brush.brushX;
  }
});
Object.defineProperty(exports, "brushY", {
  enumerable: true,
  get: function () {
    return _brush.brushY;
  }
});
Object.defineProperty(exports, "brushSelection", {
  enumerable: true,
  get: function () {
    return _brush.brushSelection;
  }
});

var _brush = _interopRequireWildcard(require("./brush.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./brush.js":"node_modules/d3-brush/src/brush.js"}],"node_modules/d3-chord/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = exports.tau = exports.halfPi = exports.pi = exports.sin = exports.cos = void 0;
var cos = Math.cos;
exports.cos = cos;
var sin = Math.sin;
exports.sin = sin;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = pi * 2;
exports.tau = tau;
var max = Math.max;
exports.max = max;
},{}],"node_modules/d3-chord/src/chord.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _math = require("./math");

function compareValue(compare) {
  return function (a, b) {
    return compare(a.source.value + a.target.value, b.source.value + b.target.value);
  };
}

function _default() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = (0, _d3Array.range)(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j; // Compute the sum.

    k = 0, i = -1;

    while (++i < n) {
      x = 0, j = -1;

      while (++j < n) {
        x += matrix[i][j];
      }

      groupSums.push(x);
      subgroupIndex.push((0, _d3Array.range)(n));
      k += x;
    } // Sort groups…


    if (sortGroups) groupIndex.sort(function (a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    }); // Sort subgroups…

    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {
      d.sort(function (a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    }); // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?

    k = (0, _math.max)(0, _math.tau - padAngle * n) / k;
    dx = k ? padAngle : _math.tau / n; // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!

    x = 0, i = -1;

    while (++i < n) {
      x0 = x, j = -1;

      while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }

      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    } // Generate chords for each (non-empty) subgroup-subgroup link.


    i = -1;

    while (++i < n) {
      j = i - 1;

      while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];

        if (source.value || target.value) {
          chords.push(source.value < target.value ? {
            source: target,
            target: source
          } : {
            source: source,
            target: target
          });
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function (_) {
    return arguments.length ? (padAngle = (0, _math.max)(0, _), chord) : padAngle;
  };

  chord.sortGroups = function (_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function (_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function (_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}
},{"d3-array":"node_modules/d3-array/src/index.js","./math":"node_modules/d3-chord/src/math.js"}],"node_modules/d3-chord/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-chord/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-path/src/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
},{}],"node_modules/d3-path/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./path.js":"node_modules/d3-path/src/path.js"}],"node_modules/d3-chord/src/ribbon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _d3Path = require("d3-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function _default() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - _math.halfPi,
        sa1 = endAngle.apply(this, argv) - _math.halfPi,
        sx0 = sr * (0, _math.cos)(sa0),
        sy0 = sr * (0, _math.sin)(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - _math.halfPi,
        ta1 = endAngle.apply(this, argv) - _math.halfPi;

    if (!context) context = buffer = (0, _d3Path.path)();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);

    if (sa0 !== ta0 || sa1 !== ta1) {
      // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * (0, _math.cos)(ta0), tr * (0, _math.sin)(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }

    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : radius;
  };

  ribbon.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : endAngle;
  };

  ribbon.source = function (_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function (_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };

  return ribbon;
}
},{"./array":"node_modules/d3-chord/src/array.js","./constant":"node_modules/d3-chord/src/constant.js","./math":"node_modules/d3-chord/src/math.js","d3-path":"node_modules/d3-path/src/index.js"}],"node_modules/d3-chord/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "chord", {
  enumerable: true,
  get: function () {
    return _chord.default;
  }
});
Object.defineProperty(exports, "ribbon", {
  enumerable: true,
  get: function () {
    return _ribbon.default;
  }
});

var _chord = _interopRequireDefault(require("./chord"));

var _ribbon = _interopRequireDefault(require("./ribbon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./chord":"node_modules/d3-chord/src/chord.js","./ribbon":"node_modules/d3-chord/src/ribbon.js"}],"node_modules/d3-collection/src/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.prefix = void 0;
var prefix = "$";
exports.prefix = prefix;

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function (key) {
    return prefix + key in this;
  },
  get: function (key) {
    return this[prefix + key];
  },
  set: function (key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function (key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function () {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function () {
    var keys = [];

    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));

    return keys;
  },
  values: function () {
    var values = [];

    for (var property in this) if (property[0] === prefix) values.push(this[property]);

    return values;
  },
  entries: function () {
    var entries = [];

    for (var property in this) if (property[0] === prefix) entries.push({
      key: property.slice(1),
      value: this[property]
    });

    return entries;
  },
  size: function () {
    var size = 0;

    for (var property in this) if (property[0] === prefix) ++size;

    return size;
  },
  empty: function () {
    for (var property in this) if (property[0] === prefix) return false;

    return true;
  },
  each: function (f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map(); // Copy constructor.

  if (object instanceof Map) object.each(function (value, key) {
    map.set(key, value);
  }); // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;
      if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);
    } // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);
  return map;
}

var _default = map;
exports.default = _default;
},{}],"node_modules/d3-collection/src/nest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _map = _interopRequireDefault(require("./map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = (0, _map.default)(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function (values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });
    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array,
        sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();else array = [], map.each(function (v, k) {
      array.push({
        key: k,
        values: entries(v, depth)
      });
    });
    return sortKey != null ? array.sort(function (a, b) {
      return sortKey(a.key, b.key);
    }) : array;
  }

  return nest = {
    object: function (array) {
      return apply(array, 0, createObject, setObject);
    },
    map: function (array) {
      return apply(array, 0, createMap, setMap);
    },
    entries: function (array) {
      return entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function (d) {
      keys.push(d);
      return nest;
    },
    sortKeys: function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    },
    sortValues: function (order) {
      sortValues = order;
      return nest;
    },
    rollup: function (f) {
      rollup = f;
      return nest;
    }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return (0, _map.default)();
}

function setMap(map, key, value) {
  map.set(key, value);
}
},{"./map":"node_modules/d3-collection/src/map.js"}],"node_modules/d3-collection/src/set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _map = _interopRequireWildcard(require("./map"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Set() {}

var proto = _map.default.prototype;
Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function (value) {
    value += "";
    this[_map.prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set(); // Copy constructor.

  if (object instanceof Set) object.each(function (value) {
    set.add(value);
  }); // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));
    }
  return set;
}

var _default = set;
exports.default = _default;
},{"./map":"node_modules/d3-collection/src/map.js"}],"node_modules/d3-collection/src/keys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var keys = [];

  for (var key in map) keys.push(key);

  return keys;
}
},{}],"node_modules/d3-collection/src/values.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var values = [];

  for (var key in map) values.push(map[key]);

  return values;
}
},{}],"node_modules/d3-collection/src/entries.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var entries = [];

  for (var key in map) entries.push({
    key: key,
    value: map[key]
  });

  return entries;
}
},{}],"node_modules/d3-collection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _nest.default;
  }
});
Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function () {
    return _set.default;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.default;
  }
});
Object.defineProperty(exports, "keys", {
  enumerable: true,
  get: function () {
    return _keys.default;
  }
});
Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function () {
    return _values.default;
  }
});
Object.defineProperty(exports, "entries", {
  enumerable: true,
  get: function () {
    return _entries.default;
  }
});

var _nest = _interopRequireDefault(require("./nest"));

var _set = _interopRequireDefault(require("./set"));

var _map = _interopRequireDefault(require("./map"));

var _keys = _interopRequireDefault(require("./keys"));

var _values = _interopRequireDefault(require("./values"));

var _entries = _interopRequireDefault(require("./entries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nest":"node_modules/d3-collection/src/nest.js","./set":"node_modules/d3-collection/src/set.js","./map":"node_modules/d3-collection/src/map.js","./keys":"node_modules/d3-collection/src/keys.js","./values":"node_modules/d3-collection/src/values.js","./entries":"node_modules/d3-collection/src/entries.js"}],"node_modules/d3-contour/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
},{}],"node_modules/d3-contour/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a - b;
}
},{}],"node_modules/d3-contour/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area;
}
},{}],"node_modules/d3-contour/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-contour/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) if (c = ringContains(ring, hole[i])) return c;

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
},{}],"node_modules/d3-contour/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"node_modules/d3-contour/src/contours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _ascending = _interopRequireDefault(require("./ascending"));

var _area = _interopRequireDefault(require("./area"));

var _constant = _interopRequireDefault(require("./constant"));

var _contains = _interopRequireDefault(require("./contains"));

var _noop = _interopRequireDefault(require("./noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];

function _default() {
  var dx = 1,
      dy = 1,
      threshold = _d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var domain = (0, _d3Array.extent)(values),
          start = domain[0],
          stop = domain[1];
      tz = (0, _d3Array.tickStep)(start, stop, tz);
      tz = (0, _d3Array.range)(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(_ascending.default);
    }

    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if ((0, _area.default)(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if ((0, _contains.default)((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), contours) : threshold;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : _noop.default, contours) : smooth === smoothLinear;
  };

  return contours;
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-contour/src/array.js","./ascending":"node_modules/d3-contour/src/ascending.js","./area":"node_modules/d3-contour/src/area.js","./constant":"node_modules/d3-contour/src/constant.js","./contains":"node_modules/d3-contour/src/contains.js","./noop":"node_modules/d3-contour/src/noop.js"}],"node_modules/d3-contour/src/blur.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blurX = blurX;
exports.blurY = blurY;

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }

        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
} // TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.


function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }

        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
},{}],"node_modules/d3-contour/src/density.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _blur = require("./blur");

var _constant = _interopRequireDefault(require("./constant"));

var _contours = _interopRequireDefault(require("./contours"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function _default() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20,
      // blur radius
  k = 2,
      // log2(grid cell size)
  o = r * 3,
      // grid offset, to pad for blur
  n = dx + o * 2 >> k,
      // grid width
  m = dy + o * 2 >> k,
      // grid height
  threshold = (0, _constant.default)(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    data.forEach(function (d, i, data) {
      var xi = +x(d, i, data) + o >> k,
          yi = +y(d, i, data) + o >> k,
          wi = +weight(d, i, data);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    }); // TODO Optimize.

    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var stop = (0, _d3Array.max)(values0);
      tz = (0, _d3Array.tickStep)(0, stop, tz);
      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.

    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  } // TODO Optimize.


  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k;
    m = dy + o * 2 >> k;
    return density;
  }

  density.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-contour/src/array.js","./blur":"node_modules/d3-contour/src/blur.js","./constant":"node_modules/d3-contour/src/constant.js","./contours":"node_modules/d3-contour/src/contours.js"}],"node_modules/d3-contour/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contours", {
  enumerable: true,
  get: function () {
    return _contours.default;
  }
});
Object.defineProperty(exports, "contourDensity", {
  enumerable: true,
  get: function () {
    return _density.default;
  }
});

var _contours = _interopRequireDefault(require("./contours"));

var _density = _interopRequireDefault(require("./density"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./contours":"node_modules/d3-contour/src/contours.js","./density":"node_modules/d3-contour/src/density.js"}],"node_modules/d3-dsv/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "] || \"\"";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function pad(value, width) {
  var s = value + "",
      length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}

function _default(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) row.push(t), t = token();

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows,
    formatRow: formatRow,
    formatValue: formatValue
  };
}
},{}],"node_modules/d3-dsv/src/csv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvFormatValue = exports.csvFormatRow = exports.csvFormatRows = exports.csvFormatBody = exports.csvFormat = exports.csvParseRows = exports.csvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv.default)(",");
var csvParse = csv.parse;
exports.csvParse = csvParse;
var csvParseRows = csv.parseRows;
exports.csvParseRows = csvParseRows;
var csvFormat = csv.format;
exports.csvFormat = csvFormat;
var csvFormatBody = csv.formatBody;
exports.csvFormatBody = csvFormatBody;
var csvFormatRows = csv.formatRows;
exports.csvFormatRows = csvFormatRows;
var csvFormatRow = csv.formatRow;
exports.csvFormatRow = csvFormatRow;
var csvFormatValue = csv.formatValue;
exports.csvFormatValue = csvFormatValue;
},{"./dsv.js":"node_modules/d3-dsv/src/dsv.js"}],"node_modules/d3-dsv/src/tsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsvFormatValue = exports.tsvFormatRow = exports.tsvFormatRows = exports.tsvFormatBody = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv.default)("\t");
var tsvParse = tsv.parse;
exports.tsvParse = tsvParse;
var tsvParseRows = tsv.parseRows;
exports.tsvParseRows = tsvParseRows;
var tsvFormat = tsv.format;
exports.tsvFormat = tsvFormat;
var tsvFormatBody = tsv.formatBody;
exports.tsvFormatBody = tsvFormatBody;
var tsvFormatRows = tsv.formatRows;
exports.tsvFormatRows = tsvFormatRows;
var tsvFormatRow = tsv.formatRow;
exports.tsvFormatRow = tsvFormatRow;
var tsvFormatValue = tsv.formatValue;
exports.tsvFormatValue = tsvFormatValue;
},{"./dsv.js":"node_modules/d3-dsv/src/dsv.js"}],"node_modules/d3-dsv/src/autoType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = autoType;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(),
        number,
        m;
    if (!value) value = null;else if (value === "true") value = true;else if (value === "false") value = false;else if (value === "NaN") value = NaN;else if (!isNaN(number = +value)) value = number;else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
      value = new Date(value);
    } else continue;
    object[key] = value;
  }

  return object;
} // https://github.com/d3/d3-dsv/issues/45


var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();
},{}],"node_modules/d3-dsv/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function () {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function () {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function () {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatBody", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatBody;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRows;
  }
});
Object.defineProperty(exports, "csvFormatRow", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRow;
  }
});
Object.defineProperty(exports, "csvFormatValue", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatValue;
  }
});
Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatBody", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatBody;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRows;
  }
});
Object.defineProperty(exports, "tsvFormatRow", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRow;
  }
});
Object.defineProperty(exports, "tsvFormatValue", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatValue;
  }
});
Object.defineProperty(exports, "autoType", {
  enumerable: true,
  get: function () {
    return _autoType.default;
  }
});

var _dsv = _interopRequireDefault(require("./dsv.js"));

var _csv = require("./csv.js");

var _tsv = require("./tsv.js");

var _autoType = _interopRequireDefault(require("./autoType.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dsv.js":"node_modules/d3-dsv/src/dsv.js","./csv.js":"node_modules/d3-dsv/src/csv.js","./tsv.js":"node_modules/d3-dsv/src/tsv.js","./autoType.js":"node_modules/d3-dsv/src/autoType.js"}],"node_modules/d3-fetch/src/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function _default(input, init) {
  return fetch(input, init).then(responseBlob);
}
},{}],"node_modules/d3-fetch/src/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function _default(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}
},{}],"node_modules/d3-fetch/src/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function _default(input, init) {
  return fetch(input, init).then(responseText);
}
},{}],"node_modules/d3-fetch/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dsv;
exports.tsv = exports.csv = void 0;

var _d3Dsv = require("d3-dsv");

var _text = _interopRequireDefault(require("./text.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dsvParse(parse) {
  return function (input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return (0, _text.default)(input, init).then(function (response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = (0, _d3Dsv.dsvFormat)(delimiter);
  return (0, _text.default)(input, init).then(function (response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(_d3Dsv.csvParse);
exports.csv = csv;
var tsv = dsvParse(_d3Dsv.tsvParse);
exports.tsv = tsv;
},{"d3-dsv":"node_modules/d3-dsv/src/index.js","./text.js":"node_modules/d3-fetch/src/text.js"}],"node_modules/d3-fetch/src/image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(input, init) {
  return new Promise(function (resolve, reject) {
    var image = new Image();

    for (var key in init) image[key] = init[key];

    image.onerror = reject;

    image.onload = function () {
      resolve(image);
    };

    image.src = input;
  });
}
},{}],"node_modules/d3-fetch/src/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  if (response.status === 204 || response.status === 205) return;
  return response.json();
}

function _default(input, init) {
  return fetch(input, init).then(responseJson);
}
},{}],"node_modules/d3-fetch/src/xml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.svg = exports.html = exports.default = void 0;

var _text = _interopRequireDefault(require("./text.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parser(type) {
  return function (input, init) {
    return (0, _text.default)(input, init).then(function (text) {
      return new DOMParser().parseFromString(text, type);
    });
  };
}

var _default = parser("application/xml");

exports.default = _default;
var html = parser("text/html");
exports.html = html;
var svg = parser("image/svg+xml");
exports.svg = svg;
},{"./text.js":"node_modules/d3-fetch/src/text.js"}],"node_modules/d3-fetch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "blob", {
  enumerable: true,
  get: function () {
    return _blob.default;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.default;
  }
});
Object.defineProperty(exports, "dsv", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csv", {
  enumerable: true,
  get: function () {
    return _dsv.csv;
  }
});
Object.defineProperty(exports, "tsv", {
  enumerable: true,
  get: function () {
    return _dsv.tsv;
  }
});
Object.defineProperty(exports, "image", {
  enumerable: true,
  get: function () {
    return _image.default;
  }
});
Object.defineProperty(exports, "json", {
  enumerable: true,
  get: function () {
    return _json.default;
  }
});
Object.defineProperty(exports, "text", {
  enumerable: true,
  get: function () {
    return _text.default;
  }
});
Object.defineProperty(exports, "xml", {
  enumerable: true,
  get: function () {
    return _xml.default;
  }
});
Object.defineProperty(exports, "html", {
  enumerable: true,
  get: function () {
    return _xml.html;
  }
});
Object.defineProperty(exports, "svg", {
  enumerable: true,
  get: function () {
    return _xml.svg;
  }
});

var _blob = _interopRequireDefault(require("./blob.js"));

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _dsv = _interopRequireWildcard(require("./dsv.js"));

var _image = _interopRequireDefault(require("./image.js"));

var _json = _interopRequireDefault(require("./json.js"));

var _text = _interopRequireDefault(require("./text.js"));

var _xml = _interopRequireWildcard(require("./xml.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./blob.js":"node_modules/d3-fetch/src/blob.js","./buffer.js":"node_modules/d3-fetch/src/buffer.js","./dsv.js":"node_modules/d3-fetch/src/dsv.js","./image.js":"node_modules/d3-fetch/src/image.js","./json.js":"node_modules/d3-fetch/src/json.js","./text.js":"node_modules/d3-fetch/src/text.js","./xml.js":"node_modules/d3-fetch/src/xml.js"}],"node_modules/d3-force/src/center.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  var nodes;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{}],"node_modules/d3-force/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-force/src/jiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return (Math.random() - 0.5) * 1e-6;
}
},{}],"node_modules/d3-quadtree/src/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.addAll = addAll;

function _default(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
},{}],"node_modules/d3-quadtree/src/cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
},{}],"node_modules/d3-quadtree/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}
},{}],"node_modules/d3-quadtree/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
},{}],"node_modules/d3-quadtree/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
},{}],"node_modules/d3-quadtree/src/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new _quad.default(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad.default(node[3], xm, ym, x2, y2), new _quad.default(node[2], x1, ym, xm, y2), new _quad.default(node[1], xm, y1, x2, ym), new _quad.default(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
},{"./quad.js":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}
},{}],"node_modules/d3-quadtree/src/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return this._root;
}
},{}],"node_modules/d3-quadtree/src/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}
},{}],"node_modules/d3-quadtree/src/visit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new _quad.default(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
    }
  }

  return this;
}
},{"./quad.js":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/visitAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new _quad.default(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
},{"./quad.js":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultX = defaultX;
exports.default = _default;

function defaultX(d) {
  return d[0];
}

function _default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
},{}],"node_modules/d3-quadtree/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultY = defaultY;
exports.default = _default;

function defaultY(d) {
  return d[1];
}

function _default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
},{}],"node_modules/d3-quadtree/src/quadtree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quadtree;

var _add = _interopRequireWildcard(require("./add.js"));

var _cover = _interopRequireDefault(require("./cover.js"));

var _data = _interopRequireDefault(require("./data.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _find = _interopRequireDefault(require("./find.js"));

var _remove = _interopRequireWildcard(require("./remove.js"));

var _root = _interopRequireDefault(require("./root.js"));

var _size = _interopRequireDefault(require("./size.js"));

var _visit = _interopRequireDefault(require("./visit.js"));

var _visitAfter = _interopRequireDefault(require("./visitAfter.js"));

var _x = _interopRequireWildcard(require("./x.js"));

var _y = _interopRequireWildcard(require("./y.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = _add.default;
treeProto.addAll = _add.addAll;
treeProto.cover = _cover.default;
treeProto.data = _data.default;
treeProto.extent = _extent.default;
treeProto.find = _find.default;
treeProto.remove = _remove.default;
treeProto.removeAll = _remove.removeAll;
treeProto.root = _root.default;
treeProto.size = _size.default;
treeProto.visit = _visit.default;
treeProto.visitAfter = _visitAfter.default;
treeProto.x = _x.default;
treeProto.y = _y.default;
},{"./add.js":"node_modules/d3-quadtree/src/add.js","./cover.js":"node_modules/d3-quadtree/src/cover.js","./data.js":"node_modules/d3-quadtree/src/data.js","./extent.js":"node_modules/d3-quadtree/src/extent.js","./find.js":"node_modules/d3-quadtree/src/find.js","./remove.js":"node_modules/d3-quadtree/src/remove.js","./root.js":"node_modules/d3-quadtree/src/root.js","./size.js":"node_modules/d3-quadtree/src/size.js","./visit.js":"node_modules/d3-quadtree/src/visit.js","./visitAfter.js":"node_modules/d3-quadtree/src/visitAfter.js","./x.js":"node_modules/d3-quadtree/src/x.js","./y.js":"node_modules/d3-quadtree/src/y.js"}],"node_modules/d3-quadtree/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "quadtree", {
  enumerable: true,
  get: function () {
    return _quadtree.default;
  }
});

var _quadtree = _interopRequireDefault(require("./quadtree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./quadtree.js":"node_modules/d3-quadtree/src/quadtree.js"}],"node_modules/d3-force/src/collide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function _default(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = (0, _constant.default)(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = (0, _jiggle.default)(), l += x * x;
            if (y === 0) y = (0, _jiggle.default)(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js","./jiggle":"node_modules/d3-force/src/jiggle.js","d3-quadtree":"node_modules/d3-quadtree/src/index.js"}],"node_modules/d3-force/src/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Collection = require("d3-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function _default(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = (0, _constant.default)(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();
        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = (0, _d3Collection.map)(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js","./jiggle":"node_modules/d3-force/src/jiggle.js","d3-collection":"node_modules/d3-collection/src/index.js"}],"node_modules/d3-force/src/simulation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Collection = require("d3-collection");

var _d3Timer = require("d3-timer");

function x(d) {
  return d.x;
}

function y(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function _default(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = (0, _d3Collection.map)(),
      stepper = (0, _d3Timer.timer)(step),
      event = (0, _d3Dispatch.dispatch)("tick", "end");
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.each(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-collection":"node_modules/d3-collection/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-force/src/manyBody.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

var _simulation = require("./simulation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var nodes,
      node,
      alpha,
      strength = (0, _constant.default)(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = (0, _d3Quadtree.quadtree)(nodes, _simulation.x, _simulation.y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do strength += strengths[q.data.index]; while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = (0, _jiggle.default)(), l += x * x;
        if (y === 0) y = (0, _jiggle.default)(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = (0, _jiggle.default)(), l += x * x;
      if (y === 0) y = (0, _jiggle.default)(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js","./jiggle":"node_modules/d3-force/src/jiggle.js","d3-quadtree":"node_modules/d3-quadtree/src/index.js","./simulation":"node_modules/d3-force/src/simulation.js"}],"node_modules/d3-force/src/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius, x, y) {
  var nodes,
      strength = (0, _constant.default)(0.1),
      strengths,
      radiuses;
  if (typeof radius !== "function") radius = (0, _constant.default)(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);

    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _, initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = (0, _constant.default)(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : x;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(y) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = (0, _constant.default)(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : y;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "forceCenter", {
  enumerable: true,
  get: function () {
    return _center.default;
  }
});
Object.defineProperty(exports, "forceCollide", {
  enumerable: true,
  get: function () {
    return _collide.default;
  }
});
Object.defineProperty(exports, "forceLink", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "forceManyBody", {
  enumerable: true,
  get: function () {
    return _manyBody.default;
  }
});
Object.defineProperty(exports, "forceRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "forceSimulation", {
  enumerable: true,
  get: function () {
    return _simulation.default;
  }
});
Object.defineProperty(exports, "forceX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "forceY", {
  enumerable: true,
  get: function () {
    return _y.default;
  }
});

var _center = _interopRequireDefault(require("./center"));

var _collide = _interopRequireDefault(require("./collide"));

var _link = _interopRequireDefault(require("./link"));

var _manyBody = _interopRequireDefault(require("./manyBody"));

var _radial = _interopRequireDefault(require("./radial"));

var _simulation = _interopRequireDefault(require("./simulation"));

var _x = _interopRequireDefault(require("./x"));

var _y = _interopRequireDefault(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./center":"node_modules/d3-force/src/center.js","./collide":"node_modules/d3-force/src/collide.js","./link":"node_modules/d3-force/src/link.js","./manyBody":"node_modules/d3-force/src/manyBody.js","./radial":"node_modules/d3-force/src/radial.js","./simulation":"node_modules/d3-force/src/simulation.js","./x":"node_modules/d3-force/src/x.js","./y":"node_modules/d3-force/src/y.js"}],"node_modules/d3-format/src/formatDecimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.formatDecimalParts = formatDecimalParts;

function _default(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
} // Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].


function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"node_modules/d3-format/src/exponent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = require("./formatDecimal.js");

function _default(x) {
  return x = (0, _formatDecimal.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"node_modules/d3-format/src/formatNumerals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
},{}],"node_modules/d3-format/src/formatSpecifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatSpecifier;
exports.FormatSpecifier = FormatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
},{}],"node_modules/d3-format/src/formatTrim.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
},{}],"node_modules/d3-format/src/formatPrefixAuto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = require("./formatDecimal.js");

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatRounded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = require("./formatDecimal.js");

function _default(x, p) {
  var d = (0, _formatDecimal.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto.js"));

var _formatRounded = _interopRequireDefault(require("./formatRounded.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": _formatDecimal.default,
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js","./formatPrefixAuto.js":"node_modules/d3-format/src/formatPrefixAuto.js","./formatRounded.js":"node_modules/d3-format/src/formatRounded.js"}],"node_modules/d3-format/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

var _formatGroup = _interopRequireDefault(require("./formatGroup.js"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals.js"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier.js"));

var _formatTrim = _interopRequireDefault(require("./formatTrim.js"));

var _formatTypes = _interopRequireDefault(require("./formatTypes.js"));

var _formatPrefixAuto = require("./formatPrefixAuto.js");

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js","./formatGroup.js":"node_modules/d3-format/src/formatGroup.js","./formatNumerals.js":"node_modules/d3-format/src/formatNumerals.js","./formatSpecifier.js":"node_modules/d3-format/src/formatSpecifier.js","./formatTrim.js":"node_modules/d3-format/src/formatTrim.js","./formatTypes.js":"node_modules/d3-format/src/formatTypes.js","./formatPrefixAuto.js":"node_modules/d3-format/src/formatPrefixAuto.js","./identity.js":"node_modules/d3-format/src/identity.js"}],"node_modules/d3-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale.js":"node_modules/d3-format/src/locale.js"}],"node_modules/d3-format/src/precisionFixed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/precisionPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/precisionRound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "FormatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.FormatSpecifier;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _formatSpecifier = _interopRequireWildcard(require("./formatSpecifier.js"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed.js"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix.js"));

var _precisionRound = _interopRequireDefault(require("./precisionRound.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./defaultLocale.js":"node_modules/d3-format/src/defaultLocale.js","./locale.js":"node_modules/d3-format/src/locale.js","./formatSpecifier.js":"node_modules/d3-format/src/formatSpecifier.js","./precisionFixed.js":"node_modules/d3-format/src/precisionFixed.js","./precisionPrefix.js":"node_modules/d3-format/src/precisionPrefix.js","./precisionRound.js":"node_modules/d3-format/src/precisionRound.js"}],"node_modules/d3-geo/src/adder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function _default() {
  return new Adder();
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function () {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function (y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function () {
    return this.s;
  }
};
var temp = new Adder();

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}
},{}],"node_modules/d3-geo/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
exports.tan = exports.sqrt = exports.sign = exports.sin = exports.pow = exports.log = exports.floor = exports.exp = exports.ceil = exports.cos = exports.atan2 = exports.atan = exports.abs = exports.radians = exports.degrees = exports.tau = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = void 0;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var ceil = Math.ceil;
exports.ceil = ceil;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var pow = Math.pow;
exports.pow = pow;
var sin = Math.sin;
exports.sin = sin;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var tan = Math.tan;
exports.tan = tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}
},{}],"node_modules/d3-geo/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = noop;

function noop() {}
},{}],"node_modules/d3-geo/src/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function _default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
},{}],"node_modules/d3-geo/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.areaStream = exports.areaRingSum = void 0;

var _adder = _interopRequireDefault(require("./adder.js"));

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = (0, _adder.default)();
exports.areaRingSum = areaRingSum;
var areaSum = (0, _adder.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop.default;
  },
  sphere: function () {
    areaSum.add(_math.tau);
  }
};
exports.areaStream = areaStream;

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function _default(object) {
  areaSum.reset();
  (0, _stream.default)(object, areaStream);
  return areaSum * 2;
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./math.js":"node_modules/d3-geo/src/math.js","./noop.js":"node_modules/d3-geo/src/noop.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/cartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = require("./math.js");

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a


function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d


function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
},{"./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _area = require("./area.js");

var _cartesian = require("./cartesian.js");

var _math = require("./math.js");

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder.default)(),
    ranges,
    range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function () {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();

    _area.areaStream.polygonStart();
  },
  polygonEnd: function () {
    _area.areaStream.polygonEnd();

    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  },
  sphere: function () {
    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);

  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }

  _area.areaStream.point(lambda, phi);

  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);

  _area.areaStream.lineEnd();

  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function _default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream.default)(feature, boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;
  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./area.js":"node_modules/d3-geo/src/area.js","./cartesian.js":"node_modules/d3-geo/src/cartesian.js","./math.js":"node_modules/d3-geo/src/math.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function _default(object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream.default)(object, centroidStream);
  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
}
},{"./math.js":"node_modules/d3-geo/src/math.js","./noop.js":"node_modules/d3-geo/src/noop.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-geo/src/compose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
},{}],"node_modules/d3-geo/src/rotation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateRadians = rotateRadians;
exports.default = _default;

var _compose = _interopRequireDefault(require("./compose.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function _default(rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
}
},{"./compose.js":"node_modules/d3-geo/src/compose.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleStream = circleStream;
exports.default = _default;

var _cartesian = require("./cartesian.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

var _rotation = require("./rotation.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].


function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

function _default() {
  var center = (0, _constant.default)([0, 0]),
      radius = (0, _constant.default)(90),
      precision = (0, _constant.default)(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;

    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : precision;
  };

  return circle;
}
},{"./cartesian.js":"node_modules/d3-geo/src/cartesian.js","./constant.js":"node_modules/d3-geo/src/constant.js","./math.js":"node_modules/d3-geo/src/math.js","./rotation.js":"node_modules/d3-geo/src/rotation.js"}],"node_modules/d3-geo/src/clip/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var lines = [],
      line;
  return {
    point: function (x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: _noop.default,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
},{"../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/pointEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

function _default(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}
},{"./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/rejoin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pointEqual = _interopRequireDefault(require("../pointEqual.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function _default(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x;

    if ((0, _pointEqual.default)(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();

        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

        stream.lineEnd();
        return;
      } // handle degenerate cases by moving the point


      p1[0] += 2 * _math.epsilon;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
},{"../pointEqual.js":"node_modules/d3-geo/src/pointEqual.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/polygonContains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _cartesian = require("./cartesian.js");

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder.default)();

function longitude(point) {
  if ((0, _math.abs)(point[0]) <= _math.pi) return point[0];else return (0, _math.sign)(point[0]) * (((0, _math.abs)(point[0]) + _math.pi) % _math.tau - _math.pi);
}

function _default(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = (0, _math.sin)(phi),
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;
      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./cartesian.js":"node_modules/d3-geo/src/cartesian.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _rejoin = _interopRequireDefault(require("./rejoin.js"));

var _math = require("../math.js");

var _polygonContains = _interopRequireDefault(require("../polygonContains.js"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = (0, _buffer.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains.default)(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}
},{"./buffer.js":"node_modules/d3-geo/src/clip/buffer.js","./rejoin.js":"node_modules/d3-geo/src/clip/rejoin.js","../math.js":"node_modules/d3-geo/src/math.js","../polygonContains.js":"node_modules/d3-geo/src/polygonContains.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/d3-geo/src/clip/antimeridian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _index.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.


exports.default = _default;

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);

      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies

        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
},{"./index.js":"node_modules/d3-geo/src/clip/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian.js");

var _circle = require("../circle.js");

var _math = require("../math.js");

var _pointEqual = _interopRequireDefault(require("../pointEqual.js"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius) {
  var cr = (0, _math.cos)(radius),
      delta = 6 * _math.radians,
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case


  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();

        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || (0, _pointEqual.default)(point0, point2) || (0, _pointEqual.default)(point1, point2)) point1[2] = 1;
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }

        if (v && (!point0 || !(0, _pointEqual.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);
    if (t2 < 0) return;
    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return (0, _index.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
}
},{"../cartesian.js":"node_modules/d3-geo/src/cartesian.js","../circle.js":"node_modules/d3-geo/src/circle.js","../math.js":"node_modules/d3-geo/src/math.js","../pointEqual.js":"node_modules/d3-geo/src/pointEqual.js","./index.js":"node_modules/d3-geo/src/clip/index.js"}],"node_modules/d3-geo/src/clip/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
},{}],"node_modules/d3-geo/src/clip/rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clipRectangle;

var _math = require("../math.js");

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _rejoin = _interopRequireDefault(require("./rejoin.js"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if ((0, _line.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./buffer.js":"node_modules/d3-geo/src/clip/buffer.js","./line.js":"node_modules/d3-geo/src/clip/line.js","./rejoin.js":"node_modules/d3-geo/src/clip/rejoin.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/d3-geo/src/clip/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("./rectangle.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;
  return clip = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = (0, _rectangle.default)(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}
},{"./rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js"}],"node_modules/d3-geo/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;
var lengthStream = {
  sphere: _noop.default,
  point: _noop.default,
  lineStart: lengthLineStart,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

function _default(object) {
  lengthSum.reset();
  (0, _stream.default)(object, lengthStream);
  return +lengthSum;
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./math.js":"node_modules/d3-geo/src/math.js","./noop.js":"node_modules/d3-geo/src/noop.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _length = _interopRequireDefault(require("./length.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = {
  type: "LineString",
  coordinates: coordinates
};

function _default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length.default)(object);
}
},{"./length.js":"node_modules/d3-geo/src/length.js"}],"node_modules/d3-geo/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _polygonContains = _interopRequireDefault(require("./polygonContains.js"));

var _distance = _interopRequireDefault(require("./distance.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function (object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function (object, point) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;

    return false;
  }
};
var containsGeometryType = {
  Sphere: function () {
    return true;
  },
  Point: function (object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPoint(coordinates[i], point)) return true;

    return false;
  },
  LineString: function (object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsLine(coordinates[i], point)) return true;

    return false;
  },
  Polygon: function (object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;

    return false;
  },
  GeometryCollection: function (object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) if (containsGeometry(geometries[i], point)) return true;

    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;

  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = (0, _distance.default)(coordinates[i], point);
    if (bo === 0) return true;

    if (i > 0) {
      ab = (0, _distance.default)(coordinates[i], coordinates[i - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < _math.epsilon2 * ab) return true;
    }

    ao = bo;
  }

  return false;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

function _default(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
}
},{"./polygonContains.js":"node_modules/d3-geo/src/polygonContains.js","./distance.js":"node_modules/d3-geo/src/distance.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = require("d3-array");

var _math = require("./math.js");

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}
},{"d3-array":"node_modules/d3-array/src/index.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

function _default(a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);
  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };
  interpolate.distance = d;
  return interpolate;
}
},{"./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-geo/src/path/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder.js"));

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder.default)(),
    areaRingSum = (0, _adder.default)(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var _default = areaStream;
exports.default = _default;
},{"../adder.js":"node_modules/d3-geo/src/adder.js","../math.js":"node_modules/d3-geo/src/math.js","../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default,
  result: function () {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

var _default = boundsStream;
exports.default = _default;
},{"../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

var _default = centroidStream;
exports.default = _default;
},{"../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/path/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathContext;

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, _math.tau);

          break;
        }
    }
  },
  result: _noop.default
};
},{"../math.js":"node_modules/d3-geo/src/math.js","../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/measure.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder.js"));

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;
var lengthStream = {
  point: _noop.default,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop.default;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var _default = lengthStream;
exports.default = _default;
},{"../adder.js":"node_modules/d3-geo/src/adder.js","../math.js":"node_modules/d3-geo/src/math.js","../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathString;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
},{}],"node_modules/d3-geo/src/path/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("../identity.js"));

var _stream = _interopRequireDefault(require("../stream.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _bounds = _interopRequireDefault(require("./bounds.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _context = _interopRequireDefault(require("./context.js"));

var _measure = _interopRequireDefault(require("./measure.js"));

var _string = _interopRequireDefault(require("./string.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream.default)(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream.default)(object, projectionStream(_area.default));
    return _area.default.result();
  };

  path.measure = function (object) {
    (0, _stream.default)(object, projectionStream(_measure.default));
    return _measure.default.result();
  };

  path.bounds = function (object) {
    (0, _stream.default)(object, projectionStream(_bounds.default));
    return _bounds.default.result();
  };

  path.centroid = function (object) {
    (0, _stream.default)(object, projectionStream(_centroid.default));
    return _centroid.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string.default()) : new _context.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
},{"../identity.js":"node_modules/d3-geo/src/identity.js","../stream.js":"node_modules/d3-geo/src/stream.js","./area.js":"node_modules/d3-geo/src/path/area.js","./bounds.js":"node_modules/d3-geo/src/path/bounds.js","./centroid.js":"node_modules/d3-geo/src/path/centroid.js","./context.js":"node_modules/d3-geo/src/path/context.js","./measure.js":"node_modules/d3-geo/src/path/measure.js","./string.js":"node_modules/d3-geo/src/path/string.js"}],"node_modules/d3-geo/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.transformer = transformer;

function _default(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};
},{}],"node_modules/d3-geo/src/projection/fit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;
exports.fitWidth = fitWidth;
exports.fitHeight = fitHeight;

var _stream = _interopRequireDefault(require("../stream.js"));

var _bounds = _interopRequireDefault(require("../path/bounds.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  (0, _stream.default)(object, projection.stream(_bounds.default));
  fitBounds(_bounds.default.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
},{"../stream.js":"node_modules/d3-geo/src/stream.js","../path/bounds.js":"node_modules/d3-geo/src/path/bounds.js"}],"node_modules/d3-geo/src/projection/resample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian.js");

var _math = require("../math.js");

var _transform = require("../transform.js");

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function _default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
},{"../cartesian.js":"node_modules/d3-geo/src/cartesian.js","../math.js":"node_modules/d3-geo/src/math.js","../transform.js":"node_modules/d3-geo/src/transform.js"}],"node_modules/d3-geo/src/projection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = _interopRequireDefault(require("../clip/antimeridian.js"));

var _circle = _interopRequireDefault(require("../clip/circle.js"));

var _rectangle = _interopRequireDefault(require("../clip/rectangle.js"));

var _compose = _interopRequireDefault(require("../compose.js"));

var _identity = _interopRequireDefault(require("../identity.js"));

var _math = require("../math.js");

var _rotation = require("../rotation.js");

var _transform = require("../transform.js");

var _fit = require("./fit.js");

var _resample = _interopRequireDefault(require("./resample.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function (x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function transformRotate(rotate) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  var cosAlpha = (0, _math.cos)(alpha),
      sinAlpha = (0, _math.sin)(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate angle
  sx = 1,
      // reflectX
  sy = 1,
      // reflectX
  theta = null,
      preclip = _antimeridian.default,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity.default,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;
  };

  projection.reflectX = function (_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };

  projection.reflectY = function (_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = (0, _compose.default)(project, transform);
    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);
    projectResample = (0, _resample.default)(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
},{"../clip/antimeridian.js":"node_modules/d3-geo/src/clip/antimeridian.js","../clip/circle.js":"node_modules/d3-geo/src/clip/circle.js","../clip/rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js","../compose.js":"node_modules/d3-geo/src/compose.js","../identity.js":"node_modules/d3-geo/src/identity.js","../math.js":"node_modules/d3-geo/src/math.js","../rotation.js":"node_modules/d3-geo/src/rotation.js","../transform.js":"node_modules/d3-geo/src/transform.js","./fit.js":"node_modules/d3-geo/src/projection/fit.js","./resample.js":"node_modules/d3-geo/src/projection/resample.js"}],"node_modules/d3-geo/src/projection/conic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicProjection = conicProjection;

var _math = require("../math.js");

var _index = require("./index.js");

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/cylindricalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = require("../math.js");

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}
},{"../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/conicEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEqualAreaRaw = conicEqualAreaRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _cylindricalEqualArea = require("./cylindricalEqualArea.js");

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y,
        l = (0, _math.atan2)(x, (0, _math.abs)(r0y)) * (0, _math.sign)(r0y);
    if (r0y * n < 0) l -= _math.pi * (0, _math.sign)(x) * (0, _math.sign)(r0y);
    return [l / n, (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./conic.js":"node_modules/d3-geo/src/projection/conic.js","./cylindricalEqualArea.js":"node_modules/d3-geo/src/projection/cylindricalEqualArea.js"}],"node_modules/d3-geo/src/projection/albers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _conicEqualArea.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
},{"./conicEqualArea.js":"node_modules/d3-geo/src/projection/conicEqualArea.js"}],"node_modules/d3-geo/src/projection/albersUsa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("../math.js");

var _albers = _interopRequireDefault(require("./albers.js"));

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea.js"));

var _fit = require("./fit.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function _default() {
  var cache,
      cacheStream,
      lower48 = (0, _albers.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./albers.js":"node_modules/d3-geo/src/projection/albers.js","./conicEqualArea.js":"node_modules/d3-geo/src/projection/conicEqualArea.js","./fit.js":"node_modules/d3-geo/src/projection/fit.js"}],"node_modules/d3-geo/src/projection/azimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = require("../math.js");

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}
},{"../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/azimuthalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEqualAreaRaw = void 0;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});
exports.azimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

function _default() {
  return (0, _index.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/azimuthalEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEquidistantRaw = void 0;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});
exports.azimuthalEquidistantRaw = azimuthalEquidistantRaw;
azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

function _default() {
  return (0, _index.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/mercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorRaw = mercatorRaw;
exports.default = _default;
exports.mercatorProjection = mercatorProjection;

var _math = require("../math.js");

var _rotation = _interopRequireDefault(require("../rotation.js"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function _default() {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
}

function mercatorProjection(project) {
  var m = (0, _index.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
},{"../math.js":"node_modules/d3-geo/src/math.js","../rotation.js":"node_modules/d3-geo/src/rotation.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/conicConformal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicConformalRaw = conicConformalRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _mercator = require("./mercator.js");

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;
  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }

    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy),
        l = (0, _math.atan2)(x, (0, _math.abs)(fy)) * (0, _math.sign)(fy);
    if (fy * n < 0) l -= _math.pi * (0, _math.sign)(x) * (0, _math.sign)(fy);
    return [l / n, 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./conic.js":"node_modules/d3-geo/src/projection/conic.js","./mercator.js":"node_modules/d3-geo/src/projection/mercator.js"}],"node_modules/d3-geo/src/projection/equirectangular.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equirectangularRaw = equirectangularRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function _default() {
  return (0, _index.default)(equirectangularRaw).scale(152.63);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/conicEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEquidistantRaw = conicEquidistantRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _equirectangular = require("./equirectangular.js");

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y,
        l = (0, _math.atan2)(x, (0, _math.abs)(gy)) * (0, _math.sign)(gy);
    if (gy * n < 0) l -= _math.pi * (0, _math.sign)(x) * (0, _math.sign)(gy);
    return [l / n, g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./conic.js":"node_modules/d3-geo/src/projection/conic.js","./equirectangular.js":"node_modules/d3-geo/src/projection/equirectangular.js"}],"node_modules/d3-geo/src/projection/equalEarth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalEarthRaw = equalEarthRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = (0, _math.sqrt)(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if ((0, _math.abs)(delta) < _math.epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];
};

function _default() {
  return (0, _index.default)(equalEarthRaw).scale(177.158);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/gnomonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gnomonicRaw = gnomonicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

function _default() {
  return (0, _index.default)(gnomonicRaw).scale(144.049).clipAngle(60);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("../clip/rectangle.js"));

var _identity = _interopRequireDefault(require("../identity.js"));

var _transform = require("../transform.js");

var _fit = require("./fit.js");

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      // scale, translate and reflect
  alpha = 0,
      ca,
      sa,
      // angle
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  kx = 1,
      ky = 1,
      transform = (0, _transform.transformer)({
    point: function (x, y) {
      var p = projection([x, y]);
      this.stream.point(p[0], p[1]);
    }
  }),
      postclip = _identity.default,
      cache,
      cacheStream;

  function reset() {
    kx = k * sx;
    ky = k * sy;
    cache = cacheStream = null;
    return projection;
  }

  function projection(p) {
    var x = p[0] * kx,
        y = p[1] * ky;

    if (alpha) {
      var t = y * ca - x * sa;
      x = x * ca + y * sa;
      y = t;
    }

    return [x + tx, y + ty];
  }

  projection.invert = function (p) {
    var x = p[0] - tx,
        y = p[1] - ty;

    if (alpha) {
      var t = y * ca + x * sa;
      x = x * ca - y * sa;
      y = t;
    }

    return [x / kx, y / ky];
  };

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, reset()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, sa = (0, _math.sin)(alpha), ca = (0, _math.cos)(alpha), reset()) : alpha * _math.degrees;
  };

  projection.reflectX = function (_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
  };

  projection.reflectY = function (_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  return projection;
}
},{"../clip/rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js","../identity.js":"node_modules/d3-geo/src/identity.js","../transform.js":"node_modules/d3-geo/src/transform.js","./fit.js":"node_modules/d3-geo/src/projection/fit.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/naturalEarth1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth1Raw = naturalEarth1Raw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function _default() {
  return (0, _index.default)(naturalEarth1Raw).scale(175.295);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/orthographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orthographicRaw = orthographicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

function _default() {
  return (0, _index.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/stereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stereographicRaw = stereographicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

function _default() {
  return (0, _index.default)(stereographicRaw).scale(250).clipAngle(142);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/transverseMercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transverseMercatorRaw = transverseMercatorRaw;
exports.default = _default;

var _math = require("../math.js");

var _mercator = require("./mercator.js");

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

function _default() {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./mercator.js":"node_modules/d3-geo/src/projection/mercator.js"}],"node_modules/d3-geo/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _bounds.default;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "geoClipAntimeridian", {
  enumerable: true,
  get: function () {
    return _antimeridian.default;
  }
});
Object.defineProperty(exports, "geoClipCircle", {
  enumerable: true,
  get: function () {
    return _circle2.default;
  }
});
Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "geoClipRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function () {
    return _distance.default;
  }
});
Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function () {
    return _graticule.default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function () {
    return _graticule.graticule10;
  }
});
Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.default;
  }
});
Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});
Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function () {
    return _albers.default;
  }
});
Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function () {
    return _albersUsa.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function () {
    return _conicConformal.default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function () {
    return _conicConformal.conicConformalRaw;
  }
});
Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.conicEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoEqualEarth", {
  enumerable: true,
  get: function () {
    return _equalEarth.default;
  }
});
Object.defineProperty(exports, "geoEqualEarthRaw", {
  enumerable: true,
  get: function () {
    return _equalEarth.equalEarthRaw;
  }
});
Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function () {
    return _equirectangular.default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function () {
    return _equirectangular.equirectangularRaw;
  }
});
Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function () {
    return _gnomonic.default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function () {
    return _gnomonic.gnomonicRaw;
  }
});
Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function () {
    return _index2.projectionMutator;
  }
});
Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function () {
    return _mercator.default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function () {
    return _mercator.mercatorRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function () {
    return _orthographic.default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function () {
    return _orthographic.orthographicRaw;
  }
});
Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function () {
    return _stereographic.default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function () {
    return _stereographic.stereographicRaw;
  }
});
Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function () {
    return _transverseMercator.default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function () {
    return _transverseMercator.transverseMercatorRaw;
  }
});
Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function () {
    return _rotation.default;
  }
});
Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});

var _area = _interopRequireDefault(require("./area.js"));

var _bounds = _interopRequireDefault(require("./bounds.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _circle = _interopRequireDefault(require("./circle.js"));

var _antimeridian = _interopRequireDefault(require("./clip/antimeridian.js"));

var _circle2 = _interopRequireDefault(require("./clip/circle.js"));

var _extent = _interopRequireDefault(require("./clip/extent.js"));

var _rectangle = _interopRequireDefault(require("./clip/rectangle.js"));

var _contains = _interopRequireDefault(require("./contains.js"));

var _distance = _interopRequireDefault(require("./distance.js"));

var _graticule = _interopRequireWildcard(require("./graticule.js"));

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

var _length = _interopRequireDefault(require("./length.js"));

var _index = _interopRequireDefault(require("./path/index.js"));

var _albers = _interopRequireDefault(require("./projection/albers.js"));

var _albersUsa = _interopRequireDefault(require("./projection/albersUsa.js"));

var _azimuthalEqualArea = _interopRequireWildcard(require("./projection/azimuthalEqualArea.js"));

var _azimuthalEquidistant = _interopRequireWildcard(require("./projection/azimuthalEquidistant.js"));

var _conicConformal = _interopRequireWildcard(require("./projection/conicConformal.js"));

var _conicEqualArea = _interopRequireWildcard(require("./projection/conicEqualArea.js"));

var _conicEquidistant = _interopRequireWildcard(require("./projection/conicEquidistant.js"));

var _equalEarth = _interopRequireWildcard(require("./projection/equalEarth.js"));

var _equirectangular = _interopRequireWildcard(require("./projection/equirectangular.js"));

var _gnomonic = _interopRequireWildcard(require("./projection/gnomonic.js"));

var _identity = _interopRequireDefault(require("./projection/identity.js"));

var _index2 = _interopRequireWildcard(require("./projection/index.js"));

var _mercator = _interopRequireWildcard(require("./projection/mercator.js"));

var _naturalEarth = _interopRequireWildcard(require("./projection/naturalEarth1.js"));

var _orthographic = _interopRequireWildcard(require("./projection/orthographic.js"));

var _stereographic = _interopRequireWildcard(require("./projection/stereographic.js"));

var _transverseMercator = _interopRequireWildcard(require("./projection/transverseMercator.js"));

var _rotation = _interopRequireDefault(require("./rotation.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

var _transform = _interopRequireDefault(require("./transform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area.js":"node_modules/d3-geo/src/area.js","./bounds.js":"node_modules/d3-geo/src/bounds.js","./centroid.js":"node_modules/d3-geo/src/centroid.js","./circle.js":"node_modules/d3-geo/src/circle.js","./clip/antimeridian.js":"node_modules/d3-geo/src/clip/antimeridian.js","./clip/circle.js":"node_modules/d3-geo/src/clip/circle.js","./clip/extent.js":"node_modules/d3-geo/src/clip/extent.js","./clip/rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js","./contains.js":"node_modules/d3-geo/src/contains.js","./distance.js":"node_modules/d3-geo/src/distance.js","./graticule.js":"node_modules/d3-geo/src/graticule.js","./interpolate.js":"node_modules/d3-geo/src/interpolate.js","./length.js":"node_modules/d3-geo/src/length.js","./path/index.js":"node_modules/d3-geo/src/path/index.js","./projection/albers.js":"node_modules/d3-geo/src/projection/albers.js","./projection/albersUsa.js":"node_modules/d3-geo/src/projection/albersUsa.js","./projection/azimuthalEqualArea.js":"node_modules/d3-geo/src/projection/azimuthalEqualArea.js","./projection/azimuthalEquidistant.js":"node_modules/d3-geo/src/projection/azimuthalEquidistant.js","./projection/conicConformal.js":"node_modules/d3-geo/src/projection/conicConformal.js","./projection/conicEqualArea.js":"node_modules/d3-geo/src/projection/conicEqualArea.js","./projection/conicEquidistant.js":"node_modules/d3-geo/src/projection/conicEquidistant.js","./projection/equalEarth.js":"node_modules/d3-geo/src/projection/equalEarth.js","./projection/equirectangular.js":"node_modules/d3-geo/src/projection/equirectangular.js","./projection/gnomonic.js":"node_modules/d3-geo/src/projection/gnomonic.js","./projection/identity.js":"node_modules/d3-geo/src/projection/identity.js","./projection/index.js":"node_modules/d3-geo/src/projection/index.js","./projection/mercator.js":"node_modules/d3-geo/src/projection/mercator.js","./projection/naturalEarth1.js":"node_modules/d3-geo/src/projection/naturalEarth1.js","./projection/orthographic.js":"node_modules/d3-geo/src/projection/orthographic.js","./projection/stereographic.js":"node_modules/d3-geo/src/projection/stereographic.js","./projection/transverseMercator.js":"node_modules/d3-geo/src/projection/transverseMercator.js","./rotation.js":"node_modules/d3-geo/src/rotation.js","./stream.js":"node_modules/d3-geo/src/stream.js","./transform.js":"node_modules/d3-geo/src/transform.js"}],"node_modules/d3-hierarchy/src/cluster.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) node = children[0];

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) node = children[children.length - 1];

  return node;
}

function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/count.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function _default() {
  return this.eachAfter(count);
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;

  do {
    current = next.reverse(), next = [];

    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      children,
      i;

  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;

  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }

  while (node = next.pop()) {
    callback(node);
  }

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) sum += children[i].value;

    node.value = sum;
  });
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/ancestors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/descendants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/leaves.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/links.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = _interopRequireDefault(require("./count.js"));

var _each = _interopRequireDefault(require("./each.js"));

var _eachBefore = _interopRequireDefault(require("./eachBefore.js"));

var _eachAfter = _interopRequireDefault(require("./eachAfter.js"));

var _sum = _interopRequireDefault(require("./sum.js"));

var _sort = _interopRequireDefault(require("./sort.js"));

var _path = _interopRequireDefault(require("./path.js"));

var _ancestors = _interopRequireDefault(require("./ancestors.js"));

var _descendants = _interopRequireDefault(require("./descendants.js"));

var _leaves = _interopRequireDefault(require("./leaves.js"));

var _links = _interopRequireDefault(require("./links.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;
  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;

    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do node.height = height; while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count.default,
  each: _each.default,
  eachAfter: _eachAfter.default,
  eachBefore: _eachBefore.default,
  sum: _sum.default,
  sort: _sort.default,
  path: _path.default,
  ancestors: _ancestors.default,
  descendants: _descendants.default,
  leaves: _leaves.default,
  links: _links.default,
  copy: node_copy
};
},{"./count.js":"node_modules/d3-hierarchy/src/hierarchy/count.js","./each.js":"node_modules/d3-hierarchy/src/hierarchy/each.js","./eachBefore.js":"node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","./eachAfter.js":"node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","./sum.js":"node_modules/d3-hierarchy/src/hierarchy/sum.js","./sort.js":"node_modules/d3-hierarchy/src/hierarchy/sort.js","./path.js":"node_modules/d3-hierarchy/src/hierarchy/path.js","./ancestors.js":"node_modules/d3-hierarchy/src/hierarchy/ancestors.js","./descendants.js":"node_modules/d3-hierarchy/src/hierarchy/descendants.js","./leaves.js":"node_modules/d3-hierarchy/src/hierarchy/leaves.js","./links.js":"node_modules/d3-hierarchy/src/hierarchy/links.js"}],"node_modules/d3-hierarchy/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
},{}],"node_modules/d3-hierarchy/src/pack/enclose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array.js");

function _default(circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
},{"../array.js":"node_modules/d3-hierarchy/src/array.js"}],"node_modules/d3-hierarchy/src/pack/siblings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packEnclose = packEnclose;
exports.default = _default;

var _enclose = _interopRequireDefault(require("./enclose.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) a.push(c._);

  c = (0, _enclose.default)(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function _default(circles) {
  packEnclose(circles);
  return circles;
}
},{"./enclose.js":"node_modules/d3-hierarchy/src/pack/enclose.js"}],"node_modules/d3-hierarchy/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optional = optional;
exports.required = required;

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
},{}],"node_modules/d3-hierarchy/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constantZero = constantZero;
exports.default = _default;

function constantZero() {
  return 0;
}

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-hierarchy/src/pack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _siblings = require("./siblings.js");

var _accessors = require("../accessors.js");

var _constant = _interopRequireWildcard(require("../constant.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function _default() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant.default)(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
},{"./siblings.js":"node_modules/d3-hierarchy/src/pack/siblings.js","../accessors.js":"node_modules/d3-hierarchy/src/accessors.js","../constant.js":"node_modules/d3-hierarchy/src/constant.js"}],"node_modules/d3-hierarchy/src/treemap/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
},{}],"node_modules/d3-hierarchy/src/treemap/dice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
},{}],"node_modules/d3-hierarchy/src/partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./treemap/round.js"));

var _dice = _interopRequireDefault(require("./treemap/dice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
},{"./treemap/round.js":"node_modules/d3-hierarchy/src/treemap/round.js","./treemap/dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js"}],"node_modules/d3-hierarchy/src/stratify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessors = require("./accessors.js");

var _index = require("./hierarchy/index.js");

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function _default() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);

      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
}
},{"./accessors.js":"node_modules/d3-hierarchy/src/accessors.js","./hierarchy/index.js":"node_modules/d3-hierarchy/src/hierarchy/index.js"}],"node_modules/d3-hierarchy/src/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./hierarchy/index.js");

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
},{"./hierarchy/index.js":"node_modules/d3-hierarchy/src/hierarchy/index.js"}],"node_modules/d3-hierarchy/src/treemap/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
},{}],"node_modules/d3-hierarchy/src/treemap/squarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squarifyRatio = squarifyRatio;
exports.default = exports.phi = void 0;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = (1 + Math.sqrt(5)) / 2;
exports.phi = phi;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) (0, _dice.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var _default = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

exports.default = _default;
},{"./dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js"}],"node_modules/d3-hierarchy/src/treemap/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./round.js"));

var _squarify = _interopRequireDefault(require("./squarify.js"));

var _accessors = require("../accessors.js");

var _constant = _interopRequireWildcard(require("../constant.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var tile = _squarify.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
}
},{"./round.js":"node_modules/d3-hierarchy/src/treemap/round.js","./squarify.js":"node_modules/d3-hierarchy/src/treemap/squarify.js","../accessors.js":"node_modules/d3-hierarchy/src/accessors.js","../constant.js":"node_modules/d3-hierarchy/src/constant.js"}],"node_modules/d3-hierarchy/src/treemap/binary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
},{}],"node_modules/d3-hierarchy/src/treemap/sliceDice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice.default : _dice.default)(parent, x0, y0, x1, y1);
}
},{"./dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js"}],"node_modules/d3-hierarchy/src/treemap/resquarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

var _squarify = require("./squarify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;

        if (row.dice) (0, _dice.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

exports.default = _default;
},{"./dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js","./squarify.js":"node_modules/d3-hierarchy/src/treemap/squarify.js"}],"node_modules/d3-hierarchy/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function () {
    return _cluster.default;
  }
});
Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function () {
    return _siblings.default;
  }
});
Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function () {
    return _enclose.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _tree.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function () {
    return _binary.default;
  }
});
Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function () {
    return _dice.default;
  }
});
Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function () {
    return _slice.default;
  }
});
Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function () {
    return _sliceDice.default;
  }
});
Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function () {
    return _squarify.default;
  }
});
Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function () {
    return _resquarify.default;
  }
});

var _cluster = _interopRequireDefault(require("./cluster.js"));

var _index = _interopRequireDefault(require("./hierarchy/index.js"));

var _index2 = _interopRequireDefault(require("./pack/index.js"));

var _siblings = _interopRequireDefault(require("./pack/siblings.js"));

var _enclose = _interopRequireDefault(require("./pack/enclose.js"));

var _partition = _interopRequireDefault(require("./partition.js"));

var _stratify = _interopRequireDefault(require("./stratify.js"));

var _tree = _interopRequireDefault(require("./tree.js"));

var _index3 = _interopRequireDefault(require("./treemap/index.js"));

var _binary = _interopRequireDefault(require("./treemap/binary.js"));

var _dice = _interopRequireDefault(require("./treemap/dice.js"));

var _slice = _interopRequireDefault(require("./treemap/slice.js"));

var _sliceDice = _interopRequireDefault(require("./treemap/sliceDice.js"));

var _squarify = _interopRequireDefault(require("./treemap/squarify.js"));

var _resquarify = _interopRequireDefault(require("./treemap/resquarify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./cluster.js":"node_modules/d3-hierarchy/src/cluster.js","./hierarchy/index.js":"node_modules/d3-hierarchy/src/hierarchy/index.js","./pack/index.js":"node_modules/d3-hierarchy/src/pack/index.js","./pack/siblings.js":"node_modules/d3-hierarchy/src/pack/siblings.js","./pack/enclose.js":"node_modules/d3-hierarchy/src/pack/enclose.js","./partition.js":"node_modules/d3-hierarchy/src/partition.js","./stratify.js":"node_modules/d3-hierarchy/src/stratify.js","./tree.js":"node_modules/d3-hierarchy/src/tree.js","./treemap/index.js":"node_modules/d3-hierarchy/src/treemap/index.js","./treemap/binary.js":"node_modules/d3-hierarchy/src/treemap/binary.js","./treemap/dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./treemap/slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js","./treemap/sliceDice.js":"node_modules/d3-hierarchy/src/treemap/sliceDice.js","./treemap/squarify.js":"node_modules/d3-hierarchy/src/treemap/squarify.js","./treemap/resquarify.js":"node_modules/d3-hierarchy/src/treemap/resquarify.js"}],"node_modules/d3-polygon/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}
},{}],"node_modules/d3-polygon/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}
},{}],"node_modules/d3-polygon/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function _default(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}
},{}],"node_modules/d3-polygon/src/hull.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cross = _interopRequireDefault(require("./cross.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
} // Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.


function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && (0, _cross.default)(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;

    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function _default(points) {
  if ((n = points.length) < 3) return null;
  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];

  sortedPoints.sort(lexicographicOrder);

  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints); // Construct the hull polygon, removing possible duplicate endpoints.

  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = []; // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.

  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);

  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}
},{"./cross.js":"node_modules/d3-polygon/src/cross.js"}],"node_modules/d3-polygon/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0],
      y = point[1],
      x0 = p[0],
      y0 = p[1],
      x1,
      y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}
},{}],"node_modules/d3-polygon/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}
},{}],"node_modules/d3-polygon/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "polygonArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "polygonCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "polygonHull", {
  enumerable: true,
  get: function () {
    return _hull.default;
  }
});
Object.defineProperty(exports, "polygonContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "polygonLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});

var _area = _interopRequireDefault(require("./area.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _hull = _interopRequireDefault(require("./hull.js"));

var _contains = _interopRequireDefault(require("./contains.js"));

var _length = _interopRequireDefault(require("./length.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area.js":"node_modules/d3-polygon/src/area.js","./centroid.js":"node_modules/d3-polygon/src/centroid.js","./hull.js":"node_modules/d3-polygon/src/hull.js","./contains.js":"node_modules/d3-polygon/src/contains.js","./length.js":"node_modules/d3-polygon/src/length.js"}],"node_modules/d3-random/src/defaultSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return Math.random();
}
},{}],"node_modules/d3-random/src/uniform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;else max -= min;
    return function () {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;
  return randomUniform;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function () {
      var y; // If available, use the second previously-generated uniform random.

      if (x != null) y = x, x = null; // Otherwise, generate a new x and y.
      else do {
          x = source() * 2 - 1;
          y = source() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;
  return randomNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/logNormal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _normal = _interopRequireDefault(require("./normal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = _normal.default.source(source).apply(this, arguments);

    return function () {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;
  return randomLogNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js","./normal":"node_modules/d3-random/src/normal.js"}],"node_modules/d3-random/src/irwinHall.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function () {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();

      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;
  return randomIrwinHall;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/bates.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = _irwinHall.default.source(source)(n);

    return function () {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;
  return randomBates;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js","./irwinHall":"node_modules/d3-random/src/irwinHall.js"}],"node_modules/d3-random/src/exponential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function () {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;
  return randomExponential;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _uniform.default;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _normal.default;
  }
});
Object.defineProperty(exports, "randomLogNormal", {
  enumerable: true,
  get: function () {
    return _logNormal.default;
  }
});
Object.defineProperty(exports, "randomBates", {
  enumerable: true,
  get: function () {
    return _bates.default;
  }
});
Object.defineProperty(exports, "randomIrwinHall", {
  enumerable: true,
  get: function () {
    return _irwinHall.default;
  }
});
Object.defineProperty(exports, "randomExponential", {
  enumerable: true,
  get: function () {
    return _exponential.default;
  }
});

var _uniform = _interopRequireDefault(require("./uniform"));

var _normal = _interopRequireDefault(require("./normal"));

var _logNormal = _interopRequireDefault(require("./logNormal"));

var _bates = _interopRequireDefault(require("./bates"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

var _exponential = _interopRequireDefault(require("./exponential"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./uniform":"node_modules/d3-random/src/uniform.js","./normal":"node_modules/d3-random/src/normal.js","./logNormal":"node_modules/d3-random/src/logNormal.js","./bates":"node_modules/d3-random/src/bates.js","./irwinHall":"node_modules/d3-random/src/irwinHall.js","./exponential":"node_modules/d3-random/src/exponential.js"}],"node_modules/d3-scale/src/init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRange = initRange;
exports.initInterpolator = initInterpolator;

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.interpolator(domain);
      break;

    default:
      this.interpolator(interpolator).domain(domain);
      break;
  }

  return this;
}
},{}],"node_modules/d3-scale/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var map = array.map;
exports.map = map;
var slice = array.slice;
exports.slice = slice;
},{}],"node_modules/d3-scale/src/ordinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _d3Collection = require("d3-collection");

var _array = require("./array");

var _init = require("./init");

var implicit = {
  name: "implicit"
};
exports.implicit = implicit;

function ordinal() {
  var index = (0, _d3Collection.map)(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = (0, _d3Collection.map)();
    var i = -1,
        n = _.length,
        d,
        key;

    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-collection":"node_modules/d3-collection/src/index.js","./array":"node_modules/d3-scale/src/array.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/band.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _init = require("./init");

var _ordinal = _interopRequireDefault(require("./ordinal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return _init.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
},{"d3-array":"node_modules/d3-array/src/index.js","./init":"node_modules/d3-scale/src/init.js","./ordinal":"node_modules/d3-scale/src/ordinal.js"}],"node_modules/d3-scale/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-scale/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"node_modules/d3-scale/src/continuous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.copy = copy;
exports.transformer = transformer;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0],
      b = domain[domain.length - 1],
      t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = _array.slice.call(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","./array":"node_modules/d3-scale/src/array.js","./constant":"node_modules/d3-scale/src/constant.js","./number":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-scale/src/tickFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(start, stop, count, specifier) {
  var step = (0, _d3Array.tickStep)(start, stop, count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-format":"node_modules/d3-format/src/index.js"}],"node_modules/d3-scale/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = (0, _d3Array.tickIncrement)(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  _init.initRange.apply(scale, arguments);

  return linearish(scale);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./tickFormat":"node_modules/d3-scale/src/tickFormat.js"}],"node_modules/d3-scale/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _array = require("./array");

var _linear = require("./linear");

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? _array.map.call(domain, _number.default) : [0, 1];
  return (0, _linear.linearish)(scale);
}
},{"./array":"node_modules/d3-scale/src/array.js","./linear":"node_modules/d3-scale/src/linear.js","./number":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-scale/src/nice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"node_modules/d3-scale/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggish = loggish;
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _nice = _interopRequireDefault(require("./nice"));

var _continuous = require("./continuous");

var _init = require("./init");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish((0, _continuous.transformer)()).domain([1, 10]);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log()).base(scale.base());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-format":"node_modules/d3-format/src/index.js","./nice":"node_modules/d3-scale/src/nice.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/symlog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symlogish = symlogish;
exports.default = symlog;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return (0, _linear.linearish)(scale);
}

function symlog() {
  var scale = symlogish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());
  };

  return _init.initRange.apply(scale, arguments);
}
},{"./linear":"node_modules/d3-scale/src/linear.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powish = powish;
exports.default = pow;
exports.sqrt = sqrt;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(_continuous.identity, _continuous.identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return (0, _linear.linearish)(scale);
}

function pow() {
  var scale = powish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow()).exponent(scale.exponent());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
},{"./linear":"node_modules/d3-scale/src/linear.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-scale/src/array.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _array = require("./array");

var _linear = require("./linear");

var _init = require("./init");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-scale/src/array.js","./linear":"node_modules/d3-scale/src/linear.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/threshold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-scale/src/array.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-time/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
},{}],"node_modules/d3-time/src/millisecond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationWeek = exports.durationDay = exports.durationHour = exports.durationMinute = exports.durationSecond = void 0;
var durationSecond = 1e3;
exports.durationSecond = durationSecond;
var durationMinute = 6e4;
exports.durationMinute = durationMinute;
var durationHour = 36e5;
exports.durationHour = durationHour;
var durationDay = 864e5;
exports.durationDay = durationDay;
var durationWeek = 6048e5;
exports.durationWeek = durationWeek;
},{}],"node_modules/d3-time/src/second.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/minute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/hour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond - date.getMinutes() * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/day.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.days = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/week.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saturdays = exports.fridays = exports.thursdays = exports.wednesdays = exports.tuesdays = exports.mondays = exports.sundays = exports.saturday = exports.friday = exports.thursday = exports.wednesday = exports.tuesday = exports.monday = exports.sunday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/month.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/year.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/utcMinute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcHour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcDay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcWeek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcSaturdays = exports.utcFridays = exports.utcThursdays = exports.utcWednesdays = exports.utcTuesdays = exports.utcMondays = exports.utcSundays = exports.utcSaturday = exports.utcFriday = exports.utcThursday = exports.utcWednesday = exports.utcTuesday = exports.utcMonday = exports.utcSunday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcMonth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/utcYear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval.js"));

var _millisecond = _interopRequireWildcard(require("./millisecond.js"));

var _second = _interopRequireWildcard(require("./second.js"));

var _minute = _interopRequireWildcard(require("./minute.js"));

var _hour = _interopRequireWildcard(require("./hour.js"));

var _day = _interopRequireWildcard(require("./day.js"));

var _week = require("./week.js");

var _month = _interopRequireWildcard(require("./month.js"));

var _year = _interopRequireWildcard(require("./year.js"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute.js"));

var _utcHour = _interopRequireWildcard(require("./utcHour.js"));

var _utcDay = _interopRequireWildcard(require("./utcDay.js"));

var _utcWeek = require("./utcWeek.js");

var _utcMonth = _interopRequireWildcard(require("./utcMonth.js"));

var _utcYear = _interopRequireWildcard(require("./utcYear.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./interval.js":"node_modules/d3-time/src/interval.js","./millisecond.js":"node_modules/d3-time/src/millisecond.js","./second.js":"node_modules/d3-time/src/second.js","./minute.js":"node_modules/d3-time/src/minute.js","./hour.js":"node_modules/d3-time/src/hour.js","./day.js":"node_modules/d3-time/src/day.js","./week.js":"node_modules/d3-time/src/week.js","./month.js":"node_modules/d3-time/src/month.js","./year.js":"node_modules/d3-time/src/year.js","./utcMinute.js":"node_modules/d3-time/src/utcMinute.js","./utcHour.js":"node_modules/d3-time/src/utcHour.js","./utcDay.js":"node_modules/d3-time/src/utcDay.js","./utcWeek.js":"node_modules/d3-time/src/utcWeek.js","./utcMonth.js":"node_modules/d3-time/src/utcMonth.js","./utcYear.js":"node_modules/d3-time/src/utcYear.js"}],"node_modules/d3-time-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _d3Time = require("d3-time");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : (0, _d3Time.utcMonday)(week);
          week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : (0, _d3Time.timeMonday)(week);
          week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _d3Time.timeDay.count((0, _d3Time.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_d3Time.timeSunday.count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(_d3Time.timeThursday.count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_d3Time.timeMonday.count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _d3Time.utcDay.count((0, _d3Time.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_d3Time.utcSunday.count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(_d3Time.utcThursday.count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_d3Time.utcMonday.count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
},{"d3-time":"node_modules/d3-time/src/index.js"}],"node_modules/d3-time-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
},{"./locale.js":"node_modules/d3-time-format/src/locale.js"}],"node_modules/d3-time-format/src/isoFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isoSpecifier = void 0;

var _defaultLocale = require("./defaultLocale.js");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
},{"./defaultLocale.js":"node_modules/d3-time-format/src/defaultLocale.js"}],"node_modules/d3-time-format/src/isoParse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat.js");

var _defaultLocale = require("./defaultLocale.js");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
},{"./isoFormat.js":"node_modules/d3-time-format/src/isoFormat.js","./defaultLocale.js":"node_modules/d3-time-format/src/defaultLocale.js"}],"node_modules/d3-time-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _isoFormat = _interopRequireDefault(require("./isoFormat.js"));

var _isoParse = _interopRequireDefault(require("./isoParse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./defaultLocale.js":"node_modules/d3-time-format/src/defaultLocale.js","./locale.js":"node_modules/d3-time-format/src/locale.js","./isoFormat.js":"node_modules/d3-time-format/src/isoFormat.js","./isoParse.js":"node_modules/d3-time-format/src/isoParse.js"}],"node_modules/d3-scale/src/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _array = require("./array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _nice = _interopRequireDefault(require("./nice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target);

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return _init.initRange.apply(calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-time":"node_modules/d3-time/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js","./array":"node_modules/d3-scale/src/array.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./nice":"node_modules/d3-scale/src/nice.js"}],"node_modules/d3-scale/src/utcTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

var _init = require("./init");

function _default() {
  return _init.initRange.apply((0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
},{"./time":"node_modules/d3-scale/src/time.js","d3-time-format":"node_modules/d3-time-format/src/index.js","d3-time":"node_modules/d3-time/src/index.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/sequential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = sequential;
exports.sequentialLog = sequentialLog;
exports.sequentialSymlog = sequentialSymlog;
exports.sequentialPow = sequentialPow;
exports.sequentialSqrt = sequentialSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = _continuous.identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

function sequential() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return copy(scale, sequential());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./linear":"node_modules/d3-scale/src/linear.js","./log":"node_modules/d3-scale/src/log.js","./symlog":"node_modules/d3-scale/src/symlog.js","./pow":"node_modules/d3-scale/src/pow.js"}],"node_modules/d3-scale/src/sequentialQuantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequentialQuantile;

var _d3Array = require("d3-array");

var _continuous = require("./continuous");

var _init = require("./init");

function sequentialQuantile() {
  var domain = [],
      interpolator = _continuous.identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator(((0, _d3Array.bisect)(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return scale;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return _init.initInterpolator.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;
exports.divergingLog = divergingLog;
exports.divergingSymlog = divergingSymlog;
exports.divergingPow = divergingPow;
exports.divergingSqrt = divergingSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _sequential = require("./sequential");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = _continuous.identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return (0, _sequential.copy)(scale, diverging());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./linear":"node_modules/d3-scale/src/linear.js","./log":"node_modules/d3-scale/src/log.js","./sequential":"node_modules/d3-scale/src/sequential.js","./symlog":"node_modules/d3-scale/src/symlog.js","./pow":"node_modules/d3-scale/src/pow.js"}],"node_modules/d3-scale/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleSymlog", {
  enumerable: true,
  get: function () {
    return _symlog.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleSequentialLog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialLog;
  }
});
Object.defineProperty(exports, "scaleSequentialPow", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialPow;
  }
});
Object.defineProperty(exports, "scaleSequentialSqrt", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSqrt;
  }
});
Object.defineProperty(exports, "scaleSequentialSymlog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSymlog;
  }
});
Object.defineProperty(exports, "scaleSequentialQuantile", {
  enumerable: true,
  get: function () {
    return _sequentialQuantile.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "scaleDivergingLog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingLog;
  }
});
Object.defineProperty(exports, "scaleDivergingPow", {
  enumerable: true,
  get: function () {
    return _diverging.divergingPow;
  }
});
Object.defineProperty(exports, "scaleDivergingSqrt", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSqrt;
  }
});
Object.defineProperty(exports, "scaleDivergingSymlog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSymlog;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _tickFormat.default;
  }
});

var _band = _interopRequireWildcard(require("./band"));

var _identity = _interopRequireDefault(require("./identity"));

var _linear = _interopRequireDefault(require("./linear"));

var _log = _interopRequireDefault(require("./log"));

var _symlog = _interopRequireDefault(require("./symlog"));

var _ordinal = _interopRequireWildcard(require("./ordinal"));

var _pow = _interopRequireWildcard(require("./pow"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _quantize = _interopRequireDefault(require("./quantize"));

var _threshold = _interopRequireDefault(require("./threshold"));

var _time = _interopRequireDefault(require("./time"));

var _utcTime = _interopRequireDefault(require("./utcTime"));

var _sequential = _interopRequireWildcard(require("./sequential"));

var _sequentialQuantile = _interopRequireDefault(require("./sequentialQuantile"));

var _diverging = _interopRequireWildcard(require("./diverging"));

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./band":"node_modules/d3-scale/src/band.js","./identity":"node_modules/d3-scale/src/identity.js","./linear":"node_modules/d3-scale/src/linear.js","./log":"node_modules/d3-scale/src/log.js","./symlog":"node_modules/d3-scale/src/symlog.js","./ordinal":"node_modules/d3-scale/src/ordinal.js","./pow":"node_modules/d3-scale/src/pow.js","./quantile":"node_modules/d3-scale/src/quantile.js","./quantize":"node_modules/d3-scale/src/quantize.js","./threshold":"node_modules/d3-scale/src/threshold.js","./time":"node_modules/d3-scale/src/time.js","./utcTime":"node_modules/d3-scale/src/utcTime.js","./sequential":"node_modules/d3-scale/src/sequential.js","./sequentialQuantile":"node_modules/d3-scale/src/sequentialQuantile.js","./diverging":"node_modules/d3-scale/src/diverging.js","./tickFormat":"node_modules/d3-scale/src/tickFormat.js"}],"node_modules/d3-scale-chromatic/src/colors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(specifier) {
  var n = specifier.length / 6 | 0,
      colors = new Array(n),
      i = 0;

  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);

  return colors;
}
},{}],"node_modules/d3-scale-chromatic/src/categorical/category10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Accent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Dark2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Paired.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Set1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Set2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Set3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Tableau10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/ramp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

function _default(scheme) {
  return (0, _d3Interpolate.interpolateRgbBasis)(scheme[scheme.length - 1]);
}
},{"d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-scale-chromatic/src/diverging/BrBG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/PRGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/PiYG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/PuOr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdGy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/Spectral.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}
},{}],"node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var _default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

exports.default = _default;
},{"d3-color":"node_modules/d3-color/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cool = exports.warm = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.warm = warm;
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.cool = cool;
var c = (0, _d3Color.cubehelix)();

function _default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}
},{"d3-color":"node_modules/d3-color/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var c = (0, _d3Color.rgb)(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function _default(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}
},{"d3-color":"node_modules/d3-color/src/index.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}
},{}],"node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plasma = exports.inferno = exports.magma = exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var _default = ramp((0, _colors.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

exports.default = _default;
var magma = ramp((0, _colors.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
exports.magma = magma;
var inferno = ramp((0, _colors.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
exports.inferno = inferno;
var plasma = ramp((0, _colors.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
exports.plasma = plasma;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "schemeCategory10", {
  enumerable: true,
  get: function () {
    return _category.default;
  }
});
Object.defineProperty(exports, "schemeAccent", {
  enumerable: true,
  get: function () {
    return _Accent.default;
  }
});
Object.defineProperty(exports, "schemeDark2", {
  enumerable: true,
  get: function () {
    return _Dark.default;
  }
});
Object.defineProperty(exports, "schemePaired", {
  enumerable: true,
  get: function () {
    return _Paired.default;
  }
});
Object.defineProperty(exports, "schemePastel1", {
  enumerable: true,
  get: function () {
    return _Pastel.default;
  }
});
Object.defineProperty(exports, "schemePastel2", {
  enumerable: true,
  get: function () {
    return _Pastel2.default;
  }
});
Object.defineProperty(exports, "schemeSet1", {
  enumerable: true,
  get: function () {
    return _Set.default;
  }
});
Object.defineProperty(exports, "schemeSet2", {
  enumerable: true,
  get: function () {
    return _Set2.default;
  }
});
Object.defineProperty(exports, "schemeSet3", {
  enumerable: true,
  get: function () {
    return _Set3.default;
  }
});
Object.defineProperty(exports, "schemeTableau10", {
  enumerable: true,
  get: function () {
    return _Tableau.default;
  }
});
Object.defineProperty(exports, "interpolateBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.default;
  }
});
Object.defineProperty(exports, "schemeBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.default;
  }
});
Object.defineProperty(exports, "schemePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.default;
  }
});
Object.defineProperty(exports, "schemePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.default;
  }
});
Object.defineProperty(exports, "schemePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.default;
  }
});
Object.defineProperty(exports, "schemeRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.default;
  }
});
Object.defineProperty(exports, "schemeRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.default;
  }
});
Object.defineProperty(exports, "schemeRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.default;
  }
});
Object.defineProperty(exports, "schemeRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.default;
  }
});
Object.defineProperty(exports, "schemeSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.default;
  }
});
Object.defineProperty(exports, "schemeBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.default;
  }
});
Object.defineProperty(exports, "schemeBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.default;
  }
});
Object.defineProperty(exports, "schemeGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.default;
  }
});
Object.defineProperty(exports, "schemeOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.default;
  }
});
Object.defineProperty(exports, "schemePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.default;
  }
});
Object.defineProperty(exports, "schemePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.default;
  }
});
Object.defineProperty(exports, "schemePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.default;
  }
});
Object.defineProperty(exports, "schemeRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.default;
  }
});
Object.defineProperty(exports, "schemeYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.default;
  }
});
Object.defineProperty(exports, "schemeYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.default;
  }
});
Object.defineProperty(exports, "schemeYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.default;
  }
});
Object.defineProperty(exports, "schemeYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateBlues", {
  enumerable: true,
  get: function () {
    return _Blues.default;
  }
});
Object.defineProperty(exports, "schemeBlues", {
  enumerable: true,
  get: function () {
    return _Blues.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreens", {
  enumerable: true,
  get: function () {
    return _Greens.default;
  }
});
Object.defineProperty(exports, "schemeGreens", {
  enumerable: true,
  get: function () {
    return _Greens.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreys", {
  enumerable: true,
  get: function () {
    return _Greys.default;
  }
});
Object.defineProperty(exports, "schemeGreys", {
  enumerable: true,
  get: function () {
    return _Greys.scheme;
  }
});
Object.defineProperty(exports, "interpolatePurples", {
  enumerable: true,
  get: function () {
    return _Purples.default;
  }
});
Object.defineProperty(exports, "schemePurples", {
  enumerable: true,
  get: function () {
    return _Purples.scheme;
  }
});
Object.defineProperty(exports, "interpolateReds", {
  enumerable: true,
  get: function () {
    return _Reds.default;
  }
});
Object.defineProperty(exports, "schemeReds", {
  enumerable: true,
  get: function () {
    return _Reds.scheme;
  }
});
Object.defineProperty(exports, "interpolateOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.default;
  }
});
Object.defineProperty(exports, "schemeOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.scheme;
  }
});
Object.defineProperty(exports, "interpolateCividis", {
  enumerable: true,
  get: function () {
    return _cividis.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixDefault", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateRainbow", {
  enumerable: true,
  get: function () {
    return _rainbow.default;
  }
});
Object.defineProperty(exports, "interpolateWarm", {
  enumerable: true,
  get: function () {
    return _rainbow.warm;
  }
});
Object.defineProperty(exports, "interpolateCool", {
  enumerable: true,
  get: function () {
    return _rainbow.cool;
  }
});
Object.defineProperty(exports, "interpolateSinebow", {
  enumerable: true,
  get: function () {
    return _sinebow.default;
  }
});
Object.defineProperty(exports, "interpolateTurbo", {
  enumerable: true,
  get: function () {
    return _turbo.default;
  }
});
Object.defineProperty(exports, "interpolateViridis", {
  enumerable: true,
  get: function () {
    return _viridis.default;
  }
});
Object.defineProperty(exports, "interpolateMagma", {
  enumerable: true,
  get: function () {
    return _viridis.magma;
  }
});
Object.defineProperty(exports, "interpolateInferno", {
  enumerable: true,
  get: function () {
    return _viridis.inferno;
  }
});
Object.defineProperty(exports, "interpolatePlasma", {
  enumerable: true,
  get: function () {
    return _viridis.plasma;
  }
});

var _category = _interopRequireDefault(require("./categorical/category10.js"));

var _Accent = _interopRequireDefault(require("./categorical/Accent.js"));

var _Dark = _interopRequireDefault(require("./categorical/Dark2.js"));

var _Paired = _interopRequireDefault(require("./categorical/Paired.js"));

var _Pastel = _interopRequireDefault(require("./categorical/Pastel1.js"));

var _Pastel2 = _interopRequireDefault(require("./categorical/Pastel2.js"));

var _Set = _interopRequireDefault(require("./categorical/Set1.js"));

var _Set2 = _interopRequireDefault(require("./categorical/Set2.js"));

var _Set3 = _interopRequireDefault(require("./categorical/Set3.js"));

var _Tableau = _interopRequireDefault(require("./categorical/Tableau10.js"));

var _BrBG = _interopRequireWildcard(require("./diverging/BrBG.js"));

var _PRGn = _interopRequireWildcard(require("./diverging/PRGn.js"));

var _PiYG = _interopRequireWildcard(require("./diverging/PiYG.js"));

var _PuOr = _interopRequireWildcard(require("./diverging/PuOr.js"));

var _RdBu = _interopRequireWildcard(require("./diverging/RdBu.js"));

var _RdGy = _interopRequireWildcard(require("./diverging/RdGy.js"));

var _RdYlBu = _interopRequireWildcard(require("./diverging/RdYlBu.js"));

var _RdYlGn = _interopRequireWildcard(require("./diverging/RdYlGn.js"));

var _Spectral = _interopRequireWildcard(require("./diverging/Spectral.js"));

var _BuGn = _interopRequireWildcard(require("./sequential-multi/BuGn.js"));

var _BuPu = _interopRequireWildcard(require("./sequential-multi/BuPu.js"));

var _GnBu = _interopRequireWildcard(require("./sequential-multi/GnBu.js"));

var _OrRd = _interopRequireWildcard(require("./sequential-multi/OrRd.js"));

var _PuBuGn = _interopRequireWildcard(require("./sequential-multi/PuBuGn.js"));

var _PuBu = _interopRequireWildcard(require("./sequential-multi/PuBu.js"));

var _PuRd = _interopRequireWildcard(require("./sequential-multi/PuRd.js"));

var _RdPu = _interopRequireWildcard(require("./sequential-multi/RdPu.js"));

var _YlGnBu = _interopRequireWildcard(require("./sequential-multi/YlGnBu.js"));

var _YlGn = _interopRequireWildcard(require("./sequential-multi/YlGn.js"));

var _YlOrBr = _interopRequireWildcard(require("./sequential-multi/YlOrBr.js"));

var _YlOrRd = _interopRequireWildcard(require("./sequential-multi/YlOrRd.js"));

var _Blues = _interopRequireWildcard(require("./sequential-single/Blues.js"));

var _Greens = _interopRequireWildcard(require("./sequential-single/Greens.js"));

var _Greys = _interopRequireWildcard(require("./sequential-single/Greys.js"));

var _Purples = _interopRequireWildcard(require("./sequential-single/Purples.js"));

var _Reds = _interopRequireWildcard(require("./sequential-single/Reds.js"));

var _Oranges = _interopRequireWildcard(require("./sequential-single/Oranges.js"));

var _cividis = _interopRequireDefault(require("./sequential-multi/cividis.js"));

var _cubehelix = _interopRequireDefault(require("./sequential-multi/cubehelix.js"));

var _rainbow = _interopRequireWildcard(require("./sequential-multi/rainbow.js"));

var _sinebow = _interopRequireDefault(require("./sequential-multi/sinebow.js"));

var _turbo = _interopRequireDefault(require("./sequential-multi/turbo.js"));

var _viridis = _interopRequireWildcard(require("./sequential-multi/viridis.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./categorical/category10.js":"node_modules/d3-scale-chromatic/src/categorical/category10.js","./categorical/Accent.js":"node_modules/d3-scale-chromatic/src/categorical/Accent.js","./categorical/Dark2.js":"node_modules/d3-scale-chromatic/src/categorical/Dark2.js","./categorical/Paired.js":"node_modules/d3-scale-chromatic/src/categorical/Paired.js","./categorical/Pastel1.js":"node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","./categorical/Pastel2.js":"node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","./categorical/Set1.js":"node_modules/d3-scale-chromatic/src/categorical/Set1.js","./categorical/Set2.js":"node_modules/d3-scale-chromatic/src/categorical/Set2.js","./categorical/Set3.js":"node_modules/d3-scale-chromatic/src/categorical/Set3.js","./categorical/Tableau10.js":"node_modules/d3-scale-chromatic/src/categorical/Tableau10.js","./diverging/BrBG.js":"node_modules/d3-scale-chromatic/src/diverging/BrBG.js","./diverging/PRGn.js":"node_modules/d3-scale-chromatic/src/diverging/PRGn.js","./diverging/PiYG.js":"node_modules/d3-scale-chromatic/src/diverging/PiYG.js","./diverging/PuOr.js":"node_modules/d3-scale-chromatic/src/diverging/PuOr.js","./diverging/RdBu.js":"node_modules/d3-scale-chromatic/src/diverging/RdBu.js","./diverging/RdGy.js":"node_modules/d3-scale-chromatic/src/diverging/RdGy.js","./diverging/RdYlBu.js":"node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","./diverging/RdYlGn.js":"node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","./diverging/Spectral.js":"node_modules/d3-scale-chromatic/src/diverging/Spectral.js","./sequential-multi/BuGn.js":"node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","./sequential-multi/BuPu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","./sequential-multi/GnBu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","./sequential-multi/OrRd.js":"node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","./sequential-multi/PuBuGn.js":"node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","./sequential-multi/PuBu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","./sequential-multi/PuRd.js":"node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","./sequential-multi/RdPu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","./sequential-multi/YlGnBu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","./sequential-multi/YlGn.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","./sequential-multi/YlOrBr.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","./sequential-multi/YlOrRd.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","./sequential-single/Blues.js":"node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","./sequential-single/Greens.js":"node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","./sequential-single/Greys.js":"node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","./sequential-single/Purples.js":"node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","./sequential-single/Reds.js":"node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","./sequential-single/Oranges.js":"node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","./sequential-multi/cividis.js":"node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js","./sequential-multi/cubehelix.js":"node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","./sequential-multi/rainbow.js":"node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","./sequential-multi/sinebow.js":"node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","./sequential-multi/turbo.js":"node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","./sequential-multi/viridis.js":"node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"}],"node_modules/d3-shape/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
},{}],"node_modules/d3-shape/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.halfPi = exports.pi = exports.epsilon = exports.sqrt = exports.sin = exports.min = exports.max = exports.cos = exports.atan2 = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var sin = Math.sin;
exports.sin = sin;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var epsilon = 1e-12;
exports.epsilon = epsilon;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
},{}],"node_modules/d3-shape/src/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < _math.epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < _math.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant.js":"node_modules/d3-shape/src/constant.js","./math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/curve/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
},{}],"node_modules/d3-shape/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
},{}],"node_modules/d3-shape/src/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant.js":"node_modules/d3-shape/src/constant.js","./curve/linear.js":"node_modules/d3-shape/src/curve/linear.js","./point.js":"node_modules/d3-shape/src/point.js"}],"node_modules/d3-shape/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant.default)(0),
      y1 = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant.js":"node_modules/d3-shape/src/constant.js","./curve/linear.js":"node_modules/d3-shape/src/curve/linear.js","./line.js":"node_modules/d3-shape/src/line.js","./point.js":"node_modules/d3-shape/src/point.js"}],"node_modules/d3-shape/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-shape/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
},{}],"node_modules/d3-shape/src/pie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
},{"./constant.js":"node_modules/d3-shape/src/constant.js","./descending.js":"node_modules/d3-shape/src/descending.js","./identity.js":"node_modules/d3-shape/src/identity.js","./math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/curve/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curveRadial;
exports.curveRadialLinear = void 0;

var _linear = _interopRequireDefault(require("./linear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
},{"./linear.js":"node_modules/d3-shape/src/curve/linear.js"}],"node_modules/d3-shape/src/lineRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineRadial = lineRadial;
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _line = _interopRequireDefault(require("./line.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
},{"./curve/radial.js":"node_modules/d3-shape/src/curve/radial.js","./line.js":"node_modules/d3-shape/src/line.js"}],"node_modules/d3-shape/src/areaRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _lineRadial = require("./lineRadial.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
},{"./curve/radial.js":"node_modules/d3-shape/src/curve/radial.js","./area.js":"node_modules/d3-shape/src/area.js","./lineRadial.js":"node_modules/d3-shape/src/lineRadial.js"}],"node_modules/d3-shape/src/pointRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
},{}],"node_modules/d3-shape/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-shape/src/link/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = require("d3-path");

var _array = require("../array.js");

var _constant = _interopRequireDefault(require("../constant.js"));

var _point = require("../point.js");

var _pointRadial = _interopRequireDefault(require("../pointRadial.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);

    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial.default)(x0, y0),
      p1 = (0, _pointRadial.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial.default)(x1, y0),
      p3 = (0, _pointRadial.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
},{"d3-path":"node_modules/d3-path/src/index.js","../array.js":"node_modules/d3-shape/src/array.js","../constant.js":"node_modules/d3-shape/src/constant.js","../point.js":"node_modules/d3-shape/src/point.js","../pointRadial.js":"node_modules/d3-shape/src/pointRadial.js"}],"node_modules/d3-shape/src/symbol/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};
exports.default = _default;
},{"../math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/symbol/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/diamond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
var _default = {
  draw: function (context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/star.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = _math.tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
};
exports.default = _default;
},{"../math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/symbol/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var sqrt3 = Math.sqrt(3);
var _default = {
  draw: function (context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/wye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.symbols = void 0;

var _d3Path = require("d3-path");

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default];
exports.symbols = symbols;

function _default() {
  var type = (0, _constant.default)(_circle.default),
      size = (0, _constant.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./symbol/circle.js":"node_modules/d3-shape/src/symbol/circle.js","./symbol/cross.js":"node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond.js":"node_modules/d3-shape/src/symbol/diamond.js","./symbol/star.js":"node_modules/d3-shape/src/symbol/star.js","./symbol/square.js":"node_modules/d3-shape/src/symbol/square.js","./symbol/triangle.js":"node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye.js":"node_modules/d3-shape/src/symbol/wye.js","./constant.js":"node_modules/d3-shape/src/constant.js"}],"node_modules/d3-shape/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"node_modules/d3-shape/src/curve/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Basis = Basis;
exports.default = _default;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
},{}],"node_modules/d3-shape/src/curve/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

var _basis = require("./basis.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
},{"../noop.js":"node_modules/d3-shape/src/noop.js","./basis.js":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/basisOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
},{"./basis.js":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/bundle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis.js");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
},{"./basis.js":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/cardinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Cardinal = Cardinal;
exports.default = void 0;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{}],"node_modules/d3-shape/src/curve/cardinalClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

var _cardinal = require("./cardinal.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"../noop.js":"node_modules/d3-shape/src/noop.js","./cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/cardinalOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal.js");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"./cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/catmullRom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.default = void 0;

var _math = require("../math.js");

var _cardinal = require("./cardinal.js");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"../math.js":"node_modules/d3-shape/src/math.js","./cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/catmullRomClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed.js");

var _noop = _interopRequireDefault(require("../noop.js"));

var _catmullRom = require("./catmullRom.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalClosed.js":"node_modules/d3-shape/src/curve/cardinalClosed.js","../noop.js":"node_modules/d3-shape/src/noop.js","./catmullRom.js":"node_modules/d3-shape/src/curve/catmullRom.js"}],"node_modules/d3-shape/src/curve/catmullRomOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen.js");

var _catmullRom = require("./catmullRom.js");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalOpen.js":"node_modules/d3-shape/src/curve/cardinalOpen.js","./catmullRom.js":"node_modules/d3-shape/src/curve/catmullRom.js"}],"node_modules/d3-shape/src/curve/linearClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
},{"../noop.js":"node_modules/d3-shape/src/noop.js"}],"node_modules/d3-shape/src/curve/monotone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
},{}],"node_modules/d3-shape/src/curve/natural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
},{}],"node_modules/d3-shape/src/curve/step.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
},{}],"node_modules/d3-shape/src/offset/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
},{}],"node_modules/d3-shape/src/order/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
},{}],"node_modules/d3-shape/src/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }

      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
},{"./array.js":"node_modules/d3-shape/src/array.js","./constant.js":"node_modules/d3-shape/src/constant.js","./offset/none.js":"node_modules/d3-shape/src/offset/none.js","./order/none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/offset/expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
},{"./none.js":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/offset/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}
},{}],"node_modules/d3-shape/src/offset/silhouette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
},{"./none.js":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/offset/wiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
},{"./none.js":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/order/appearance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var peaks = series.map(peak);
  return (0, _none.default)(series).sort(function (a, b) {
    return peaks[a] - peaks[b];
  });
}

function peak(series) {
  var i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity;

  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;

  return j;
}
},{"./none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/order/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
},{"./none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/order/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
},{"./ascending.js":"node_modules/d3-shape/src/order/ascending.js"}],"node_modules/d3-shape/src/order/insideOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _appearance = _interopRequireDefault(require("./appearance.js"));

var _ascending = require("./ascending.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _appearance.default)(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
},{"./appearance.js":"node_modules/d3-shape/src/order/appearance.js","./ascending.js":"node_modules/d3-shape/src/order/ascending.js"}],"node_modules/d3-shape/src/order/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
},{"./none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _index.linkRadial;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbols;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAppearance", {
  enumerable: true,
  get: function () {
    return _appearance.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});

var _arc = _interopRequireDefault(require("./arc.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _pie = _interopRequireDefault(require("./pie.js"));

var _areaRadial = _interopRequireDefault(require("./areaRadial.js"));

var _lineRadial = _interopRequireDefault(require("./lineRadial.js"));

var _pointRadial = _interopRequireDefault(require("./pointRadial.js"));

var _index = require("./link/index.js");

var _symbol = _interopRequireWildcard(require("./symbol.js"));

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed.js"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen.js"));

var _basis = _interopRequireDefault(require("./curve/basis.js"));

var _bundle = _interopRequireDefault(require("./curve/bundle.js"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed.js"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen.js"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal.js"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed.js"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen.js"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom.js"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _monotone = require("./curve/monotone.js");

var _natural = _interopRequireDefault(require("./curve/natural.js"));

var _step = _interopRequireWildcard(require("./curve/step.js"));

var _stack = _interopRequireDefault(require("./stack.js"));

var _expand = _interopRequireDefault(require("./offset/expand.js"));

var _diverging = _interopRequireDefault(require("./offset/diverging.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette.js"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle.js"));

var _appearance = _interopRequireDefault(require("./order/appearance.js"));

var _ascending = _interopRequireDefault(require("./order/ascending.js"));

var _descending = _interopRequireDefault(require("./order/descending.js"));

var _insideOut = _interopRequireDefault(require("./order/insideOut.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

var _reverse = _interopRequireDefault(require("./order/reverse.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./arc.js":"node_modules/d3-shape/src/arc.js","./area.js":"node_modules/d3-shape/src/area.js","./line.js":"node_modules/d3-shape/src/line.js","./pie.js":"node_modules/d3-shape/src/pie.js","./areaRadial.js":"node_modules/d3-shape/src/areaRadial.js","./lineRadial.js":"node_modules/d3-shape/src/lineRadial.js","./pointRadial.js":"node_modules/d3-shape/src/pointRadial.js","./link/index.js":"node_modules/d3-shape/src/link/index.js","./symbol.js":"node_modules/d3-shape/src/symbol.js","./symbol/circle.js":"node_modules/d3-shape/src/symbol/circle.js","./symbol/cross.js":"node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond.js":"node_modules/d3-shape/src/symbol/diamond.js","./symbol/square.js":"node_modules/d3-shape/src/symbol/square.js","./symbol/star.js":"node_modules/d3-shape/src/symbol/star.js","./symbol/triangle.js":"node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye.js":"node_modules/d3-shape/src/symbol/wye.js","./curve/basisClosed.js":"node_modules/d3-shape/src/curve/basisClosed.js","./curve/basisOpen.js":"node_modules/d3-shape/src/curve/basisOpen.js","./curve/basis.js":"node_modules/d3-shape/src/curve/basis.js","./curve/bundle.js":"node_modules/d3-shape/src/curve/bundle.js","./curve/cardinalClosed.js":"node_modules/d3-shape/src/curve/cardinalClosed.js","./curve/cardinalOpen.js":"node_modules/d3-shape/src/curve/cardinalOpen.js","./curve/cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js","./curve/catmullRomClosed.js":"node_modules/d3-shape/src/curve/catmullRomClosed.js","./curve/catmullRomOpen.js":"node_modules/d3-shape/src/curve/catmullRomOpen.js","./curve/catmullRom.js":"node_modules/d3-shape/src/curve/catmullRom.js","./curve/linearClosed.js":"node_modules/d3-shape/src/curve/linearClosed.js","./curve/linear.js":"node_modules/d3-shape/src/curve/linear.js","./curve/monotone.js":"node_modules/d3-shape/src/curve/monotone.js","./curve/natural.js":"node_modules/d3-shape/src/curve/natural.js","./curve/step.js":"node_modules/d3-shape/src/curve/step.js","./stack.js":"node_modules/d3-shape/src/stack.js","./offset/expand.js":"node_modules/d3-shape/src/offset/expand.js","./offset/diverging.js":"node_modules/d3-shape/src/offset/diverging.js","./offset/none.js":"node_modules/d3-shape/src/offset/none.js","./offset/silhouette.js":"node_modules/d3-shape/src/offset/silhouette.js","./offset/wiggle.js":"node_modules/d3-shape/src/offset/wiggle.js","./order/appearance.js":"node_modules/d3-shape/src/order/appearance.js","./order/ascending.js":"node_modules/d3-shape/src/order/ascending.js","./order/descending.js":"node_modules/d3-shape/src/order/descending.js","./order/insideOut.js":"node_modules/d3-shape/src/order/insideOut.js","./order/none.js":"node_modules/d3-shape/src/order/none.js","./order/reverse.js":"node_modules/d3-shape/src/order/reverse.js"}],"node_modules/d3-voronoi/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-voronoi/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}
},{}],"node_modules/d3-voronoi/src/RedBlackTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedBlackNode = RedBlackNode;
exports.default = void 0;

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,
  insert: function (after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;

      if (after.R) {
        after = after.R;

        while (after.L) after = after.L;

        after.L = node;
      } else {
        after.R = node;
      }

      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }

    node.L = node.R = null;
    node.U = parent;
    node.C = true;
    after = node;

    while (parent && parent.C) {
      grandpa = parent.U;

      if (parent === grandpa.L) {
        uncle = grandpa.R;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }

      parent = after.U;
    }

    this._.C = false;
  },
  remove: function (node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;
    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;
    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;

      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;

    if (node && node.C) {
      node.C = false;
      return;
    }

    do {
      if (node === this._) break;

      if (node === parent.L) {
        sibling = parent.R;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }

          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }

          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }

      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;

  return node;
}

var _default = RedBlackTree;
exports.default = _default;
},{}],"node_modules/d3-voronoi/src/Edge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEdge = createEdge;
exports.createBorderEdge = createBorderEdge;
exports.setEdgeEnd = setEdgeEnd;
exports.clipEdges = clipEdges;

var _Diagram = require("./Diagram");

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);

  _Diagram.cells[left.index].halfedges.push(index);

  _Diagram.cells[right.index].halfedges.push(index);

  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
} // Liang–Barsky line clipping.


function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;

    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;

    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}
},{"./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCell = createCell;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.sortCellHalfedges = sortCellHalfedges;
exports.clipCells = clipCells;

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);

      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);

      index.sort(function (i, j) {
        return array[j] - array[i];
      });

      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];

      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length; // Remove any dangling clipped edges.

      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      } // Insert any border edges as necessary.


      iHalfedge = 0, nHalfedges = halfedges.length;

      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  } // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!


  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  } // Lastly delete any cells with no edges; these were entirely clipped.


  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}
},{"./Edge":"node_modules/d3-voronoi/src/Edge.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;
exports.firstCircle = void 0;

var _RedBlackTree = require("./RedBlackTree");

var _Diagram = require("./Diagram");

var circlePool = [];
var firstCircle;
exports.firstCircle = firstCircle;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;
  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;
  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;
  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;
        break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);

  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;

  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;

    _Diagram.circles.remove(circle);

    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}
},{"./RedBlackTree":"node_modules/d3-voronoi/src/RedBlackTree.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Beach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeBeach = removeBeach;
exports.addBeach = addBeach;

var _RedBlackTree = require("./RedBlackTree");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);

  _Diagram.beaches.remove(beach);

  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;

  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);
  var rArc = next;

  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);
  var nArcs = disappearing.length,
      iArc;

  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);

      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }

        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }

        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);

  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);

    _Diagram.beaches.insert(newArc, rArc);

    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  } // else lArc !== rArc


  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);
  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
},{"./RedBlackTree":"node_modules/d3-voronoi/src/RedBlackTree.js","./Cell":"node_modules/d3-voronoi/src/Cell.js","./Circle":"node_modules/d3-voronoi/src/Circle.js","./Edge":"node_modules/d3-voronoi/src/Edge.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Diagram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Diagram;
exports.edges = exports.circles = exports.cells = exports.beaches = exports.epsilon2 = exports.epsilon = void 0;

var _Beach = require("./Beach");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _RedBlackTree = _interopRequireDefault(require("./RedBlackTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var beaches;
exports.beaches = beaches;
var cells;
exports.cells = cells;
var circles;
exports.circles = circles;
var edges;
exports.edges = edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;
  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree.default();
  exports.circles = circles = new _RedBlackTree.default();

  while (true) {
    circle = _Circle.firstCircle;

    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }

      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;
  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,
  polygons: function () {
    var edges = this.edges;
    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },
  triangles: function () {
    var triangles = [],
        edges = this.edges;
    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;

        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });
    return triangles;
  },
  links: function () {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },
  find: function (x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell; // Use the previously-found cell, or start with an arbitrary one.

    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;

    var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;
    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};
},{"./Beach":"node_modules/d3-voronoi/src/Beach.js","./Cell":"node_modules/d3-voronoi/src/Cell.js","./Circle":"node_modules/d3-voronoi/src/Circle.js","./Edge":"node_modules/d3-voronoi/src/Edge.js","./RedBlackTree":"node_modules/d3-voronoi/src/RedBlackTree.js"}],"node_modules/d3-voronoi/src/voronoi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _point = require("./point");

var _Diagram = _interopRequireWildcard(require("./Diagram"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}
},{"./constant":"node_modules/d3-voronoi/src/constant.js","./point":"node_modules/d3-voronoi/src/point.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _voronoi = _interopRequireDefault(require("./voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./voronoi":"node_modules/d3-voronoi/src/voronoi.js"}],"node_modules/d3-zoom/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-zoom/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZoomEvent;

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}
},{}],"node_modules/d3-zoom/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transform = Transform;
exports.default = transform;
exports.identity = void 0;

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function (k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function (x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function (point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function (x) {
    return x * this.k + this.x;
  },
  applyY: function (y) {
    return y * this.k + this.y;
  },
  invert: function (location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function (x) {
    return (x - this.x) / this.k;
  },
  invertY: function (y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function (x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function (y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function () {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity = new Transform(1, 0, 0);
exports.identity = identity;
transform.prototype = Transform.prototype;

function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity;

  return node.__zoom;
}
},{}],"node_modules/d3-zoom/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-zoom/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

var _transform = require("./transform.js");

var _noevent = _interopRequireWildcard(require("./noevent.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultExtent() {
  var e = this;

  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;

    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }

    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }

  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || _transform.identity;
}

function defaultWheelDelta() {
  return -_d3Selection.event.deltaY * (_d3Selection.event.deltaMode === 1 ? 0.05 : _d3Selection.event.deltaMode ? 1 : 0.002);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function _default() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = _d3Interpolate.interpolateZoom,
      listeners = (0, _d3Dispatch.dispatch)("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform, point) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);

    if (collection !== selection) {
      schedule(collection, transform, point);
    } else {
      selection.interrupt().each(function () {
        gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };

  zoom.scaleBy = function (selection, k, p) {
    zoom.scaleTo(selection, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p);
  };

  zoom.scaleTo = function (selection, k, p) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p);
  };

  zoom.translateBy = function (selection, x, y) {
    zoom.transform(selection, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function (selection, x, y, p) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(_transform.identity.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    }, p);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new _transform.Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new _transform.Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point) {
    transition.on("start.zoom", function () {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args),
          e = extent.apply(that, args),
          p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform === "function" ? transform.apply(that, args) : transform,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];
            t = new _transform.Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    start: function () {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }

      return this;
    },
    zoom: function (key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function () {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }

      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = (0, _d3Selection.mouse)(this); // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.

    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }

      clearTimeout(g.wheel);
    } // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return; // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          (0, _d3Transition.interrupt)(this);
          g.start();
        }

    (0, _noevent.default)();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments, true),
        v = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = (0, _d3Selection.mouse)(this),
        x0 = _d3Selection.event.clientX,
        y0 = _d3Selection.event.clientY;
    (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    g.mouse = [p, this.__zoom.invert(p)];
    (0, _d3Transition.interrupt)(this);
    g.start();

    function mousemoved() {
      (0, _noevent.default)();

      if (!g.moved) {
        var dx = _d3Selection.event.clientX - x0,
            dy = _d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }

      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = (0, _d3Selection.mouse)(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      (0, _d3Drag.dragEnable)(_d3Selection.event.view, g.moved);
      (0, _noevent.default)();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = (0, _d3Selection.mouse)(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (_d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);
    (0, _noevent.default)();
    if (duration > 0) (0, _d3Selection.select)(this).transition().duration(duration).call(schedule, t1, p0);else (0, _d3Selection.select)(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.touches,
        n = touches.length,
        g = gesture(this, arguments, _d3Selection.event.changedTouches.length === n),
        started,
        i,
        t,
        p;
    (0, _noevent.nopropagation)();

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      (0, _d3Transition.interrupt)(this);
      g.start();
    }
  }

  function touchmoved() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l;
    (0, _noevent.default)();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    g.taps = 0;

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }

    t = g.that.__zoom;

    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t;
    (0, _noevent.nopropagation)();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);

    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }

    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else {
      g.end(); // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.

      if (g.taps === 2) {
        var p = (0, _d3Selection.select)(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
      }
    }
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : (0, _constant.default)(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-drag":"node_modules/d3-drag/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","d3-transition":"node_modules/d3-transition/src/index.js","./constant.js":"node_modules/d3-zoom/src/constant.js","./event.js":"node_modules/d3-zoom/src/event.js","./transform.js":"node_modules/d3-zoom/src/transform.js","./noevent.js":"node_modules/d3-zoom/src/noevent.js"}],"node_modules/d3-zoom/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "zoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "zoomTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "zoomIdentity", {
  enumerable: true,
  get: function () {
    return _transform.identity;
  }
});

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _transform = _interopRequireWildcard(require("./transform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./zoom.js":"node_modules/d3-zoom/src/zoom.js","./transform.js":"node_modules/d3-zoom/src/transform.js"}],"node_modules/d3/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true
};
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _package.version;
  }
});

var _package = require("./dist/package.js");

var _d3Array = require("d3-array");

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Array[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Array[key];
    }
  });
});

var _d3Axis = require("d3-axis");

Object.keys(_d3Axis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Axis[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Axis[key];
    }
  });
});

var _d3Brush = require("d3-brush");

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Brush[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Brush[key];
    }
  });
});

var _d3Chord = require("d3-chord");

Object.keys(_d3Chord).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Chord[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Chord[key];
    }
  });
});

var _d3Collection = require("d3-collection");

Object.keys(_d3Collection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Collection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Collection[key];
    }
  });
});

var _d3Color = require("d3-color");

Object.keys(_d3Color).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Color[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Color[key];
    }
  });
});

var _d3Contour = require("d3-contour");

Object.keys(_d3Contour).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Contour[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Contour[key];
    }
  });
});

var _d3Dispatch = require("d3-dispatch");

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Dispatch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dispatch[key];
    }
  });
});

var _d3Drag = require("d3-drag");

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Drag[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Drag[key];
    }
  });
});

var _d3Dsv = require("d3-dsv");

Object.keys(_d3Dsv).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Dsv[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dsv[key];
    }
  });
});

var _d3Ease = require("d3-ease");

Object.keys(_d3Ease).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Ease[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Ease[key];
    }
  });
});

var _d3Fetch = require("d3-fetch");

Object.keys(_d3Fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Fetch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Fetch[key];
    }
  });
});

var _d3Force = require("d3-force");

Object.keys(_d3Force).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Force[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Force[key];
    }
  });
});

var _d3Format = require("d3-format");

Object.keys(_d3Format).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Format[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Format[key];
    }
  });
});

var _d3Geo = require("d3-geo");

Object.keys(_d3Geo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Geo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Geo[key];
    }
  });
});

var _d3Hierarchy = require("d3-hierarchy");

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Hierarchy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Hierarchy[key];
    }
  });
});

var _d3Interpolate = require("d3-interpolate");

Object.keys(_d3Interpolate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Interpolate[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Interpolate[key];
    }
  });
});

var _d3Path = require("d3-path");

Object.keys(_d3Path).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Path[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Path[key];
    }
  });
});

var _d3Polygon = require("d3-polygon");

Object.keys(_d3Polygon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Polygon[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Polygon[key];
    }
  });
});

var _d3Quadtree = require("d3-quadtree");

Object.keys(_d3Quadtree).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Quadtree[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Quadtree[key];
    }
  });
});

var _d3Random = require("d3-random");

Object.keys(_d3Random).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Random[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Random[key];
    }
  });
});

var _d3Scale = require("d3-scale");

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Scale[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Scale[key];
    }
  });
});

var _d3ScaleChromatic = require("d3-scale-chromatic");

Object.keys(_d3ScaleChromatic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3ScaleChromatic[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3ScaleChromatic[key];
    }
  });
});

var _d3Selection = require("d3-selection");

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Selection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require("d3-shape");

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Shape[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Shape[key];
    }
  });
});

var _d3Time = require("d3-time");

Object.keys(_d3Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Time[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Time[key];
    }
  });
});

var _d3TimeFormat = require("d3-time-format");

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3TimeFormat[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3TimeFormat[key];
    }
  });
});

var _d3Timer = require("d3-timer");

Object.keys(_d3Timer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Timer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Timer[key];
    }
  });
});

var _d3Transition = require("d3-transition");

Object.keys(_d3Transition).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Transition[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Transition[key];
    }
  });
});

var _d3Voronoi = require("d3-voronoi");

Object.keys(_d3Voronoi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Voronoi[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Voronoi[key];
    }
  });
});

var _d3Zoom = require("d3-zoom");

Object.keys(_d3Zoom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _d3Zoom[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Zoom[key];
    }
  });
});
},{"./dist/package.js":"node_modules/d3/dist/package.js","d3-array":"node_modules/d3-array/src/index.js","d3-axis":"node_modules/d3-axis/src/index.js","d3-brush":"node_modules/d3-brush/src/index.js","d3-chord":"node_modules/d3-chord/src/index.js","d3-collection":"node_modules/d3-collection/src/index.js","d3-color":"node_modules/d3-color/src/index.js","d3-contour":"node_modules/d3-contour/src/index.js","d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-drag":"node_modules/d3-drag/src/index.js","d3-dsv":"node_modules/d3-dsv/src/index.js","d3-ease":"node_modules/d3-ease/src/index.js","d3-fetch":"node_modules/d3-fetch/src/index.js","d3-force":"node_modules/d3-force/src/index.js","d3-format":"node_modules/d3-format/src/index.js","d3-geo":"node_modules/d3-geo/src/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-path":"node_modules/d3-path/src/index.js","d3-polygon":"node_modules/d3-polygon/src/index.js","d3-quadtree":"node_modules/d3-quadtree/src/index.js","d3-random":"node_modules/d3-random/src/index.js","d3-scale":"node_modules/d3-scale/src/index.js","d3-scale-chromatic":"node_modules/d3-scale-chromatic/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","d3-shape":"node_modules/d3-shape/src/index.js","d3-time":"node_modules/d3-time/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js","d3-transition":"node_modules/d3-transition/src/index.js","d3-voronoi":"node_modules/d3-voronoi/src/index.js","d3-zoom":"node_modules/d3-zoom/src/index.js"}],"node_modules/lodash/_listCacheClear.js":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],"node_modules/lodash/eq.js":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],"node_modules/lodash/_assocIndexOf.js":[function(require,module,exports) {
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":"node_modules/lodash/eq.js"}],"node_modules/lodash/_listCacheDelete.js":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":"node_modules/lodash/_assocIndexOf.js"}],"node_modules/lodash/_listCacheGet.js":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":"node_modules/lodash/_assocIndexOf.js"}],"node_modules/lodash/_listCacheHas.js":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":"node_modules/lodash/_assocIndexOf.js"}],"node_modules/lodash/_listCacheSet.js":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":"node_modules/lodash/_assocIndexOf.js"}],"node_modules/lodash/_ListCache.js":[function(require,module,exports) {
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":"node_modules/lodash/_listCacheClear.js","./_listCacheDelete":"node_modules/lodash/_listCacheDelete.js","./_listCacheGet":"node_modules/lodash/_listCacheGet.js","./_listCacheHas":"node_modules/lodash/_listCacheHas.js","./_listCacheSet":"node_modules/lodash/_listCacheSet.js"}],"node_modules/lodash/_stackClear.js":[function(require,module,exports) {
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":"node_modules/lodash/_ListCache.js"}],"node_modules/lodash/_stackDelete.js":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],"node_modules/lodash/_stackGet.js":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],"node_modules/lodash/_stackHas.js":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],"node_modules/lodash/_freeGlobal.js":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

},{}],"node_modules/lodash/_root.js":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":"node_modules/lodash/_freeGlobal.js"}],"node_modules/lodash/_Symbol.js":[function(require,module,exports) {
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_getRawTag.js":[function(require,module,exports) {
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":"node_modules/lodash/_Symbol.js"}],"node_modules/lodash/_objectToString.js":[function(require,module,exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],"node_modules/lodash/_baseGetTag.js":[function(require,module,exports) {
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":"node_modules/lodash/_Symbol.js","./_getRawTag":"node_modules/lodash/_getRawTag.js","./_objectToString":"node_modules/lodash/_objectToString.js"}],"node_modules/lodash/isObject.js":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],"node_modules/lodash/isFunction.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isObject":"node_modules/lodash/isObject.js"}],"node_modules/lodash/_coreJsData.js":[function(require,module,exports) {
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_isMasked.js":[function(require,module,exports) {
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":"node_modules/lodash/_coreJsData.js"}],"node_modules/lodash/_toSource.js":[function(require,module,exports) {
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],"node_modules/lodash/_baseIsNative.js":[function(require,module,exports) {
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./isFunction":"node_modules/lodash/isFunction.js","./_isMasked":"node_modules/lodash/_isMasked.js","./isObject":"node_modules/lodash/isObject.js","./_toSource":"node_modules/lodash/_toSource.js"}],"node_modules/lodash/_getValue.js":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],"node_modules/lodash/_getNative.js":[function(require,module,exports) {
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":"node_modules/lodash/_baseIsNative.js","./_getValue":"node_modules/lodash/_getValue.js"}],"node_modules/lodash/_Map.js":[function(require,module,exports) {
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":"node_modules/lodash/_getNative.js","./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_nativeCreate.js":[function(require,module,exports) {
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":"node_modules/lodash/_getNative.js"}],"node_modules/lodash/_hashClear.js":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":"node_modules/lodash/_nativeCreate.js"}],"node_modules/lodash/_hashDelete.js":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],"node_modules/lodash/_hashGet.js":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":"node_modules/lodash/_nativeCreate.js"}],"node_modules/lodash/_hashHas.js":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":"node_modules/lodash/_nativeCreate.js"}],"node_modules/lodash/_hashSet.js":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":"node_modules/lodash/_nativeCreate.js"}],"node_modules/lodash/_Hash.js":[function(require,module,exports) {
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":"node_modules/lodash/_hashClear.js","./_hashDelete":"node_modules/lodash/_hashDelete.js","./_hashGet":"node_modules/lodash/_hashGet.js","./_hashHas":"node_modules/lodash/_hashHas.js","./_hashSet":"node_modules/lodash/_hashSet.js"}],"node_modules/lodash/_mapCacheClear.js":[function(require,module,exports) {
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":"node_modules/lodash/_Hash.js","./_ListCache":"node_modules/lodash/_ListCache.js","./_Map":"node_modules/lodash/_Map.js"}],"node_modules/lodash/_isKeyable.js":[function(require,module,exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],"node_modules/lodash/_getMapData.js":[function(require,module,exports) {
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":"node_modules/lodash/_isKeyable.js"}],"node_modules/lodash/_mapCacheDelete.js":[function(require,module,exports) {
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":"node_modules/lodash/_getMapData.js"}],"node_modules/lodash/_mapCacheGet.js":[function(require,module,exports) {
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":"node_modules/lodash/_getMapData.js"}],"node_modules/lodash/_mapCacheHas.js":[function(require,module,exports) {
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":"node_modules/lodash/_getMapData.js"}],"node_modules/lodash/_mapCacheSet.js":[function(require,module,exports) {
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":"node_modules/lodash/_getMapData.js"}],"node_modules/lodash/_MapCache.js":[function(require,module,exports) {
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":"node_modules/lodash/_mapCacheClear.js","./_mapCacheDelete":"node_modules/lodash/_mapCacheDelete.js","./_mapCacheGet":"node_modules/lodash/_mapCacheGet.js","./_mapCacheHas":"node_modules/lodash/_mapCacheHas.js","./_mapCacheSet":"node_modules/lodash/_mapCacheSet.js"}],"node_modules/lodash/_stackSet.js":[function(require,module,exports) {
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":"node_modules/lodash/_ListCache.js","./_Map":"node_modules/lodash/_Map.js","./_MapCache":"node_modules/lodash/_MapCache.js"}],"node_modules/lodash/_Stack.js":[function(require,module,exports) {
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":"node_modules/lodash/_ListCache.js","./_stackClear":"node_modules/lodash/_stackClear.js","./_stackDelete":"node_modules/lodash/_stackDelete.js","./_stackGet":"node_modules/lodash/_stackGet.js","./_stackHas":"node_modules/lodash/_stackHas.js","./_stackSet":"node_modules/lodash/_stackSet.js"}],"node_modules/lodash/_arrayEach.js":[function(require,module,exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],"node_modules/lodash/_defineProperty.js":[function(require,module,exports) {
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":"node_modules/lodash/_getNative.js"}],"node_modules/lodash/_baseAssignValue.js":[function(require,module,exports) {
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

},{"./_defineProperty":"node_modules/lodash/_defineProperty.js"}],"node_modules/lodash/_assignValue.js":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

},{"./_baseAssignValue":"node_modules/lodash/_baseAssignValue.js","./eq":"node_modules/lodash/eq.js"}],"node_modules/lodash/_copyObject.js":[function(require,module,exports) {
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":"node_modules/lodash/_assignValue.js","./_baseAssignValue":"node_modules/lodash/_baseAssignValue.js"}],"node_modules/lodash/_baseTimes.js":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],"node_modules/lodash/isObjectLike.js":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],"node_modules/lodash/_baseIsArguments.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/isArguments.js":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":"node_modules/lodash/_baseIsArguments.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/isArray.js":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],"node_modules/lodash/stubFalse.js":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],"node_modules/lodash/isBuffer.js":[function(require,module,exports) {

var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":"node_modules/lodash/_root.js","./stubFalse":"node_modules/lodash/stubFalse.js"}],"node_modules/lodash/_isIndex.js":[function(require,module,exports) {
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],"node_modules/lodash/isLength.js":[function(require,module,exports) {
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],"node_modules/lodash/_baseIsTypedArray.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isLength":"node_modules/lodash/isLength.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/_baseUnary.js":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],"node_modules/lodash/_nodeUtil.js":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":"node_modules/lodash/_freeGlobal.js"}],"node_modules/lodash/isTypedArray.js":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":"node_modules/lodash/_baseIsTypedArray.js","./_baseUnary":"node_modules/lodash/_baseUnary.js","./_nodeUtil":"node_modules/lodash/_nodeUtil.js"}],"node_modules/lodash/_arrayLikeKeys.js":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":"node_modules/lodash/_baseTimes.js","./isArguments":"node_modules/lodash/isArguments.js","./isArray":"node_modules/lodash/isArray.js","./isBuffer":"node_modules/lodash/isBuffer.js","./_isIndex":"node_modules/lodash/_isIndex.js","./isTypedArray":"node_modules/lodash/isTypedArray.js"}],"node_modules/lodash/_isPrototype.js":[function(require,module,exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],"node_modules/lodash/_overArg.js":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],"node_modules/lodash/_nativeKeys.js":[function(require,module,exports) {
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":"node_modules/lodash/_overArg.js"}],"node_modules/lodash/_baseKeys.js":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":"node_modules/lodash/_isPrototype.js","./_nativeKeys":"node_modules/lodash/_nativeKeys.js"}],"node_modules/lodash/isArrayLike.js":[function(require,module,exports) {
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":"node_modules/lodash/isFunction.js","./isLength":"node_modules/lodash/isLength.js"}],"node_modules/lodash/keys.js":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":"node_modules/lodash/_arrayLikeKeys.js","./_baseKeys":"node_modules/lodash/_baseKeys.js","./isArrayLike":"node_modules/lodash/isArrayLike.js"}],"node_modules/lodash/_baseAssign.js":[function(require,module,exports) {
var copyObject = require('./_copyObject'),
    keys = require('./keys');

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

},{"./_copyObject":"node_modules/lodash/_copyObject.js","./keys":"node_modules/lodash/keys.js"}],"node_modules/lodash/_nativeKeysIn.js":[function(require,module,exports) {
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

},{}],"node_modules/lodash/_baseKeysIn.js":[function(require,module,exports) {
var isObject = require('./isObject'),
    isPrototype = require('./_isPrototype'),
    nativeKeysIn = require('./_nativeKeysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

},{"./isObject":"node_modules/lodash/isObject.js","./_isPrototype":"node_modules/lodash/_isPrototype.js","./_nativeKeysIn":"node_modules/lodash/_nativeKeysIn.js"}],"node_modules/lodash/keysIn.js":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeysIn = require('./_baseKeysIn'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

},{"./_arrayLikeKeys":"node_modules/lodash/_arrayLikeKeys.js","./_baseKeysIn":"node_modules/lodash/_baseKeysIn.js","./isArrayLike":"node_modules/lodash/isArrayLike.js"}],"node_modules/lodash/_baseAssignIn.js":[function(require,module,exports) {
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

},{"./_copyObject":"node_modules/lodash/_copyObject.js","./keysIn":"node_modules/lodash/keysIn.js"}],"node_modules/lodash/_cloneBuffer.js":[function(require,module,exports) {

var root = require('./_root');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

},{"./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_copyArray.js":[function(require,module,exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

},{}],"node_modules/lodash/_arrayFilter.js":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],"node_modules/lodash/stubArray.js":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],"node_modules/lodash/_getSymbols.js":[function(require,module,exports) {
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":"node_modules/lodash/_arrayFilter.js","./stubArray":"node_modules/lodash/stubArray.js"}],"node_modules/lodash/_copySymbols.js":[function(require,module,exports) {
var copyObject = require('./_copyObject'),
    getSymbols = require('./_getSymbols');

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

},{"./_copyObject":"node_modules/lodash/_copyObject.js","./_getSymbols":"node_modules/lodash/_getSymbols.js"}],"node_modules/lodash/_arrayPush.js":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],"node_modules/lodash/_getPrototype.js":[function(require,module,exports) {
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":"node_modules/lodash/_overArg.js"}],"node_modules/lodash/_getSymbolsIn.js":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'),
    getPrototype = require('./_getPrototype'),
    getSymbols = require('./_getSymbols'),
    stubArray = require('./stubArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;

},{"./_arrayPush":"node_modules/lodash/_arrayPush.js","./_getPrototype":"node_modules/lodash/_getPrototype.js","./_getSymbols":"node_modules/lodash/_getSymbols.js","./stubArray":"node_modules/lodash/stubArray.js"}],"node_modules/lodash/_copySymbolsIn.js":[function(require,module,exports) {
var copyObject = require('./_copyObject'),
    getSymbolsIn = require('./_getSymbolsIn');

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

},{"./_copyObject":"node_modules/lodash/_copyObject.js","./_getSymbolsIn":"node_modules/lodash/_getSymbolsIn.js"}],"node_modules/lodash/_baseGetAllKeys.js":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":"node_modules/lodash/_arrayPush.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/_getAllKeys.js":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":"node_modules/lodash/_baseGetAllKeys.js","./_getSymbols":"node_modules/lodash/_getSymbols.js","./keys":"node_modules/lodash/keys.js"}],"node_modules/lodash/_getAllKeysIn.js":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbolsIn = require('./_getSymbolsIn'),
    keysIn = require('./keysIn');

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

},{"./_baseGetAllKeys":"node_modules/lodash/_baseGetAllKeys.js","./_getSymbolsIn":"node_modules/lodash/_getSymbolsIn.js","./keysIn":"node_modules/lodash/keysIn.js"}],"node_modules/lodash/_DataView.js":[function(require,module,exports) {
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":"node_modules/lodash/_getNative.js","./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_Promise.js":[function(require,module,exports) {
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":"node_modules/lodash/_getNative.js","./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_Set.js":[function(require,module,exports) {
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":"node_modules/lodash/_getNative.js","./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_WeakMap.js":[function(require,module,exports) {
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":"node_modules/lodash/_getNative.js","./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_getTag.js":[function(require,module,exports) {
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":"node_modules/lodash/_DataView.js","./_Map":"node_modules/lodash/_Map.js","./_Promise":"node_modules/lodash/_Promise.js","./_Set":"node_modules/lodash/_Set.js","./_WeakMap":"node_modules/lodash/_WeakMap.js","./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./_toSource":"node_modules/lodash/_toSource.js"}],"node_modules/lodash/_initCloneArray.js":[function(require,module,exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

},{}],"node_modules/lodash/_Uint8Array.js":[function(require,module,exports) {
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_cloneArrayBuffer.js":[function(require,module,exports) {
var Uint8Array = require('./_Uint8Array');

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

},{"./_Uint8Array":"node_modules/lodash/_Uint8Array.js"}],"node_modules/lodash/_cloneDataView.js":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

},{"./_cloneArrayBuffer":"node_modules/lodash/_cloneArrayBuffer.js"}],"node_modules/lodash/_cloneRegExp.js":[function(require,module,exports) {
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

},{}],"node_modules/lodash/_cloneSymbol.js":[function(require,module,exports) {
var Symbol = require('./_Symbol');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

},{"./_Symbol":"node_modules/lodash/_Symbol.js"}],"node_modules/lodash/_cloneTypedArray.js":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":"node_modules/lodash/_cloneArrayBuffer.js"}],"node_modules/lodash/_initCloneByTag.js":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer'),
    cloneDataView = require('./_cloneDataView'),
    cloneRegExp = require('./_cloneRegExp'),
    cloneSymbol = require('./_cloneSymbol'),
    cloneTypedArray = require('./_cloneTypedArray');

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":"node_modules/lodash/_cloneArrayBuffer.js","./_cloneDataView":"node_modules/lodash/_cloneDataView.js","./_cloneRegExp":"node_modules/lodash/_cloneRegExp.js","./_cloneSymbol":"node_modules/lodash/_cloneSymbol.js","./_cloneTypedArray":"node_modules/lodash/_cloneTypedArray.js"}],"node_modules/lodash/_baseCreate.js":[function(require,module,exports) {
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;

},{"./isObject":"node_modules/lodash/isObject.js"}],"node_modules/lodash/_initCloneObject.js":[function(require,module,exports) {
var baseCreate = require('./_baseCreate'),
    getPrototype = require('./_getPrototype'),
    isPrototype = require('./_isPrototype');

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;

},{"./_baseCreate":"node_modules/lodash/_baseCreate.js","./_getPrototype":"node_modules/lodash/_getPrototype.js","./_isPrototype":"node_modules/lodash/_isPrototype.js"}],"node_modules/lodash/_baseIsMap.js":[function(require,module,exports) {
var getTag = require('./_getTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;

},{"./_getTag":"node_modules/lodash/_getTag.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/isMap.js":[function(require,module,exports) {
var baseIsMap = require('./_baseIsMap'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;

},{"./_baseIsMap":"node_modules/lodash/_baseIsMap.js","./_baseUnary":"node_modules/lodash/_baseUnary.js","./_nodeUtil":"node_modules/lodash/_nodeUtil.js"}],"node_modules/lodash/_baseIsSet.js":[function(require,module,exports) {
var getTag = require('./_getTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;

},{"./_getTag":"node_modules/lodash/_getTag.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/isSet.js":[function(require,module,exports) {
var baseIsSet = require('./_baseIsSet'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;

},{"./_baseIsSet":"node_modules/lodash/_baseIsSet.js","./_baseUnary":"node_modules/lodash/_baseUnary.js","./_nodeUtil":"node_modules/lodash/_nodeUtil.js"}],"node_modules/lodash/_baseClone.js":[function(require,module,exports) {
var Stack = require('./_Stack'),
    arrayEach = require('./_arrayEach'),
    assignValue = require('./_assignValue'),
    baseAssign = require('./_baseAssign'),
    baseAssignIn = require('./_baseAssignIn'),
    cloneBuffer = require('./_cloneBuffer'),
    copyArray = require('./_copyArray'),
    copySymbols = require('./_copySymbols'),
    copySymbolsIn = require('./_copySymbolsIn'),
    getAllKeys = require('./_getAllKeys'),
    getAllKeysIn = require('./_getAllKeysIn'),
    getTag = require('./_getTag'),
    initCloneArray = require('./_initCloneArray'),
    initCloneByTag = require('./_initCloneByTag'),
    initCloneObject = require('./_initCloneObject'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isMap = require('./isMap'),
    isObject = require('./isObject'),
    isSet = require('./isSet'),
    keys = require('./keys'),
    keysIn = require('./keysIn');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

},{"./_Stack":"node_modules/lodash/_Stack.js","./_arrayEach":"node_modules/lodash/_arrayEach.js","./_assignValue":"node_modules/lodash/_assignValue.js","./_baseAssign":"node_modules/lodash/_baseAssign.js","./_baseAssignIn":"node_modules/lodash/_baseAssignIn.js","./_cloneBuffer":"node_modules/lodash/_cloneBuffer.js","./_copyArray":"node_modules/lodash/_copyArray.js","./_copySymbols":"node_modules/lodash/_copySymbols.js","./_copySymbolsIn":"node_modules/lodash/_copySymbolsIn.js","./_getAllKeys":"node_modules/lodash/_getAllKeys.js","./_getAllKeysIn":"node_modules/lodash/_getAllKeysIn.js","./_getTag":"node_modules/lodash/_getTag.js","./_initCloneArray":"node_modules/lodash/_initCloneArray.js","./_initCloneByTag":"node_modules/lodash/_initCloneByTag.js","./_initCloneObject":"node_modules/lodash/_initCloneObject.js","./isArray":"node_modules/lodash/isArray.js","./isBuffer":"node_modules/lodash/isBuffer.js","./isMap":"node_modules/lodash/isMap.js","./isObject":"node_modules/lodash/isObject.js","./isSet":"node_modules/lodash/isSet.js","./keys":"node_modules/lodash/keys.js","./keysIn":"node_modules/lodash/keysIn.js"}],"node_modules/lodash/clone.js":[function(require,module,exports) {
var baseClone = require('./_baseClone');

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;

},{"./_baseClone":"node_modules/lodash/_baseClone.js"}],"node_modules/lodash/constant.js":[function(require,module,exports) {
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],"node_modules/lodash/_createBaseFor.js":[function(require,module,exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],"node_modules/lodash/_baseFor.js":[function(require,module,exports) {
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":"node_modules/lodash/_createBaseFor.js"}],"node_modules/lodash/_baseForOwn.js":[function(require,module,exports) {
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":"node_modules/lodash/_baseFor.js","./keys":"node_modules/lodash/keys.js"}],"node_modules/lodash/_createBaseEach.js":[function(require,module,exports) {
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":"node_modules/lodash/isArrayLike.js"}],"node_modules/lodash/_baseEach.js":[function(require,module,exports) {
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":"node_modules/lodash/_baseForOwn.js","./_createBaseEach":"node_modules/lodash/_createBaseEach.js"}],"node_modules/lodash/identity.js":[function(require,module,exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],"node_modules/lodash/_castFunction.js":[function(require,module,exports) {
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

},{"./identity":"node_modules/lodash/identity.js"}],"node_modules/lodash/forEach.js":[function(require,module,exports) {
var arrayEach = require('./_arrayEach'),
    baseEach = require('./_baseEach'),
    castFunction = require('./_castFunction'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

},{"./_arrayEach":"node_modules/lodash/_arrayEach.js","./_baseEach":"node_modules/lodash/_baseEach.js","./_castFunction":"node_modules/lodash/_castFunction.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/each.js":[function(require,module,exports) {
module.exports = require('./forEach');

},{"./forEach":"node_modules/lodash/forEach.js"}],"node_modules/lodash/_baseFilter.js":[function(require,module,exports) {
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

},{"./_baseEach":"node_modules/lodash/_baseEach.js"}],"node_modules/lodash/_setCacheAdd.js":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],"node_modules/lodash/_setCacheHas.js":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],"node_modules/lodash/_SetCache.js":[function(require,module,exports) {
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":"node_modules/lodash/_MapCache.js","./_setCacheAdd":"node_modules/lodash/_setCacheAdd.js","./_setCacheHas":"node_modules/lodash/_setCacheHas.js"}],"node_modules/lodash/_arraySome.js":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],"node_modules/lodash/_cacheHas.js":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],"node_modules/lodash/_equalArrays.js":[function(require,module,exports) {
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":"node_modules/lodash/_SetCache.js","./_arraySome":"node_modules/lodash/_arraySome.js","./_cacheHas":"node_modules/lodash/_cacheHas.js"}],"node_modules/lodash/_mapToArray.js":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],"node_modules/lodash/_setToArray.js":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],"node_modules/lodash/_equalByTag.js":[function(require,module,exports) {
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":"node_modules/lodash/_Symbol.js","./_Uint8Array":"node_modules/lodash/_Uint8Array.js","./eq":"node_modules/lodash/eq.js","./_equalArrays":"node_modules/lodash/_equalArrays.js","./_mapToArray":"node_modules/lodash/_mapToArray.js","./_setToArray":"node_modules/lodash/_setToArray.js"}],"node_modules/lodash/_equalObjects.js":[function(require,module,exports) {
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":"node_modules/lodash/_getAllKeys.js"}],"node_modules/lodash/_baseIsEqualDeep.js":[function(require,module,exports) {
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":"node_modules/lodash/_Stack.js","./_equalArrays":"node_modules/lodash/_equalArrays.js","./_equalByTag":"node_modules/lodash/_equalByTag.js","./_equalObjects":"node_modules/lodash/_equalObjects.js","./_getTag":"node_modules/lodash/_getTag.js","./isArray":"node_modules/lodash/isArray.js","./isBuffer":"node_modules/lodash/isBuffer.js","./isTypedArray":"node_modules/lodash/isTypedArray.js"}],"node_modules/lodash/_baseIsEqual.js":[function(require,module,exports) {
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"node_modules/lodash/_baseIsEqualDeep.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/_baseIsMatch.js":[function(require,module,exports) {
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":"node_modules/lodash/_Stack.js","./_baseIsEqual":"node_modules/lodash/_baseIsEqual.js"}],"node_modules/lodash/_isStrictComparable.js":[function(require,module,exports) {
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":"node_modules/lodash/isObject.js"}],"node_modules/lodash/_getMatchData.js":[function(require,module,exports) {
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":"node_modules/lodash/_isStrictComparable.js","./keys":"node_modules/lodash/keys.js"}],"node_modules/lodash/_matchesStrictComparable.js":[function(require,module,exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],"node_modules/lodash/_baseMatches.js":[function(require,module,exports) {
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":"node_modules/lodash/_baseIsMatch.js","./_getMatchData":"node_modules/lodash/_getMatchData.js","./_matchesStrictComparable":"node_modules/lodash/_matchesStrictComparable.js"}],"node_modules/lodash/isSymbol.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/_isKey.js":[function(require,module,exports) {
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":"node_modules/lodash/isArray.js","./isSymbol":"node_modules/lodash/isSymbol.js"}],"node_modules/lodash/memoize.js":[function(require,module,exports) {
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":"node_modules/lodash/_MapCache.js"}],"node_modules/lodash/_memoizeCapped.js":[function(require,module,exports) {
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":"node_modules/lodash/memoize.js"}],"node_modules/lodash/_stringToPath.js":[function(require,module,exports) {
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":"node_modules/lodash/_memoizeCapped.js"}],"node_modules/lodash/_arrayMap.js":[function(require,module,exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],"node_modules/lodash/_baseToString.js":[function(require,module,exports) {
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":"node_modules/lodash/_Symbol.js","./_arrayMap":"node_modules/lodash/_arrayMap.js","./isArray":"node_modules/lodash/isArray.js","./isSymbol":"node_modules/lodash/isSymbol.js"}],"node_modules/lodash/toString.js":[function(require,module,exports) {
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":"node_modules/lodash/_baseToString.js"}],"node_modules/lodash/_castPath.js":[function(require,module,exports) {
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./isArray":"node_modules/lodash/isArray.js","./_isKey":"node_modules/lodash/_isKey.js","./_stringToPath":"node_modules/lodash/_stringToPath.js","./toString":"node_modules/lodash/toString.js"}],"node_modules/lodash/_toKey.js":[function(require,module,exports) {
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":"node_modules/lodash/isSymbol.js"}],"node_modules/lodash/_baseGet.js":[function(require,module,exports) {
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":"node_modules/lodash/_castPath.js","./_toKey":"node_modules/lodash/_toKey.js"}],"node_modules/lodash/get.js":[function(require,module,exports) {
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":"node_modules/lodash/_baseGet.js"}],"node_modules/lodash/_baseHasIn.js":[function(require,module,exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],"node_modules/lodash/_hasPath.js":[function(require,module,exports) {
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":"node_modules/lodash/_castPath.js","./isArguments":"node_modules/lodash/isArguments.js","./isArray":"node_modules/lodash/isArray.js","./_isIndex":"node_modules/lodash/_isIndex.js","./isLength":"node_modules/lodash/isLength.js","./_toKey":"node_modules/lodash/_toKey.js"}],"node_modules/lodash/hasIn.js":[function(require,module,exports) {
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":"node_modules/lodash/_baseHasIn.js","./_hasPath":"node_modules/lodash/_hasPath.js"}],"node_modules/lodash/_baseMatchesProperty.js":[function(require,module,exports) {
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":"node_modules/lodash/_baseIsEqual.js","./get":"node_modules/lodash/get.js","./hasIn":"node_modules/lodash/hasIn.js","./_isKey":"node_modules/lodash/_isKey.js","./_isStrictComparable":"node_modules/lodash/_isStrictComparable.js","./_matchesStrictComparable":"node_modules/lodash/_matchesStrictComparable.js","./_toKey":"node_modules/lodash/_toKey.js"}],"node_modules/lodash/_baseProperty.js":[function(require,module,exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],"node_modules/lodash/_basePropertyDeep.js":[function(require,module,exports) {
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":"node_modules/lodash/_baseGet.js"}],"node_modules/lodash/property.js":[function(require,module,exports) {
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":"node_modules/lodash/_baseProperty.js","./_basePropertyDeep":"node_modules/lodash/_basePropertyDeep.js","./_isKey":"node_modules/lodash/_isKey.js","./_toKey":"node_modules/lodash/_toKey.js"}],"node_modules/lodash/_baseIteratee.js":[function(require,module,exports) {
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":"node_modules/lodash/_baseMatches.js","./_baseMatchesProperty":"node_modules/lodash/_baseMatchesProperty.js","./identity":"node_modules/lodash/identity.js","./isArray":"node_modules/lodash/isArray.js","./property":"node_modules/lodash/property.js"}],"node_modules/lodash/filter.js":[function(require,module,exports) {
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 *
 * // Combining several predicates using `_.overEvery` or `_.overSome`.
 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
 * // => objects for ['fred', 'barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

},{"./_arrayFilter":"node_modules/lodash/_arrayFilter.js","./_baseFilter":"node_modules/lodash/_baseFilter.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/_baseHas.js":[function(require,module,exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

},{}],"node_modules/lodash/has.js":[function(require,module,exports) {
var baseHas = require('./_baseHas'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;

},{"./_baseHas":"node_modules/lodash/_baseHas.js","./_hasPath":"node_modules/lodash/_hasPath.js"}],"node_modules/lodash/isEmpty.js":[function(require,module,exports) {
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isPrototype = require('./_isPrototype'),
    isTypedArray = require('./isTypedArray');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

},{"./_baseKeys":"node_modules/lodash/_baseKeys.js","./_getTag":"node_modules/lodash/_getTag.js","./isArguments":"node_modules/lodash/isArguments.js","./isArray":"node_modules/lodash/isArray.js","./isArrayLike":"node_modules/lodash/isArrayLike.js","./isBuffer":"node_modules/lodash/isBuffer.js","./_isPrototype":"node_modules/lodash/_isPrototype.js","./isTypedArray":"node_modules/lodash/isTypedArray.js"}],"node_modules/lodash/isUndefined.js":[function(require,module,exports) {
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

},{}],"node_modules/lodash/_baseMap.js":[function(require,module,exports) {
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

},{"./_baseEach":"node_modules/lodash/_baseEach.js","./isArrayLike":"node_modules/lodash/isArrayLike.js"}],"node_modules/lodash/map.js":[function(require,module,exports) {
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

},{"./_arrayMap":"node_modules/lodash/_arrayMap.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./_baseMap":"node_modules/lodash/_baseMap.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/_arrayReduce.js":[function(require,module,exports) {
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;

},{}],"node_modules/lodash/_baseReduce.js":[function(require,module,exports) {
/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

module.exports = baseReduce;

},{}],"node_modules/lodash/reduce.js":[function(require,module,exports) {
var arrayReduce = require('./_arrayReduce'),
    baseEach = require('./_baseEach'),
    baseIteratee = require('./_baseIteratee'),
    baseReduce = require('./_baseReduce'),
    isArray = require('./isArray');

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */
function reduce(collection, iteratee, accumulator) {
  var func = isArray(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
}

module.exports = reduce;

},{"./_arrayReduce":"node_modules/lodash/_arrayReduce.js","./_baseEach":"node_modules/lodash/_baseEach.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./_baseReduce":"node_modules/lodash/_baseReduce.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/isString.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isArray":"node_modules/lodash/isArray.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/_asciiSize.js":[function(require,module,exports) {
var baseProperty = require('./_baseProperty');

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

module.exports = asciiSize;

},{"./_baseProperty":"node_modules/lodash/_baseProperty.js"}],"node_modules/lodash/_hasUnicode.js":[function(require,module,exports) {
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;

},{}],"node_modules/lodash/_unicodeSize.js":[function(require,module,exports) {
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;
  while (reUnicode.test(string)) {
    ++result;
  }
  return result;
}

module.exports = unicodeSize;

},{}],"node_modules/lodash/_stringSize.js":[function(require,module,exports) {
var asciiSize = require('./_asciiSize'),
    hasUnicode = require('./_hasUnicode'),
    unicodeSize = require('./_unicodeSize');

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

module.exports = stringSize;

},{"./_asciiSize":"node_modules/lodash/_asciiSize.js","./_hasUnicode":"node_modules/lodash/_hasUnicode.js","./_unicodeSize":"node_modules/lodash/_unicodeSize.js"}],"node_modules/lodash/size.js":[function(require,module,exports) {
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    stringSize = require('./_stringSize');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }
  var tag = getTag(collection);
  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }
  return baseKeys(collection).length;
}

module.exports = size;

},{"./_baseKeys":"node_modules/lodash/_baseKeys.js","./_getTag":"node_modules/lodash/_getTag.js","./isArrayLike":"node_modules/lodash/isArrayLike.js","./isString":"node_modules/lodash/isString.js","./_stringSize":"node_modules/lodash/_stringSize.js"}],"node_modules/lodash/transform.js":[function(require,module,exports) {
var arrayEach = require('./_arrayEach'),
    baseCreate = require('./_baseCreate'),
    baseForOwn = require('./_baseForOwn'),
    baseIteratee = require('./_baseIteratee'),
    getPrototype = require('./_getPrototype'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isFunction = require('./isFunction'),
    isObject = require('./isObject'),
    isTypedArray = require('./isTypedArray');

/**
 * An alternative to `_.reduce`; this method transforms `object` to a new
 * `accumulator` object which is the result of running each of its own
 * enumerable string keyed properties thru `iteratee`, with each invocation
 * potentially mutating the `accumulator` object. If `accumulator` is not
 * provided, a new object with the same `[[Prototype]]` will be used. The
 * iteratee is invoked with four arguments: (accumulator, value, key, object).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The custom accumulator value.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * _.transform([2, 3, 4], function(result, n) {
 *   result.push(n *= n);
 *   return n % 2 == 0;
 * }, []);
 * // => [4, 9]
 *
 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] }
 */
function transform(object, iteratee, accumulator) {
  var isArr = isArray(object),
      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

  iteratee = baseIteratee(iteratee, 4);
  if (accumulator == null) {
    var Ctor = object && object.constructor;
    if (isArrLike) {
      accumulator = isArr ? new Ctor : [];
    }
    else if (isObject(object)) {
      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    }
    else {
      accumulator = {};
    }
  }
  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    return iteratee(accumulator, value, index, object);
  });
  return accumulator;
}

module.exports = transform;

},{"./_arrayEach":"node_modules/lodash/_arrayEach.js","./_baseCreate":"node_modules/lodash/_baseCreate.js","./_baseForOwn":"node_modules/lodash/_baseForOwn.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./_getPrototype":"node_modules/lodash/_getPrototype.js","./isArray":"node_modules/lodash/isArray.js","./isBuffer":"node_modules/lodash/isBuffer.js","./isFunction":"node_modules/lodash/isFunction.js","./isObject":"node_modules/lodash/isObject.js","./isTypedArray":"node_modules/lodash/isTypedArray.js"}],"node_modules/lodash/_isFlattenable.js":[function(require,module,exports) {
var Symbol = require('./_Symbol'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray');

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

},{"./_Symbol":"node_modules/lodash/_Symbol.js","./isArguments":"node_modules/lodash/isArguments.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/_baseFlatten.js":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'),
    isFlattenable = require('./_isFlattenable');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

},{"./_arrayPush":"node_modules/lodash/_arrayPush.js","./_isFlattenable":"node_modules/lodash/_isFlattenable.js"}],"node_modules/lodash/_apply.js":[function(require,module,exports) {
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],"node_modules/lodash/_overRest.js":[function(require,module,exports) {
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":"node_modules/lodash/_apply.js"}],"node_modules/lodash/_baseSetToString.js":[function(require,module,exports) {
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./constant":"node_modules/lodash/constant.js","./_defineProperty":"node_modules/lodash/_defineProperty.js","./identity":"node_modules/lodash/identity.js"}],"node_modules/lodash/_shortOut.js":[function(require,module,exports) {
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],"node_modules/lodash/_setToString.js":[function(require,module,exports) {
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":"node_modules/lodash/_baseSetToString.js","./_shortOut":"node_modules/lodash/_shortOut.js"}],"node_modules/lodash/_baseRest.js":[function(require,module,exports) {
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./identity":"node_modules/lodash/identity.js","./_overRest":"node_modules/lodash/_overRest.js","./_setToString":"node_modules/lodash/_setToString.js"}],"node_modules/lodash/_baseFindIndex.js":[function(require,module,exports) {
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],"node_modules/lodash/_baseIsNaN.js":[function(require,module,exports) {
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

},{}],"node_modules/lodash/_strictIndexOf.js":[function(require,module,exports) {
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

},{}],"node_modules/lodash/_baseIndexOf.js":[function(require,module,exports) {
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

},{"./_baseFindIndex":"node_modules/lodash/_baseFindIndex.js","./_baseIsNaN":"node_modules/lodash/_baseIsNaN.js","./_strictIndexOf":"node_modules/lodash/_strictIndexOf.js"}],"node_modules/lodash/_arrayIncludes.js":[function(require,module,exports) {
var baseIndexOf = require('./_baseIndexOf');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

},{"./_baseIndexOf":"node_modules/lodash/_baseIndexOf.js"}],"node_modules/lodash/_arrayIncludesWith.js":[function(require,module,exports) {
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

},{}],"node_modules/lodash/noop.js":[function(require,module,exports) {
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

},{}],"node_modules/lodash/_createSet.js":[function(require,module,exports) {
var Set = require('./_Set'),
    noop = require('./noop'),
    setToArray = require('./_setToArray');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;

},{"./_Set":"node_modules/lodash/_Set.js","./noop":"node_modules/lodash/noop.js","./_setToArray":"node_modules/lodash/_setToArray.js"}],"node_modules/lodash/_baseUniq.js":[function(require,module,exports) {
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    cacheHas = require('./_cacheHas'),
    createSet = require('./_createSet'),
    setToArray = require('./_setToArray');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;

},{"./_SetCache":"node_modules/lodash/_SetCache.js","./_arrayIncludes":"node_modules/lodash/_arrayIncludes.js","./_arrayIncludesWith":"node_modules/lodash/_arrayIncludesWith.js","./_cacheHas":"node_modules/lodash/_cacheHas.js","./_createSet":"node_modules/lodash/_createSet.js","./_setToArray":"node_modules/lodash/_setToArray.js"}],"node_modules/lodash/isArrayLikeObject.js":[function(require,module,exports) {
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":"node_modules/lodash/isArrayLike.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/union.js":[function(require,module,exports) {
var baseFlatten = require('./_baseFlatten'),
    baseRest = require('./_baseRest'),
    baseUniq = require('./_baseUniq'),
    isArrayLikeObject = require('./isArrayLikeObject');

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest(function(arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});

module.exports = union;

},{"./_baseFlatten":"node_modules/lodash/_baseFlatten.js","./_baseRest":"node_modules/lodash/_baseRest.js","./_baseUniq":"node_modules/lodash/_baseUniq.js","./isArrayLikeObject":"node_modules/lodash/isArrayLikeObject.js"}],"node_modules/lodash/_baseValues.js":[function(require,module,exports) {
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;

},{"./_arrayMap":"node_modules/lodash/_arrayMap.js"}],"node_modules/lodash/values.js":[function(require,module,exports) {
var baseValues = require('./_baseValues'),
    keys = require('./keys');

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

},{"./_baseValues":"node_modules/lodash/_baseValues.js","./keys":"node_modules/lodash/keys.js"}],"node_modules/graphlib/lib/lodash.js":[function(require,module,exports) {
/* global window */

var lodash;

if (typeof require === "function") {
  try {
    lodash = {
      clone: require("lodash/clone"),
      constant: require("lodash/constant"),
      each: require("lodash/each"),
      filter: require("lodash/filter"),
      has:  require("lodash/has"),
      isArray: require("lodash/isArray"),
      isEmpty: require("lodash/isEmpty"),
      isFunction: require("lodash/isFunction"),
      isUndefined: require("lodash/isUndefined"),
      keys: require("lodash/keys"),
      map: require("lodash/map"),
      reduce: require("lodash/reduce"),
      size: require("lodash/size"),
      transform: require("lodash/transform"),
      union: require("lodash/union"),
      values: require("lodash/values")
    };
  } catch (e) {
    // continue regardless of error
  }
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;

},{"lodash/clone":"node_modules/lodash/clone.js","lodash/constant":"node_modules/lodash/constant.js","lodash/each":"node_modules/lodash/each.js","lodash/filter":"node_modules/lodash/filter.js","lodash/has":"node_modules/lodash/has.js","lodash/isArray":"node_modules/lodash/isArray.js","lodash/isEmpty":"node_modules/lodash/isEmpty.js","lodash/isFunction":"node_modules/lodash/isFunction.js","lodash/isUndefined":"node_modules/lodash/isUndefined.js","lodash/keys":"node_modules/lodash/keys.js","lodash/map":"node_modules/lodash/map.js","lodash/reduce":"node_modules/lodash/reduce.js","lodash/size":"node_modules/lodash/size.js","lodash/transform":"node_modules/lodash/transform.js","lodash/union":"node_modules/lodash/union.js","lodash/values":"node_modules/lodash/values.js"}],"node_modules/graphlib/lib/graph.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");

module.exports = Graph;

var DEFAULT_EDGE_NAME = "\x00";
var GRAPH_NODE = "\x00";
var EDGE_KEY_DELIM = "\x01";

// Implementation notes:
//
//  * Node id query functions should return string ids for the nodes
//  * Edge id query functions should return an "edgeObj", edge object, that is
//    composed of enough information to uniquely identify an edge: {v, w, name}.
//  * Internally we use an "edgeId", a stringified form of the edgeObj, to
//    reference edges. This is because we need a performant way to look these
//    edges up and, object properties, which have string keys, are the closest
//    we're going to get to a performant hashtable in JavaScript.

function Graph(opts) {
  this._isDirected = _.has(opts, "directed") ? opts.directed : true;
  this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
  this._isCompound = _.has(opts, "compound") ? opts.compound : false;

  // Label for the graph itself
  this._label = undefined;

  // Defaults to be set when creating a new node
  this._defaultNodeLabelFn = _.constant(undefined);

  // Defaults to be set when creating a new edge
  this._defaultEdgeLabelFn = _.constant(undefined);

  // v -> label
  this._nodes = {};

  if (this._isCompound) {
    // v -> parent
    this._parent = {};

    // v -> children
    this._children = {};
    this._children[GRAPH_NODE] = {};
  }

  // v -> edgeObj
  this._in = {};

  // u -> v -> Number
  this._preds = {};

  // v -> edgeObj
  this._out = {};

  // v -> w -> Number
  this._sucs = {};

  // e -> edgeObj
  this._edgeObjs = {};

  // e -> label
  this._edgeLabels = {};
}

/* Number of nodes in the graph. Should only be changed by the implementation. */
Graph.prototype._nodeCount = 0;

/* Number of edges in the graph. Should only be changed by the implementation. */
Graph.prototype._edgeCount = 0;


/* === Graph functions ========= */

Graph.prototype.isDirected = function() {
  return this._isDirected;
};

Graph.prototype.isMultigraph = function() {
  return this._isMultigraph;
};

Graph.prototype.isCompound = function() {
  return this._isCompound;
};

Graph.prototype.setGraph = function(label) {
  this._label = label;
  return this;
};

Graph.prototype.graph = function() {
  return this._label;
};


/* === Node functions ========== */

Graph.prototype.setDefaultNodeLabel = function(newDefault) {
  if (!_.isFunction(newDefault)) {
    newDefault = _.constant(newDefault);
  }
  this._defaultNodeLabelFn = newDefault;
  return this;
};

Graph.prototype.nodeCount = function() {
  return this._nodeCount;
};

Graph.prototype.nodes = function() {
  return _.keys(this._nodes);
};

Graph.prototype.sources = function() {
  var self = this;
  return _.filter(this.nodes(), function(v) {
    return _.isEmpty(self._in[v]);
  });
};

Graph.prototype.sinks = function() {
  var self = this;
  return _.filter(this.nodes(), function(v) {
    return _.isEmpty(self._out[v]);
  });
};

Graph.prototype.setNodes = function(vs, value) {
  var args = arguments;
  var self = this;
  _.each(vs, function(v) {
    if (args.length > 1) {
      self.setNode(v, value);
    } else {
      self.setNode(v);
    }
  });
  return this;
};

Graph.prototype.setNode = function(v, value) {
  if (_.has(this._nodes, v)) {
    if (arguments.length > 1) {
      this._nodes[v] = value;
    }
    return this;
  }

  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
  if (this._isCompound) {
    this._parent[v] = GRAPH_NODE;
    this._children[v] = {};
    this._children[GRAPH_NODE][v] = true;
  }
  this._in[v] = {};
  this._preds[v] = {};
  this._out[v] = {};
  this._sucs[v] = {};
  ++this._nodeCount;
  return this;
};

Graph.prototype.node = function(v) {
  return this._nodes[v];
};

Graph.prototype.hasNode = function(v) {
  return _.has(this._nodes, v);
};

Graph.prototype.removeNode =  function(v) {
  var self = this;
  if (_.has(this._nodes, v)) {
    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
    delete this._nodes[v];
    if (this._isCompound) {
      this._removeFromParentsChildList(v);
      delete this._parent[v];
      _.each(this.children(v), function(child) {
        self.setParent(child);
      });
      delete this._children[v];
    }
    _.each(_.keys(this._in[v]), removeEdge);
    delete this._in[v];
    delete this._preds[v];
    _.each(_.keys(this._out[v]), removeEdge);
    delete this._out[v];
    delete this._sucs[v];
    --this._nodeCount;
  }
  return this;
};

Graph.prototype.setParent = function(v, parent) {
  if (!this._isCompound) {
    throw new Error("Cannot set parent in a non-compound graph");
  }

  if (_.isUndefined(parent)) {
    parent = GRAPH_NODE;
  } else {
    // Coerce parent to string
    parent += "";
    for (var ancestor = parent;
      !_.isUndefined(ancestor);
      ancestor = this.parent(ancestor)) {
      if (ancestor === v) {
        throw new Error("Setting " + parent+ " as parent of " + v +
                        " would create a cycle");
      }
    }

    this.setNode(parent);
  }

  this.setNode(v);
  this._removeFromParentsChildList(v);
  this._parent[v] = parent;
  this._children[parent][v] = true;
  return this;
};

Graph.prototype._removeFromParentsChildList = function(v) {
  delete this._children[this._parent[v]][v];
};

Graph.prototype.parent = function(v) {
  if (this._isCompound) {
    var parent = this._parent[v];
    if (parent !== GRAPH_NODE) {
      return parent;
    }
  }
};

Graph.prototype.children = function(v) {
  if (_.isUndefined(v)) {
    v = GRAPH_NODE;
  }

  if (this._isCompound) {
    var children = this._children[v];
    if (children) {
      return _.keys(children);
    }
  } else if (v === GRAPH_NODE) {
    return this.nodes();
  } else if (this.hasNode(v)) {
    return [];
  }
};

Graph.prototype.predecessors = function(v) {
  var predsV = this._preds[v];
  if (predsV) {
    return _.keys(predsV);
  }
};

Graph.prototype.successors = function(v) {
  var sucsV = this._sucs[v];
  if (sucsV) {
    return _.keys(sucsV);
  }
};

Graph.prototype.neighbors = function(v) {
  var preds = this.predecessors(v);
  if (preds) {
    return _.union(preds, this.successors(v));
  }
};

Graph.prototype.isLeaf = function (v) {
  var neighbors;
  if (this.isDirected()) {
    neighbors = this.successors(v);
  } else {
    neighbors = this.neighbors(v);
  }
  return neighbors.length === 0;
};

Graph.prototype.filterNodes = function(filter) {
  var copy = new this.constructor({
    directed: this._isDirected,
    multigraph: this._isMultigraph,
    compound: this._isCompound
  });

  copy.setGraph(this.graph());

  var self = this;
  _.each(this._nodes, function(value, v) {
    if (filter(v)) {
      copy.setNode(v, value);
    }
  });

  _.each(this._edgeObjs, function(e) {
    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
      copy.setEdge(e, self.edge(e));
    }
  });

  var parents = {};
  function findParent(v) {
    var parent = self.parent(v);
    if (parent === undefined || copy.hasNode(parent)) {
      parents[v] = parent;
      return parent;
    } else if (parent in parents) {
      return parents[parent];
    } else {
      return findParent(parent);
    }
  }

  if (this._isCompound) {
    _.each(copy.nodes(), function(v) {
      copy.setParent(v, findParent(v));
    });
  }

  return copy;
};

/* === Edge functions ========== */

Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
  if (!_.isFunction(newDefault)) {
    newDefault = _.constant(newDefault);
  }
  this._defaultEdgeLabelFn = newDefault;
  return this;
};

Graph.prototype.edgeCount = function() {
  return this._edgeCount;
};

Graph.prototype.edges = function() {
  return _.values(this._edgeObjs);
};

Graph.prototype.setPath = function(vs, value) {
  var self = this;
  var args = arguments;
  _.reduce(vs, function(v, w) {
    if (args.length > 1) {
      self.setEdge(v, w, value);
    } else {
      self.setEdge(v, w);
    }
    return w;
  });
  return this;
};

/*
 * setEdge(v, w, [value, [name]])
 * setEdge({ v, w, [name] }, [value])
 */
Graph.prototype.setEdge = function() {
  var v, w, name, value;
  var valueSpecified = false;
  var arg0 = arguments[0];

  if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
    v = arg0.v;
    w = arg0.w;
    name = arg0.name;
    if (arguments.length === 2) {
      value = arguments[1];
      valueSpecified = true;
    }
  } else {
    v = arg0;
    w = arguments[1];
    name = arguments[3];
    if (arguments.length > 2) {
      value = arguments[2];
      valueSpecified = true;
    }
  }

  v = "" + v;
  w = "" + w;
  if (!_.isUndefined(name)) {
    name = "" + name;
  }

  var e = edgeArgsToId(this._isDirected, v, w, name);
  if (_.has(this._edgeLabels, e)) {
    if (valueSpecified) {
      this._edgeLabels[e] = value;
    }
    return this;
  }

  if (!_.isUndefined(name) && !this._isMultigraph) {
    throw new Error("Cannot set a named edge when isMultigraph = false");
  }

  // It didn't exist, so we need to create it.
  // First ensure the nodes exist.
  this.setNode(v);
  this.setNode(w);

  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
  // Ensure we add undirected edges in a consistent way.
  v = edgeObj.v;
  w = edgeObj.w;

  Object.freeze(edgeObj);
  this._edgeObjs[e] = edgeObj;
  incrementOrInitEntry(this._preds[w], v);
  incrementOrInitEntry(this._sucs[v], w);
  this._in[w][e] = edgeObj;
  this._out[v][e] = edgeObj;
  this._edgeCount++;
  return this;
};

Graph.prototype.edge = function(v, w, name) {
  var e = (arguments.length === 1
    ? edgeObjToId(this._isDirected, arguments[0])
    : edgeArgsToId(this._isDirected, v, w, name));
  return this._edgeLabels[e];
};

Graph.prototype.hasEdge = function(v, w, name) {
  var e = (arguments.length === 1
    ? edgeObjToId(this._isDirected, arguments[0])
    : edgeArgsToId(this._isDirected, v, w, name));
  return _.has(this._edgeLabels, e);
};

Graph.prototype.removeEdge = function(v, w, name) {
  var e = (arguments.length === 1
    ? edgeObjToId(this._isDirected, arguments[0])
    : edgeArgsToId(this._isDirected, v, w, name));
  var edge = this._edgeObjs[e];
  if (edge) {
    v = edge.v;
    w = edge.w;
    delete this._edgeLabels[e];
    delete this._edgeObjs[e];
    decrementOrRemoveEntry(this._preds[w], v);
    decrementOrRemoveEntry(this._sucs[v], w);
    delete this._in[w][e];
    delete this._out[v][e];
    this._edgeCount--;
  }
  return this;
};

Graph.prototype.inEdges = function(v, u) {
  var inV = this._in[v];
  if (inV) {
    var edges = _.values(inV);
    if (!u) {
      return edges;
    }
    return _.filter(edges, function(edge) { return edge.v === u; });
  }
};

Graph.prototype.outEdges = function(v, w) {
  var outV = this._out[v];
  if (outV) {
    var edges = _.values(outV);
    if (!w) {
      return edges;
    }
    return _.filter(edges, function(edge) { return edge.w === w; });
  }
};

Graph.prototype.nodeEdges = function(v, w) {
  var inEdges = this.inEdges(v, w);
  if (inEdges) {
    return inEdges.concat(this.outEdges(v, w));
  }
};

function incrementOrInitEntry(map, k) {
  if (map[k]) {
    map[k]++;
  } else {
    map[k] = 1;
  }
}

function decrementOrRemoveEntry(map, k) {
  if (!--map[k]) { delete map[k]; }
}

function edgeArgsToId(isDirected, v_, w_, name) {
  var v = "" + v_;
  var w = "" + w_;
  if (!isDirected && v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
}

function edgeArgsToObj(isDirected, v_, w_, name) {
  var v = "" + v_;
  var w = "" + w_;
  if (!isDirected && v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  var edgeObj =  { v: v, w: w };
  if (name) {
    edgeObj.name = name;
  }
  return edgeObj;
}

function edgeObjToId(isDirected, edgeObj) {
  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
}

},{"./lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/version.js":[function(require,module,exports) {
module.exports = '2.1.8';

},{}],"node_modules/graphlib/lib/index.js":[function(require,module,exports) {
// Includes only the "core" of graphlib
module.exports = {
  Graph: require("./graph"),
  version: require("./version")
};

},{"./graph":"node_modules/graphlib/lib/graph.js","./version":"node_modules/graphlib/lib/version.js"}],"node_modules/graphlib/lib/json.js":[function(require,module,exports) {
var _ = require("./lodash");
var Graph = require("./graph");

module.exports = {
  write: write,
  read: read
};

function write(g) {
  var json = {
    options: {
      directed: g.isDirected(),
      multigraph: g.isMultigraph(),
      compound: g.isCompound()
    },
    nodes: writeNodes(g),
    edges: writeEdges(g)
  };
  if (!_.isUndefined(g.graph())) {
    json.value = _.clone(g.graph());
  }
  return json;
}

function writeNodes(g) {
  return _.map(g.nodes(), function(v) {
    var nodeValue = g.node(v);
    var parent = g.parent(v);
    var node = { v: v };
    if (!_.isUndefined(nodeValue)) {
      node.value = nodeValue;
    }
    if (!_.isUndefined(parent)) {
      node.parent = parent;
    }
    return node;
  });
}

function writeEdges(g) {
  return _.map(g.edges(), function(e) {
    var edgeValue = g.edge(e);
    var edge = { v: e.v, w: e.w };
    if (!_.isUndefined(e.name)) {
      edge.name = e.name;
    }
    if (!_.isUndefined(edgeValue)) {
      edge.value = edgeValue;
    }
    return edge;
  });
}

function read(json) {
  var g = new Graph(json.options).setGraph(json.value);
  _.each(json.nodes, function(entry) {
    g.setNode(entry.v, entry.value);
    if (entry.parent) {
      g.setParent(entry.v, entry.parent);
    }
  });
  _.each(json.edges, function(entry) {
    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
  });
  return g;
}

},{"./lodash":"node_modules/graphlib/lib/lodash.js","./graph":"node_modules/graphlib/lib/graph.js"}],"node_modules/graphlib/lib/alg/components.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = components;

function components(g) {
  var visited = {};
  var cmpts = [];
  var cmpt;

  function dfs(v) {
    if (_.has(visited, v)) return;
    visited[v] = true;
    cmpt.push(v);
    _.each(g.successors(v), dfs);
    _.each(g.predecessors(v), dfs);
  }

  _.each(g.nodes(), function(v) {
    cmpt = [];
    dfs(v);
    if (cmpt.length) {
      cmpts.push(cmpt);
    }
  });

  return cmpts;
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/data/priority-queue.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = PriorityQueue;

/**
 * A min-priority queue data structure. This algorithm is derived from Cormen,
 * et al., "Introduction to Algorithms". The basic idea of a min-priority
 * queue is that you can efficiently (in O(1) time) get the smallest key in
 * the queue. Adding and removing elements takes O(log n) time. A key can
 * have its priority decreased in O(log n) time.
 */
function PriorityQueue() {
  this._arr = [];
  this._keyIndices = {};
}

/**
 * Returns the number of elements in the queue. Takes `O(1)` time.
 */
PriorityQueue.prototype.size = function() {
  return this._arr.length;
};

/**
 * Returns the keys that are in the queue. Takes `O(n)` time.
 */
PriorityQueue.prototype.keys = function() {
  return this._arr.map(function(x) { return x.key; });
};

/**
 * Returns `true` if **key** is in the queue and `false` if not.
 */
PriorityQueue.prototype.has = function(key) {
  return _.has(this._keyIndices, key);
};

/**
 * Returns the priority for **key**. If **key** is not present in the queue
 * then this function returns `undefined`. Takes `O(1)` time.
 *
 * @param {Object} key
 */
PriorityQueue.prototype.priority = function(key) {
  var index = this._keyIndices[key];
  if (index !== undefined) {
    return this._arr[index].priority;
  }
};

/**
 * Returns the key for the minimum element in this queue. If the queue is
 * empty this function throws an Error. Takes `O(1)` time.
 */
PriorityQueue.prototype.min = function() {
  if (this.size() === 0) {
    throw new Error("Queue underflow");
  }
  return this._arr[0].key;
};

/**
 * Inserts a new key into the priority queue. If the key already exists in
 * the queue this function returns `false`; otherwise it will return `true`.
 * Takes `O(n)` time.
 *
 * @param {Object} key the key to add
 * @param {Number} priority the initial priority for the key
 */
PriorityQueue.prototype.add = function(key, priority) {
  var keyIndices = this._keyIndices;
  key = String(key);
  if (!_.has(keyIndices, key)) {
    var arr = this._arr;
    var index = arr.length;
    keyIndices[key] = index;
    arr.push({key: key, priority: priority});
    this._decrease(index);
    return true;
  }
  return false;
};

/**
 * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
 */
PriorityQueue.prototype.removeMin = function() {
  this._swap(0, this._arr.length - 1);
  var min = this._arr.pop();
  delete this._keyIndices[min.key];
  this._heapify(0);
  return min.key;
};

/**
 * Decreases the priority for **key** to **priority**. If the new priority is
 * greater than the previous priority, this function will throw an Error.
 *
 * @param {Object} key the key for which to raise priority
 * @param {Number} priority the new priority for the key
 */
PriorityQueue.prototype.decrease = function(key, priority) {
  var index = this._keyIndices[key];
  if (priority > this._arr[index].priority) {
    throw new Error("New priority is greater than current priority. " +
        "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
  }
  this._arr[index].priority = priority;
  this._decrease(index);
};

PriorityQueue.prototype._heapify = function(i) {
  var arr = this._arr;
  var l = 2 * i;
  var r = l + 1;
  var largest = i;
  if (l < arr.length) {
    largest = arr[l].priority < arr[largest].priority ? l : largest;
    if (r < arr.length) {
      largest = arr[r].priority < arr[largest].priority ? r : largest;
    }
    if (largest !== i) {
      this._swap(i, largest);
      this._heapify(largest);
    }
  }
};

PriorityQueue.prototype._decrease = function(index) {
  var arr = this._arr;
  var priority = arr[index].priority;
  var parent;
  while (index !== 0) {
    parent = index >> 1;
    if (arr[parent].priority < priority) {
      break;
    }
    this._swap(index, parent);
    index = parent;
  }
};

PriorityQueue.prototype._swap = function(i, j) {
  var arr = this._arr;
  var keyIndices = this._keyIndices;
  var origArrI = arr[i];
  var origArrJ = arr[j];
  arr[i] = origArrJ;
  arr[j] = origArrI;
  keyIndices[origArrJ.key] = i;
  keyIndices[origArrI.key] = j;
};

},{"../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/alg/dijkstra.js":[function(require,module,exports) {
var _ = require("../lodash");
var PriorityQueue = require("../data/priority-queue");

module.exports = dijkstra;

var DEFAULT_WEIGHT_FUNC = _.constant(1);

function dijkstra(g, source, weightFn, edgeFn) {
  return runDijkstra(g, String(source),
    weightFn || DEFAULT_WEIGHT_FUNC,
    edgeFn || function(v) { return g.outEdges(v); });
}

function runDijkstra(g, source, weightFn, edgeFn) {
  var results = {};
  var pq = new PriorityQueue();
  var v, vEntry;

  var updateNeighbors = function(edge) {
    var w = edge.v !== v ? edge.v : edge.w;
    var wEntry = results[w];
    var weight = weightFn(edge);
    var distance = vEntry.distance + weight;

    if (weight < 0) {
      throw new Error("dijkstra does not allow negative edge weights. " +
                      "Bad edge: " + edge + " Weight: " + weight);
    }

    if (distance < wEntry.distance) {
      wEntry.distance = distance;
      wEntry.predecessor = v;
      pq.decrease(w, distance);
    }
  };

  g.nodes().forEach(function(v) {
    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
    results[v] = { distance: distance };
    pq.add(v, distance);
  });

  while (pq.size() > 0) {
    v = pq.removeMin();
    vEntry = results[v];
    if (vEntry.distance === Number.POSITIVE_INFINITY) {
      break;
    }

    edgeFn(v).forEach(updateNeighbors);
  }

  return results;
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js","../data/priority-queue":"node_modules/graphlib/lib/data/priority-queue.js"}],"node_modules/graphlib/lib/alg/dijkstra-all.js":[function(require,module,exports) {
var dijkstra = require("./dijkstra");
var _ = require("../lodash");

module.exports = dijkstraAll;

function dijkstraAll(g, weightFunc, edgeFunc) {
  return _.transform(g.nodes(), function(acc, v) {
    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
  }, {});
}

},{"./dijkstra":"node_modules/graphlib/lib/alg/dijkstra.js","../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/alg/tarjan.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = tarjan;

function tarjan(g) {
  var index = 0;
  var stack = [];
  var visited = {}; // node id -> { onStack, lowlink, index }
  var results = [];

  function dfs(v) {
    var entry = visited[v] = {
      onStack: true,
      lowlink: index,
      index: index++
    };
    stack.push(v);

    g.successors(v).forEach(function(w) {
      if (!_.has(visited, w)) {
        dfs(w);
        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
      } else if (visited[w].onStack) {
        entry.lowlink = Math.min(entry.lowlink, visited[w].index);
      }
    });

    if (entry.lowlink === entry.index) {
      var cmpt = [];
      var w;
      do {
        w = stack.pop();
        visited[w].onStack = false;
        cmpt.push(w);
      } while (v !== w);
      results.push(cmpt);
    }
  }

  g.nodes().forEach(function(v) {
    if (!_.has(visited, v)) {
      dfs(v);
    }
  });

  return results;
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/alg/find-cycles.js":[function(require,module,exports) {
var _ = require("../lodash");
var tarjan = require("./tarjan");

module.exports = findCycles;

function findCycles(g) {
  return _.filter(tarjan(g), function(cmpt) {
    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
  });
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js","./tarjan":"node_modules/graphlib/lib/alg/tarjan.js"}],"node_modules/graphlib/lib/alg/floyd-warshall.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = floydWarshall;

var DEFAULT_WEIGHT_FUNC = _.constant(1);

function floydWarshall(g, weightFn, edgeFn) {
  return runFloydWarshall(g,
    weightFn || DEFAULT_WEIGHT_FUNC,
    edgeFn || function(v) { return g.outEdges(v); });
}

function runFloydWarshall(g, weightFn, edgeFn) {
  var results = {};
  var nodes = g.nodes();

  nodes.forEach(function(v) {
    results[v] = {};
    results[v][v] = { distance: 0 };
    nodes.forEach(function(w) {
      if (v !== w) {
        results[v][w] = { distance: Number.POSITIVE_INFINITY };
      }
    });
    edgeFn(v).forEach(function(edge) {
      var w = edge.v === v ? edge.w : edge.v;
      var d = weightFn(edge);
      results[v][w] = { distance: d, predecessor: v };
    });
  });

  nodes.forEach(function(k) {
    var rowK = results[k];
    nodes.forEach(function(i) {
      var rowI = results[i];
      nodes.forEach(function(j) {
        var ik = rowI[k];
        var kj = rowK[j];
        var ij = rowI[j];
        var altDistance = ik.distance + kj.distance;
        if (altDistance < ij.distance) {
          ij.distance = altDistance;
          ij.predecessor = kj.predecessor;
        }
      });
    });
  });

  return results;
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/alg/topsort.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = topsort;
topsort.CycleException = CycleException;

function topsort(g) {
  var visited = {};
  var stack = {};
  var results = [];

  function visit(node) {
    if (_.has(stack, node)) {
      throw new CycleException();
    }

    if (!_.has(visited, node)) {
      stack[node] = true;
      visited[node] = true;
      _.each(g.predecessors(node), visit);
      delete stack[node];
      results.push(node);
    }
  }

  _.each(g.sinks(), visit);

  if (_.size(visited) !== g.nodeCount()) {
    throw new CycleException();
  }

  return results;
}

function CycleException() {}
CycleException.prototype = new Error(); // must be an instance of Error to pass testing
},{"../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/alg/is-acyclic.js":[function(require,module,exports) {
var topsort = require("./topsort");

module.exports = isAcyclic;

function isAcyclic(g) {
  try {
    topsort(g);
  } catch (e) {
    if (e instanceof topsort.CycleException) {
      return false;
    }
    throw e;
  }
  return true;
}

},{"./topsort":"node_modules/graphlib/lib/alg/topsort.js"}],"node_modules/graphlib/lib/alg/dfs.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = dfs;

/*
 * A helper that preforms a pre- or post-order traversal on the input graph
 * and returns the nodes in the order they were visited. If the graph is
 * undirected then this algorithm will navigate using neighbors. If the graph
 * is directed then this algorithm will navigate using successors.
 *
 * Order must be one of "pre" or "post".
 */
function dfs(g, vs, order) {
  if (!_.isArray(vs)) {
    vs = [vs];
  }

  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);

  var acc = [];
  var visited = {};
  _.each(vs, function(v) {
    if (!g.hasNode(v)) {
      throw new Error("Graph does not have node: " + v);
    }

    doDfs(g, v, order === "post", visited, navigation, acc);
  });
  return acc;
}

function doDfs(g, v, postorder, visited, navigation, acc) {
  if (!_.has(visited, v)) {
    visited[v] = true;

    if (!postorder) { acc.push(v); }
    _.each(navigation(v), function(w) {
      doDfs(g, w, postorder, visited, navigation, acc);
    });
    if (postorder) { acc.push(v); }
  }
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js"}],"node_modules/graphlib/lib/alg/postorder.js":[function(require,module,exports) {
var dfs = require("./dfs");

module.exports = postorder;

function postorder(g, vs) {
  return dfs(g, vs, "post");
}

},{"./dfs":"node_modules/graphlib/lib/alg/dfs.js"}],"node_modules/graphlib/lib/alg/preorder.js":[function(require,module,exports) {
var dfs = require("./dfs");

module.exports = preorder;

function preorder(g, vs) {
  return dfs(g, vs, "pre");
}

},{"./dfs":"node_modules/graphlib/lib/alg/dfs.js"}],"node_modules/graphlib/lib/alg/prim.js":[function(require,module,exports) {
var _ = require("../lodash");
var Graph = require("../graph");
var PriorityQueue = require("../data/priority-queue");

module.exports = prim;

function prim(g, weightFunc) {
  var result = new Graph();
  var parents = {};
  var pq = new PriorityQueue();
  var v;

  function updateNeighbors(edge) {
    var w = edge.v === v ? edge.w : edge.v;
    var pri = pq.priority(w);
    if (pri !== undefined) {
      var edgeWeight = weightFunc(edge);
      if (edgeWeight < pri) {
        parents[w] = v;
        pq.decrease(w, edgeWeight);
      }
    }
  }

  if (g.nodeCount() === 0) {
    return result;
  }

  _.each(g.nodes(), function(v) {
    pq.add(v, Number.POSITIVE_INFINITY);
    result.setNode(v);
  });

  // Start from an arbitrary node
  pq.decrease(g.nodes()[0], 0);

  var init = false;
  while (pq.size() > 0) {
    v = pq.removeMin();
    if (_.has(parents, v)) {
      result.setEdge(v, parents[v]);
    } else if (init) {
      throw new Error("Input graph is not connected: " + g);
    } else {
      init = true;
    }

    g.nodeEdges(v).forEach(updateNeighbors);
  }

  return result;
}

},{"../lodash":"node_modules/graphlib/lib/lodash.js","../graph":"node_modules/graphlib/lib/graph.js","../data/priority-queue":"node_modules/graphlib/lib/data/priority-queue.js"}],"node_modules/graphlib/lib/alg/index.js":[function(require,module,exports) {
module.exports = {
  components: require("./components"),
  dijkstra: require("./dijkstra"),
  dijkstraAll: require("./dijkstra-all"),
  findCycles: require("./find-cycles"),
  floydWarshall: require("./floyd-warshall"),
  isAcyclic: require("./is-acyclic"),
  postorder: require("./postorder"),
  preorder: require("./preorder"),
  prim: require("./prim"),
  tarjan: require("./tarjan"),
  topsort: require("./topsort")
};

},{"./components":"node_modules/graphlib/lib/alg/components.js","./dijkstra":"node_modules/graphlib/lib/alg/dijkstra.js","./dijkstra-all":"node_modules/graphlib/lib/alg/dijkstra-all.js","./find-cycles":"node_modules/graphlib/lib/alg/find-cycles.js","./floyd-warshall":"node_modules/graphlib/lib/alg/floyd-warshall.js","./is-acyclic":"node_modules/graphlib/lib/alg/is-acyclic.js","./postorder":"node_modules/graphlib/lib/alg/postorder.js","./preorder":"node_modules/graphlib/lib/alg/preorder.js","./prim":"node_modules/graphlib/lib/alg/prim.js","./tarjan":"node_modules/graphlib/lib/alg/tarjan.js","./topsort":"node_modules/graphlib/lib/alg/topsort.js"}],"node_modules/graphlib/index.js":[function(require,module,exports) {
/**
 * Copyright (c) 2014, Chris Pettitt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var lib = require("./lib");

module.exports = {
  Graph: lib.Graph,
  json: require("./lib/json"),
  alg: require("./lib/alg"),
  version: lib.version
};

},{"./lib":"node_modules/graphlib/lib/index.js","./lib/json":"node_modules/graphlib/lib/json.js","./lib/alg":"node_modules/graphlib/lib/alg/index.js"}],"node_modules/dagre/lib/graphlib.js":[function(require,module,exports) {
/* global window */

var graphlib;

if (typeof require === "function") {
  try {
    graphlib = require("graphlib");
  } catch (e) {
    // continue regardless of error
  }
}

if (!graphlib) {
  graphlib = window.graphlib;
}

module.exports = graphlib;

},{"graphlib":"node_modules/graphlib/index.js"}],"node_modules/lodash/cloneDeep.js":[function(require,module,exports) {
var baseClone = require('./_baseClone');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;

},{"./_baseClone":"node_modules/lodash/_baseClone.js"}],"node_modules/lodash/_isIterateeCall.js":[function(require,module,exports) {
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./eq":"node_modules/lodash/eq.js","./isArrayLike":"node_modules/lodash/isArrayLike.js","./_isIndex":"node_modules/lodash/_isIndex.js","./isObject":"node_modules/lodash/isObject.js"}],"node_modules/lodash/defaults.js":[function(require,module,exports) {
var baseRest = require('./_baseRest'),
    eq = require('./eq'),
    isIterateeCall = require('./_isIterateeCall'),
    keysIn = require('./keysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = baseRest(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

module.exports = defaults;

},{"./_baseRest":"node_modules/lodash/_baseRest.js","./eq":"node_modules/lodash/eq.js","./_isIterateeCall":"node_modules/lodash/_isIterateeCall.js","./keysIn":"node_modules/lodash/keysIn.js"}],"node_modules/lodash/_createFind.js":[function(require,module,exports) {
var baseIteratee = require('./_baseIteratee'),
    isArrayLike = require('./isArrayLike'),
    keys = require('./keys');

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;

},{"./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./isArrayLike":"node_modules/lodash/isArrayLike.js","./keys":"node_modules/lodash/keys.js"}],"node_modules/lodash/toNumber.js":[function(require,module,exports) {
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":"node_modules/lodash/isObject.js","./isSymbol":"node_modules/lodash/isSymbol.js"}],"node_modules/lodash/toFinite.js":[function(require,module,exports) {
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":"node_modules/lodash/toNumber.js"}],"node_modules/lodash/toInteger.js":[function(require,module,exports) {
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":"node_modules/lodash/toFinite.js"}],"node_modules/lodash/findIndex.js":[function(require,module,exports) {
var baseFindIndex = require('./_baseFindIndex'),
    baseIteratee = require('./_baseIteratee'),
    toInteger = require('./toInteger');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;

},{"./_baseFindIndex":"node_modules/lodash/_baseFindIndex.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./toInteger":"node_modules/lodash/toInteger.js"}],"node_modules/lodash/find.js":[function(require,module,exports) {
var createFind = require('./_createFind'),
    findIndex = require('./findIndex');

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;

},{"./_createFind":"node_modules/lodash/_createFind.js","./findIndex":"node_modules/lodash/findIndex.js"}],"node_modules/lodash/flatten.js":[function(require,module,exports) {
var baseFlatten = require('./_baseFlatten');

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

},{"./_baseFlatten":"node_modules/lodash/_baseFlatten.js"}],"node_modules/lodash/forIn.js":[function(require,module,exports) {
var baseFor = require('./_baseFor'),
    castFunction = require('./_castFunction'),
    keysIn = require('./keysIn');

/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */
function forIn(object, iteratee) {
  return object == null
    ? object
    : baseFor(object, castFunction(iteratee), keysIn);
}

module.exports = forIn;

},{"./_baseFor":"node_modules/lodash/_baseFor.js","./_castFunction":"node_modules/lodash/_castFunction.js","./keysIn":"node_modules/lodash/keysIn.js"}],"node_modules/lodash/last.js":[function(require,module,exports) {
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

},{}],"node_modules/lodash/mapValues.js":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'),
    baseForOwn = require('./_baseForOwn'),
    baseIteratee = require('./_baseIteratee');

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;

},{"./_baseAssignValue":"node_modules/lodash/_baseAssignValue.js","./_baseForOwn":"node_modules/lodash/_baseForOwn.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js"}],"node_modules/lodash/_baseExtremum.js":[function(require,module,exports) {
var isSymbol = require('./isSymbol');

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */
function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined
          ? (current === current && !isSymbol(current))
          : comparator(current, computed)
        )) {
      var computed = current,
          result = value;
    }
  }
  return result;
}

module.exports = baseExtremum;

},{"./isSymbol":"node_modules/lodash/isSymbol.js"}],"node_modules/lodash/_baseGt.js":[function(require,module,exports) {
/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */
function baseGt(value, other) {
  return value > other;
}

module.exports = baseGt;

},{}],"node_modules/lodash/max.js":[function(require,module,exports) {
var baseExtremum = require('./_baseExtremum'),
    baseGt = require('./_baseGt'),
    identity = require('./identity');

/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */
function max(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseGt)
    : undefined;
}

module.exports = max;

},{"./_baseExtremum":"node_modules/lodash/_baseExtremum.js","./_baseGt":"node_modules/lodash/_baseGt.js","./identity":"node_modules/lodash/identity.js"}],"node_modules/lodash/_assignMergeValue.js":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;

},{"./_baseAssignValue":"node_modules/lodash/_baseAssignValue.js","./eq":"node_modules/lodash/eq.js"}],"node_modules/lodash/isPlainObject.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./_getPrototype":"node_modules/lodash/_getPrototype.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/_safeGet.js":[function(require,module,exports) {
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;

},{}],"node_modules/lodash/toPlainObject.js":[function(require,module,exports) {
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;

},{"./_copyObject":"node_modules/lodash/_copyObject.js","./keysIn":"node_modules/lodash/keysIn.js"}],"node_modules/lodash/_baseMergeDeep.js":[function(require,module,exports) {
var assignMergeValue = require('./_assignMergeValue'),
    cloneBuffer = require('./_cloneBuffer'),
    cloneTypedArray = require('./_cloneTypedArray'),
    copyArray = require('./_copyArray'),
    initCloneObject = require('./_initCloneObject'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    isBuffer = require('./isBuffer'),
    isFunction = require('./isFunction'),
    isObject = require('./isObject'),
    isPlainObject = require('./isPlainObject'),
    isTypedArray = require('./isTypedArray'),
    safeGet = require('./_safeGet'),
    toPlainObject = require('./toPlainObject');

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;

},{"./_assignMergeValue":"node_modules/lodash/_assignMergeValue.js","./_cloneBuffer":"node_modules/lodash/_cloneBuffer.js","./_cloneTypedArray":"node_modules/lodash/_cloneTypedArray.js","./_copyArray":"node_modules/lodash/_copyArray.js","./_initCloneObject":"node_modules/lodash/_initCloneObject.js","./isArguments":"node_modules/lodash/isArguments.js","./isArray":"node_modules/lodash/isArray.js","./isArrayLikeObject":"node_modules/lodash/isArrayLikeObject.js","./isBuffer":"node_modules/lodash/isBuffer.js","./isFunction":"node_modules/lodash/isFunction.js","./isObject":"node_modules/lodash/isObject.js","./isPlainObject":"node_modules/lodash/isPlainObject.js","./isTypedArray":"node_modules/lodash/isTypedArray.js","./_safeGet":"node_modules/lodash/_safeGet.js","./toPlainObject":"node_modules/lodash/toPlainObject.js"}],"node_modules/lodash/_baseMerge.js":[function(require,module,exports) {
var Stack = require('./_Stack'),
    assignMergeValue = require('./_assignMergeValue'),
    baseFor = require('./_baseFor'),
    baseMergeDeep = require('./_baseMergeDeep'),
    isObject = require('./isObject'),
    keysIn = require('./keysIn'),
    safeGet = require('./_safeGet');

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;

},{"./_Stack":"node_modules/lodash/_Stack.js","./_assignMergeValue":"node_modules/lodash/_assignMergeValue.js","./_baseFor":"node_modules/lodash/_baseFor.js","./_baseMergeDeep":"node_modules/lodash/_baseMergeDeep.js","./isObject":"node_modules/lodash/isObject.js","./keysIn":"node_modules/lodash/keysIn.js","./_safeGet":"node_modules/lodash/_safeGet.js"}],"node_modules/lodash/_createAssigner.js":[function(require,module,exports) {
var baseRest = require('./_baseRest'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"./_baseRest":"node_modules/lodash/_baseRest.js","./_isIterateeCall":"node_modules/lodash/_isIterateeCall.js"}],"node_modules/lodash/merge.js":[function(require,module,exports) {
var baseMerge = require('./_baseMerge'),
    createAssigner = require('./_createAssigner');

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;

},{"./_baseMerge":"node_modules/lodash/_baseMerge.js","./_createAssigner":"node_modules/lodash/_createAssigner.js"}],"node_modules/lodash/_baseLt.js":[function(require,module,exports) {
/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */
function baseLt(value, other) {
  return value < other;
}

module.exports = baseLt;

},{}],"node_modules/lodash/min.js":[function(require,module,exports) {
var baseExtremum = require('./_baseExtremum'),
    baseLt = require('./_baseLt'),
    identity = require('./identity');

/**
 * Computes the minimum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * _.min([4, 2, 8, 6]);
 * // => 2
 *
 * _.min([]);
 * // => undefined
 */
function min(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseLt)
    : undefined;
}

module.exports = min;

},{"./_baseExtremum":"node_modules/lodash/_baseExtremum.js","./_baseLt":"node_modules/lodash/_baseLt.js","./identity":"node_modules/lodash/identity.js"}],"node_modules/lodash/minBy.js":[function(require,module,exports) {
var baseExtremum = require('./_baseExtremum'),
    baseIteratee = require('./_baseIteratee'),
    baseLt = require('./_baseLt');

/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */
function minBy(array, iteratee) {
  return (array && array.length)
    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)
    : undefined;
}

module.exports = minBy;

},{"./_baseExtremum":"node_modules/lodash/_baseExtremum.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./_baseLt":"node_modules/lodash/_baseLt.js"}],"node_modules/lodash/now.js":[function(require,module,exports) {
var root = require('./_root');

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;

},{"./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_baseSet.js":[function(require,module,exports) {
var assignValue = require('./_assignValue'),
    castPath = require('./_castPath'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;

},{"./_assignValue":"node_modules/lodash/_assignValue.js","./_castPath":"node_modules/lodash/_castPath.js","./_isIndex":"node_modules/lodash/_isIndex.js","./isObject":"node_modules/lodash/isObject.js","./_toKey":"node_modules/lodash/_toKey.js"}],"node_modules/lodash/_basePickBy.js":[function(require,module,exports) {
var baseGet = require('./_baseGet'),
    baseSet = require('./_baseSet'),
    castPath = require('./_castPath');

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;

},{"./_baseGet":"node_modules/lodash/_baseGet.js","./_baseSet":"node_modules/lodash/_baseSet.js","./_castPath":"node_modules/lodash/_castPath.js"}],"node_modules/lodash/_basePick.js":[function(require,module,exports) {
var basePickBy = require('./_basePickBy'),
    hasIn = require('./hasIn');

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

},{"./_basePickBy":"node_modules/lodash/_basePickBy.js","./hasIn":"node_modules/lodash/hasIn.js"}],"node_modules/lodash/_flatRest.js":[function(require,module,exports) {
var flatten = require('./flatten'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

},{"./flatten":"node_modules/lodash/flatten.js","./_overRest":"node_modules/lodash/_overRest.js","./_setToString":"node_modules/lodash/_setToString.js"}],"node_modules/lodash/pick.js":[function(require,module,exports) {
var basePick = require('./_basePick'),
    flatRest = require('./_flatRest');

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;

},{"./_basePick":"node_modules/lodash/_basePick.js","./_flatRest":"node_modules/lodash/_flatRest.js"}],"node_modules/lodash/_baseRange.js":[function(require,module,exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

module.exports = baseRange;

},{}],"node_modules/lodash/_createRange.js":[function(require,module,exports) {
var baseRange = require('./_baseRange'),
    isIterateeCall = require('./_isIterateeCall'),
    toFinite = require('./toFinite');

/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */
function createRange(fromRight) {
  return function(start, end, step) {
    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
      end = step = undefined;
    }
    // Ensure the sign of `-0` is preserved.
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
    return baseRange(start, end, step, fromRight);
  };
}

module.exports = createRange;

},{"./_baseRange":"node_modules/lodash/_baseRange.js","./_isIterateeCall":"node_modules/lodash/_isIterateeCall.js","./toFinite":"node_modules/lodash/toFinite.js"}],"node_modules/lodash/range.js":[function(require,module,exports) {
var createRange = require('./_createRange');

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */
var range = createRange();

module.exports = range;

},{"./_createRange":"node_modules/lodash/_createRange.js"}],"node_modules/lodash/_baseSortBy.js":[function(require,module,exports) {
/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

module.exports = baseSortBy;

},{}],"node_modules/lodash/_compareAscending.js":[function(require,module,exports) {
var isSymbol = require('./isSymbol');

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

module.exports = compareAscending;

},{"./isSymbol":"node_modules/lodash/isSymbol.js"}],"node_modules/lodash/_compareMultiple.js":[function(require,module,exports) {
var compareAscending = require('./_compareAscending');

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

module.exports = compareMultiple;

},{"./_compareAscending":"node_modules/lodash/_compareAscending.js"}],"node_modules/lodash/_baseOrderBy.js":[function(require,module,exports) {
var arrayMap = require('./_arrayMap'),
    baseGet = require('./_baseGet'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    baseSortBy = require('./_baseSortBy'),
    baseUnary = require('./_baseUnary'),
    compareMultiple = require('./_compareMultiple'),
    identity = require('./identity'),
    isArray = require('./isArray');

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

module.exports = baseOrderBy;

},{"./_arrayMap":"node_modules/lodash/_arrayMap.js","./_baseGet":"node_modules/lodash/_baseGet.js","./_baseIteratee":"node_modules/lodash/_baseIteratee.js","./_baseMap":"node_modules/lodash/_baseMap.js","./_baseSortBy":"node_modules/lodash/_baseSortBy.js","./_baseUnary":"node_modules/lodash/_baseUnary.js","./_compareMultiple":"node_modules/lodash/_compareMultiple.js","./identity":"node_modules/lodash/identity.js","./isArray":"node_modules/lodash/isArray.js"}],"node_modules/lodash/sortBy.js":[function(require,module,exports) {
var baseFlatten = require('./_baseFlatten'),
    baseOrderBy = require('./_baseOrderBy'),
    baseRest = require('./_baseRest'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

module.exports = sortBy;

},{"./_baseFlatten":"node_modules/lodash/_baseFlatten.js","./_baseOrderBy":"node_modules/lodash/_baseOrderBy.js","./_baseRest":"node_modules/lodash/_baseRest.js","./_isIterateeCall":"node_modules/lodash/_isIterateeCall.js"}],"node_modules/lodash/uniqueId.js":[function(require,module,exports) {
var toString = require('./toString');

/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}

module.exports = uniqueId;

},{"./toString":"node_modules/lodash/toString.js"}],"node_modules/lodash/_baseZipObject.js":[function(require,module,exports) {
/**
 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
 *
 * @private
 * @param {Array} props The property identifiers.
 * @param {Array} values The property values.
 * @param {Function} assignFunc The function to assign values.
 * @returns {Object} Returns the new object.
 */
function baseZipObject(props, values, assignFunc) {
  var index = -1,
      length = props.length,
      valsLength = values.length,
      result = {};

  while (++index < length) {
    var value = index < valsLength ? values[index] : undefined;
    assignFunc(result, props[index], value);
  }
  return result;
}

module.exports = baseZipObject;

},{}],"node_modules/lodash/zipObject.js":[function(require,module,exports) {
var assignValue = require('./_assignValue'),
    baseZipObject = require('./_baseZipObject');

/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */
function zipObject(props, values) {
  return baseZipObject(props || [], values || [], assignValue);
}

module.exports = zipObject;

},{"./_assignValue":"node_modules/lodash/_assignValue.js","./_baseZipObject":"node_modules/lodash/_baseZipObject.js"}],"node_modules/dagre/lib/lodash.js":[function(require,module,exports) {
/* global window */

var lodash;

if (typeof require === "function") {
  try {
    lodash = {
      cloneDeep: require("lodash/cloneDeep"),
      constant: require("lodash/constant"),
      defaults: require("lodash/defaults"),
      each: require("lodash/each"),
      filter: require("lodash/filter"),
      find: require("lodash/find"),
      flatten: require("lodash/flatten"),
      forEach: require("lodash/forEach"),
      forIn: require("lodash/forIn"),
      has:  require("lodash/has"),
      isUndefined: require("lodash/isUndefined"),
      last: require("lodash/last"),
      map: require("lodash/map"),
      mapValues: require("lodash/mapValues"),
      max: require("lodash/max"),
      merge: require("lodash/merge"),
      min: require("lodash/min"),
      minBy: require("lodash/minBy"),
      now: require("lodash/now"),
      pick: require("lodash/pick"),
      range: require("lodash/range"),
      reduce: require("lodash/reduce"),
      sortBy: require("lodash/sortBy"),
      uniqueId: require("lodash/uniqueId"),
      values: require("lodash/values"),
      zipObject: require("lodash/zipObject"),
    };
  } catch (e) {
    // continue regardless of error
  }
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;

},{"lodash/cloneDeep":"node_modules/lodash/cloneDeep.js","lodash/constant":"node_modules/lodash/constant.js","lodash/defaults":"node_modules/lodash/defaults.js","lodash/each":"node_modules/lodash/each.js","lodash/filter":"node_modules/lodash/filter.js","lodash/find":"node_modules/lodash/find.js","lodash/flatten":"node_modules/lodash/flatten.js","lodash/forEach":"node_modules/lodash/forEach.js","lodash/forIn":"node_modules/lodash/forIn.js","lodash/has":"node_modules/lodash/has.js","lodash/isUndefined":"node_modules/lodash/isUndefined.js","lodash/last":"node_modules/lodash/last.js","lodash/map":"node_modules/lodash/map.js","lodash/mapValues":"node_modules/lodash/mapValues.js","lodash/max":"node_modules/lodash/max.js","lodash/merge":"node_modules/lodash/merge.js","lodash/min":"node_modules/lodash/min.js","lodash/minBy":"node_modules/lodash/minBy.js","lodash/now":"node_modules/lodash/now.js","lodash/pick":"node_modules/lodash/pick.js","lodash/range":"node_modules/lodash/range.js","lodash/reduce":"node_modules/lodash/reduce.js","lodash/sortBy":"node_modules/lodash/sortBy.js","lodash/uniqueId":"node_modules/lodash/uniqueId.js","lodash/values":"node_modules/lodash/values.js","lodash/zipObject":"node_modules/lodash/zipObject.js"}],"node_modules/dagre/lib/data/list.js":[function(require,module,exports) {
/*
 * Simple doubly linked list implementation derived from Cormen, et al.,
 * "Introduction to Algorithms".
 */

module.exports = List;

function List() {
  var sentinel = {};
  sentinel._next = sentinel._prev = sentinel;
  this._sentinel = sentinel;
}

List.prototype.dequeue = function() {
  var sentinel = this._sentinel;
  var entry = sentinel._prev;
  if (entry !== sentinel) {
    unlink(entry);
    return entry;
  }
};

List.prototype.enqueue = function(entry) {
  var sentinel = this._sentinel;
  if (entry._prev && entry._next) {
    unlink(entry);
  }
  entry._next = sentinel._next;
  sentinel._next._prev = entry;
  sentinel._next = entry;
  entry._prev = sentinel;
};

List.prototype.toString = function() {
  var strs = [];
  var sentinel = this._sentinel;
  var curr = sentinel._prev;
  while (curr !== sentinel) {
    strs.push(JSON.stringify(curr, filterOutLinks));
    curr = curr._prev;
  }
  return "[" + strs.join(", ") + "]";
};

function unlink(entry) {
  entry._prev._next = entry._next;
  entry._next._prev = entry._prev;
  delete entry._next;
  delete entry._prev;
}

function filterOutLinks(k, v) {
  if (k !== "_next" && k !== "_prev") {
    return v;
  }
}

},{}],"node_modules/dagre/lib/greedy-fas.js":[function(require,module,exports) {
var _ = require("./lodash");
var Graph = require("./graphlib").Graph;
var List = require("./data/list");

/*
 * A greedy heuristic for finding a feedback arc set for a graph. A feedback
 * arc set is a set of edges that can be removed to make a graph acyclic.
 * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
 * effective heuristic for the feedback arc set problem." This implementation
 * adjusts that from the paper to allow for weighted edges.
 */
module.exports = greedyFAS;

var DEFAULT_WEIGHT_FN = _.constant(1);

function greedyFAS(g, weightFn) {
  if (g.nodeCount() <= 1) {
    return [];
  }
  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

  // Expand multi-edges
  return _.flatten(_.map(results, function(e) {
    return g.outEdges(e.v, e.w);
  }), true);
}

function doGreedyFAS(g, buckets, zeroIdx) {
  var results = [];
  var sources = buckets[buckets.length - 1];
  var sinks = buckets[0];

  var entry;
  while (g.nodeCount()) {
    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }
    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }
    if (g.nodeCount()) {
      for (var i = buckets.length - 2; i > 0; --i) {
        entry = buckets[i].dequeue();
        if (entry) {
          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
          break;
        }
      }
    }
  }

  return results;
}

function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
  var results = collectPredecessors ? [] : undefined;

  _.forEach(g.inEdges(entry.v), function(edge) {
    var weight = g.edge(edge);
    var uEntry = g.node(edge.v);

    if (collectPredecessors) {
      results.push({ v: edge.v, w: edge.w });
    }

    uEntry.out -= weight;
    assignBucket(buckets, zeroIdx, uEntry);
  });

  _.forEach(g.outEdges(entry.v), function(edge) {
    var weight = g.edge(edge);
    var w = edge.w;
    var wEntry = g.node(w);
    wEntry["in"] -= weight;
    assignBucket(buckets, zeroIdx, wEntry);
  });

  g.removeNode(entry.v);

  return results;
}

function buildState(g, weightFn) {
  var fasGraph = new Graph();
  var maxIn = 0;
  var maxOut = 0;

  _.forEach(g.nodes(), function(v) {
    fasGraph.setNode(v, { v: v, "in": 0, out: 0 });
  });

  // Aggregate weights on nodes, but also sum the weights across multi-edges
  // into a single edge for the fasGraph.
  _.forEach(g.edges(), function(e) {
    var prevWeight = fasGraph.edge(e.v, e.w) || 0;
    var weight = weightFn(e);
    var edgeWeight = prevWeight + weight;
    fasGraph.setEdge(e.v, e.w, edgeWeight);
    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)["in"]  += weight);
  });

  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });
  var zeroIdx = maxIn + 1;

  _.forEach(fasGraph.nodes(), function(v) {
    assignBucket(buckets, zeroIdx, fasGraph.node(v));
  });

  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
}

function assignBucket(buckets, zeroIdx, entry) {
  if (!entry.out) {
    buckets[0].enqueue(entry);
  } else if (!entry["in"]) {
    buckets[buckets.length - 1].enqueue(entry);
  } else {
    buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
  }
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./graphlib":"node_modules/dagre/lib/graphlib.js","./data/list":"node_modules/dagre/lib/data/list.js"}],"node_modules/dagre/lib/acyclic.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");
var greedyFAS = require("./greedy-fas");

module.exports = {
  run: run,
  undo: undo
};

function run(g) {
  var fas = (g.graph().acyclicer === "greedy"
    ? greedyFAS(g, weightFn(g))
    : dfsFAS(g));
  _.forEach(fas, function(e) {
    var label = g.edge(e);
    g.removeEdge(e);
    label.forwardName = e.name;
    label.reversed = true;
    g.setEdge(e.w, e.v, label, _.uniqueId("rev"));
  });

  function weightFn(g) {
    return function(e) {
      return g.edge(e).weight;
    };
  }
}

function dfsFAS(g) {
  var fas = [];
  var stack = {};
  var visited = {};

  function dfs(v) {
    if (_.has(visited, v)) {
      return;
    }
    visited[v] = true;
    stack[v] = true;
    _.forEach(g.outEdges(v), function(e) {
      if (_.has(stack, e.w)) {
        fas.push(e);
      } else {
        dfs(e.w);
      }
    });
    delete stack[v];
  }

  _.forEach(g.nodes(), dfs);
  return fas;
}

function undo(g) {
  _.forEach(g.edges(), function(e) {
    var label = g.edge(e);
    if (label.reversed) {
      g.removeEdge(e);

      var forwardName = label.forwardName;
      delete label.reversed;
      delete label.forwardName;
      g.setEdge(e.w, e.v, label, forwardName);
    }
  });
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./greedy-fas":"node_modules/dagre/lib/greedy-fas.js"}],"node_modules/dagre/lib/util.js":[function(require,module,exports) {
/* eslint "no-console": off */

"use strict";

var _ = require("./lodash");
var Graph = require("./graphlib").Graph;

module.exports = {
  addDummyNode: addDummyNode,
  simplify: simplify,
  asNonCompoundGraph: asNonCompoundGraph,
  successorWeights: successorWeights,
  predecessorWeights: predecessorWeights,
  intersectRect: intersectRect,
  buildLayerMatrix: buildLayerMatrix,
  normalizeRanks: normalizeRanks,
  removeEmptyRanks: removeEmptyRanks,
  addBorderNode: addBorderNode,
  maxRank: maxRank,
  partition: partition,
  time: time,
  notime: notime
};

/*
 * Adds a dummy node to the graph and return v.
 */
function addDummyNode(g, type, attrs, name) {
  var v;
  do {
    v = _.uniqueId(name);
  } while (g.hasNode(v));

  attrs.dummy = type;
  g.setNode(v, attrs);
  return v;
}

/*
 * Returns a new graph with only simple edges. Handles aggregation of data
 * associated with multi-edges.
 */
function simplify(g) {
  var simplified = new Graph().setGraph(g.graph());
  _.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });
  _.forEach(g.edges(), function(e) {
    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };
    var label = g.edge(e);
    simplified.setEdge(e.v, e.w, {
      weight: simpleLabel.weight + label.weight,
      minlen: Math.max(simpleLabel.minlen, label.minlen)
    });
  });
  return simplified;
}

function asNonCompoundGraph(g) {
  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());
  _.forEach(g.nodes(), function(v) {
    if (!g.children(v).length) {
      simplified.setNode(v, g.node(v));
    }
  });
  _.forEach(g.edges(), function(e) {
    simplified.setEdge(e, g.edge(e));
  });
  return simplified;
}

function successorWeights(g) {
  var weightMap = _.map(g.nodes(), function(v) {
    var sucs = {};
    _.forEach(g.outEdges(v), function(e) {
      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
    });
    return sucs;
  });
  return _.zipObject(g.nodes(), weightMap);
}

function predecessorWeights(g) {
  var weightMap = _.map(g.nodes(), function(v) {
    var preds = {};
    _.forEach(g.inEdges(v), function(e) {
      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
    });
    return preds;
  });
  return _.zipObject(g.nodes(), weightMap);
}

/*
 * Finds where a line starting at point ({x, y}) would intersect a rectangle
 * ({x, y, width, height}) if it were pointing at the rectangle's center.
 */
function intersectRect(rect, point) {
  var x = rect.x;
  var y = rect.y;

  // Rectangle intersection algorithm from:
  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
  var dx = point.x - x;
  var dy = point.y - y;
  var w = rect.width / 2;
  var h = rect.height / 2;

  if (!dx && !dy) {
    throw new Error("Not possible to find intersection inside of the rectangle");
  }

  var sx, sy;
  if (Math.abs(dy) * w > Math.abs(dx) * h) {
    // Intersection is top or bottom of rect.
    if (dy < 0) {
      h = -h;
    }
    sx = h * dx / dy;
    sy = h;
  } else {
    // Intersection is left or right of rect.
    if (dx < 0) {
      w = -w;
    }
    sx = w;
    sy = w * dy / dx;
  }

  return { x: x + sx, y: y + sy };
}

/*
 * Given a DAG with each node assigned "rank" and "order" properties, this
 * function will produce a matrix with the ids of each node.
 */
function buildLayerMatrix(g) {
  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    var rank = node.rank;
    if (!_.isUndefined(rank)) {
      layering[rank][node.order] = v;
    }
  });
  return layering;
}

/*
 * Adjusts the ranks for all nodes in the graph such that all nodes v have
 * rank(v) >= 0 and at least one node w has rank(w) = 0.
 */
function normalizeRanks(g) {
  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (_.has(node, "rank")) {
      node.rank -= min;
    }
  });
}

function removeEmptyRanks(g) {
  // Ranks may not start at 0, so we need to offset them
  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));

  var layers = [];
  _.forEach(g.nodes(), function(v) {
    var rank = g.node(v).rank - offset;
    if (!layers[rank]) {
      layers[rank] = [];
    }
    layers[rank].push(v);
  });

  var delta = 0;
  var nodeRankFactor = g.graph().nodeRankFactor;
  _.forEach(layers, function(vs, i) {
    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {
      --delta;
    } else if (delta) {
      _.forEach(vs, function(v) { g.node(v).rank += delta; });
    }
  });
}

function addBorderNode(g, prefix, rank, order) {
  var node = {
    width: 0,
    height: 0
  };
  if (arguments.length >= 4) {
    node.rank = rank;
    node.order = order;
  }
  return addDummyNode(g, "border", node, prefix);
}

function maxRank(g) {
  return _.max(_.map(g.nodes(), function(v) {
    var rank = g.node(v).rank;
    if (!_.isUndefined(rank)) {
      return rank;
    }
  }));
}

/*
 * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
 * function returns true for an entry it goes into `lhs`. Otherwise it goes
 * into `rhs.
 */
function partition(collection, fn) {
  var result = { lhs: [], rhs: [] };
  _.forEach(collection, function(value) {
    if (fn(value)) {
      result.lhs.push(value);
    } else {
      result.rhs.push(value);
    }
  });
  return result;
}

/*
 * Returns a new function that wraps `fn` with a timer. The wrapper logs the
 * time it takes to execute the function.
 */
function time(name, fn) {
  var start = _.now();
  try {
    return fn();
  } finally {
    console.log(name + " time: " + (_.now() - start) + "ms");
  }
}

function notime(name, fn) {
  return fn();
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./graphlib":"node_modules/dagre/lib/graphlib.js"}],"node_modules/dagre/lib/normalize.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");
var util = require("./util");

module.exports = {
  run: run,
  undo: undo
};

/*
 * Breaks any long edges in the graph into short segments that span 1 layer
 * each. This operation is undoable with the denormalize function.
 *
 * Pre-conditions:
 *
 *    1. The input graph is a DAG.
 *    2. Each node in the graph has a "rank" property.
 *
 * Post-condition:
 *
 *    1. All edges in the graph have a length of 1.
 *    2. Dummy nodes are added where edges have been split into segments.
 *    3. The graph is augmented with a "dummyChains" attribute which contains
 *       the first dummy in each chain of dummy nodes produced.
 */
function run(g) {
  g.graph().dummyChains = [];
  _.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });
}

function normalizeEdge(g, e) {
  var v = e.v;
  var vRank = g.node(v).rank;
  var w = e.w;
  var wRank = g.node(w).rank;
  var name = e.name;
  var edgeLabel = g.edge(e);
  var labelRank = edgeLabel.labelRank;

  if (wRank === vRank + 1) return;

  g.removeEdge(e);

  var dummy, attrs, i;
  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
    edgeLabel.points = [];
    attrs = {
      width: 0, height: 0,
      edgeLabel: edgeLabel, edgeObj: e,
      rank: vRank
    };
    dummy = util.addDummyNode(g, "edge", attrs, "_d");
    if (vRank === labelRank) {
      attrs.width = edgeLabel.width;
      attrs.height = edgeLabel.height;
      attrs.dummy = "edge-label";
      attrs.labelpos = edgeLabel.labelpos;
    }
    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
    if (i === 0) {
      g.graph().dummyChains.push(dummy);
    }
    v = dummy;
  }

  g.setEdge(v, w, { weight: edgeLabel.weight }, name);
}

function undo(g) {
  _.forEach(g.graph().dummyChains, function(v) {
    var node = g.node(v);
    var origLabel = node.edgeLabel;
    var w;
    g.setEdge(node.edgeObj, origLabel);
    while (node.dummy) {
      w = g.successors(v)[0];
      g.removeNode(v);
      origLabel.points.push({ x: node.x, y: node.y });
      if (node.dummy === "edge-label") {
        origLabel.x = node.x;
        origLabel.y = node.y;
        origLabel.width = node.width;
        origLabel.height = node.height;
      }
      v = w;
      node = g.node(v);
    }
  });
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/rank/util.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = {
  longestPath: longestPath,
  slack: slack
};

/*
 * Initializes ranks for the input graph using the longest path algorithm. This
 * algorithm scales well and is fast in practice, it yields rather poor
 * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
 * ranks wide and leaving edges longer than necessary. However, due to its
 * speed, this algorithm is good for getting an initial ranking that can be fed
 * into other algorithms.
 *
 * This algorithm does not normalize layers because it will be used by other
 * algorithms in most cases. If using this algorithm directly, be sure to
 * run normalize at the end.
 *
 * Pre-conditions:
 *
 *    1. Input graph is a DAG.
 *    2. Input graph node labels can be assigned properties.
 *
 * Post-conditions:
 *
 *    1. Each node will be assign an (unnormalized) "rank" property.
 */
function longestPath(g) {
  var visited = {};

  function dfs(v) {
    var label = g.node(v);
    if (_.has(visited, v)) {
      return label.rank;
    }
    visited[v] = true;

    var rank = _.min(_.map(g.outEdges(v), function(e) {
      return dfs(e.w) - g.edge(e).minlen;
    }));

    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
        rank === undefined || // return value of _.map([]) for Lodash 4
        rank === null) { // return value of _.map([null])
      rank = 0;
    }

    return (label.rank = rank);
  }

  _.forEach(g.sources(), dfs);
}

/*
 * Returns the amount of slack for the given edge. The slack is defined as the
 * difference between the length of the edge and its minimum length.
 */
function slack(g, e) {
  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/rank/feasible-tree.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");
var Graph = require("../graphlib").Graph;
var slack = require("./util").slack;

module.exports = feasibleTree;

/*
 * Constructs a spanning tree with tight edges and adjusted the input node's
 * ranks to achieve this. A tight edge is one that is has a length that matches
 * its "minlen" attribute.
 *
 * The basic structure for this function is derived from Gansner, et al., "A
 * Technique for Drawing Directed Graphs."
 *
 * Pre-conditions:
 *
 *    1. Graph must be a DAG.
 *    2. Graph must be connected.
 *    3. Graph must have at least one node.
 *    5. Graph nodes must have been previously assigned a "rank" property that
 *       respects the "minlen" property of incident edges.
 *    6. Graph edges must have a "minlen" property.
 *
 * Post-conditions:
 *
 *    - Graph nodes will have their rank adjusted to ensure that all edges are
 *      tight.
 *
 * Returns a tree (undirected graph) that is constructed using only "tight"
 * edges.
 */
function feasibleTree(g) {
  var t = new Graph({ directed: false });

  // Choose arbitrary node from which to start our tree
  var start = g.nodes()[0];
  var size = g.nodeCount();
  t.setNode(start, {});

  var edge, delta;
  while (tightTree(t, g) < size) {
    edge = findMinSlackEdge(t, g);
    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
    shiftRanks(t, g, delta);
  }

  return t;
}

/*
 * Finds a maximal tree of tight edges and returns the number of nodes in the
 * tree.
 */
function tightTree(t, g) {
  function dfs(v) {
    _.forEach(g.nodeEdges(v), function(e) {
      var edgeV = e.v,
        w = (v === edgeV) ? e.w : edgeV;
      if (!t.hasNode(w) && !slack(g, e)) {
        t.setNode(w, {});
        t.setEdge(v, w, {});
        dfs(w);
      }
    });
  }

  _.forEach(t.nodes(), dfs);
  return t.nodeCount();
}

/*
 * Finds the edge with the smallest slack that is incident on tree and returns
 * it.
 */
function findMinSlackEdge(t, g) {
  return _.minBy(g.edges(), function(e) {
    if (t.hasNode(e.v) !== t.hasNode(e.w)) {
      return slack(g, e);
    }
  });
}

function shiftRanks(t, g, delta) {
  _.forEach(t.nodes(), function(v) {
    g.node(v).rank += delta;
  });
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","../graphlib":"node_modules/dagre/lib/graphlib.js","./util":"node_modules/dagre/lib/rank/util.js"}],"node_modules/dagre/lib/rank/network-simplex.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");
var feasibleTree = require("./feasible-tree");
var slack = require("./util").slack;
var initRank = require("./util").longestPath;
var preorder = require("../graphlib").alg.preorder;
var postorder = require("../graphlib").alg.postorder;
var simplify = require("../util").simplify;

module.exports = networkSimplex;

// Expose some internals for testing purposes
networkSimplex.initLowLimValues = initLowLimValues;
networkSimplex.initCutValues = initCutValues;
networkSimplex.calcCutValue = calcCutValue;
networkSimplex.leaveEdge = leaveEdge;
networkSimplex.enterEdge = enterEdge;
networkSimplex.exchangeEdges = exchangeEdges;

/*
 * The network simplex algorithm assigns ranks to each node in the input graph
 * and iteratively improves the ranking to reduce the length of edges.
 *
 * Preconditions:
 *
 *    1. The input graph must be a DAG.
 *    2. All nodes in the graph must have an object value.
 *    3. All edges in the graph must have "minlen" and "weight" attributes.
 *
 * Postconditions:
 *
 *    1. All nodes in the graph will have an assigned "rank" attribute that has
 *       been optimized by the network simplex algorithm. Ranks start at 0.
 *
 *
 * A rough sketch of the algorithm is as follows:
 *
 *    1. Assign initial ranks to each node. We use the longest path algorithm,
 *       which assigns ranks to the lowest position possible. In general this
 *       leads to very wide bottom ranks and unnecessarily long edges.
 *    2. Construct a feasible tight tree. A tight tree is one such that all
 *       edges in the tree have no slack (difference between length of edge
 *       and minlen for the edge). This by itself greatly improves the assigned
 *       rankings by shorting edges.
 *    3. Iteratively find edges that have negative cut values. Generally a
 *       negative cut value indicates that the edge could be removed and a new
 *       tree edge could be added to produce a more compact graph.
 *
 * Much of the algorithms here are derived from Gansner, et al., "A Technique
 * for Drawing Directed Graphs." The structure of the file roughly follows the
 * structure of the overall algorithm.
 */
function networkSimplex(g) {
  g = simplify(g);
  initRank(g);
  var t = feasibleTree(g);
  initLowLimValues(t);
  initCutValues(t, g);

  var e, f;
  while ((e = leaveEdge(t))) {
    f = enterEdge(t, g, e);
    exchangeEdges(t, g, e, f);
  }
}

/*
 * Initializes cut values for all edges in the tree.
 */
function initCutValues(t, g) {
  var vs = postorder(t, t.nodes());
  vs = vs.slice(0, vs.length - 1);
  _.forEach(vs, function(v) {
    assignCutValue(t, g, v);
  });
}

function assignCutValue(t, g, child) {
  var childLab = t.node(child);
  var parent = childLab.parent;
  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
}

/*
 * Given the tight tree, its graph, and a child in the graph calculate and
 * return the cut value for the edge between the child and its parent.
 */
function calcCutValue(t, g, child) {
  var childLab = t.node(child);
  var parent = childLab.parent;
  // True if the child is on the tail end of the edge in the directed graph
  var childIsTail = true;
  // The graph's view of the tree edge we're inspecting
  var graphEdge = g.edge(child, parent);
  // The accumulated cut value for the edge between this node and its parent
  var cutValue = 0;

  if (!graphEdge) {
    childIsTail = false;
    graphEdge = g.edge(parent, child);
  }

  cutValue = graphEdge.weight;

  _.forEach(g.nodeEdges(child), function(e) {
    var isOutEdge = e.v === child,
      other = isOutEdge ? e.w : e.v;

    if (other !== parent) {
      var pointsToHead = isOutEdge === childIsTail,
        otherWeight = g.edge(e).weight;

      cutValue += pointsToHead ? otherWeight : -otherWeight;
      if (isTreeEdge(t, child, other)) {
        var otherCutValue = t.edge(child, other).cutvalue;
        cutValue += pointsToHead ? -otherCutValue : otherCutValue;
      }
    }
  });

  return cutValue;
}

function initLowLimValues(tree, root) {
  if (arguments.length < 2) {
    root = tree.nodes()[0];
  }
  dfsAssignLowLim(tree, {}, 1, root);
}

function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
  var low = nextLim;
  var label = tree.node(v);

  visited[v] = true;
  _.forEach(tree.neighbors(v), function(w) {
    if (!_.has(visited, w)) {
      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
    }
  });

  label.low = low;
  label.lim = nextLim++;
  if (parent) {
    label.parent = parent;
  } else {
    // TODO should be able to remove this when we incrementally update low lim
    delete label.parent;
  }

  return nextLim;
}

function leaveEdge(tree) {
  return _.find(tree.edges(), function(e) {
    return tree.edge(e).cutvalue < 0;
  });
}

function enterEdge(t, g, edge) {
  var v = edge.v;
  var w = edge.w;

  // For the rest of this function we assume that v is the tail and w is the
  // head, so if we don't have this edge in the graph we should flip it to
  // match the correct orientation.
  if (!g.hasEdge(v, w)) {
    v = edge.w;
    w = edge.v;
  }

  var vLabel = t.node(v);
  var wLabel = t.node(w);
  var tailLabel = vLabel;
  var flip = false;

  // If the root is in the tail of the edge then we need to flip the logic that
  // checks for the head and tail nodes in the candidates function below.
  if (vLabel.lim > wLabel.lim) {
    tailLabel = wLabel;
    flip = true;
  }

  var candidates = _.filter(g.edges(), function(edge) {
    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&
           flip !== isDescendant(t, t.node(edge.w), tailLabel);
  });

  return _.minBy(candidates, function(edge) { return slack(g, edge); });
}

function exchangeEdges(t, g, e, f) {
  var v = e.v;
  var w = e.w;
  t.removeEdge(v, w);
  t.setEdge(f.v, f.w, {});
  initLowLimValues(t);
  initCutValues(t, g);
  updateRanks(t, g);
}

function updateRanks(t, g) {
  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; });
  var vs = preorder(t, root);
  vs = vs.slice(1);
  _.forEach(vs, function(v) {
    var parent = t.node(v).parent,
      edge = g.edge(v, parent),
      flipped = false;

    if (!edge) {
      edge = g.edge(parent, v);
      flipped = true;
    }

    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
  });
}

/*
 * Returns true if the edge is in the tree.
 */
function isTreeEdge(tree, u, v) {
  return tree.hasEdge(u, v);
}

/*
 * Returns true if the specified node is descendant of the root node per the
 * assigned low and lim attributes in the tree.
 */
function isDescendant(tree, vLabel, rootLabel) {
  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","./feasible-tree":"node_modules/dagre/lib/rank/feasible-tree.js","./util":"node_modules/dagre/lib/rank/util.js","../graphlib":"node_modules/dagre/lib/graphlib.js","../util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/rank/index.js":[function(require,module,exports) {
"use strict";

var rankUtil = require("./util");
var longestPath = rankUtil.longestPath;
var feasibleTree = require("./feasible-tree");
var networkSimplex = require("./network-simplex");

module.exports = rank;

/*
 * Assigns a rank to each node in the input graph that respects the "minlen"
 * constraint specified on edges between nodes.
 *
 * This basic structure is derived from Gansner, et al., "A Technique for
 * Drawing Directed Graphs."
 *
 * Pre-conditions:
 *
 *    1. Graph must be a connected DAG
 *    2. Graph nodes must be objects
 *    3. Graph edges must have "weight" and "minlen" attributes
 *
 * Post-conditions:
 *
 *    1. Graph nodes will have a "rank" attribute based on the results of the
 *       algorithm. Ranks can start at any index (including negative), we'll
 *       fix them up later.
 */
function rank(g) {
  switch(g.graph().ranker) {
  case "network-simplex": networkSimplexRanker(g); break;
  case "tight-tree": tightTreeRanker(g); break;
  case "longest-path": longestPathRanker(g); break;
  default: networkSimplexRanker(g);
  }
}

// A fast and simple ranker, but results are far from optimal.
var longestPathRanker = longestPath;

function tightTreeRanker(g) {
  longestPath(g);
  feasibleTree(g);
}

function networkSimplexRanker(g) {
  networkSimplex(g);
}

},{"./util":"node_modules/dagre/lib/rank/util.js","./feasible-tree":"node_modules/dagre/lib/rank/feasible-tree.js","./network-simplex":"node_modules/dagre/lib/rank/network-simplex.js"}],"node_modules/dagre/lib/parent-dummy-chains.js":[function(require,module,exports) {
var _ = require("./lodash");

module.exports = parentDummyChains;

function parentDummyChains(g) {
  var postorderNums = postorder(g);

  _.forEach(g.graph().dummyChains, function(v) {
    var node = g.node(v);
    var edgeObj = node.edgeObj;
    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);
    var path = pathData.path;
    var lca = pathData.lca;
    var pathIdx = 0;
    var pathV = path[pathIdx];
    var ascending = true;

    while (v !== edgeObj.w) {
      node = g.node(v);

      if (ascending) {
        while ((pathV = path[pathIdx]) !== lca &&
               g.node(pathV).maxRank < node.rank) {
          pathIdx++;
        }

        if (pathV === lca) {
          ascending = false;
        }
      }

      if (!ascending) {
        while (pathIdx < path.length - 1 &&
               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
          pathIdx++;
        }
        pathV = path[pathIdx];
      }

      g.setParent(v, pathV);
      v = g.successors(v)[0];
    }
  });
}

// Find a path from v to w through the lowest common ancestor (LCA). Return the
// full path and the LCA.
function findPath(g, postorderNums, v, w) {
  var vPath = [];
  var wPath = [];
  var low = Math.min(postorderNums[v].low, postorderNums[w].low);
  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);
  var parent;
  var lca;

  // Traverse up from v to find the LCA
  parent = v;
  do {
    parent = g.parent(parent);
    vPath.push(parent);
  } while (parent &&
           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
  lca = parent;

  // Traverse from w to LCA
  parent = w;
  while ((parent = g.parent(parent)) !== lca) {
    wPath.push(parent);
  }

  return { path: vPath.concat(wPath.reverse()), lca: lca };
}

function postorder(g) {
  var result = {};
  var lim = 0;

  function dfs(v) {
    var low = lim;
    _.forEach(g.children(v), dfs);
    result[v] = { low: low, lim: lim++ };
  }
  _.forEach(g.children(), dfs);

  return result;
}

},{"./lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/nesting-graph.js":[function(require,module,exports) {
var _ = require("./lodash");
var util = require("./util");

module.exports = {
  run: run,
  cleanup: cleanup
};

/*
 * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
 * adds appropriate edges to ensure that all cluster nodes are placed between
 * these boundries, and ensures that the graph is connected.
 *
 * In addition we ensure, through the use of the minlen property, that nodes
 * and subgraph border nodes to not end up on the same rank.
 *
 * Preconditions:
 *
 *    1. Input graph is a DAG
 *    2. Nodes in the input graph has a minlen attribute
 *
 * Postconditions:
 *
 *    1. Input graph is connected.
 *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
 *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
 *       get placed on the same rank as subgraph border nodes.
 *
 * The nesting graph idea comes from Sander, "Layout of Compound Directed
 * Graphs."
 */
function run(g) {
  var root = util.addDummyNode(g, "root", {}, "_root");
  var depths = treeDepths(g);
  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array
  var nodeSep = 2 * height + 1;

  g.graph().nestingRoot = root;

  // Multiply minlen by nodeSep to align nodes on non-border ranks.
  _.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });

  // Calculate a weight that is sufficient to keep subgraphs vertically compact
  var weight = sumWeights(g) + 1;

  // Create border nodes and link them up
  _.forEach(g.children(), function(child) {
    dfs(g, root, nodeSep, weight, height, depths, child);
  });

  // Save the multiplier for node layers for later removal of empty border
  // layers.
  g.graph().nodeRankFactor = nodeSep;
}

function dfs(g, root, nodeSep, weight, height, depths, v) {
  var children = g.children(v);
  if (!children.length) {
    if (v !== root) {
      g.setEdge(root, v, { weight: 0, minlen: nodeSep });
    }
    return;
  }

  var top = util.addBorderNode(g, "_bt");
  var bottom = util.addBorderNode(g, "_bb");
  var label = g.node(v);

  g.setParent(top, v);
  label.borderTop = top;
  g.setParent(bottom, v);
  label.borderBottom = bottom;

  _.forEach(children, function(child) {
    dfs(g, root, nodeSep, weight, height, depths, child);

    var childNode = g.node(child);
    var childTop = childNode.borderTop ? childNode.borderTop : child;
    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
    var thisWeight = childNode.borderTop ? weight : 2 * weight;
    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

    g.setEdge(top, childTop, {
      weight: thisWeight,
      minlen: minlen,
      nestingEdge: true
    });

    g.setEdge(childBottom, bottom, {
      weight: thisWeight,
      minlen: minlen,
      nestingEdge: true
    });
  });

  if (!g.parent(v)) {
    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
  }
}

function treeDepths(g) {
  var depths = {};
  function dfs(v, depth) {
    var children = g.children(v);
    if (children && children.length) {
      _.forEach(children, function(child) {
        dfs(child, depth + 1);
      });
    }
    depths[v] = depth;
  }
  _.forEach(g.children(), function(v) { dfs(v, 1); });
  return depths;
}

function sumWeights(g) {
  return _.reduce(g.edges(), function(acc, e) {
    return acc + g.edge(e).weight;
  }, 0);
}

function cleanup(g) {
  var graphLabel = g.graph();
  g.removeNode(graphLabel.nestingRoot);
  delete graphLabel.nestingRoot;
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.nestingEdge) {
      g.removeEdge(e);
    }
  });
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/add-border-segments.js":[function(require,module,exports) {
var _ = require("./lodash");
var util = require("./util");

module.exports = addBorderSegments;

function addBorderSegments(g) {
  function dfs(v) {
    var children = g.children(v);
    var node = g.node(v);
    if (children.length) {
      _.forEach(children, dfs);
    }

    if (_.has(node, "minRank")) {
      node.borderLeft = [];
      node.borderRight = [];
      for (var rank = node.minRank, maxRank = node.maxRank + 1;
        rank < maxRank;
        ++rank) {
        addBorderNode(g, "borderLeft", "_bl", v, node, rank);
        addBorderNode(g, "borderRight", "_br", v, node, rank);
      }
    }
  }

  _.forEach(g.children(), dfs);
}

function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
  var label = { width: 0, height: 0, rank: rank, borderType: prop };
  var prev = sgNode[prop][rank - 1];
  var curr = util.addDummyNode(g, "border", label, prefix);
  sgNode[prop][rank] = curr;
  g.setParent(curr, sg);
  if (prev) {
    g.setEdge(prev, curr, { weight: 1 });
  }
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/coordinate-system.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");

module.exports = {
  adjust: adjust,
  undo: undo
};

function adjust(g) {
  var rankDir = g.graph().rankdir.toLowerCase();
  if (rankDir === "lr" || rankDir === "rl") {
    swapWidthHeight(g);
  }
}

function undo(g) {
  var rankDir = g.graph().rankdir.toLowerCase();
  if (rankDir === "bt" || rankDir === "rl") {
    reverseY(g);
  }

  if (rankDir === "lr" || rankDir === "rl") {
    swapXY(g);
    swapWidthHeight(g);
  }
}

function swapWidthHeight(g) {
  _.forEach(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });
  _.forEach(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });
}

function swapWidthHeightOne(attrs) {
  var w = attrs.width;
  attrs.width = attrs.height;
  attrs.height = w;
}

function reverseY(g) {
  _.forEach(g.nodes(), function(v) { reverseYOne(g.node(v)); });

  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    _.forEach(edge.points, reverseYOne);
    if (_.has(edge, "y")) {
      reverseYOne(edge);
    }
  });
}

function reverseYOne(attrs) {
  attrs.y = -attrs.y;
}

function swapXY(g) {
  _.forEach(g.nodes(), function(v) { swapXYOne(g.node(v)); });

  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    _.forEach(edge.points, swapXYOne);
    if (_.has(edge, "x")) {
      swapXYOne(edge);
    }
  });
}

function swapXYOne(attrs) {
  var x = attrs.x;
  attrs.x = attrs.y;
  attrs.y = x;
}

},{"./lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/order/init-order.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = initOrder;

/*
 * Assigns an initial order value for each node by performing a DFS search
 * starting from nodes in the first rank. Nodes are assigned an order in their
 * rank as they are first visited.
 *
 * This approach comes from Gansner, et al., "A Technique for Drawing Directed
 * Graphs."
 *
 * Returns a layering matrix with an array per layer and each layer sorted by
 * the order of its nodes.
 */
function initOrder(g) {
  var visited = {};
  var simpleNodes = _.filter(g.nodes(), function(v) {
    return !g.children(v).length;
  });
  var maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; }));
  var layers = _.map(_.range(maxRank + 1), function() { return []; });

  function dfs(v) {
    if (_.has(visited, v)) return;
    visited[v] = true;
    var node = g.node(v);
    layers[node.rank].push(v);
    _.forEach(g.successors(v), dfs);
  }

  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });
  _.forEach(orderedVs, dfs);

  return layers;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/order/cross-count.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = crossCount;

/*
 * A function that takes a layering (an array of layers, each with an array of
 * ordererd nodes) and a graph and returns a weighted crossing count.
 *
 * Pre-conditions:
 *
 *    1. Input graph must be simple (not a multigraph), directed, and include
 *       only simple edges.
 *    2. Edges in the input graph must have assigned weights.
 *
 * Post-conditions:
 *
 *    1. The graph and layering matrix are left unchanged.
 *
 * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
 */
function crossCount(g, layering) {
  var cc = 0;
  for (var i = 1; i < layering.length; ++i) {
    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);
  }
  return cc;
}

function twoLayerCrossCount(g, northLayer, southLayer) {
  // Sort all of the edges between the north and south layers by their position
  // in the north layer and then the south. Map these edges to the position of
  // their head in the south layer.
  var southPos = _.zipObject(southLayer,
    _.map(southLayer, function (v, i) { return i; }));
  var southEntries = _.flatten(_.map(northLayer, function(v) {
    return _.sortBy(_.map(g.outEdges(v), function(e) {
      return { pos: southPos[e.w], weight: g.edge(e).weight };
    }), "pos");
  }), true);

  // Build the accumulator tree
  var firstIndex = 1;
  while (firstIndex < southLayer.length) firstIndex <<= 1;
  var treeSize = 2 * firstIndex - 1;
  firstIndex -= 1;
  var tree = _.map(new Array(treeSize), function() { return 0; });

  // Calculate the weighted crossings
  var cc = 0;
  _.forEach(southEntries.forEach(function(entry) {
    var index = entry.pos + firstIndex;
    tree[index] += entry.weight;
    var weightSum = 0;
    while (index > 0) {
      if (index % 2) {
        weightSum += tree[index + 1];
      }
      index = (index - 1) >> 1;
      tree[index] += entry.weight;
    }
    cc += entry.weight * weightSum;
  }));

  return cc;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/order/barycenter.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = barycenter;

function barycenter(g, movable) {
  return _.map(movable, function(v) {
    var inV = g.inEdges(v);
    if (!inV.length) {
      return { v: v };
    } else {
      var result = _.reduce(inV, function(acc, e) {
        var edge = g.edge(e),
          nodeU = g.node(e.v);
        return {
          sum: acc.sum + (edge.weight * nodeU.order),
          weight: acc.weight + edge.weight
        };
      }, { sum: 0, weight: 0 });

      return {
        v: v,
        barycenter: result.sum / result.weight,
        weight: result.weight
      };
    }
  });
}


},{"../lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/order/resolve-conflicts.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = resolveConflicts;

/*
 * Given a list of entries of the form {v, barycenter, weight} and a
 * constraint graph this function will resolve any conflicts between the
 * constraint graph and the barycenters for the entries. If the barycenters for
 * an entry would violate a constraint in the constraint graph then we coalesce
 * the nodes in the conflict into a new node that respects the contraint and
 * aggregates barycenter and weight information.
 *
 * This implementation is based on the description in Forster, "A Fast and
 * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
 * differs in some specific details.
 *
 * Pre-conditions:
 *
 *    1. Each entry has the form {v, barycenter, weight}, or if the node has
 *       no barycenter, then {v}.
 *
 * Returns:
 *
 *    A new list of entries of the form {vs, i, barycenter, weight}. The list
 *    `vs` may either be a singleton or it may be an aggregation of nodes
 *    ordered such that they do not violate constraints from the constraint
 *    graph. The property `i` is the lowest original index of any of the
 *    elements in `vs`.
 */
function resolveConflicts(entries, cg) {
  var mappedEntries = {};
  _.forEach(entries, function(entry, i) {
    var tmp = mappedEntries[entry.v] = {
      indegree: 0,
      "in": [],
      out: [],
      vs: [entry.v],
      i: i
    };
    if (!_.isUndefined(entry.barycenter)) {
      tmp.barycenter = entry.barycenter;
      tmp.weight = entry.weight;
    }
  });

  _.forEach(cg.edges(), function(e) {
    var entryV = mappedEntries[e.v];
    var entryW = mappedEntries[e.w];
    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {
      entryW.indegree++;
      entryV.out.push(mappedEntries[e.w]);
    }
  });

  var sourceSet = _.filter(mappedEntries, function(entry) {
    return !entry.indegree;
  });

  return doResolveConflicts(sourceSet);
}

function doResolveConflicts(sourceSet) {
  var entries = [];

  function handleIn(vEntry) {
    return function(uEntry) {
      if (uEntry.merged) {
        return;
      }
      if (_.isUndefined(uEntry.barycenter) ||
          _.isUndefined(vEntry.barycenter) ||
          uEntry.barycenter >= vEntry.barycenter) {
        mergeEntries(vEntry, uEntry);
      }
    };
  }

  function handleOut(vEntry) {
    return function(wEntry) {
      wEntry["in"].push(vEntry);
      if (--wEntry.indegree === 0) {
        sourceSet.push(wEntry);
      }
    };
  }

  while (sourceSet.length) {
    var entry = sourceSet.pop();
    entries.push(entry);
    _.forEach(entry["in"].reverse(), handleIn(entry));
    _.forEach(entry.out, handleOut(entry));
  }

  return _.map(_.filter(entries, function(entry) { return !entry.merged; }),
    function(entry) {
      return _.pick(entry, ["vs", "i", "barycenter", "weight"]);
    });

}

function mergeEntries(target, source) {
  var sum = 0;
  var weight = 0;

  if (target.weight) {
    sum += target.barycenter * target.weight;
    weight += target.weight;
  }

  if (source.weight) {
    sum += source.barycenter * source.weight;
    weight += source.weight;
  }

  target.vs = source.vs.concat(target.vs);
  target.barycenter = sum / weight;
  target.weight = weight;
  target.i = Math.min(source.i, target.i);
  source.merged = true;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/order/sort.js":[function(require,module,exports) {
var _ = require("../lodash");
var util = require("../util");

module.exports = sort;

function sort(entries, biasRight) {
  var parts = util.partition(entries, function(entry) {
    return _.has(entry, "barycenter");
  });
  var sortable = parts.lhs,
    unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),
    vs = [],
    sum = 0,
    weight = 0,
    vsIndex = 0;

  sortable.sort(compareWithBias(!!biasRight));

  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

  _.forEach(sortable, function (entry) {
    vsIndex += entry.vs.length;
    vs.push(entry.vs);
    sum += entry.barycenter * entry.weight;
    weight += entry.weight;
    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
  });

  var result = { vs: _.flatten(vs, true) };
  if (weight) {
    result.barycenter = sum / weight;
    result.weight = weight;
  }
  return result;
}

function consumeUnsortable(vs, unsortable, index) {
  var last;
  while (unsortable.length && (last = _.last(unsortable)).i <= index) {
    unsortable.pop();
    vs.push(last.vs);
    index++;
  }
  return index;
}

function compareWithBias(bias) {
  return function(entryV, entryW) {
    if (entryV.barycenter < entryW.barycenter) {
      return -1;
    } else if (entryV.barycenter > entryW.barycenter) {
      return 1;
    }

    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
  };
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","../util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/order/sort-subgraph.js":[function(require,module,exports) {
var _ = require("../lodash");
var barycenter = require("./barycenter");
var resolveConflicts = require("./resolve-conflicts");
var sort = require("./sort");

module.exports = sortSubgraph;

function sortSubgraph(g, v, cg, biasRight) {
  var movable = g.children(v);
  var node = g.node(v);
  var bl = node ? node.borderLeft : undefined;
  var br = node ? node.borderRight: undefined;
  var subgraphs = {};

  if (bl) {
    movable = _.filter(movable, function(w) {
      return w !== bl && w !== br;
    });
  }

  var barycenters = barycenter(g, movable);
  _.forEach(barycenters, function(entry) {
    if (g.children(entry.v).length) {
      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
      subgraphs[entry.v] = subgraphResult;
      if (_.has(subgraphResult, "barycenter")) {
        mergeBarycenters(entry, subgraphResult);
      }
    }
  });

  var entries = resolveConflicts(barycenters, cg);
  expandSubgraphs(entries, subgraphs);

  var result = sort(entries, biasRight);

  if (bl) {
    result.vs = _.flatten([bl, result.vs, br], true);
    if (g.predecessors(bl).length) {
      var blPred = g.node(g.predecessors(bl)[0]),
        brPred = g.node(g.predecessors(br)[0]);
      if (!_.has(result, "barycenter")) {
        result.barycenter = 0;
        result.weight = 0;
      }
      result.barycenter = (result.barycenter * result.weight +
                           blPred.order + brPred.order) / (result.weight + 2);
      result.weight += 2;
    }
  }

  return result;
}

function expandSubgraphs(entries, subgraphs) {
  _.forEach(entries, function(entry) {
    entry.vs = _.flatten(entry.vs.map(function(v) {
      if (subgraphs[v]) {
        return subgraphs[v].vs;
      }
      return v;
    }), true);
  });
}

function mergeBarycenters(target, other) {
  if (!_.isUndefined(target.barycenter)) {
    target.barycenter = (target.barycenter * target.weight +
                         other.barycenter * other.weight) /
                        (target.weight + other.weight);
    target.weight += other.weight;
  } else {
    target.barycenter = other.barycenter;
    target.weight = other.weight;
  }
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","./barycenter":"node_modules/dagre/lib/order/barycenter.js","./resolve-conflicts":"node_modules/dagre/lib/order/resolve-conflicts.js","./sort":"node_modules/dagre/lib/order/sort.js"}],"node_modules/dagre/lib/order/build-layer-graph.js":[function(require,module,exports) {
var _ = require("../lodash");
var Graph = require("../graphlib").Graph;

module.exports = buildLayerGraph;

/*
 * Constructs a graph that can be used to sort a layer of nodes. The graph will
 * contain all base and subgraph nodes from the request layer in their original
 * hierarchy and any edges that are incident on these nodes and are of the type
 * requested by the "relationship" parameter.
 *
 * Nodes from the requested rank that do not have parents are assigned a root
 * node in the output graph, which is set in the root graph attribute. This
 * makes it easy to walk the hierarchy of movable nodes during ordering.
 *
 * Pre-conditions:
 *
 *    1. Input graph is a DAG
 *    2. Base nodes in the input graph have a rank attribute
 *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
 *    4. Edges have an assigned weight
 *
 * Post-conditions:
 *
 *    1. Output graph has all nodes in the movable rank with preserved
 *       hierarchy.
 *    2. Root nodes in the movable layer are made children of the node
 *       indicated by the root attribute of the graph.
 *    3. Non-movable nodes incident on movable nodes, selected by the
 *       relationship parameter, are included in the graph (without hierarchy).
 *    4. Edges incident on movable nodes, selected by the relationship
 *       parameter, are added to the output graph.
 *    5. The weights for copied edges are aggregated as need, since the output
 *       graph is not a multi-graph.
 */
function buildLayerGraph(g, rank, relationship) {
  var root = createRootNode(g),
    result = new Graph({ compound: true }).setGraph({ root: root })
      .setDefaultNodeLabel(function(v) { return g.node(v); });

  _.forEach(g.nodes(), function(v) {
    var node = g.node(v),
      parent = g.parent(v);

    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
      result.setNode(v);
      result.setParent(v, parent || root);

      // This assumes we have only short edges!
      _.forEach(g[relationship](v), function(e) {
        var u = e.v === v ? e.w : e.v,
          edge = result.edge(u, v),
          weight = !_.isUndefined(edge) ? edge.weight : 0;
        result.setEdge(u, v, { weight: g.edge(e).weight + weight });
      });

      if (_.has(node, "minRank")) {
        result.setNode(v, {
          borderLeft: node.borderLeft[rank],
          borderRight: node.borderRight[rank]
        });
      }
    }
  });

  return result;
}

function createRootNode(g) {
  var v;
  while (g.hasNode((v = _.uniqueId("_root"))));
  return v;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","../graphlib":"node_modules/dagre/lib/graphlib.js"}],"node_modules/dagre/lib/order/add-subgraph-constraints.js":[function(require,module,exports) {
var _ = require("../lodash");

module.exports = addSubgraphConstraints;

function addSubgraphConstraints(g, cg, vs) {
  var prev = {},
    rootPrev;

  _.forEach(vs, function(v) {
    var child = g.parent(v),
      parent,
      prevChild;
    while (child) {
      parent = g.parent(child);
      if (parent) {
        prevChild = prev[parent];
        prev[parent] = child;
      } else {
        prevChild = rootPrev;
        rootPrev = child;
      }
      if (prevChild && prevChild !== child) {
        cg.setEdge(prevChild, child);
        return;
      }
      child = parent;
    }
  });

  /*
  function dfs(v) {
    var children = v ? g.children(v) : g.children();
    if (children.length) {
      var min = Number.POSITIVE_INFINITY,
          subgraphs = [];
      _.each(children, function(child) {
        var childMin = dfs(child);
        if (g.children(child).length) {
          subgraphs.push({ v: child, order: childMin });
        }
        min = Math.min(min, childMin);
      });
      _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
        cg.setEdge(prev.v, curr.v);
        return curr;
      });
      return min;
    }
    return g.node(v).order;
  }
  dfs(undefined);
  */
}

},{"../lodash":"node_modules/dagre/lib/lodash.js"}],"node_modules/dagre/lib/order/index.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");
var initOrder = require("./init-order");
var crossCount = require("./cross-count");
var sortSubgraph = require("./sort-subgraph");
var buildLayerGraph = require("./build-layer-graph");
var addSubgraphConstraints = require("./add-subgraph-constraints");
var Graph = require("../graphlib").Graph;
var util = require("../util");

module.exports = order;

/*
 * Applies heuristics to minimize edge crossings in the graph and sets the best
 * order solution as an order attribute on each node.
 *
 * Pre-conditions:
 *
 *    1. Graph must be DAG
 *    2. Graph nodes must be objects with a "rank" attribute
 *    3. Graph edges must have the "weight" attribute
 *
 * Post-conditions:
 *
 *    1. Graph nodes will have an "order" attribute based on the results of the
 *       algorithm.
 */
function order(g) {
  var maxRank = util.maxRank(g),
    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), "inEdges"),
    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), "outEdges");

  var layering = initOrder(g);
  assignOrder(g, layering);

  var bestCC = Number.POSITIVE_INFINITY,
    best;

  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

    layering = util.buildLayerMatrix(g);
    var cc = crossCount(g, layering);
    if (cc < bestCC) {
      lastBest = 0;
      best = _.cloneDeep(layering);
      bestCC = cc;
    }
  }

  assignOrder(g, best);
}

function buildLayerGraphs(g, ranks, relationship) {
  return _.map(ranks, function(rank) {
    return buildLayerGraph(g, rank, relationship);
  });
}

function sweepLayerGraphs(layerGraphs, biasRight) {
  var cg = new Graph();
  _.forEach(layerGraphs, function(lg) {
    var root = lg.graph().root;
    var sorted = sortSubgraph(lg, root, cg, biasRight);
    _.forEach(sorted.vs, function(v, i) {
      lg.node(v).order = i;
    });
    addSubgraphConstraints(lg, cg, sorted.vs);
  });
}

function assignOrder(g, layering) {
  _.forEach(layering, function(layer) {
    _.forEach(layer, function(v, i) {
      g.node(v).order = i;
    });
  });
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","./init-order":"node_modules/dagre/lib/order/init-order.js","./cross-count":"node_modules/dagre/lib/order/cross-count.js","./sort-subgraph":"node_modules/dagre/lib/order/sort-subgraph.js","./build-layer-graph":"node_modules/dagre/lib/order/build-layer-graph.js","./add-subgraph-constraints":"node_modules/dagre/lib/order/add-subgraph-constraints.js","../graphlib":"node_modules/dagre/lib/graphlib.js","../util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/position/bk.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");
var Graph = require("../graphlib").Graph;
var util = require("../util");

/*
 * This module provides coordinate assignment based on Brandes and Köpf, "Fast
 * and Simple Horizontal Coordinate Assignment."
 */

module.exports = {
  positionX: positionX,
  findType1Conflicts: findType1Conflicts,
  findType2Conflicts: findType2Conflicts,
  addConflict: addConflict,
  hasConflict: hasConflict,
  verticalAlignment: verticalAlignment,
  horizontalCompaction: horizontalCompaction,
  alignCoordinates: alignCoordinates,
  findSmallestWidthAlignment: findSmallestWidthAlignment,
  balance: balance
};

/*
 * Marks all edges in the graph with a type-1 conflict with the "type1Conflict"
 * property. A type-1 conflict is one where a non-inner segment crosses an
 * inner segment. An inner segment is an edge with both incident nodes marked
 * with the "dummy" property.
 *
 * This algorithm scans layer by layer, starting with the second, for type-1
 * conflicts between the current layer and the previous layer. For each layer
 * it scans the nodes from left to right until it reaches one that is incident
 * on an inner segment. It then scans predecessors to determine if they have
 * edges that cross that inner segment. At the end a final scan is done for all
 * nodes on the current rank to see if they cross the last visited inner
 * segment.
 *
 * This algorithm (safely) assumes that a dummy node will only be incident on a
 * single node in the layers being scanned.
 */
function findType1Conflicts(g, layering) {
  var conflicts = {};

  function visitLayer(prevLayer, layer) {
    var
      // last visited node in the previous layer that is incident on an inner
      // segment.
      k0 = 0,
      // Tracks the last node in this layer scanned for crossings with a type-1
      // segment.
      scanPos = 0,
      prevLayerLength = prevLayer.length,
      lastNode = _.last(layer);

    _.forEach(layer, function(v, i) {
      var w = findOtherInnerSegmentNode(g, v),
        k1 = w ? g.node(w).order : prevLayerLength;

      if (w || v === lastNode) {
        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {
          _.forEach(g.predecessors(scanNode), function(u) {
            var uLabel = g.node(u),
              uPos = uLabel.order;
            if ((uPos < k0 || k1 < uPos) &&
                !(uLabel.dummy && g.node(scanNode).dummy)) {
              addConflict(conflicts, u, scanNode);
            }
          });
        });
        scanPos = i + 1;
        k0 = k1;
      }
    });

    return layer;
  }

  _.reduce(layering, visitLayer);
  return conflicts;
}

function findType2Conflicts(g, layering) {
  var conflicts = {};

  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
    var v;
    _.forEach(_.range(southPos, southEnd), function(i) {
      v = south[i];
      if (g.node(v).dummy) {
        _.forEach(g.predecessors(v), function(u) {
          var uNode = g.node(u);
          if (uNode.dummy &&
              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
            addConflict(conflicts, u, v);
          }
        });
      }
    });
  }


  function visitLayer(north, south) {
    var prevNorthPos = -1,
      nextNorthPos,
      southPos = 0;

    _.forEach(south, function(v, southLookahead) {
      if (g.node(v).dummy === "border") {
        var predecessors = g.predecessors(v);
        if (predecessors.length) {
          nextNorthPos = g.node(predecessors[0]).order;
          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
          southPos = southLookahead;
          prevNorthPos = nextNorthPos;
        }
      }
      scan(south, southPos, south.length, nextNorthPos, north.length);
    });

    return south;
  }

  _.reduce(layering, visitLayer);
  return conflicts;
}

function findOtherInnerSegmentNode(g, v) {
  if (g.node(v).dummy) {
    return _.find(g.predecessors(v), function(u) {
      return g.node(u).dummy;
    });
  }
}

function addConflict(conflicts, v, w) {
  if (v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }

  var conflictsV = conflicts[v];
  if (!conflictsV) {
    conflicts[v] = conflictsV = {};
  }
  conflictsV[w] = true;
}

function hasConflict(conflicts, v, w) {
  if (v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  return _.has(conflicts[v], w);
}

/*
 * Try to align nodes into vertical "blocks" where possible. This algorithm
 * attempts to align a node with one of its median neighbors. If the edge
 * connecting a neighbor is a type-1 conflict then we ignore that possibility.
 * If a previous node has already formed a block with a node after the node
 * we're trying to form a block with, we also ignore that possibility - our
 * blocks would be split in that scenario.
 */
function verticalAlignment(g, layering, conflicts, neighborFn) {
  var root = {},
    align = {},
    pos = {};

  // We cache the position here based on the layering because the graph and
  // layering may be out of sync. The layering matrix is manipulated to
  // generate different extreme alignments.
  _.forEach(layering, function(layer) {
    _.forEach(layer, function(v, order) {
      root[v] = v;
      align[v] = v;
      pos[v] = order;
    });
  });

  _.forEach(layering, function(layer) {
    var prevIdx = -1;
    _.forEach(layer, function(v) {
      var ws = neighborFn(v);
      if (ws.length) {
        ws = _.sortBy(ws, function(w) { return pos[w]; });
        var mp = (ws.length - 1) / 2;
        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
          var w = ws[i];
          if (align[v] === v &&
              prevIdx < pos[w] &&
              !hasConflict(conflicts, v, w)) {
            align[w] = v;
            align[v] = root[v] = root[w];
            prevIdx = pos[w];
          }
        }
      }
    });
  });

  return { root: root, align: align };
}

function horizontalCompaction(g, layering, root, align, reverseSep) {
  // This portion of the algorithm differs from BK due to a number of problems.
  // Instead of their algorithm we construct a new block graph and do two
  // sweeps. The first sweep places blocks with the smallest possible
  // coordinates. The second sweep removes unused space by moving blocks to the
  // greatest coordinates without violating separation.
  var xs = {},
    blockG = buildBlockGraph(g, layering, root, reverseSep),
    borderType = reverseSep ? "borderLeft" : "borderRight";

  function iterate(setXsFunc, nextNodesFunc) {
    var stack = blockG.nodes();
    var elem = stack.pop();
    var visited = {};
    while (elem) {
      if (visited[elem]) {
        setXsFunc(elem);
      } else {
        visited[elem] = true;
        stack.push(elem);
        stack = stack.concat(nextNodesFunc(elem));
      }

      elem = stack.pop();
    }
  }

  // First pass, assign smallest coordinates
  function pass1(elem) {
    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {
      return Math.max(acc, xs[e.v] + blockG.edge(e));
    }, 0);
  }

  // Second pass, assign greatest coordinates
  function pass2(elem) {
    var min = blockG.outEdges(elem).reduce(function(acc, e) {
      return Math.min(acc, xs[e.w] - blockG.edge(e));
    }, Number.POSITIVE_INFINITY);

    var node = g.node(elem);
    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
      xs[elem] = Math.max(xs[elem], min);
    }
  }

  iterate(pass1, blockG.predecessors.bind(blockG));
  iterate(pass2, blockG.successors.bind(blockG));

  // Assign x coordinates to all nodes
  _.forEach(align, function(v) {
    xs[v] = xs[root[v]];
  });

  return xs;
}


function buildBlockGraph(g, layering, root, reverseSep) {
  var blockGraph = new Graph(),
    graphLabel = g.graph(),
    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);

  _.forEach(layering, function(layer) {
    var u;
    _.forEach(layer, function(v) {
      var vRoot = root[v];
      blockGraph.setNode(vRoot);
      if (u) {
        var uRoot = root[u],
          prevMax = blockGraph.edge(uRoot, vRoot);
        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
      }
      u = v;
    });
  });

  return blockGraph;
}

/*
 * Returns the alignment that has the smallest width of the given alignments.
 */
function findSmallestWidthAlignment(g, xss) {
  return _.minBy(_.values(xss), function (xs) {
    var max = Number.NEGATIVE_INFINITY;
    var min = Number.POSITIVE_INFINITY;

    _.forIn(xs, function (x, v) {
      var halfWidth = width(g, v) / 2;

      max = Math.max(x + halfWidth, max);
      min = Math.min(x - halfWidth, min);
    });

    return max - min;
  });
}

/*
 * Align the coordinates of each of the layout alignments such that
 * left-biased alignments have their minimum coordinate at the same point as
 * the minimum coordinate of the smallest width alignment and right-biased
 * alignments have their maximum coordinate at the same point as the maximum
 * coordinate of the smallest width alignment.
 */
function alignCoordinates(xss, alignTo) {
  var alignToVals = _.values(alignTo),
    alignToMin = _.min(alignToVals),
    alignToMax = _.max(alignToVals);

  _.forEach(["u", "d"], function(vert) {
    _.forEach(["l", "r"], function(horiz) {
      var alignment = vert + horiz,
        xs = xss[alignment],
        delta;
      if (xs === alignTo) return;

      var xsVals = _.values(xs);
      delta = horiz === "l" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);

      if (delta) {
        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });
      }
    });
  });
}

function balance(xss, align) {
  return _.mapValues(xss.ul, function(ignore, v) {
    if (align) {
      return xss[align.toLowerCase()][v];
    } else {
      var xs = _.sortBy(_.map(xss, v));
      return (xs[1] + xs[2]) / 2;
    }
  });
}

function positionX(g) {
  var layering = util.buildLayerMatrix(g);
  var conflicts = _.merge(
    findType1Conflicts(g, layering),
    findType2Conflicts(g, layering));

  var xss = {};
  var adjustedLayering;
  _.forEach(["u", "d"], function(vert) {
    adjustedLayering = vert === "u" ? layering : _.values(layering).reverse();
    _.forEach(["l", "r"], function(horiz) {
      if (horiz === "r") {
        adjustedLayering = _.map(adjustedLayering, function(inner) {
          return _.values(inner).reverse();
        });
      }

      var neighborFn = (vert === "u" ? g.predecessors : g.successors).bind(g);
      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
      var xs = horizontalCompaction(g, adjustedLayering,
        align.root, align.align, horiz === "r");
      if (horiz === "r") {
        xs = _.mapValues(xs, function(x) { return -x; });
      }
      xss[vert + horiz] = xs;
    });
  });

  var smallestWidth = findSmallestWidthAlignment(g, xss);
  alignCoordinates(xss, smallestWidth);
  return balance(xss, g.graph().align);
}

function sep(nodeSep, edgeSep, reverseSep) {
  return function(g, v, w) {
    var vLabel = g.node(v);
    var wLabel = g.node(w);
    var sum = 0;
    var delta;

    sum += vLabel.width / 2;
    if (_.has(vLabel, "labelpos")) {
      switch (vLabel.labelpos.toLowerCase()) {
      case "l": delta = -vLabel.width / 2; break;
      case "r": delta = vLabel.width / 2; break;
      }
    }
    if (delta) {
      sum += reverseSep ? delta : -delta;
    }
    delta = 0;

    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;

    sum += wLabel.width / 2;
    if (_.has(wLabel, "labelpos")) {
      switch (wLabel.labelpos.toLowerCase()) {
      case "l": delta = wLabel.width / 2; break;
      case "r": delta = -wLabel.width / 2; break;
      }
    }
    if (delta) {
      sum += reverseSep ? delta : -delta;
    }
    delta = 0;

    return sum;
  };
}

function width(g, v) {
  return g.node(v).width;
}

},{"../lodash":"node_modules/dagre/lib/lodash.js","../graphlib":"node_modules/dagre/lib/graphlib.js","../util":"node_modules/dagre/lib/util.js"}],"node_modules/dagre/lib/position/index.js":[function(require,module,exports) {
"use strict";

var _ = require("../lodash");
var util = require("../util");
var positionX = require("./bk").positionX;

module.exports = position;

function position(g) {
  g = util.asNonCompoundGraph(g);

  positionY(g);
  _.forEach(positionX(g), function(x, v) {
    g.node(v).x = x;
  });
}

function positionY(g) {
  var layering = util.buildLayerMatrix(g);
  var rankSep = g.graph().ranksep;
  var prevY = 0;
  _.forEach(layering, function(layer) {
    var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));
    _.forEach(layer, function(v) {
      g.node(v).y = prevY + maxHeight / 2;
    });
    prevY += maxHeight + rankSep;
  });
}


},{"../lodash":"node_modules/dagre/lib/lodash.js","../util":"node_modules/dagre/lib/util.js","./bk":"node_modules/dagre/lib/position/bk.js"}],"node_modules/dagre/lib/layout.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");
var acyclic = require("./acyclic");
var normalize = require("./normalize");
var rank = require("./rank");
var normalizeRanks = require("./util").normalizeRanks;
var parentDummyChains = require("./parent-dummy-chains");
var removeEmptyRanks = require("./util").removeEmptyRanks;
var nestingGraph = require("./nesting-graph");
var addBorderSegments = require("./add-border-segments");
var coordinateSystem = require("./coordinate-system");
var order = require("./order");
var position = require("./position");
var util = require("./util");
var Graph = require("./graphlib").Graph;

module.exports = layout;

function layout(g, opts) {
  var time = opts && opts.debugTiming ? util.time : util.notime;
  time("layout", function() {
    var layoutGraph = 
      time("  buildLayoutGraph", function() { return buildLayoutGraph(g); });
    time("  runLayout",        function() { runLayout(layoutGraph, time); });
    time("  updateInputGraph", function() { updateInputGraph(g, layoutGraph); });
  });
}

function runLayout(g, time) {
  time("    makeSpaceForEdgeLabels", function() { makeSpaceForEdgeLabels(g); });
  time("    removeSelfEdges",        function() { removeSelfEdges(g); });
  time("    acyclic",                function() { acyclic.run(g); });
  time("    nestingGraph.run",       function() { nestingGraph.run(g); });
  time("    rank",                   function() { rank(util.asNonCompoundGraph(g)); });
  time("    injectEdgeLabelProxies", function() { injectEdgeLabelProxies(g); });
  time("    removeEmptyRanks",       function() { removeEmptyRanks(g); });
  time("    nestingGraph.cleanup",   function() { nestingGraph.cleanup(g); });
  time("    normalizeRanks",         function() { normalizeRanks(g); });
  time("    assignRankMinMax",       function() { assignRankMinMax(g); });
  time("    removeEdgeLabelProxies", function() { removeEdgeLabelProxies(g); });
  time("    normalize.run",          function() { normalize.run(g); });
  time("    parentDummyChains",      function() { parentDummyChains(g); });
  time("    addBorderSegments",      function() { addBorderSegments(g); });
  time("    order",                  function() { order(g); });
  time("    insertSelfEdges",        function() { insertSelfEdges(g); });
  time("    adjustCoordinateSystem", function() { coordinateSystem.adjust(g); });
  time("    position",               function() { position(g); });
  time("    positionSelfEdges",      function() { positionSelfEdges(g); });
  time("    removeBorderNodes",      function() { removeBorderNodes(g); });
  time("    normalize.undo",         function() { normalize.undo(g); });
  time("    fixupEdgeLabelCoords",   function() { fixupEdgeLabelCoords(g); });
  time("    undoCoordinateSystem",   function() { coordinateSystem.undo(g); });
  time("    translateGraph",         function() { translateGraph(g); });
  time("    assignNodeIntersects",   function() { assignNodeIntersects(g); });
  time("    reversePoints",          function() { reversePointsForReversedEdges(g); });
  time("    acyclic.undo",           function() { acyclic.undo(g); });
}

/*
 * Copies final layout information from the layout graph back to the input
 * graph. This process only copies whitelisted attributes from the layout graph
 * to the input graph, so it serves as a good place to determine what
 * attributes can influence layout.
 */
function updateInputGraph(inputGraph, layoutGraph) {
  _.forEach(inputGraph.nodes(), function(v) {
    var inputLabel = inputGraph.node(v);
    var layoutLabel = layoutGraph.node(v);

    if (inputLabel) {
      inputLabel.x = layoutLabel.x;
      inputLabel.y = layoutLabel.y;

      if (layoutGraph.children(v).length) {
        inputLabel.width = layoutLabel.width;
        inputLabel.height = layoutLabel.height;
      }
    }
  });

  _.forEach(inputGraph.edges(), function(e) {
    var inputLabel = inputGraph.edge(e);
    var layoutLabel = layoutGraph.edge(e);

    inputLabel.points = layoutLabel.points;
    if (_.has(layoutLabel, "x")) {
      inputLabel.x = layoutLabel.x;
      inputLabel.y = layoutLabel.y;
    }
  });

  inputGraph.graph().width = layoutGraph.graph().width;
  inputGraph.graph().height = layoutGraph.graph().height;
}

var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
var graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" };
var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
var nodeNumAttrs = ["width", "height"];
var nodeDefaults = { width: 0, height: 0 };
var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
var edgeDefaults = {
  minlen: 1, weight: 1, width: 0, height: 0,
  labeloffset: 10, labelpos: "r"
};
var edgeAttrs = ["labelpos"];

/*
 * Constructs a new graph from the input graph, which can be used for layout.
 * This process copies only whitelisted attributes from the input graph to the
 * layout graph. Thus this function serves as a good place to determine what
 * attributes can influence layout.
 */
function buildLayoutGraph(inputGraph) {
  var g = new Graph({ multigraph: true, compound: true });
  var graph = canonicalize(inputGraph.graph());

  g.setGraph(_.merge({},
    graphDefaults,
    selectNumberAttrs(graph, graphNumAttrs),
    _.pick(graph, graphAttrs)));

  _.forEach(inputGraph.nodes(), function(v) {
    var node = canonicalize(inputGraph.node(v));
    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
    g.setParent(v, inputGraph.parent(v));
  });

  _.forEach(inputGraph.edges(), function(e) {
    var edge = canonicalize(inputGraph.edge(e));
    g.setEdge(e, _.merge({},
      edgeDefaults,
      selectNumberAttrs(edge, edgeNumAttrs),
      _.pick(edge, edgeAttrs)));
  });

  return g;
}

/*
 * This idea comes from the Gansner paper: to account for edge labels in our
 * layout we split each rank in half by doubling minlen and halving ranksep.
 * Then we can place labels at these mid-points between nodes.
 *
 * We also add some minimal padding to the width to push the label for the edge
 * away from the edge itself a bit.
 */
function makeSpaceForEdgeLabels(g) {
  var graph = g.graph();
  graph.ranksep /= 2;
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    edge.minlen *= 2;
    if (edge.labelpos.toLowerCase() !== "c") {
      if (graph.rankdir === "TB" || graph.rankdir === "BT") {
        edge.width += edge.labeloffset;
      } else {
        edge.height += edge.labeloffset;
      }
    }
  });
}

/*
 * Creates temporary dummy nodes that capture the rank in which each edge's
 * label is going to, if it has one of non-zero width and height. We do this
 * so that we can safely remove empty ranks while preserving balance for the
 * label's position.
 */
function injectEdgeLabelProxies(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.width && edge.height) {
      var v = g.node(e.v);
      var w = g.node(e.w);
      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
      util.addDummyNode(g, "edge-proxy", label, "_ep");
    }
  });
}

function assignRankMinMax(g) {
  var maxRank = 0;
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.borderTop) {
      node.minRank = g.node(node.borderTop).rank;
      node.maxRank = g.node(node.borderBottom).rank;
      maxRank = _.max(maxRank, node.maxRank);
    }
  });
  g.graph().maxRank = maxRank;
}

function removeEdgeLabelProxies(g) {
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.dummy === "edge-proxy") {
      g.edge(node.e).labelRank = node.rank;
      g.removeNode(v);
    }
  });
}

function translateGraph(g) {
  var minX = Number.POSITIVE_INFINITY;
  var maxX = 0;
  var minY = Number.POSITIVE_INFINITY;
  var maxY = 0;
  var graphLabel = g.graph();
  var marginX = graphLabel.marginx || 0;
  var marginY = graphLabel.marginy || 0;

  function getExtremes(attrs) {
    var x = attrs.x;
    var y = attrs.y;
    var w = attrs.width;
    var h = attrs.height;
    minX = Math.min(minX, x - w / 2);
    maxX = Math.max(maxX, x + w / 2);
    minY = Math.min(minY, y - h / 2);
    maxY = Math.max(maxY, y + h / 2);
  }

  _.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (_.has(edge, "x")) {
      getExtremes(edge);
    }
  });

  minX -= marginX;
  minY -= marginY;

  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    node.x -= minX;
    node.y -= minY;
  });

  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    _.forEach(edge.points, function(p) {
      p.x -= minX;
      p.y -= minY;
    });
    if (_.has(edge, "x")) { edge.x -= minX; }
    if (_.has(edge, "y")) { edge.y -= minY; }
  });

  graphLabel.width = maxX - minX + marginX;
  graphLabel.height = maxY - minY + marginY;
}

function assignNodeIntersects(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    var nodeV = g.node(e.v);
    var nodeW = g.node(e.w);
    var p1, p2;
    if (!edge.points) {
      edge.points = [];
      p1 = nodeW;
      p2 = nodeV;
    } else {
      p1 = edge.points[0];
      p2 = edge.points[edge.points.length - 1];
    }
    edge.points.unshift(util.intersectRect(nodeV, p1));
    edge.points.push(util.intersectRect(nodeW, p2));
  });
}

function fixupEdgeLabelCoords(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (_.has(edge, "x")) {
      if (edge.labelpos === "l" || edge.labelpos === "r") {
        edge.width -= edge.labeloffset;
      }
      switch (edge.labelpos) {
      case "l": edge.x -= edge.width / 2 + edge.labeloffset; break;
      case "r": edge.x += edge.width / 2 + edge.labeloffset; break;
      }
    }
  });
}

function reversePointsForReversedEdges(g) {
  _.forEach(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.reversed) {
      edge.points.reverse();
    }
  });
}

function removeBorderNodes(g) {
  _.forEach(g.nodes(), function(v) {
    if (g.children(v).length) {
      var node = g.node(v);
      var t = g.node(node.borderTop);
      var b = g.node(node.borderBottom);
      var l = g.node(_.last(node.borderLeft));
      var r = g.node(_.last(node.borderRight));

      node.width = Math.abs(r.x - l.x);
      node.height = Math.abs(b.y - t.y);
      node.x = l.x + node.width / 2;
      node.y = t.y + node.height / 2;
    }
  });

  _.forEach(g.nodes(), function(v) {
    if (g.node(v).dummy === "border") {
      g.removeNode(v);
    }
  });
}

function removeSelfEdges(g) {
  _.forEach(g.edges(), function(e) {
    if (e.v === e.w) {
      var node = g.node(e.v);
      if (!node.selfEdges) {
        node.selfEdges = [];
      }
      node.selfEdges.push({ e: e, label: g.edge(e) });
      g.removeEdge(e);
    }
  });
}

function insertSelfEdges(g) {
  var layers = util.buildLayerMatrix(g);
  _.forEach(layers, function(layer) {
    var orderShift = 0;
    _.forEach(layer, function(v, i) {
      var node = g.node(v);
      node.order = i + orderShift;
      _.forEach(node.selfEdges, function(selfEdge) {
        util.addDummyNode(g, "selfedge", {
          width: selfEdge.label.width,
          height: selfEdge.label.height,
          rank: node.rank,
          order: i + (++orderShift),
          e: selfEdge.e,
          label: selfEdge.label
        }, "_se");
      });
      delete node.selfEdges;
    });
  });
}

function positionSelfEdges(g) {
  _.forEach(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.dummy === "selfedge") {
      var selfNode = g.node(node.e.v);
      var x = selfNode.x + selfNode.width / 2;
      var y = selfNode.y;
      var dx = node.x - x;
      var dy = selfNode.height / 2;
      g.setEdge(node.e, node.label);
      g.removeNode(v);
      node.label.points = [
        { x: x + 2 * dx / 3, y: y - dy },
        { x: x + 5 * dx / 6, y: y - dy },
        { x: x +     dx    , y: y },
        { x: x + 5 * dx / 6, y: y + dy },
        { x: x + 2 * dx / 3, y: y + dy }
      ];
      node.label.x = node.x;
      node.label.y = node.y;
    }
  });
}

function selectNumberAttrs(obj, attrs) {
  return _.mapValues(_.pick(obj, attrs), Number);
}

function canonicalize(attrs) {
  var newAttrs = {};
  _.forEach(attrs, function(v, k) {
    newAttrs[k.toLowerCase()] = v;
  });
  return newAttrs;
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./acyclic":"node_modules/dagre/lib/acyclic.js","./normalize":"node_modules/dagre/lib/normalize.js","./rank":"node_modules/dagre/lib/rank/index.js","./util":"node_modules/dagre/lib/util.js","./parent-dummy-chains":"node_modules/dagre/lib/parent-dummy-chains.js","./nesting-graph":"node_modules/dagre/lib/nesting-graph.js","./add-border-segments":"node_modules/dagre/lib/add-border-segments.js","./coordinate-system":"node_modules/dagre/lib/coordinate-system.js","./order":"node_modules/dagre/lib/order/index.js","./position":"node_modules/dagre/lib/position/index.js","./graphlib":"node_modules/dagre/lib/graphlib.js"}],"node_modules/dagre/lib/debug.js":[function(require,module,exports) {
var _ = require("./lodash");
var util = require("./util");
var Graph = require("./graphlib").Graph;

module.exports = {
  debugOrdering: debugOrdering
};

/* istanbul ignore next */
function debugOrdering(g) {
  var layerMatrix = util.buildLayerMatrix(g);

  var h = new Graph({ compound: true, multigraph: true }).setGraph({});

  _.forEach(g.nodes(), function(v) {
    h.setNode(v, { label: v });
    h.setParent(v, "layer" + g.node(v).rank);
  });

  _.forEach(g.edges(), function(e) {
    h.setEdge(e.v, e.w, {}, e.name);
  });

  _.forEach(layerMatrix, function(layer, i) {
    var layerV = "layer" + i;
    h.setNode(layerV, { rank: "same" });
    _.reduce(layer, function(u, v) {
      h.setEdge(u, v, { style: "invis" });
      return v;
    });
  });

  return h;
}

},{"./lodash":"node_modules/dagre/lib/lodash.js","./util":"node_modules/dagre/lib/util.js","./graphlib":"node_modules/dagre/lib/graphlib.js"}],"node_modules/dagre/lib/version.js":[function(require,module,exports) {
module.exports = "0.8.5";

},{}],"node_modules/dagre/index.js":[function(require,module,exports) {
/*
Copyright (c) 2012-2014 Chris Pettitt

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

module.exports = {
  graphlib: require("./lib/graphlib"),

  layout: require("./lib/layout"),
  debug: require("./lib/debug"),
  util: {
    time: require("./lib/util").time,
    notime: require("./lib/util").notime
  },
  version: require("./lib/version")
};

},{"./lib/graphlib":"node_modules/dagre/lib/graphlib.js","./lib/layout":"node_modules/dagre/lib/layout.js","./lib/debug":"node_modules/dagre/lib/debug.js","./lib/util":"node_modules/dagre/lib/util.js","./lib/version":"node_modules/dagre/lib/version.js"}],"node_modules/dagre-d3/lib/graphlib.js":[function(require,module,exports) {
/* global window */

var graphlib;

if (typeof require === "function") {
  try {
    graphlib = require("graphlib");
  }
  catch (e) {
    // continue regardless of error
  }
}

if (!graphlib) {
  graphlib = window.graphlib;
}

module.exports = graphlib;

},{"graphlib":"node_modules/graphlib/index.js"}],"node_modules/dagre-d3/lib/dagre.js":[function(require,module,exports) {
/* global window */

var dagre;

if (typeof require === "function") {
  try {
    dagre = require("dagre");
  } catch (e) {
    // continue regardless of error
  }
}

if (!dagre) {
  dagre = window.dagre;
}

module.exports = dagre;

},{"dagre":"node_modules/dagre/index.js"}],"node_modules/dagre-d3/lib/intersect/intersect-node.js":[function(require,module,exports) {
module.exports = intersectNode;

function intersectNode(node, point) {
  return node.intersect(point);
}

},{}],"node_modules/dagre-d3/lib/intersect/intersect-ellipse.js":[function(require,module,exports) {
module.exports = intersectEllipse;

function intersectEllipse(node, rx, ry, point) {
  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html

  var cx = node.x;
  var cy = node.y;

  var px = cx - point.x;
  var py = cy - point.y;

  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);

  var dx = Math.abs(rx * ry * px / det);
  if (point.x < cx) {
    dx = -dx;
  }
  var dy = Math.abs(rx * ry * py / det);
  if (point.y < cy) {
    dy = -dy;
  }

  return {x: cx + dx, y: cy + dy};
}


},{}],"node_modules/dagre-d3/lib/intersect/intersect-circle.js":[function(require,module,exports) {
var intersectEllipse = require("./intersect-ellipse");

module.exports = intersectCircle;

function intersectCircle(node, rx, point) {
  return intersectEllipse(node, rx, rx, point);
}

},{"./intersect-ellipse":"node_modules/dagre-d3/lib/intersect/intersect-ellipse.js"}],"node_modules/dagre-d3/lib/intersect/intersect-line.js":[function(require,module,exports) {
module.exports = intersectLine;

/*
 * Returns the point at which two lines, p and q, intersect or returns
 * undefined if they do not intersect.
 */
function intersectLine(p1, p2, q1, q2) {
  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,
  // p7 and p473.

  var a1, a2, b1, b2, c1, c2;
  var r1, r2 , r3, r4;
  var denom, offset, num;
  var x, y;

  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +
  // b1 y + c1 = 0.
  a1 = p2.y - p1.y;
  b1 = p1.x - p2.x;
  c1 = (p2.x * p1.y) - (p1.x * p2.y);

  // Compute r3 and r4.
  r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);
  r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);

  // Check signs of r3 and r4. If both point 3 and point 4 lie on
  // same side of line 1, the line segments do not intersect.
  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {
    return /*DONT_INTERSECT*/;
  }

  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0
  a2 = q2.y - q1.y;
  b2 = q1.x - q2.x;
  c2 = (q2.x * q1.y) - (q1.x * q2.y);

  // Compute r1 and r2
  r1 = (a2 * p1.x) + (b2 * p1.y) + c2;
  r2 = (a2 * p2.x) + (b2 * p2.y) + c2;

  // Check signs of r1 and r2. If both point 1 and point 2 lie
  // on same side of second line segment, the line segments do
  // not intersect.
  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {
    return /*DONT_INTERSECT*/;
  }

  // Line segments intersect: compute intersection point.
  denom = (a1 * b2) - (a2 * b1);
  if (denom === 0) {
    return /*COLLINEAR*/;
  }

  offset = Math.abs(denom / 2);

  // The denom/2 is to get rounding instead of truncating. It
  // is added or subtracted to the numerator, depending upon the
  // sign of the numerator.
  num = (b1 * c2) - (b2 * c1);
  x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);

  num = (a2 * c1) - (a1 * c2);
  y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);

  return { x: x, y: y };
}

function sameSign(r1, r2) {
  return r1 * r2 > 0;
}

},{}],"node_modules/dagre-d3/lib/intersect/intersect-polygon.js":[function(require,module,exports) {
/* eslint "no-console": off */

var intersectLine = require("./intersect-line");

module.exports = intersectPolygon;

/*
 * Returns the point ({x, y}) at which the point argument intersects with the
 * node argument assuming that it has the shape specified by polygon.
 */
function intersectPolygon(node, polyPoints, point) {
  var x1 = node.x;
  var y1 = node.y;

  var intersections = [];

  var minX = Number.POSITIVE_INFINITY;
  var minY = Number.POSITIVE_INFINITY;
  polyPoints.forEach(function(entry) {
    minX = Math.min(minX, entry.x);
    minY = Math.min(minY, entry.y);
  });

  var left = x1 - node.width / 2 - minX;
  var top =  y1 - node.height / 2 - minY;

  for (var i = 0; i < polyPoints.length; i++) {
    var p1 = polyPoints[i];
    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];
    var intersect = intersectLine(node, point,
      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});
    if (intersect) {
      intersections.push(intersect);
    }
  }

  if (!intersections.length) {
    console.log("NO INTERSECTION FOUND, RETURN NODE CENTER", node);
    return node;
  }

  if (intersections.length > 1) {
    // More intersections, find the one nearest to edge end point
    intersections.sort(function(p, q) {
      var pdx = p.x - point.x;
      var pdy = p.y - point.y;
      var distp = Math.sqrt(pdx * pdx + pdy * pdy);

      var qdx = q.x - point.x;
      var qdy = q.y - point.y;
      var distq = Math.sqrt(qdx * qdx + qdy * qdy);

      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);
    });
  }
  return intersections[0];
}

},{"./intersect-line":"node_modules/dagre-d3/lib/intersect/intersect-line.js"}],"node_modules/dagre-d3/lib/intersect/intersect-rect.js":[function(require,module,exports) {
module.exports = intersectRect;

function intersectRect(node, point) {
  var x = node.x;
  var y = node.y;

  // Rectangle intersection algorithm from:
  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
  var dx = point.x - x;
  var dy = point.y - y;
  var w = node.width / 2;
  var h = node.height / 2;

  var sx, sy;
  if (Math.abs(dy) * w > Math.abs(dx) * h) {
    // Intersection is top or bottom of rect.
    if (dy < 0) {
      h = -h;
    }
    sx = dy === 0 ? 0 : h * dx / dy;
    sy = h;
  } else {
    // Intersection is left or right of rect.
    if (dx < 0) {
      w = -w;
    }
    sx = w;
    sy = dx === 0 ? 0 : w * dy / dx;
  }

  return {x: x + sx, y: y + sy};
}

},{}],"node_modules/dagre-d3/lib/intersect/index.js":[function(require,module,exports) {
module.exports = {
  node: require("./intersect-node"),
  circle: require("./intersect-circle"),
  ellipse: require("./intersect-ellipse"),
  polygon: require("./intersect-polygon"),
  rect: require("./intersect-rect")
};

},{"./intersect-node":"node_modules/dagre-d3/lib/intersect/intersect-node.js","./intersect-circle":"node_modules/dagre-d3/lib/intersect/intersect-circle.js","./intersect-ellipse":"node_modules/dagre-d3/lib/intersect/intersect-ellipse.js","./intersect-polygon":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","./intersect-rect":"node_modules/dagre-d3/lib/intersect/intersect-rect.js"}],"node_modules/dagre-d3/lib/lodash.js":[function(require,module,exports) {
/* global window */

var lodash;

if (typeof require === "function") {
  try {
    lodash = {
      defaults: require("lodash/defaults"),
      each: require("lodash/each"),
      isFunction: require("lodash/isFunction"),
      isPlainObject: require("lodash/isPlainObject"),
      pick: require("lodash/pick"),
      has: require("lodash/has"),
      range: require("lodash/range"),
      uniqueId: require("lodash/uniqueId")
    };
  }
  catch (e) {
    // continue regardless of error
  }
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;

},{"lodash/defaults":"node_modules/lodash/defaults.js","lodash/each":"node_modules/lodash/each.js","lodash/isFunction":"node_modules/lodash/isFunction.js","lodash/isPlainObject":"node_modules/lodash/isPlainObject.js","lodash/pick":"node_modules/lodash/pick.js","lodash/has":"node_modules/lodash/has.js","lodash/range":"node_modules/lodash/range.js","lodash/uniqueId":"node_modules/lodash/uniqueId.js"}],"node_modules/dagre-d3/lib/d3.js":[function(require,module,exports) {
// Stub to get D3 either via NPM or from the global object
var d3;

if (!d3) {
  if (typeof require === "function") {
    try {
      d3 = require("d3");
    }
    catch (e) {
      // continue regardless of error
    }
  }
}

if (!d3) {
  d3 = window.d3;
}

module.exports = d3;

},{"d3":"node_modules/d3/index.js"}],"node_modules/dagre-d3/lib/util.js":[function(require,module,exports) {
var _ = require("./lodash");

// Public utility functions
module.exports = {
  isSubgraph: isSubgraph,
  edgeToId: edgeToId,
  applyStyle: applyStyle,
  applyClass: applyClass,
  applyTransition: applyTransition
};

/*
 * Returns true if the specified node in the graph is a subgraph node. A
 * subgraph node is one that contains other nodes.
 */
function isSubgraph(g, v) {
  return !!g.children(v).length;
}

function edgeToId(e) {
  return escapeId(e.v) + ":" + escapeId(e.w) + ":" + escapeId(e.name);
}

var ID_DELIM = /:/g;
function escapeId(str) {
  return str ? String(str).replace(ID_DELIM, "\\:") : "";
}

function applyStyle(dom, styleFn) {
  if (styleFn) {
    dom.attr("style", styleFn);
  }
}

function applyClass(dom, classFn, otherClasses) {
  if (classFn) {
    dom
      .attr("class", classFn)
      .attr("class", otherClasses + " " + dom.attr("class"));
  }
}

function applyTransition(selection, g) {
  var graph = g.graph();

  if (_.isPlainObject(graph)) {
    var transition = graph.transition;
    if (_.isFunction(transition)) {
      return transition(selection);
    }
  }

  return selection;
}

},{"./lodash":"node_modules/dagre-d3/lib/lodash.js"}],"node_modules/dagre-d3/lib/label/add-text-label.js":[function(require,module,exports) {
var util = require("../util");

module.exports = addTextLabel;

/*
 * Attaches a text label to the specified root. Handles escape sequences.
 */
function addTextLabel(root, node) {
  var domNode = root.append("text");

  var lines = processEscapeSequences(node.label).split("\n");
  for (var i = 0; i < lines.length; i++) {
    domNode.append("tspan")
      .attr("xml:space", "preserve")
      .attr("dy", "1em")
      .attr("x", "1")
      .text(lines[i]);
  }

  util.applyStyle(domNode, node.labelStyle);

  return domNode;
}

function processEscapeSequences(text) {
  var newText = "";
  var escaped = false;
  var ch;
  for (var i = 0; i < text.length; ++i) {
    ch = text[i];
    if (escaped) {
      switch(ch) {
      case "n": newText += "\n"; break;
      default: newText += ch;
      }
      escaped = false;
    } else if (ch === "\\") {
      escaped = true;
    } else {
      newText += ch;
    }
  }
  return newText;
}

},{"../util":"node_modules/dagre-d3/lib/util.js"}],"node_modules/dagre-d3/lib/label/add-html-label.js":[function(require,module,exports) {
var util = require("../util");

module.exports = addHtmlLabel;

function addHtmlLabel(root, node) {
  var fo = root
    .append("foreignObject")
    .attr("width", "100000");

  var div = fo
    .append("xhtml:div");
  div.attr("xmlns", "http://www.w3.org/1999/xhtml");

  var label = node.label;
  switch(typeof label) {
  case "function":
    div.insert(label);
    break;
  case "object":
    // Currently we assume this is a DOM object.
    div.insert(function() { return label; });
    break;
  default: div.html(label);
  }

  util.applyStyle(div, node.labelStyle);
  div.style("display", "inline-block");
  // Fix for firefox
  div.style("white-space", "nowrap");

  var client = div.node().getBoundingClientRect();
  fo
    .attr("width", client.width)
    .attr("height", client.height); 

  return fo;
}

},{"../util":"node_modules/dagre-d3/lib/util.js"}],"node_modules/dagre-d3/lib/label/add-svg-label.js":[function(require,module,exports) {
var util = require("../util");

module.exports = addSVGLabel;

function addSVGLabel(root, node) {
  var domNode = root;

  domNode.node().appendChild(node.label);

  util.applyStyle(domNode, node.labelStyle);

  return domNode;
}

},{"../util":"node_modules/dagre-d3/lib/util.js"}],"node_modules/dagre-d3/lib/label/add-label.js":[function(require,module,exports) {
var addTextLabel = require("./add-text-label");
var addHtmlLabel = require("./add-html-label");
var addSVGLabel  = require("./add-svg-label");

module.exports = addLabel;

function addLabel(root, node, location) {
  var label = node.label;
  var labelSvg = root.append("g");

  // Allow the label to be a string, a function that returns a DOM element, or
  // a DOM element itself.
  if (node.labelType === "svg") {
    addSVGLabel(labelSvg, node);
  } else if (typeof label !== "string" || node.labelType === "html") {
    addHtmlLabel(labelSvg, node);
  } else {
    addTextLabel(labelSvg, node);
  }

  var labelBBox = labelSvg.node().getBBox();
  var y;
  switch(location) {
  case "top":
    y = (-node.height / 2);
    break;
  case "bottom":
    y = (node.height / 2) - labelBBox.height;
    break;
  default:
    y = (-labelBBox.height / 2);
  }
  labelSvg.attr(
    "transform",
    "translate(" + (-labelBBox.width / 2) + "," + y + ")");

  return labelSvg;
}

},{"./add-text-label":"node_modules/dagre-d3/lib/label/add-text-label.js","./add-html-label":"node_modules/dagre-d3/lib/label/add-html-label.js","./add-svg-label":"node_modules/dagre-d3/lib/label/add-svg-label.js"}],"node_modules/dagre-d3/lib/create-nodes.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");
var addLabel = require("./label/add-label");
var util = require("./util");
var d3 = require("./d3");

module.exports = createNodes;

function createNodes(selection, g, shapes) {
  var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });
  var svgNodes = selection.selectAll("g.node")
    .data(simpleNodes, function(v) { return v; })
    .classed("update", true);

  svgNodes.exit().remove();

  svgNodes.enter().append("g")
    .attr("class", "node")
    .style("opacity", 0);

  svgNodes = selection.selectAll("g.node"); 

  svgNodes.each(function(v) {
    var node = g.node(v);
    var thisGroup = d3.select(this);
    util.applyClass(thisGroup, node["class"],
      (thisGroup.classed("update") ? "update " : "") + "node");

    thisGroup.select("g.label").remove();
    var labelGroup = thisGroup.append("g").attr("class", "label");
    var labelDom = addLabel(labelGroup, node);
    var shape = shapes[node.shape];
    var bbox = _.pick(labelDom.node().getBBox(), "width", "height");

    node.elem = this;

    if (node.id) { thisGroup.attr("id", node.id); }
    if (node.labelId) { labelGroup.attr("id", node.labelId); }

    if (_.has(node, "width")) { bbox.width = node.width; }
    if (_.has(node, "height")) { bbox.height = node.height; }

    bbox.width += node.paddingLeft + node.paddingRight;
    bbox.height += node.paddingTop + node.paddingBottom;
    labelGroup.attr("transform", "translate(" +
      ((node.paddingLeft - node.paddingRight) / 2) + "," +
      ((node.paddingTop - node.paddingBottom) / 2) + ")");

    var root = d3.select(this);
    root.select(".label-container").remove();
    var shapeSvg = shape(root, bbox, node).classed("label-container", true);
    util.applyStyle(shapeSvg, node.style);

    var shapeBBox = shapeSvg.node().getBBox();
    node.width = shapeBBox.width;
    node.height = shapeBBox.height;
  });

  var exitSelection;

  if (svgNodes.exit) {
    exitSelection = svgNodes.exit();
  } else {
    exitSelection = svgNodes.selectAll(null); // empty selection
  }

  util.applyTransition(exitSelection, g)
    .style("opacity", 0)
    .remove();

  return svgNodes;
}

},{"./lodash":"node_modules/dagre-d3/lib/lodash.js","./label/add-label":"node_modules/dagre-d3/lib/label/add-label.js","./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js"}],"node_modules/dagre-d3/lib/create-clusters.js":[function(require,module,exports) {
var util = require("./util");
var d3 = require("./d3");
var addLabel = require("./label/add-label");

module.exports = createClusters;

function createClusters(selection, g) {
  var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); });
  var svgClusters = selection.selectAll("g.cluster")
    .data(clusters, function(v) { return v; });

  svgClusters.selectAll("*").remove();
  svgClusters.enter().append("g")
    .attr("class", "cluster")
    .attr("id",function(v){
      var node = g.node(v);
      return node.id;
    })
    .style("opacity", 0);
  
  svgClusters = selection.selectAll("g.cluster");

  util.applyTransition(svgClusters, g)
    .style("opacity", 1);

  svgClusters.each(function(v) {
    var node = g.node(v);
    var thisGroup = d3.select(this);
    d3.select(this).append("rect");
    var labelGroup = thisGroup.append("g").attr("class", "label");
    addLabel(labelGroup, node, node.clusterLabelPos);
  });

  svgClusters.selectAll("rect").each(function(c) {
    var node = g.node(c);
    var domCluster = d3.select(this);
    util.applyStyle(domCluster, node.style);
  });

  var exitSelection;

  if (svgClusters.exit) {
    exitSelection = svgClusters.exit();
  } else {
    exitSelection = svgClusters.selectAll(null); // empty selection
  }

  util.applyTransition(exitSelection, g)
    .style("opacity", 0)
    .remove();

  return svgClusters;
}

},{"./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js","./label/add-label":"node_modules/dagre-d3/lib/label/add-label.js"}],"node_modules/dagre-d3/lib/create-edge-labels.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");
var addLabel = require("./label/add-label");
var util = require("./util");
var d3 = require("./d3");

module.exports = createEdgeLabels;

function createEdgeLabels(selection, g) {
  var svgEdgeLabels = selection.selectAll("g.edgeLabel")
    .data(g.edges(), function(e) { return util.edgeToId(e); })
    .classed("update", true);

  svgEdgeLabels.exit().remove();
  svgEdgeLabels.enter().append("g")
    .classed("edgeLabel", true)
    .style("opacity", 0);

  svgEdgeLabels = selection.selectAll("g.edgeLabel");

  svgEdgeLabels.each(function(e) {
    var root = d3.select(this);
    root.select(".label").remove();
    var edge = g.edge(e);
    var label = addLabel(root, g.edge(e), 0, 0).classed("label", true);
    var bbox = label.node().getBBox();

    if (edge.labelId) { label.attr("id", edge.labelId); }
    if (!_.has(edge, "width")) { edge.width = bbox.width; }
    if (!_.has(edge, "height")) { edge.height = bbox.height; }
  });

  var exitSelection;

  if (svgEdgeLabels.exit) {
    exitSelection = svgEdgeLabels.exit();
  } else {
    exitSelection = svgEdgeLabels.selectAll(null); // empty selection
  }

  util.applyTransition(exitSelection, g)
    .style("opacity", 0)
    .remove();

  return svgEdgeLabels;
}

},{"./lodash":"node_modules/dagre-d3/lib/lodash.js","./label/add-label":"node_modules/dagre-d3/lib/label/add-label.js","./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js"}],"node_modules/dagre-d3/lib/create-edge-paths.js":[function(require,module,exports) {
"use strict";

var _ = require("./lodash");
var intersectNode = require("./intersect/intersect-node");
var util = require("./util");
var d3 = require("./d3");
module.exports = createEdgePaths;

function createEdgePaths(selection, g, arrows) {
  var previousPaths = selection.selectAll("g.edgePath")
    .data(g.edges(), function(e) { return util.edgeToId(e); })
    .classed("update", true);

  var newPaths = enter(previousPaths, g);
  exit(previousPaths, g);

  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;
  util.applyTransition(svgPaths, g)
    .style("opacity", 1);

  // Save DOM element in the path group, and set ID and class
  svgPaths.each(function(e) {
    var domEdge = d3.select(this);
    var edge = g.edge(e);
    edge.elem = this;

    if (edge.id) {
      domEdge.attr("id", edge.id);
    }

    util.applyClass(domEdge, edge["class"],
      (domEdge.classed("update") ? "update " : "") + "edgePath");
  });

  svgPaths.selectAll("path.path")
    .each(function(e) {
      var edge = g.edge(e);
      edge.arrowheadId = _.uniqueId("arrowhead");

      var domEdge = d3.select(this)
        .attr("marker-end", function() {
          return "url(" + makeFragmentRef(location.href, edge.arrowheadId) + ")";
        })
        .style("fill", "none");

      util.applyTransition(domEdge, g)
        .attr("d", function(e) { return calcPoints(g, e); });

      util.applyStyle(domEdge, edge.style);
    });

  svgPaths.selectAll("defs *").remove();
  svgPaths.selectAll("defs")
    .each(function(e) {
      var edge = g.edge(e);
      var arrowhead = arrows[edge.arrowhead];
      arrowhead(d3.select(this), edge.arrowheadId, edge, "arrowhead");
    });

  return svgPaths;
}

function makeFragmentRef(url, fragmentId) {
  var baseUrl = url.split("#")[0];
  return baseUrl + "#" + fragmentId;
}

function calcPoints(g, e) {
  var edge = g.edge(e);
  var tail = g.node(e.v);
  var head = g.node(e.w);
  var points = edge.points.slice(1, edge.points.length - 1);
  points.unshift(intersectNode(tail, points[0]));
  points.push(intersectNode(head, points[points.length - 1]));

  return createLine(edge, points);
}

function createLine(edge, points) {
  var line = (d3.line || d3.svg.line)()
    .x(function(d) { return d.x; })
    .y(function(d) { return d.y; });
  
  (line.curve || line.interpolate)(edge.curve);

  return line(points);
}

function getCoords(elem) {
  var bbox = elem.getBBox();
  var matrix = elem.ownerSVGElement.getScreenCTM()
    .inverse()
    .multiply(elem.getScreenCTM())
    .translate(bbox.width / 2, bbox.height / 2);
  return { x: matrix.e, y: matrix.f };
}

function enter(svgPaths, g) {
  var svgPathsEnter = svgPaths.enter().append("g")
    .attr("class", "edgePath")
    .style("opacity", 0);
  svgPathsEnter.append("path")
    .attr("class", "path")
    .attr("d", function(e) {
      var edge = g.edge(e);
      var sourceElem = g.node(e.v).elem;
      var points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });
      return createLine(edge, points);
    });
  svgPathsEnter.append("defs");
  return svgPathsEnter;
}

function exit(svgPaths, g) {
  var svgPathExit = svgPaths.exit();
  util.applyTransition(svgPathExit, g)
    .style("opacity", 0)
    .remove();
}

},{"./lodash":"node_modules/dagre-d3/lib/lodash.js","./intersect/intersect-node":"node_modules/dagre-d3/lib/intersect/intersect-node.js","./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js"}],"node_modules/dagre-d3/lib/position-nodes.js":[function(require,module,exports) {
"use strict";

var util = require("./util");
var d3 = require("./d3");

module.exports = positionNodes;

function positionNodes(selection, g) {
  var created = selection.filter(function() { return !d3.select(this).classed("update"); });

  function translate(v) {
    var node = g.node(v);
    return "translate(" + node.x + "," + node.y + ")";
  }

  created.attr("transform", translate);

  util.applyTransition(selection, g)
    .style("opacity", 1)
    .attr("transform", translate);
}

},{"./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js"}],"node_modules/dagre-d3/lib/position-edge-labels.js":[function(require,module,exports) {
"use strict";

var util = require("./util");
var d3 = require("./d3");
var _ = require("./lodash");

module.exports = positionEdgeLabels;

function positionEdgeLabels(selection, g) {
  var created = selection.filter(function() { return !d3.select(this).classed("update"); });

  function translate(e) {
    var edge = g.edge(e);
    return _.has(edge, "x") ? "translate(" + edge.x + "," + edge.y + ")" : "";
  }

  created.attr("transform", translate);

  util.applyTransition(selection, g)
    .style("opacity", 1)
    .attr("transform", translate);
}

},{"./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js","./lodash":"node_modules/dagre-d3/lib/lodash.js"}],"node_modules/dagre-d3/lib/position-clusters.js":[function(require,module,exports) {
"use strict";

var util = require("./util");
var d3 = require("./d3");

module.exports = positionClusters;

function positionClusters(selection, g) {
  var created = selection.filter(function() { return !d3.select(this).classed("update"); });

  function translate(v) {
    var node = g.node(v);
    return "translate(" + node.x + "," + node.y + ")";
  }

  created.attr("transform", translate);

  util.applyTransition(selection, g)
    .style("opacity", 1)
    .attr("transform", translate);

  util.applyTransition(created.selectAll("rect"), g)
    .attr("width", function(v) { return g.node(v).width; })
    .attr("height", function(v) { return g.node(v).height; })
    .attr("x", function(v) {
      var node = g.node(v);
      return -node.width / 2;
    })
    .attr("y", function(v) {
      var node = g.node(v);
      return -node.height / 2;
    });
}

},{"./util":"node_modules/dagre-d3/lib/util.js","./d3":"node_modules/dagre-d3/lib/d3.js"}],"node_modules/dagre-d3/lib/shapes.js":[function(require,module,exports) {
"use strict";

var intersectRect = require("./intersect/intersect-rect");
var intersectEllipse = require("./intersect/intersect-ellipse");
var intersectCircle = require("./intersect/intersect-circle");
var intersectPolygon = require("./intersect/intersect-polygon");

module.exports = {
  rect: rect,
  ellipse: ellipse,
  circle: circle,
  diamond: diamond
};

function rect(parent, bbox, node) {
  var shapeSvg = parent.insert("rect", ":first-child")
    .attr("rx", node.rx)
    .attr("ry", node.ry)
    .attr("x", -bbox.width / 2)
    .attr("y", -bbox.height / 2)
    .attr("width", bbox.width)
    .attr("height", bbox.height);

  node.intersect = function(point) {
    return intersectRect(node, point);
  };

  return shapeSvg;
}

function ellipse(parent, bbox, node) {
  var rx = bbox.width / 2;
  var ry = bbox.height / 2;
  var shapeSvg = parent.insert("ellipse", ":first-child")
    .attr("x", -bbox.width / 2)
    .attr("y", -bbox.height / 2)
    .attr("rx", rx)
    .attr("ry", ry);

  node.intersect = function(point) {
    return intersectEllipse(node, rx, ry, point);
  };

  return shapeSvg;
}

function circle(parent, bbox, node) {
  var r = Math.max(bbox.width, bbox.height) / 2;
  var shapeSvg = parent.insert("circle", ":first-child")
    .attr("x", -bbox.width / 2)
    .attr("y", -bbox.height / 2)
    .attr("r", r);

  node.intersect = function(point) {
    return intersectCircle(node, r, point);
  };

  return shapeSvg;
}

// Circumscribe an ellipse for the bounding box with a diamond shape. I derived
// the function to calculate the diamond shape from:
// http://mathforum.org/kb/message.jspa?messageID=3750236
function diamond(parent, bbox, node) {
  var w = (bbox.width * Math.SQRT2) / 2;
  var h = (bbox.height * Math.SQRT2) / 2;
  var points = [
    { x:  0, y: -h },
    { x: -w, y:  0 },
    { x:  0, y:  h },
    { x:  w, y:  0 }
  ];
  var shapeSvg = parent.insert("polygon", ":first-child")
    .attr("points", points.map(function(p) { return p.x + "," + p.y; }).join(" "));

  node.intersect = function(p) {
    return intersectPolygon(node, points, p);
  };

  return shapeSvg;
}

},{"./intersect/intersect-rect":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","./intersect/intersect-ellipse":"node_modules/dagre-d3/lib/intersect/intersect-ellipse.js","./intersect/intersect-circle":"node_modules/dagre-d3/lib/intersect/intersect-circle.js","./intersect/intersect-polygon":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js"}],"node_modules/dagre-d3/lib/arrows.js":[function(require,module,exports) {
var util = require("./util");

module.exports = {
  "default": normal,
  "normal": normal,
  "vee": vee,
  "undirected": undirected
};

function normal(parent, id, edge, type) {
  var marker = parent.append("marker")
    .attr("id", id)
    .attr("viewBox", "0 0 10 10")
    .attr("refX", 9)
    .attr("refY", 5)
    .attr("markerUnits", "strokeWidth")
    .attr("markerWidth", 8)
    .attr("markerHeight", 6)
    .attr("orient", "auto");

  var path = marker.append("path")
    .attr("d", "M 0 0 L 10 5 L 0 10 z")
    .style("stroke-width", 1)
    .style("stroke-dasharray", "1,0");
  util.applyStyle(path, edge[type + "Style"]);
  if (edge[type + "Class"]) {
    path.attr("class", edge[type + "Class"]);
  }
}

function vee(parent, id, edge, type) {
  var marker = parent.append("marker")
    .attr("id", id)
    .attr("viewBox", "0 0 10 10")
    .attr("refX", 9)
    .attr("refY", 5)
    .attr("markerUnits", "strokeWidth")
    .attr("markerWidth", 8)
    .attr("markerHeight", 6)
    .attr("orient", "auto");

  var path = marker.append("path")
    .attr("d", "M 0 0 L 10 5 L 0 10 L 4 5 z")
    .style("stroke-width", 1)
    .style("stroke-dasharray", "1,0");
  util.applyStyle(path, edge[type + "Style"]);
  if (edge[type + "Class"]) {
    path.attr("class", edge[type + "Class"]);
  }
}

function undirected(parent, id, edge, type) {
  var marker = parent.append("marker")
    .attr("id", id)
    .attr("viewBox", "0 0 10 10")
    .attr("refX", 9)
    .attr("refY", 5)
    .attr("markerUnits", "strokeWidth")
    .attr("markerWidth", 8)
    .attr("markerHeight", 6)
    .attr("orient", "auto");

  var path = marker.append("path")
    .attr("d", "M 0 5 L 10 5")
    .style("stroke-width", 1)
    .style("stroke-dasharray", "1,0");
  util.applyStyle(path, edge[type + "Style"]);
  if (edge[type + "Class"]) {
    path.attr("class", edge[type + "Class"]);
  }
}

},{"./util":"node_modules/dagre-d3/lib/util.js"}],"node_modules/dagre-d3/lib/render.js":[function(require,module,exports) {
var _ = require("./lodash");
var d3 = require("./d3");
var layout = require("./dagre").layout;

module.exports = render;

// This design is based on http://bost.ocks.org/mike/chart/.
function render() {
  var createNodes = require("./create-nodes");
  var createClusters = require("./create-clusters");
  var createEdgeLabels = require("./create-edge-labels");
  var createEdgePaths = require("./create-edge-paths");
  var positionNodes = require("./position-nodes");
  var positionEdgeLabels = require("./position-edge-labels");
  var positionClusters = require("./position-clusters");
  var shapes = require("./shapes");
  var arrows = require("./arrows");

  var fn = function(svg, g) {
    preProcessGraph(g);

    var outputGroup = createOrSelectGroup(svg, "output");
    var clustersGroup = createOrSelectGroup(outputGroup, "clusters");
    var edgePathsGroup = createOrSelectGroup(outputGroup, "edgePaths");
    var edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, "edgeLabels"), g);
    var nodes = createNodes(createOrSelectGroup(outputGroup, "nodes"), g, shapes);

    layout(g);

    positionNodes(nodes, g);
    positionEdgeLabels(edgeLabels, g);
    createEdgePaths(edgePathsGroup, g, arrows);

    var clusters = createClusters(clustersGroup, g);
    positionClusters(clusters, g);

    postProcessGraph(g);
  };

  fn.createNodes = function(value) {
    if (!arguments.length) return createNodes;
    createNodes = value;
    return fn;
  };

  fn.createClusters = function(value) {
    if (!arguments.length) return createClusters;
    createClusters = value;
    return fn;
  };

  fn.createEdgeLabels = function(value) {
    if (!arguments.length) return createEdgeLabels;
    createEdgeLabels = value;
    return fn;
  };

  fn.createEdgePaths = function(value) {
    if (!arguments.length) return createEdgePaths;
    createEdgePaths = value;
    return fn;
  };

  fn.shapes = function(value) {
    if (!arguments.length) return shapes;
    shapes = value;
    return fn;
  };

  fn.arrows = function(value) {
    if (!arguments.length) return arrows;
    arrows = value;
    return fn;
  };

  return fn;
}

var NODE_DEFAULT_ATTRS = {
  paddingLeft: 10,
  paddingRight: 10,
  paddingTop: 10,
  paddingBottom: 10,
  rx: 0,
  ry: 0,
  shape: "rect"
};

var EDGE_DEFAULT_ATTRS = {
  arrowhead: "normal",
  curve: d3.curveLinear
};

function preProcessGraph(g) {
  g.nodes().forEach(function(v) {
    var node = g.node(v);
    if (!_.has(node, "label") && !g.children(v).length) { node.label = v; }

    if (_.has(node, "paddingX")) {
      _.defaults(node, {
        paddingLeft: node.paddingX,
        paddingRight: node.paddingX
      });
    }

    if (_.has(node, "paddingY")) {
      _.defaults(node, {
        paddingTop: node.paddingY,
        paddingBottom: node.paddingY
      });
    }

    if (_.has(node, "padding")) {
      _.defaults(node, {
        paddingLeft: node.padding,
        paddingRight: node.padding,
        paddingTop: node.padding,
        paddingBottom: node.padding
      });
    }

    _.defaults(node, NODE_DEFAULT_ATTRS);

    _.each(["paddingLeft", "paddingRight", "paddingTop", "paddingBottom"], function(k) {
      node[k] = Number(node[k]);
    });

    // Save dimensions for restore during post-processing
    if (_.has(node, "width")) { node._prevWidth = node.width; }
    if (_.has(node, "height")) { node._prevHeight = node.height; }
  });

  g.edges().forEach(function(e) {
    var edge = g.edge(e);
    if (!_.has(edge, "label")) { edge.label = ""; }
    _.defaults(edge, EDGE_DEFAULT_ATTRS);
  });
}

function postProcessGraph(g) {
  _.each(g.nodes(), function(v) {
    var node = g.node(v);

    // Restore original dimensions
    if (_.has(node, "_prevWidth")) {
      node.width = node._prevWidth;
    } else {
      delete node.width;
    }

    if (_.has(node, "_prevHeight")) {
      node.height = node._prevHeight;
    } else {
      delete node.height;
    }

    delete node._prevWidth;
    delete node._prevHeight;
  });
}

function createOrSelectGroup(root, name) {
  var selection = root.select("g." + name);
  if (selection.empty()) {
    selection = root.append("g").attr("class", name);
  }
  return selection;
}

},{"./lodash":"node_modules/dagre-d3/lib/lodash.js","./d3":"node_modules/dagre-d3/lib/d3.js","./dagre":"node_modules/dagre-d3/lib/dagre.js","./create-nodes":"node_modules/dagre-d3/lib/create-nodes.js","./create-clusters":"node_modules/dagre-d3/lib/create-clusters.js","./create-edge-labels":"node_modules/dagre-d3/lib/create-edge-labels.js","./create-edge-paths":"node_modules/dagre-d3/lib/create-edge-paths.js","./position-nodes":"node_modules/dagre-d3/lib/position-nodes.js","./position-edge-labels":"node_modules/dagre-d3/lib/position-edge-labels.js","./position-clusters":"node_modules/dagre-d3/lib/position-clusters.js","./shapes":"node_modules/dagre-d3/lib/shapes.js","./arrows":"node_modules/dagre-d3/lib/arrows.js"}],"node_modules/dagre-d3/lib/version.js":[function(require,module,exports) {
module.exports = "0.6.4";

},{}],"node_modules/dagre-d3/index.js":[function(require,module,exports) {
/**
 * @license
 * Copyright (c) 2012-2013 Chris Pettitt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
module.exports =  {
  graphlib: require("./lib/graphlib"),
  dagre: require("./lib/dagre"),
  intersect: require("./lib/intersect"),
  render: require("./lib/render"),
  util: require("./lib/util"),
  version: require("./lib/version")
};

},{"./lib/graphlib":"node_modules/dagre-d3/lib/graphlib.js","./lib/dagre":"node_modules/dagre-d3/lib/dagre.js","./lib/intersect":"node_modules/dagre-d3/lib/intersect/index.js","./lib/render":"node_modules/dagre-d3/lib/render.js","./lib/util":"node_modules/dagre-d3/lib/util.js","./lib/version":"node_modules/dagre-d3/lib/version.js"}],"node_modules/entity-decode/browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = decode;

/**
 * @see https://github.com/vuejs/vue/commit/a855dd0564a657a73b7249469490d39817f27cf7#diff-c0a2623ea5896a83e3b630f236b47b52
 * @see https://stackoverflow.com/a/13091266/4936667
 */
var decoder;

function decode(html) {
  decoder = decoder || document.createElement('div'); // Escape HTML before decoding for HTML Entities

  html = escape(html).replace(/%26/g, '&').replace(/%23/g, '#').replace(/%3B/g, ';'); // decoding

  decoder.innerHTML = html;
  return unescape(decoder.textContent);
}
},{}],"node_modules/khroma/dist/utils/channel.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
/* CHANNEL */
var Channel = {
    /* CLAMP */
    min: {
        r: 0,
        g: 0,
        b: 0,
        s: 0,
        l: 0,
        a: 0
    },
    max: {
        r: 255,
        g: 255,
        b: 255,
        h: 360,
        s: 100,
        l: 100,
        a: 1
    },
    clamp: {
        r: function (r) { return r >= 255 ? 255 : (r < 0 ? 0 : r); },
        g: function (g) { return g >= 255 ? 255 : (g < 0 ? 0 : g); },
        b: function (b) { return b >= 255 ? 255 : (b < 0 ? 0 : b); },
        h: function (h) { return h % 360; },
        s: function (s) { return s >= 100 ? 100 : (s < 0 ? 0 : s); },
        l: function (l) { return l >= 100 ? 100 : (l < 0 ? 0 : l); },
        a: function (a) { return a >= 1 ? 1 : (a < 0 ? 0 : a); }
    },
    /* CONVERSION */
    //SOURCE: https://planetcalc.com/7779
    toLinear: function (c) {
        var n = c / 255;
        return c > .03928 ? Math.pow(((n + .055) / 1.055), 2.4) : n / 12.92;
    },
    //SOURCE: https://gist.github.com/mjackson/5311256
    hue2rgb: function (p, q, t) {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6)
            return p + (q - p) * 6 * t;
        if (t < 1 / 2)
            return q;
        if (t < 2 / 3)
            return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    },
    hsl2rgb: function (_a, channel) {
        var h = _a.h, s = _a.s, l = _a.l;
        if (s === 100)
            return l * 2.55; // Achromatic
        h /= 360;
        s /= 100;
        l /= 100;
        var q = (l < .5) ? l * (1 + s) : (l + s) - (l * s), p = 2 * l - q;
        switch (channel) {
            case 'r': return Channel.hue2rgb(p, q, h + 1 / 3) * 255;
            case 'g': return Channel.hue2rgb(p, q, h) * 255;
            case 'b': return Channel.hue2rgb(p, q, h - 1 / 3) * 255;
        }
    },
    rgb2hsl: function (_a, channel) {
        var r = _a.r, g = _a.g, b = _a.b;
        r /= 255;
        g /= 255;
        b /= 255;
        var max = Math.max(r, g, b), min = Math.min(r, g, b), l = (max + min) / 2;
        if (channel === 'l')
            return l * 100;
        if (max === min)
            return 0; // Achromatic
        var d = max - min, s = (l > .5) ? d / (2 - max - min) : d / (max + min);
        if (channel === 's')
            return s * 100;
        switch (max) {
            case r: return ((g - b) / d + (g < b ? 6 : 0)) * 60;
            case g: return ((b - r) / d + 2) * 60;
            case b: return ((r - g) / d + 4) * 60;
            default: return -1; //TSC: TypeScript is stupid and complains if there isn't this useless default statement
        }
    }
};
/* EXPORT */
exports.default = Channel;

},{}],"node_modules/khroma/dist/utils/lang.js":[function(require,module,exports) {
"use strict";
/* LANG */
Object.defineProperty(exports, "__esModule", { value: true });
var Lang = {
    round: function (number) {
        return Math.round(number * 10000000000) / 10000000000;
    }
};
/* EXPORT */
exports.default = Lang;

},{}],"node_modules/khroma/dist/utils/unit.js":[function(require,module,exports) {
"use strict";
/* UNIT */
Object.defineProperty(exports, "__esModule", { value: true });
var Unit = {
    frac2hex: function (frac) {
        var hex = Math.round(frac * 255).toString(16);
        return hex.length > 1 ? hex : "0" + hex;
    },
    dec2hex: function (dec) {
        var hex = Math.round(dec).toString(16);
        return hex.length > 1 ? hex : "0" + hex;
    }
};
/* EXPORT */
exports.default = Unit;

},{}],"node_modules/khroma/dist/utils/index.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
var lang_1 = require("./lang");
var unit_1 = require("./unit");
/* UTILS */
var Utils = {
    channel: channel_1.default,
    lang: lang_1.default,
    unit: unit_1.default
};
/* EXPORT */
exports.default = Utils;

},{"./channel":"node_modules/khroma/dist/utils/channel.js","./lang":"node_modules/khroma/dist/utils/lang.js","./unit":"node_modules/khroma/dist/utils/unit.js"}],"node_modules/khroma/dist/types.js":[function(require,module,exports) {
"use strict";
/* ENUMS */
Object.defineProperty(exports, "__esModule", { value: true });
var TYPE;
(function (TYPE) {
    TYPE[TYPE["ALL"] = 0] = "ALL";
    TYPE[TYPE["RGB"] = 1] = "RGB";
    TYPE[TYPE["HSL"] = 2] = "HSL";
})(TYPE || (TYPE = {}));
exports.TYPE = TYPE;
;

},{}],"node_modules/khroma/dist/channels/type.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
/* TYPE */
var Type = /** @class */ (function () {
    function Type() {
        this.type = types_1.TYPE.ALL;
    }
    Type.prototype.get = function () {
        return this.type;
    };
    Type.prototype.set = function (type) {
        if (this.type && this.type !== type)
            throw new Error('Cannot change both RGB and HSL channels at the same time');
        this.type = type;
    };
    Type.prototype.reset = function () {
        this.type = types_1.TYPE.ALL;
    };
    Type.prototype.is = function (type) {
        return this.type === type;
    };
    return Type;
}());
/* EXPORT */
exports.default = Type;

},{"../types":"node_modules/khroma/dist/types.js"}],"node_modules/khroma/dist/channels/index.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var types_1 = require("../types");
var type_1 = require("./type");
/* CHANNELS */
var Channels = /** @class */ (function () {
    /* CONSTRUCTOR */
    function Channels(data, color) {
        this.color = color;
        this.changed = false;
        this.data = data; //TSC
        this.type = new type_1.default();
    }
    /* API */
    Channels.prototype.set = function (data, color) {
        this.color = color;
        this.changed = false;
        this.data = data; //TSC
        this.type.type = types_1.TYPE.ALL;
        return this;
    };
    /* HELPERS */
    Channels.prototype._ensureHSL = function () {
        if (this.data.h === undefined)
            this.data.h = utils_1.default.channel.rgb2hsl(this.data, 'h');
        if (this.data.s === undefined)
            this.data.s = utils_1.default.channel.rgb2hsl(this.data, 's');
        if (this.data.l === undefined)
            this.data.l = utils_1.default.channel.rgb2hsl(this.data, 'l');
    };
    Channels.prototype._ensureRGB = function () {
        if (this.data.r === undefined)
            this.data.r = utils_1.default.channel.hsl2rgb(this.data, 'r');
        if (this.data.g === undefined)
            this.data.g = utils_1.default.channel.hsl2rgb(this.data, 'g');
        if (this.data.b === undefined)
            this.data.b = utils_1.default.channel.hsl2rgb(this.data, 'b');
    };
    Object.defineProperty(Channels.prototype, "r", {
        /* GETTERS */
        get: function () {
            if (!this.type.is(types_1.TYPE.HSL) && this.data.r !== undefined)
                return this.data.r;
            this._ensureHSL();
            return utils_1.default.channel.hsl2rgb(this.data, 'r');
        },
        /* SETTERS */
        set: function (r) {
            this.type.set(types_1.TYPE.RGB);
            this.changed = true;
            this.data.r = r;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Channels.prototype, "g", {
        get: function () {
            if (!this.type.is(types_1.TYPE.HSL) && this.data.g !== undefined)
                return this.data.g;
            this._ensureHSL();
            return utils_1.default.channel.hsl2rgb(this.data, 'g');
        },
        set: function (g) {
            this.type.set(types_1.TYPE.RGB);
            this.changed = true;
            this.data.g = g;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Channels.prototype, "b", {
        get: function () {
            if (!this.type.is(types_1.TYPE.HSL) && this.data.b !== undefined)
                return this.data.b;
            this._ensureHSL();
            return utils_1.default.channel.hsl2rgb(this.data, 'b');
        },
        set: function (b) {
            this.type.set(types_1.TYPE.RGB);
            this.changed = true;
            this.data.b = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Channels.prototype, "h", {
        get: function () {
            if (!this.type.is(types_1.TYPE.RGB) && this.data.h !== undefined)
                return this.data.h;
            this._ensureRGB();
            return utils_1.default.channel.rgb2hsl(this.data, 'h');
        },
        set: function (h) {
            this.type.set(types_1.TYPE.HSL);
            this.changed = true;
            this.data.h = h;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Channels.prototype, "s", {
        get: function () {
            if (!this.type.is(types_1.TYPE.RGB) && this.data.s !== undefined)
                return this.data.s;
            this._ensureRGB();
            return utils_1.default.channel.rgb2hsl(this.data, 's');
        },
        set: function (s) {
            this.type.set(types_1.TYPE.HSL);
            this.changed = true;
            this.data.s = s;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Channels.prototype, "l", {
        get: function () {
            if (!this.type.is(types_1.TYPE.RGB) && this.data.l !== undefined)
                return this.data.l;
            this._ensureRGB();
            return utils_1.default.channel.rgb2hsl(this.data, 'l');
        },
        set: function (l) {
            this.type.set(types_1.TYPE.HSL);
            this.changed = true;
            this.data.l = l;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Channels.prototype, "a", {
        get: function () {
            return this.data.a;
        },
        set: function (a) {
            this.changed = true;
            this.data.a = a;
        },
        enumerable: true,
        configurable: true
    });
    return Channels;
}());
/* EXPORT */
exports.default = Channels;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../types":"node_modules/khroma/dist/types.js","./type":"node_modules/khroma/dist/channels/type.js"}],"node_modules/khroma/dist/channels/reusable.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
/* REUSABLE */
var channels = new _1.default({ r: 0, g: 0, b: 0, a: 0 }, 'transparent');
/* EXPORT */
exports.default = channels;

},{".":"node_modules/khroma/dist/channels/index.js"}],"node_modules/khroma/dist/consts.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
/* CONSTS */
var DEC2HEX = {};
exports.DEC2HEX = DEC2HEX;
for (var i = 0; i <= 255; i++)
    DEC2HEX[i] = utils_1.default.unit.dec2hex(i); // Populating dynamically, striking a balance between code size and performance

},{"./utils":"node_modules/khroma/dist/utils/index.js"}],"node_modules/khroma/dist/color/hex.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var reusable_1 = require("../channels/reusable");
var consts_1 = require("../consts");
/* HEX */
var Hex = {
    /* VARIABLES */
    re: /^#((?:[a-f0-9]{2}){2,4}|[a-f0-9]{3})$/i,
    /* API */
    parse: function (color) {
        if (color.charCodeAt(0) !== 35)
            return; // '#'
        var match = color.match(Hex.re);
        if (!match)
            return;
        var hex = match[1], dec = parseInt(hex, 16), length = hex.length, hasAlpha = length % 4 === 0, isFullLength = length > 4, multiplier = isFullLength ? 1 : 17, bits = isFullLength ? 8 : 4, bitsOffset = hasAlpha ? 0 : -1, mask = isFullLength ? 255 : 15;
        return reusable_1.default.set({
            r: ((dec >> (bits * (bitsOffset + 3))) & mask) * multiplier,
            g: ((dec >> (bits * (bitsOffset + 2))) & mask) * multiplier,
            b: ((dec >> (bits * (bitsOffset + 1))) & mask) * multiplier,
            a: hasAlpha ? (dec & mask) * multiplier / 255 : 1
        }, color);
    },
    stringify: function (channels) {
        if (channels.a < 1) { // #RRGGBBAA
            return "#" + consts_1.DEC2HEX[Math.round(channels.r)] + consts_1.DEC2HEX[Math.round(channels.g)] + consts_1.DEC2HEX[Math.round(channels.b)] + utils_1.default.unit.frac2hex(channels.a);
        }
        else { // #RRGGBB
            return "#" + consts_1.DEC2HEX[Math.round(channels.r)] + consts_1.DEC2HEX[Math.round(channels.g)] + consts_1.DEC2HEX[Math.round(channels.b)];
        }
    }
};
/* EXPORT */
exports.default = Hex;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../channels/reusable":"node_modules/khroma/dist/channels/reusable.js","../consts":"node_modules/khroma/dist/consts.js"}],"node_modules/khroma/dist/color/keyword.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var hex_1 = require("./hex");
/* KEYWORD */
var Keyword = {
    /* VARIABLES */
    colors: {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyanaqua: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        transparent: '#00000000',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32'
    },
    /* API */
    parse: function (color) {
        color = color.toLowerCase();
        var hex = Keyword.colors[color];
        if (!hex)
            return;
        return hex_1.default.parse(hex);
    },
    stringify: function (channels) {
        var hex = hex_1.default.stringify(channels);
        for (var name_1 in Keyword.colors) {
            if (Keyword.colors[name_1] === hex)
                return name_1;
        }
    }
};
/* EXPORT */
exports.default = Keyword;

},{"./hex":"node_modules/khroma/dist/color/hex.js"}],"node_modules/khroma/dist/color/rgb.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var reusable_1 = require("../channels/reusable");
/* RGB */
var RGB = {
    /* VARIABLES */
    re: /^rgba?\(\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?))\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?))\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?))(?:\s*?(?:,|\/)\s*?\+?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?)))?\s*?\)$/i,
    /* API */
    parse: function (color) {
        var charCode = color.charCodeAt(0);
        if (charCode !== 114 && charCode !== 82)
            return; // 'r'/'R'
        var match = color.match(RGB.re);
        if (!match)
            return;
        var r = match[1], isRedPercentage = match[2], g = match[3], isGreenPercentage = match[4], b = match[5], isBluePercentage = match[6], a = match[7], isAlphaPercentage = match[8];
        return reusable_1.default.set({
            r: utils_1.default.channel.clamp.r(isRedPercentage ? parseFloat(r) * 2.55 : parseFloat(r)),
            g: utils_1.default.channel.clamp.g(isGreenPercentage ? parseFloat(g) * 2.55 : parseFloat(g)),
            b: utils_1.default.channel.clamp.b(isBluePercentage ? parseFloat(b) * 2.55 : parseFloat(b)),
            a: a ? utils_1.default.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1
        }, color);
    },
    stringify: function (channels) {
        if (channels.a < 1) { // RGBA
            return "rgba(" + utils_1.default.lang.round(channels.r) + ", " + utils_1.default.lang.round(channels.g) + ", " + utils_1.default.lang.round(channels.b) + ", " + utils_1.default.lang.round(channels.a) + ")";
        }
        else { // RGB
            return "rgb(" + utils_1.default.lang.round(channels.r) + ", " + utils_1.default.lang.round(channels.g) + ", " + utils_1.default.lang.round(channels.b) + ")";
        }
    }
};
/* EXPORT */
exports.default = RGB;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../channels/reusable":"node_modules/khroma/dist/channels/reusable.js"}],"node_modules/khroma/dist/color/hsl.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var reusable_1 = require("../channels/reusable");
/* HSL */
var HSL = {
    /* VARIABLES */
    re: /^hsla?\(\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?(?:deg|grad|rad|turn)?)\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?%)\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?%)(?:\s*?(?:,|\/)\s*?\+?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?(%)?))?\s*?\)$/i,
    hueRe: /^(.+?)(deg|grad|rad|turn)$/i,
    /* HELPERS */
    _hue2deg: function (hue) {
        var match = hue.match(HSL.hueRe);
        if (match) {
            var number = match[1], unit = match[2];
            switch (unit) {
                case 'grad': return utils_1.default.channel.clamp.h(parseFloat(number) * .9);
                case 'rad': return utils_1.default.channel.clamp.h(parseFloat(number) * 180 / Math.PI);
                case 'turn': return utils_1.default.channel.clamp.h(parseFloat(number) * 360);
            }
        }
        return utils_1.default.channel.clamp.h(parseFloat(hue));
    },
    /* API */
    parse: function (color) {
        var charCode = color.charCodeAt(0);
        if (charCode !== 104 && charCode !== 72)
            return; // 'h'/'H'
        var match = color.match(HSL.re);
        if (!match)
            return;
        var h = match[1], s = match[2], l = match[3], a = match[4], isAlphaPercentage = match[5];
        return reusable_1.default.set({
            h: HSL._hue2deg(h),
            s: utils_1.default.channel.clamp.s(parseFloat(s)),
            l: utils_1.default.channel.clamp.l(parseFloat(l)),
            a: a ? utils_1.default.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1
        }, color);
    },
    stringify: function (channels) {
        if (channels.a < 1) { // HSLA
            return "hsla(" + utils_1.default.lang.round(channels.h) + ", " + utils_1.default.lang.round(channels.s) + "%, " + utils_1.default.lang.round(channels.l) + "%, " + channels.a + ")";
        }
        else { // HSL
            return "hsl(" + utils_1.default.lang.round(channels.h) + ", " + utils_1.default.lang.round(channels.s) + "%, " + utils_1.default.lang.round(channels.l) + "%)";
        }
    }
};
/* EXPORT */
exports.default = HSL;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../channels/reusable":"node_modules/khroma/dist/channels/reusable.js"}],"node_modules/khroma/dist/color/index.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var hex_1 = require("./hex");
var keyword_1 = require("./keyword");
var rgb_1 = require("./rgb");
var hsl_1 = require("./hsl");
/* COLOR */
var Color = {
    /* VARIABLES */
    format: {
        keyword: keyword_1.default,
        hex: hex_1.default,
        rgb: rgb_1.default,
        rgba: rgb_1.default,
        hsl: hsl_1.default,
        hsla: hsl_1.default
    },
    /* API */
    parse: function (color) {
        if (typeof color !== 'string')
            return color;
        var channels = hex_1.default.parse(color) || rgb_1.default.parse(color) || hsl_1.default.parse(color) || keyword_1.default.parse(color); // Color providers ordered with performance in mind
        if (channels)
            return channels;
        throw new Error("Unsupported color format: \"" + color + "\"");
    },
    stringify: function (channels) {
        // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value
        if (!channels.changed && channels.color)
            return channels.color;
        if (channels.type.is(types_1.TYPE.HSL) || channels.data.r === undefined) {
            return hsl_1.default.stringify(channels);
        }
        else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {
            return rgb_1.default.stringify(channels);
        }
        else {
            return hex_1.default.stringify(channels);
        }
    }
};
/* EXPORT */
exports.default = Color;

},{"../types":"node_modules/khroma/dist/types.js","./hex":"node_modules/khroma/dist/color/hex.js","./keyword":"node_modules/khroma/dist/color/keyword.js","./rgb":"node_modules/khroma/dist/color/rgb.js","./hsl":"node_modules/khroma/dist/color/hsl.js"}],"node_modules/khroma/dist/methods/change.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var color_1 = require("../color");
/* CHANGE */
function change(color, channels) {
    var ch = color_1.default.parse(color);
    for (var c in channels) {
        ch[c] = utils_1.default.channel.clamp[c](channels[c]);
    }
    return color_1.default.stringify(ch);
}
/* EXPORT */
exports.default = change;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../color":"node_modules/khroma/dist/color/index.js"}],"node_modules/khroma/dist/methods/rgba.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var reusable_1 = require("../channels/reusable");
var color_1 = require("../color");
var change_1 = require("./change");
function rgba(r, g, b, a) {
    if (b === void 0) { b = 0; }
    if (a === void 0) { a = 1; }
    if (typeof r !== 'number')
        return change_1.default(r, { a: g });
    var channels = reusable_1.default.set({
        r: utils_1.default.channel.clamp.r(r),
        g: utils_1.default.channel.clamp.g(g),
        b: utils_1.default.channel.clamp.b(b),
        a: utils_1.default.channel.clamp.a(a)
    });
    return color_1.default.stringify(channels);
}
/* EXPORT */
exports.default = rgba;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../channels/reusable":"node_modules/khroma/dist/channels/reusable.js","../color":"node_modules/khroma/dist/color/index.js","./change":"node_modules/khroma/dist/methods/change.js"}],"node_modules/khroma/dist/methods/hsla.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var reusable_1 = require("../channels/reusable");
var color_1 = require("../color");
/* HSLA */
function hsla(h, s, l, a) {
    if (a === void 0) { a = 1; }
    var channels = reusable_1.default.set({
        h: utils_1.default.channel.clamp.h(h),
        s: utils_1.default.channel.clamp.s(s),
        l: utils_1.default.channel.clamp.l(l),
        a: utils_1.default.channel.clamp.a(a)
    });
    return color_1.default.stringify(channels);
}
/* EXPORT */
exports.default = hsla;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../channels/reusable":"node_modules/khroma/dist/channels/reusable.js","../color":"node_modules/khroma/dist/color/index.js"}],"node_modules/khroma/dist/methods/channel.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var color_1 = require("../color");
/* CHANNEL */
function channel(color, channel) {
    return utils_1.default.lang.round(color_1.default.parse(color)[channel]);
}
/* EXPORT */
exports.default = channel;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../color":"node_modules/khroma/dist/color/index.js"}],"node_modules/khroma/dist/methods/red.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* RED */
function red(color) {
    return channel_1.default(color, 'r');
}
/* EXPORT */
exports.default = red;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/green.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* GREEN */
function green(color) {
    return channel_1.default(color, 'g');
}
/* EXPORT */
exports.default = green;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/blue.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* BLUE */
function blue(color) {
    return channel_1.default(color, 'b');
}
/* EXPORT */
exports.default = blue;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/hue.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* HUE */
function hue(color) {
    return channel_1.default(color, 'h');
}
/* EXPORT */
exports.default = hue;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/saturation.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* SATURATION */
function saturation(color) {
    return channel_1.default(color, 's');
}
/* EXPORT */
exports.default = saturation;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/lightness.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* LIGHTNESS */
function lightness(color) {
    return channel_1.default(color, 'l');
}
/* EXPORT */
exports.default = lightness;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/alpha.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
/* ALPHA */
function alpha(color) {
    return channel_1.default(color, 'a');
}
/* EXPORT */
exports.default = alpha;

},{"./channel":"node_modules/khroma/dist/methods/channel.js"}],"node_modules/khroma/dist/methods/luminance.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var color_1 = require("../color");
/* LUMINANCE */
//SOURCE: https://planetcalc.com/7779
function luminance(color) {
    var _a = color_1.default.parse(color), r = _a.r, g = _a.g, b = _a.b, luminance = .2126 * utils_1.default.channel.toLinear(r) + .7152 * utils_1.default.channel.toLinear(g) + .0722 * utils_1.default.channel.toLinear(b);
    return utils_1.default.lang.round(luminance);
}
/* EXPORT */
exports.default = luminance;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../color":"node_modules/khroma/dist/color/index.js"}],"node_modules/khroma/dist/methods/is_light.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var luminance_1 = require("./luminance");
/* IS LIGHT */
function isLight(color) {
    return luminance_1.default(color) >= .5;
}
/* EXPORT */
exports.default = isLight;

},{"./luminance":"node_modules/khroma/dist/methods/luminance.js"}],"node_modules/khroma/dist/methods/is_dark.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var is_light_1 = require("./is_light");
/* IS DARK */
function isDark(color) {
    return !is_light_1.default(color);
}
/* EXPORT */
exports.default = isDark;

},{"./is_light":"node_modules/khroma/dist/methods/is_light.js"}],"node_modules/khroma/dist/methods/is_valid.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../color");
/* IS VALID */
function isValid(color) {
    try {
        color_1.default.parse(color);
        return true;
    }
    catch (_a) {
        return false;
    }
}
/* EXPORT */
exports.default = isValid;

},{"../color":"node_modules/khroma/dist/color/index.js"}],"node_modules/khroma/dist/methods/adjust_channel.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var color_1 = require("../color");
/* ADJUST CHANNEL */
function adjustChannel(color, channel, amount) {
    var channels = color_1.default.parse(color), amountCurrent = channels[channel], amountNext = utils_1.default.channel.clamp[channel](amountCurrent + amount);
    if (amountCurrent !== amountNext)
        channels[channel] = amountNext;
    return color_1.default.stringify(channels);
}
/* EXPORT */
exports.default = adjustChannel;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../color":"node_modules/khroma/dist/color/index.js"}],"node_modules/khroma/dist/methods/saturate.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* SATURATE */
function saturate(color, amount) {
    return adjust_channel_1.default(color, 's', amount);
}
/* EXPORT */
exports.default = saturate;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/desaturate.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* DESATURATE */
function desaturate(color, amount) {
    return adjust_channel_1.default(color, 's', -amount);
}
/* EXPORT */
exports.default = desaturate;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/lighten.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* LIGHTEN */
function lighten(color, amount) {
    return adjust_channel_1.default(color, 'l', amount);
}
/* EXPORT */
exports.default = lighten;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/darken.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* DARKEN */
function darken(color, amount) {
    return adjust_channel_1.default(color, 'l', -amount);
}
/* EXPORT */
exports.default = darken;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/opacify.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* OPACIFY */
function opacify(color, amount) {
    return adjust_channel_1.default(color, 'a', amount);
}
/* EXPORT */
exports.default = opacify;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/transparentize.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* TRANSPARENTIZE */
function transparentize(color, amount) {
    return adjust_channel_1.default(color, 'a', -amount);
}
/* EXPORT */
exports.default = transparentize;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/complement.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var adjust_channel_1 = require("./adjust_channel");
/* COMPLEMENT */
function complement(color) {
    return adjust_channel_1.default(color, 'h', 180);
}
/* EXPORT */
exports.default = complement;

},{"./adjust_channel":"node_modules/khroma/dist/methods/adjust_channel.js"}],"node_modules/khroma/dist/methods/grayscale.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var change_1 = require("./change");
/* GRAYSCALE */
function grayscale(color) {
    return change_1.default(color, { s: 0 });
}
/* EXPORT */
exports.default = grayscale;

},{"./change":"node_modules/khroma/dist/methods/change.js"}],"node_modules/khroma/dist/methods/adjust.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../color");
var change_1 = require("./change");
/* ADJUST */
function adjust(color, channels) {
    var ch = color_1.default.parse(color), changes = {};
    for (var c in channels) {
        if (!channels[c])
            continue;
        changes[c] = ch[c] + channels[c];
    }
    return change_1.default(color, changes);
}
/* EXPORT */
exports.default = adjust;

},{"../color":"node_modules/khroma/dist/color/index.js","./change":"node_modules/khroma/dist/methods/change.js"}],"node_modules/khroma/dist/methods/mix.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../color");
var rgba_1 = require("./rgba");
/* MIX */
//SOURCE: https://github.com/sass/dart-sass/blob/7457d2e9e7e623d9844ffd037a070cf32d39c348/lib/src/functions/color.dart#L718-L756
function mix(color1, color2, weight) {
    if (weight === void 0) { weight = 50; }
    var _a = color_1.default.parse(color1), r1 = _a.r, g1 = _a.g, b1 = _a.b, a1 = _a.a, _b = color_1.default.parse(color2), r2 = _b.r, g2 = _b.g, b2 = _b.b, a2 = _b.a, weightScale = weight / 100, weightNormalized = (weightScale * 2) - 1, alphaDelta = a1 - a2, weight1combined = ((weightNormalized * alphaDelta) === -1) ? weightNormalized : (weightNormalized + alphaDelta) / (1 + weightNormalized * alphaDelta), weight1 = (weight1combined + 1) / 2, weight2 = 1 - weight1, r = (r1 * weight1) + (r2 * weight2), g = (g1 * weight1) + (g2 * weight2), b = (b1 * weight1) + (b2 * weight2), a = (a1 * weightScale) + (a2 * (1 - weightScale));
    return rgba_1.default(r, g, b, a);
}
/* EXPORT */
exports.default = mix;

},{"../color":"node_modules/khroma/dist/color/index.js","./rgba":"node_modules/khroma/dist/methods/rgba.js"}],"node_modules/khroma/dist/methods/invert.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../color");
var mix_1 = require("./mix");
/* INVERT */
function invert(color, weight) {
    if (weight === void 0) { weight = 100; }
    var inverse = color_1.default.parse(color);
    inverse.r = 255 - inverse.r;
    inverse.g = 255 - inverse.g;
    inverse.b = 255 - inverse.b;
    return mix_1.default(inverse, color, weight);
}
/* EXPORT */
exports.default = invert;

},{"../color":"node_modules/khroma/dist/color/index.js","./mix":"node_modules/khroma/dist/methods/mix.js"}],"node_modules/khroma/dist/methods/scale.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var color_1 = require("../color");
var adjust_1 = require("./adjust");
/* SCALE */
function scale(color, channels) {
    var ch = color_1.default.parse(color), adjustments = {}, delta = function (amount, weight, max) { return weight > 0 ? (max - amount) * weight / 100 : amount * weight / 100; };
    for (var c in channels) {
        adjustments[c] = delta(ch[c], channels[c], utils_1.default.channel.max[c]);
    }
    return adjust_1.default(color, adjustments);
}
/* EXPORT */
exports.default = scale;

},{"../utils":"node_modules/khroma/dist/utils/index.js","../color":"node_modules/khroma/dist/color/index.js","./adjust":"node_modules/khroma/dist/methods/adjust.js"}],"node_modules/khroma/dist/methods/index.js":[function(require,module,exports) {
"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var rgba_1 = require("./rgba"); // Alias
exports.hex = rgba_1.default;
var rgba_2 = require("./rgba"); // Alias
exports.rgb = rgba_2.default;
var rgba_3 = require("./rgba");
exports.rgba = rgba_3.default;
var hsla_1 = require("./hsla"); // Alias
exports.hsl = hsla_1.default;
var hsla_2 = require("./hsla");
exports.hsla = hsla_2.default;
var channel_1 = require("./channel");
exports.channel = channel_1.default;
var red_1 = require("./red");
exports.red = red_1.default;
var green_1 = require("./green");
exports.green = green_1.default;
var blue_1 = require("./blue");
exports.blue = blue_1.default;
var hue_1 = require("./hue");
exports.hue = hue_1.default;
var saturation_1 = require("./saturation");
exports.saturation = saturation_1.default;
var lightness_1 = require("./lightness");
exports.lightness = lightness_1.default;
var alpha_1 = require("./alpha");
exports.alpha = alpha_1.default;
var alpha_2 = require("./alpha"); // Alias
exports.opacity = alpha_2.default;
var luminance_1 = require("./luminance");
exports.luminance = luminance_1.default;
var is_dark_1 = require("./is_dark");
exports.isDark = is_dark_1.default;
var is_light_1 = require("./is_light");
exports.isLight = is_light_1.default;
var is_valid_1 = require("./is_valid");
exports.isValid = is_valid_1.default;
var saturate_1 = require("./saturate");
exports.saturate = saturate_1.default;
var desaturate_1 = require("./desaturate");
exports.desaturate = desaturate_1.default;
var lighten_1 = require("./lighten");
exports.lighten = lighten_1.default;
var darken_1 = require("./darken");
exports.darken = darken_1.default;
var opacify_1 = require("./opacify");
exports.opacify = opacify_1.default;
var opacify_2 = require("./opacify"); // Alias
exports.fadeIn = opacify_2.default;
var transparentize_1 = require("./transparentize");
exports.transparentize = transparentize_1.default;
var transparentize_2 = require("./transparentize"); // Alias
exports.fadeOut = transparentize_2.default;
var complement_1 = require("./complement");
exports.complement = complement_1.default;
var grayscale_1 = require("./grayscale");
exports.grayscale = grayscale_1.default;
var adjust_1 = require("./adjust");
exports.adjust = adjust_1.default;
var change_1 = require("./change");
exports.change = change_1.default;
var invert_1 = require("./invert");
exports.invert = invert_1.default;
var mix_1 = require("./mix");
exports.mix = mix_1.default;
var scale_1 = require("./scale");
exports.scale = scale_1.default;

},{"./rgba":"node_modules/khroma/dist/methods/rgba.js","./hsla":"node_modules/khroma/dist/methods/hsla.js","./channel":"node_modules/khroma/dist/methods/channel.js","./red":"node_modules/khroma/dist/methods/red.js","./green":"node_modules/khroma/dist/methods/green.js","./blue":"node_modules/khroma/dist/methods/blue.js","./hue":"node_modules/khroma/dist/methods/hue.js","./saturation":"node_modules/khroma/dist/methods/saturation.js","./lightness":"node_modules/khroma/dist/methods/lightness.js","./alpha":"node_modules/khroma/dist/methods/alpha.js","./luminance":"node_modules/khroma/dist/methods/luminance.js","./is_dark":"node_modules/khroma/dist/methods/is_dark.js","./is_light":"node_modules/khroma/dist/methods/is_light.js","./is_valid":"node_modules/khroma/dist/methods/is_valid.js","./saturate":"node_modules/khroma/dist/methods/saturate.js","./desaturate":"node_modules/khroma/dist/methods/desaturate.js","./lighten":"node_modules/khroma/dist/methods/lighten.js","./darken":"node_modules/khroma/dist/methods/darken.js","./opacify":"node_modules/khroma/dist/methods/opacify.js","./transparentize":"node_modules/khroma/dist/methods/transparentize.js","./complement":"node_modules/khroma/dist/methods/complement.js","./grayscale":"node_modules/khroma/dist/methods/grayscale.js","./adjust":"node_modules/khroma/dist/methods/adjust.js","./change":"node_modules/khroma/dist/methods/change.js","./invert":"node_modules/khroma/dist/methods/invert.js","./mix":"node_modules/khroma/dist/methods/mix.js","./scale":"node_modules/khroma/dist/methods/scale.js"}],"node_modules/khroma/dist/index.js":[function(require,module,exports) {
"use strict";
/* EXPORT */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./methods"));

},{"./methods":"node_modules/khroma/dist/methods/index.js"}],"node_modules/moment-mini/moment.min.js":[function(require,module,exports) {
var define;
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";var e,i;function c(){return e.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function u(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function l(e){return void 0===e}function h(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function d(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,s=[];for(n=0;n<e.length;++n)s.push(t(e[n],n));return s}function m(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function _(e,t){for(var n in t)m(t,n)&&(e[n]=t[n]);return m(t,"toString")&&(e.toString=t.toString),m(t,"valueOf")&&(e.valueOf=t.valueOf),e}function y(e,t,n,s){return Tt(e,t,n,s,!0).utc()}function g(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function v(e){if(null==e._isValid){var t=g(e),n=i.call(t.parsedDateParts,function(e){return null!=e}),s=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(s=s&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return s;e._isValid=s}return e._isValid}function p(e){var t=y(NaN);return null!=e?_(g(t),e):g(t).userInvalidated=!0,t}i=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,s=0;s<n;s++)if(s in t&&e.call(this,t[s],s,t))return!0;return!1};var r=c.momentProperties=[];function w(e,t){var n,s,i;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=g(t)),l(t._locale)||(e._locale=t._locale),0<r.length)for(n=0;n<r.length;n++)l(i=t[s=r[n]])||(e[s]=i);return e}var t=!1;function M(e){w(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===t&&(t=!0,c.updateOffset(this),t=!1)}function k(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function S(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function D(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=S(t)),n}function a(e,t,n){var s,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),a=0;for(s=0;s<i;s++)(n&&e[s]!==t[s]||!n&&D(e[s])!==D(t[s]))&&a++;return a+r}function Y(e){!1===c.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function n(i,r){var a=!0;return _(function(){if(null!=c.deprecationHandler&&c.deprecationHandler(null,i),a){for(var e,t=[],n=0;n<arguments.length;n++){if(e="","object"==typeof arguments[n]){for(var s in e+="\n["+n+"] ",arguments[0])e+=s+": "+arguments[0][s]+", ";e=e.slice(0,-2)}else e=arguments[n];t.push(e)}Y(i+"\nArguments: "+Array.prototype.slice.call(t).join("")+"\n"+(new Error).stack),a=!1}return r.apply(this,arguments)},r)}var s,O={};function T(e,t){null!=c.deprecationHandler&&c.deprecationHandler(e,t),O[e]||(Y(t),O[e]=!0)}function b(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,s=_({},e);for(n in t)m(t,n)&&(u(e[n])&&u(t[n])?(s[n]={},_(s[n],e[n]),_(s[n],t[n])):null!=t[n]?s[n]=t[n]:delete s[n]);for(n in e)m(e,n)&&!m(t,n)&&u(e[n])&&(s[n]=_({},s[n]));return s}function P(e){null!=e&&this.set(e)}c.suppressDeprecationWarnings=!1,c.deprecationHandler=null,s=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)m(e,t)&&n.push(t);return n};var W={};function C(e,t){var n=e.toLowerCase();W[n]=W[n+"s"]=W[t]=e}function H(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function R(e){var t,n,s={};for(n in e)m(e,n)&&(t=H(n))&&(s[t]=e[n]);return s}var U={};function F(e,t){U[e]=t}function L(e,t,n){var s=""+Math.abs(e),i=t-s.length;return(0<=e?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+s}var N=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,G=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,V={},E={};function I(e,t,n,s){var i=s;"string"==typeof s&&(i=function(){return this[s]()}),e&&(E[e]=i),t&&(E[t[0]]=function(){return L(i.apply(this,arguments),t[1],t[2])}),n&&(E[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function A(e,t){return e.isValid()?(t=j(t,e.localeData()),V[t]=V[t]||function(s){var e,i,t,r=s.match(N);for(e=0,i=r.length;e<i;e++)E[r[e]]?r[e]=E[r[e]]:r[e]=(t=r[e]).match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"");return function(e){var t,n="";for(t=0;t<i;t++)n+=b(r[t])?r[t].call(e,s):r[t];return n}}(t),V[t](e)):e.localeData().invalidDate()}function j(e,t){var n=5;function s(e){return t.longDateFormat(e)||e}for(G.lastIndex=0;0<=n&&G.test(e);)e=e.replace(G,s),G.lastIndex=0,n-=1;return e}var Z=/\d/,z=/\d\d/,$=/\d{3}/,q=/\d{4}/,J=/[+-]?\d{6}/,B=/\d\d?/,Q=/\d\d\d\d?/,X=/\d\d\d\d\d\d?/,K=/\d{1,3}/,ee=/\d{1,4}/,te=/[+-]?\d{1,6}/,ne=/\d+/,se=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,re=/Z|[+-]\d\d(?::?\d\d)?/gi,ae=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,oe={};function ue(e,n,s){oe[e]=b(n)?n:function(e,t){return e&&s?s:n}}function le(e,t){return m(oe,e)?oe[e](t._strict,t._locale):new RegExp(he(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,s,i){return t||n||s||i})))}function he(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var de={};function ce(e,n){var t,s=n;for("string"==typeof e&&(e=[e]),h(n)&&(s=function(e,t){t[n]=D(e)}),t=0;t<e.length;t++)de[e[t]]=s}function fe(e,i){ce(e,function(e,t,n,s){n._w=n._w||{},i(e,n._w,n,s)})}var me=0,_e=1,ye=2,ge=3,ve=4,pe=5,we=6,Me=7,ke=8;function Se(e){return De(e)?366:365}function De(e){return e%4==0&&e%100!=0||e%400==0}I("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),I(0,["YY",2],0,function(){return this.year()%100}),I(0,["YYYY",4],0,"year"),I(0,["YYYYY",5],0,"year"),I(0,["YYYYYY",6,!0],0,"year"),C("year","y"),F("year",1),ue("Y",se),ue("YY",B,z),ue("YYYY",ee,q),ue("YYYYY",te,J),ue("YYYYYY",te,J),ce(["YYYYY","YYYYYY"],me),ce("YYYY",function(e,t){t[me]=2===e.length?c.parseTwoDigitYear(e):D(e)}),ce("YY",function(e,t){t[me]=c.parseTwoDigitYear(e)}),ce("Y",function(e,t){t[me]=parseInt(e,10)}),c.parseTwoDigitYear=function(e){return D(e)+(68<D(e)?1900:2e3)};var Ye,Oe=Te("FullYear",!0);function Te(t,n){return function(e){return null!=e?(xe(this,t,e),c.updateOffset(this,n),this):be(this,t)}}function be(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function xe(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&De(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Pe(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Pe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,s=(t%(n=12)+n)%n;return e+=(t-s)/12,1===s?De(e)?29:28:31-s%7%2}Ye=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},I("M",["MM",2],"Mo",function(){return this.month()+1}),I("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),I("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),F("month",8),ue("M",B),ue("MM",B,z),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),ce(["M","MM"],function(e,t){t[_e]=D(e)-1}),ce(["MMM","MMMM"],function(e,t,n,s){var i=n._locale.monthsParse(e,s,n._strict);null!=i?t[_e]=i:g(n).invalidMonth=e});var We=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ce="January_February_March_April_May_June_July_August_September_October_November_December".split("_");var He="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Re(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=D(t);else if(!h(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Pe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ue(e){return null!=e?(Re(this,e),c.updateOffset(this,!0),this):be(this,"Month")}var Fe=ae;var Le=ae;function Ne(){function e(e,t){return t.length-e.length}var t,n,s=[],i=[],r=[];for(t=0;t<12;t++)n=y([2e3,t]),s.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(s.sort(e),i.sort(e),r.sort(e),t=0;t<12;t++)s[t]=he(s[t]),i[t]=he(i[t]);for(t=0;t<24;t++)r[t]=he(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Ge(e){var t;if(e<100&&0<=e){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Ve(e,t,n){var s=7+t-n;return-((7+Ge(e,0,s).getUTCDay()-t)%7)+s-1}function Ee(e,t,n,s,i){var r,a,o=1+7*(t-1)+(7+n-s)%7+Ve(e,s,i);return a=o<=0?Se(r=e-1)+o:o>Se(e)?(r=e+1,o-Se(e)):(r=e,o),{year:r,dayOfYear:a}}function Ie(e,t,n){var s,i,r=Ve(e.year(),t,n),a=Math.floor((e.dayOfYear()-r-1)/7)+1;return a<1?s=a+Ae(i=e.year()-1,t,n):a>Ae(e.year(),t,n)?(s=a-Ae(e.year(),t,n),i=e.year()+1):(i=e.year(),s=a),{week:s,year:i}}function Ae(e,t,n){var s=Ve(e,t,n),i=Ve(e+1,t,n);return(Se(e)-s+i)/7}I("w",["ww",2],"wo","week"),I("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),F("week",5),F("isoWeek",5),ue("w",B),ue("ww",B,z),ue("W",B),ue("WW",B,z),fe(["w","ww","W","WW"],function(e,t,n,s){t[s.substr(0,1)]=D(e)});function je(e,t){return e.slice(t,7).concat(e.slice(0,t))}I("d",0,"do","day"),I("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),I("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),I("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),I("e",0,0,"weekday"),I("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),F("day",11),F("weekday",11),F("isoWeekday",11),ue("d",B),ue("e",B),ue("E",B),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),fe(["dd","ddd","dddd"],function(e,t,n,s){var i=n._locale.weekdaysParse(e,s,n._strict);null!=i?t.d=i:g(n).invalidWeekday=e}),fe(["d","e","E"],function(e,t,n,s){t[s]=D(e)});var Ze="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");var ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");var $e="Su_Mo_Tu_We_Th_Fr_Sa".split("_");var qe=ae;var Je=ae;var Be=ae;function Qe(){function e(e,t){return t.length-e.length}var t,n,s,i,r,a=[],o=[],u=[],l=[];for(t=0;t<7;t++)n=y([2e3,1]).day(t),s=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),r=this.weekdays(n,""),a.push(s),o.push(i),u.push(r),l.push(s),l.push(i),l.push(r);for(a.sort(e),o.sort(e),u.sort(e),l.sort(e),t=0;t<7;t++)o[t]=he(o[t]),u[t]=he(u[t]),l[t]=he(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Xe(){return this.hours()%12||12}function Ke(e,t){I(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function et(e,t){return t._meridiemParse}I("H",["HH",2],0,"hour"),I("h",["hh",2],0,Xe),I("k",["kk",2],0,function(){return this.hours()||24}),I("hmm",0,0,function(){return""+Xe.apply(this)+L(this.minutes(),2)}),I("hmmss",0,0,function(){return""+Xe.apply(this)+L(this.minutes(),2)+L(this.seconds(),2)}),I("Hmm",0,0,function(){return""+this.hours()+L(this.minutes(),2)}),I("Hmmss",0,0,function(){return""+this.hours()+L(this.minutes(),2)+L(this.seconds(),2)}),Ke("a",!0),Ke("A",!1),C("hour","h"),F("hour",13),ue("a",et),ue("A",et),ue("H",B),ue("h",B),ue("k",B),ue("HH",B,z),ue("hh",B,z),ue("kk",B,z),ue("hmm",Q),ue("hmmss",X),ue("Hmm",Q),ue("Hmmss",X),ce(["H","HH"],ge),ce(["k","kk"],function(e,t,n){var s=D(e);t[ge]=24===s?0:s}),ce(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ce(["h","hh"],function(e,t,n){t[ge]=D(e),g(n).bigHour=!0}),ce("hmm",function(e,t,n){var s=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s)),g(n).bigHour=!0}),ce("hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s,2)),t[pe]=D(e.substr(i)),g(n).bigHour=!0}),ce("Hmm",function(e,t,n){var s=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s))}),ce("Hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[ge]=D(e.substr(0,s)),t[ve]=D(e.substr(s,2)),t[pe]=D(e.substr(i))});var tt,nt=Te("Hours",!0),st={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ce,monthsShort:He,week:{dow:0,doy:6},weekdays:Ze,weekdaysMin:$e,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},it={},rt={};function at(e){return e?e.toLowerCase().replace("_","-"):e}function ot(e){var t=null;if(!it[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=tt._abbr,require("./locale/"+e),ut(t)}catch(e){}return it[e]}function ut(e,t){var n;return e&&((n=l(t)?ht(e):lt(e,t))?tt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),tt._abbr}function lt(e,t){if(null===t)return delete it[e],null;var n,s=st;if(t.abbr=e,null!=it[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),s=it[e]._config;else if(null!=t.parentLocale)if(null!=it[t.parentLocale])s=it[t.parentLocale]._config;else{if(null==(n=ot(t.parentLocale)))return rt[t.parentLocale]||(rt[t.parentLocale]=[]),rt[t.parentLocale].push({name:e,config:t}),null;s=n._config}return it[e]=new P(x(s,t)),rt[e]&&rt[e].forEach(function(e){lt(e.name,e.config)}),ut(e),it[e]}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return tt;if(!o(e)){if(t=ot(e))return t;e=[e]}return function(e){for(var t,n,s,i,r=0;r<e.length;){for(t=(i=at(e[r]).split("-")).length,n=(n=at(e[r+1]))?n.split("-"):null;0<t;){if(s=ot(i.slice(0,t).join("-")))return s;if(n&&n.length>=t&&a(i,n,!0)>=t-1)break;t--}r++}return tt}(e)}function dt(e){var t,n=e._a;return n&&-2===g(e).overflow&&(t=n[_e]<0||11<n[_e]?_e:n[ye]<1||n[ye]>Pe(n[me],n[_e])?ye:n[ge]<0||24<n[ge]||24===n[ge]&&(0!==n[ve]||0!==n[pe]||0!==n[we])?ge:n[ve]<0||59<n[ve]?ve:n[pe]<0||59<n[pe]?pe:n[we]<0||999<n[we]?we:-1,g(e)._overflowDayOfYear&&(t<me||ye<t)&&(t=ye),g(e)._overflowWeeks&&-1===t&&(t=Me),g(e)._overflowWeekday&&-1===t&&(t=ke),g(e).overflow=t),e}function ct(e,t,n){return null!=e?e:null!=t?t:n}function ft(e){var t,n,s,i,r,a=[];if(!e._d){var o,u;for(o=e,u=new Date(c.now()),s=o._useUTC?[u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()]:[u.getFullYear(),u.getMonth(),u.getDate()],e._w&&null==e._a[ye]&&null==e._a[_e]&&function(e){var t,n,s,i,r,a,o,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)r=1,a=4,n=ct(t.GG,e._a[me],Ie(bt(),1,4).year),s=ct(t.W,1),((i=ct(t.E,1))<1||7<i)&&(u=!0);else{r=e._locale._week.dow,a=e._locale._week.doy;var l=Ie(bt(),r,a);n=ct(t.gg,e._a[me],l.year),s=ct(t.w,l.week),null!=t.d?((i=t.d)<0||6<i)&&(u=!0):null!=t.e?(i=t.e+r,(t.e<0||6<t.e)&&(u=!0)):i=r}s<1||s>Ae(n,r,a)?g(e)._overflowWeeks=!0:null!=u?g(e)._overflowWeekday=!0:(o=Ee(n,s,i,r,a),e._a[me]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(r=ct(e._a[me],s[me]),(e._dayOfYear>Se(r)||0===e._dayOfYear)&&(g(e)._overflowDayOfYear=!0),n=Ge(r,0,e._dayOfYear),e._a[_e]=n.getUTCMonth(),e._a[ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=a[t]=s[t];for(;t<7;t++)e._a[t]=a[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ge]&&0===e._a[ve]&&0===e._a[pe]&&0===e._a[we]&&(e._nextDay=!0,e._a[ge]=0),e._d=(e._useUTC?Ge:function(e,t,n,s,i,r,a){var o;return e<100&&0<=e?(o=new Date(e+400,t,n,s,i,r,a),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,s,i,r,a),o}).apply(null,a),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ge]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(g(e).weekdayMismatch=!0)}}var mt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,_t=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,gt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],vt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((\-?\d+)/i;function wt(e){var t,n,s,i,r,a,o=e._i,u=mt.exec(o)||_t.exec(o);if(u){for(g(e).iso=!0,t=0,n=gt.length;t<n;t++)if(gt[t][1].exec(u[1])){i=gt[t][0],s=!1!==gt[t][2];break}if(null==i)return void(e._isValid=!1);if(u[3]){for(t=0,n=vt.length;t<n;t++)if(vt[t][1].exec(u[3])){r=(u[2]||" ")+vt[t][0];break}if(null==r)return void(e._isValid=!1)}if(!s&&null!=r)return void(e._isValid=!1);if(u[4]){if(!yt.exec(u[4]))return void(e._isValid=!1);a="Z"}e._f=i+(r||"")+(a||""),Yt(e)}else e._isValid=!1}var Mt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,n,s,i,r){var a=[function(e){var t=parseInt(e,10);{if(t<=49)return 2e3+t;if(t<=999)return 1900+t}return t}(e),He.indexOf(t),parseInt(n,10),parseInt(s,10),parseInt(i,10)];return r&&a.push(parseInt(r,10)),a}var St={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Dt(e){var t,n,s,i=Mt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(i){var r=kt(i[4],i[3],i[2],i[5],i[6],i[7]);if(t=i[1],n=r,s=e,t&&ze.indexOf(t)!==new Date(n[0],n[1],n[2]).getDay()&&(g(s).weekdayMismatch=!0,!(s._isValid=!1)))return;e._a=r,e._tzm=function(e,t,n){if(e)return St[e];if(t)return 0;var s=parseInt(n,10),i=s%100;return(s-i)/100*60+i}(i[8],i[9],i[10]),e._d=Ge.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),g(e).rfc2822=!0}else e._isValid=!1}function Yt(e){if(e._f!==c.ISO_8601)if(e._f!==c.RFC_2822){e._a=[],g(e).empty=!0;var t,n,s,i,r,a,o,u,l=""+e._i,h=l.length,d=0;for(s=j(e._f,e._locale).match(N)||[],t=0;t<s.length;t++)i=s[t],(n=(l.match(le(i,e))||[])[0])&&(0<(r=l.substr(0,l.indexOf(n))).length&&g(e).unusedInput.push(r),l=l.slice(l.indexOf(n)+n.length),d+=n.length),E[i]?(n?g(e).empty=!1:g(e).unusedTokens.push(i),a=i,u=e,null!=(o=n)&&m(de,a)&&de[a](o,u._a,u,a)):e._strict&&!n&&g(e).unusedTokens.push(i);g(e).charsLeftOver=h-d,0<l.length&&g(e).unusedInput.push(l),e._a[ge]<=12&&!0===g(e).bigHour&&0<e._a[ge]&&(g(e).bigHour=void 0),g(e).parsedDateParts=e._a.slice(0),g(e).meridiem=e._meridiem,e._a[ge]=function(e,t,n){var s;if(null==n)return t;return null!=e.meridiemHour?e.meridiemHour(t,n):(null!=e.isPM&&((s=e.isPM(n))&&t<12&&(t+=12),s||12!==t||(t=0)),t)}(e._locale,e._a[ge],e._meridiem),ft(e),dt(e)}else Dt(e);else wt(e)}function Ot(e){var t,n,s,i,r=e._i,a=e._f;return e._locale=e._locale||ht(e._l),null===r||void 0===a&&""===r?p({nullInput:!0}):("string"==typeof r&&(e._i=r=e._locale.preparse(r)),k(r)?new M(dt(r)):(d(r)?e._d=r:o(a)?function(e){var t,n,s,i,r;if(0===e._f.length)return g(e).invalidFormat=!0,e._d=new Date(NaN);for(i=0;i<e._f.length;i++)r=0,t=w({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],Yt(t),v(t)&&(r+=g(t).charsLeftOver,r+=10*g(t).unusedTokens.length,g(t).score=r,(null==s||r<s)&&(s=r,n=t));_(e,n||t)}(e):a?Yt(e):l(n=(t=e)._i)?t._d=new Date(c.now()):d(n)?t._d=new Date(n.valueOf()):"string"==typeof n?(s=t,null===(i=pt.exec(s._i))?(wt(s),!1===s._isValid&&(delete s._isValid,Dt(s),!1===s._isValid&&(delete s._isValid,c.createFromInputFallback(s)))):s._d=new Date(+i[1])):o(n)?(t._a=f(n.slice(0),function(e){return parseInt(e,10)}),ft(t)):u(n)?function(e){if(!e._d){var t=R(e._i);e._a=f([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),ft(e)}}(t):h(n)?t._d=new Date(n):c.createFromInputFallback(t),v(e)||(e._d=null),e))}function Tt(e,t,n,s,i){var r,a={};return!0!==n&&!1!==n||(s=n,n=void 0),(u(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||o(e)&&0===e.length)&&(e=void 0),a._isAMomentObject=!0,a._useUTC=a._isUTC=i,a._l=n,a._i=e,a._f=t,a._strict=s,(r=new M(dt(Ot(a))))._nextDay&&(r.add(1,"d"),r._nextDay=void 0),r}function bt(e,t,n,s){return Tt(e,t,n,s,!1)}c.createFromInputFallback=n("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),c.ISO_8601=function(){},c.RFC_2822=function(){};var xt=n("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=bt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Pt=n("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=bt.apply(null,arguments);return this.isValid()&&e.isValid()?this<e?this:e:p()});function Wt(e,t){var n,s;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return bt();for(n=t[0],s=1;s<t.length;++s)t[s].isValid()&&!t[s][e](n)||(n=t[s]);return n}var Ct=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ht(e){var t=R(e),n=t.year||0,s=t.quarter||0,i=t.month||0,r=t.week||t.isoWeek||0,a=t.day||0,o=t.hour||0,u=t.minute||0,l=t.second||0,h=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Ye.call(Ct,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,s=0;s<Ct.length;++s)if(e[Ct[s]]){if(n)return!1;parseFloat(e[Ct[s]])!==D(e[Ct[s]])&&(n=!0)}return!0}(t),this._milliseconds=+h+1e3*l+6e4*u+1e3*o*60*60,this._days=+a+7*r,this._months=+i+3*s+12*n,this._data={},this._locale=ht(),this._bubble()}function Rt(e){return e instanceof Ht}function Ut(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ft(e,n){I(e,0,0,function(){var e=this.utcOffset(),t="+";return e<0&&(e=-e,t="-"),t+L(~~(e/60),2)+n+L(~~e%60,2)})}Ft("Z",":"),Ft("ZZ",""),ue("Z",re),ue("ZZ",re),ce(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Nt(re,e)});var Lt=/([\+\-]|\d\d)/gi;function Nt(e,t){var n=(t||"").match(e);if(null===n)return null;var s=((n[n.length-1]||[])+"").match(Lt)||["-",0,0],i=60*s[1]+D(s[2]);return 0===i?0:"+"===s[0]?i:-i}function Gt(e,t){var n,s;return t._isUTC?(n=t.clone(),s=(k(e)||d(e)?e.valueOf():bt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+s),c.updateOffset(n,!1),n):bt(e).local()}function Vt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Et(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}c.updateOffset=function(){};var It=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,At=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function jt(e,t){var n,s,i,r=e,a=null;return Rt(e)?r={ms:e._milliseconds,d:e._days,M:e._months}:h(e)?(r={},t?r[t]=e:r.milliseconds=e):(a=It.exec(e))?(n="-"===a[1]?-1:1,r={y:0,d:D(a[ye])*n,h:D(a[ge])*n,m:D(a[ve])*n,s:D(a[pe])*n,ms:D(Ut(1e3*a[we]))*n}):(a=At.exec(e))?(n="-"===a[1]?-1:1,r={y:Zt(a[2],n),M:Zt(a[3],n),w:Zt(a[4],n),d:Zt(a[5],n),h:Zt(a[6],n),m:Zt(a[7],n),s:Zt(a[8],n)}):null==r?r={}:"object"==typeof r&&("from"in r||"to"in r)&&(i=function(e,t){var n;if(!e.isValid()||!t.isValid())return{milliseconds:0,months:0};t=Gt(t,e),e.isBefore(t)?n=zt(e,t):((n=zt(t,e)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(bt(r.from),bt(r.to)),(r={}).ms=i.milliseconds,r.M=i.months),s=new Ht(r),Rt(e)&&m(e,"_locale")&&(s._locale=e._locale),s}function Zt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function zt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(s,i){return function(e,t){var n;return null===t||isNaN(+t)||(T(i,"moment()."+i+"(period, number) is deprecated. Please use moment()."+i+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),n=e,e=t,t=n),qt(this,jt(e="string"==typeof e?+e:e,t),s),this}}function qt(e,t,n,s){var i=t._milliseconds,r=Ut(t._days),a=Ut(t._months);e.isValid()&&(s=null==s||s,a&&Re(e,be(e,"Month")+a*n),r&&xe(e,"Date",be(e,"Date")+r*n),i&&e._d.setTime(e._d.valueOf()+i*n),s&&c.updateOffset(e,r||a))}jt.fn=Ht.prototype,jt.invalid=function(){return jt(NaN)};var Jt=$t(1,"add"),Bt=$t(-1,"subtract");function Qt(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),s=e.clone().add(n,"months");return-(n+(t-s<0?(t-s)/(s-e.clone().add(n-1,"months")):(t-s)/(e.clone().add(n+1,"months")-s)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}c.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",c.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Kt=n("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function en(){return this._locale}var tn=126227808e5;function nn(e,t){return(e%t+t)%t}function sn(e,t,n){return e<100&&0<=e?new Date(e+400,t,n)-tn:new Date(e,t,n).valueOf()}function rn(e,t,n){return e<100&&0<=e?Date.UTC(e+400,t,n)-tn:Date.UTC(e,t,n)}function an(e,t){I(0,[e,e.length],0,t)}function on(e,t,n,s,i){var r;return null==e?Ie(this,s,i).year:((r=Ae(e,s,i))<t&&(t=r),function(e,t,n,s,i){var r=Ee(e,t,n,s,i),a=Ge(r.year,0,r.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}.call(this,e,t,n,s,i))}I(0,["gg",2],0,function(){return this.weekYear()%100}),I(0,["GG",2],0,function(){return this.isoWeekYear()%100}),an("gggg","weekYear"),an("ggggg","weekYear"),an("GGGG","isoWeekYear"),an("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),F("weekYear",1),F("isoWeekYear",1),ue("G",se),ue("g",se),ue("GG",B,z),ue("gg",B,z),ue("GGGG",ee,q),ue("gggg",ee,q),ue("GGGGG",te,J),ue("ggggg",te,J),fe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,s){t[s.substr(0,2)]=D(e)}),fe(["gg","GG"],function(e,t,n,s){t[s]=c.parseTwoDigitYear(e)}),I("Q",0,"Qo","quarter"),C("quarter","Q"),F("quarter",7),ue("Q",Z),ce("Q",function(e,t){t[_e]=3*(D(e)-1)}),I("D",["DD",2],"Do","date"),C("date","D"),F("date",9),ue("D",B),ue("DD",B,z),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),ce(["D","DD"],ye),ce("Do",function(e,t){t[ye]=D(e.match(B)[0])});var un=Te("Date",!0);I("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),F("dayOfYear",4),ue("DDD",K),ue("DDDD",$),ce(["DDD","DDDD"],function(e,t,n){n._dayOfYear=D(e)}),I("m",["mm",2],0,"minute"),C("minute","m"),F("minute",14),ue("m",B),ue("mm",B,z),ce(["m","mm"],ve);var ln=Te("Minutes",!1);I("s",["ss",2],0,"second"),C("second","s"),F("second",15),ue("s",B),ue("ss",B,z),ce(["s","ss"],pe);var hn,dn=Te("Seconds",!1);for(I("S",0,0,function(){return~~(this.millisecond()/100)}),I(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),I(0,["SSS",3],0,"millisecond"),I(0,["SSSS",4],0,function(){return 10*this.millisecond()}),I(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),I(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),I(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),I(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),I(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),F("millisecond",16),ue("S",K,Z),ue("SS",K,z),ue("SSS",K,$),hn="SSSS";hn.length<=9;hn+="S")ue(hn,ne);function cn(e,t){t[we]=D(1e3*("0."+e))}for(hn="S";hn.length<=9;hn+="S")ce(hn,cn);var fn=Te("Milliseconds",!1);I("z",0,0,"zoneAbbr"),I("zz",0,0,"zoneName");var mn=M.prototype;function _n(e){return e}mn.add=Jt,mn.calendar=function(e,t){var n=e||bt(),s=Gt(n,this).startOf("day"),i=c.calendarFormat(this,s)||"sameElse",r=t&&(b(t[i])?t[i].call(this,n):t[i]);return this.format(r||this.localeData().calendar(i,this,bt(n)))},mn.clone=function(){return new M(this)},mn.diff=function(e,t,n){var s,i,r;if(!this.isValid())return NaN;if(!(s=Gt(e,this)).isValid())return NaN;switch(i=6e4*(s.utcOffset()-this.utcOffset()),t=H(t)){case"year":r=Qt(this,s)/12;break;case"month":r=Qt(this,s);break;case"quarter":r=Qt(this,s)/3;break;case"second":r=(this-s)/1e3;break;case"minute":r=(this-s)/6e4;break;case"hour":r=(this-s)/36e5;break;case"day":r=(this-s-i)/864e5;break;case"week":r=(this-s-i)/6048e5;break;default:r=this-s}return n?r:S(r)},mn.endOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?rn:sn;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1;break}return this._d.setTime(t),c.updateOffset(this,!0),this},mn.format=function(e){e||(e=this.isUtc()?c.defaultFormatUtc:c.defaultFormat);var t=A(this,e);return this.localeData().postformat(t)},mn.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||bt(e).isValid())?jt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},mn.fromNow=function(e){return this.from(bt(),e)},mn.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||bt(e).isValid())?jt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},mn.toNow=function(e){return this.to(bt(),e)},mn.get=function(e){return b(this[e=H(e)])?this[e]():this},mn.invalidAt=function(){return g(this).overflow},mn.isAfter=function(e,t){var n=k(e)?e:bt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},mn.isBefore=function(e,t){var n=k(e)?e:bt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},mn.isBetween=function(e,t,n,s){var i=k(e)?e:bt(e),r=k(t)?t:bt(t);return!!(this.isValid()&&i.isValid()&&r.isValid())&&("("===(s=s||"()")[0]?this.isAfter(i,n):!this.isBefore(i,n))&&(")"===s[1]?this.isBefore(r,n):!this.isAfter(r,n))},mn.isSame=function(e,t){var n,s=k(e)?e:bt(e);return!(!this.isValid()||!s.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()===s.valueOf():(n=s.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},mn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},mn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},mn.isValid=function(){return v(this)},mn.lang=Kt,mn.locale=Xt,mn.localeData=en,mn.max=Pt,mn.min=xt,mn.parsingFlags=function(){return _({},g(this))},mn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:U[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=R(e)),s=0;s<n.length;s++)this[n[s].unit](e[n[s].unit]);else if(b(this[e=H(e)]))return this[e](t);return this},mn.startOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?rn:sn;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3);break}return this._d.setTime(t),c.updateOffset(this,!0),this},mn.subtract=Bt,mn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},mn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},mn.toDate=function(){return new Date(this.valueOf())},mn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||9999<n.year()?A(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):b(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",A(n,"Z")):A(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},mn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',s=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(n+s+"-MM-DD[T]HH:mm:ss.SSS"+i)},mn.toJSON=function(){return this.isValid()?this.toISOString():null},mn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},mn.unix=function(){return Math.floor(this.valueOf()/1e3)},mn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},mn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},mn.year=Oe,mn.isLeapYear=function(){return De(this.year())},mn.weekYear=function(e){return on.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},mn.isoWeekYear=function(e){return on.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},mn.quarter=mn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},mn.month=Ue,mn.daysInMonth=function(){return Pe(this.year(),this.month())},mn.week=mn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},mn.isoWeek=mn.isoWeeks=function(e){var t=Ie(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},mn.weeksInYear=function(){var e=this.localeData()._week;return Ae(this.year(),e.dow,e.doy)},mn.isoWeeksInYear=function(){return Ae(this.year(),1,4)},mn.date=un,mn.day=mn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t,n,s=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(t=e,n=this.localeData(),e="string"!=typeof t?t:isNaN(t)?"number"==typeof(t=n.weekdaysParse(t))?t:null:parseInt(t,10),this.add(e-s,"d")):s},mn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},mn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null==e)return this.day()||7;var t,n,s=(t=e,n=this.localeData(),"string"==typeof t?n.weekdaysParse(t)%7||7:isNaN(t)?null:t);return this.day(this.day()%7?s:s-7)},mn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},mn.hour=mn.hours=nt,mn.minute=mn.minutes=ln,mn.second=mn.seconds=dn,mn.millisecond=mn.milliseconds=fn,mn.utcOffset=function(e,t,n){var s,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null==e)return this._isUTC?i:Vt(this);if("string"==typeof e){if(null===(e=Nt(re,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(s=Vt(this)),this._offset=e,this._isUTC=!0,null!=s&&this.add(s,"m"),i!==e&&(!t||this._changeInProgress?qt(this,jt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,c.updateOffset(this,!0),this._changeInProgress=null)),this},mn.utc=function(e){return this.utcOffset(0,e)},mn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Vt(this),"m")),this},mn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Nt(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},mn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?bt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},mn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},mn.isLocal=function(){return!!this.isValid()&&!this._isUTC},mn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},mn.isUtc=Et,mn.isUTC=Et,mn.zoneAbbr=function(){return this._isUTC?"UTC":""},mn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},mn.dates=n("dates accessor is deprecated. Use date instead.",un),mn.months=n("months accessor is deprecated. Use month instead",Ue),mn.years=n("years accessor is deprecated. Use year instead",Oe),mn.zone=n("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),mn.isDSTShifted=n("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e={};if(w(e,this),(e=Ot(e))._a){var t=e._isUTC?y(e._a):bt(e._a);this._isDSTShifted=this.isValid()&&0<a(e._a,t.toArray())}else this._isDSTShifted=!1;return this._isDSTShifted});var yn=P.prototype;function gn(e,t,n,s){var i=ht(),r=y().set(s,t);return i[n](r,e)}function vn(e,t,n){if(h(e)&&(t=e,e=void 0),e=e||"",null!=t)return gn(e,t,n,"month");var s,i=[];for(s=0;s<12;s++)i[s]=gn(e,s,n,"month");return i}function pn(e,t,n,s){t=("boolean"==typeof e?h(t)&&(n=t,t=void 0):(t=e,e=!1,h(n=t)&&(n=t,t=void 0)),t||"");var i,r=ht(),a=e?r._week.dow:0;if(null!=n)return gn(t,(n+a)%7,s,"day");var o=[];for(i=0;i<7;i++)o[i]=gn(t,(i+a)%7,s,"day");return o}yn.calendar=function(e,t,n){var s=this._calendar[e]||this._calendar.sameElse;return b(s)?s.call(t,n):s},yn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},yn.invalidDate=function(){return this._invalidDate},yn.ordinal=function(e){return this._ordinal.replace("%d",e)},yn.preparse=_n,yn.postformat=_n,yn.relativeTime=function(e,t,n,s){var i=this._relativeTime[n];return b(i)?i(e,t,n,s):i.replace(/%d/i,e)},yn.pastFuture=function(e,t){var n=this._relativeTime[0<e?"future":"past"];return b(n)?n(t):n.replace(/%s/i,t)},yn.set=function(e){var t,n;for(n in e)b(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},yn.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||We).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},yn.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[We.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},yn.monthsParse=function(e,t,n){var s,i,r;if(this._monthsParseExact)return function(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],s=0;s<12;++s)r=y([2e3,s]),this._shortMonthsParse[s]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[s]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(i=Ye.call(this._shortMonthsParse,a))?i:null:-1!==(i=Ye.call(this._longMonthsParse,a))?i:null:"MMM"===t?-1!==(i=Ye.call(this._shortMonthsParse,a))?i:-1!==(i=Ye.call(this._longMonthsParse,a))?i:null:-1!==(i=Ye.call(this._longMonthsParse,a))?i:-1!==(i=Ye.call(this._shortMonthsParse,a))?i:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),s=0;s<12;s++){if(i=y([2e3,s]),n&&!this._longMonthsParse[s]&&(this._longMonthsParse[s]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[s]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[s]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[s]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[s].test(e))return s;if(n&&"MMM"===t&&this._shortMonthsParse[s].test(e))return s;if(!n&&this._monthsParse[s].test(e))return s}},yn.monthsRegex=function(e){return this._monthsParseExact?(m(this,"_monthsRegex")||Ne.call(this),e?this._monthsStrictRegex:this._monthsRegex):(m(this,"_monthsRegex")||(this._monthsRegex=Le),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},yn.monthsShortRegex=function(e){return this._monthsParseExact?(m(this,"_monthsRegex")||Ne.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(m(this,"_monthsShortRegex")||(this._monthsShortRegex=Fe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},yn.week=function(e){return Ie(e,this._week.dow,this._week.doy).week},yn.firstDayOfYear=function(){return this._week.doy},yn.firstDayOfWeek=function(){return this._week.dow},yn.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?je(n,this._week.dow):e?n[e.day()]:n},yn.weekdaysMin=function(e){return!0===e?je(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},yn.weekdaysShort=function(e){return!0===e?je(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},yn.weekdaysParse=function(e,t,n){var s,i,r;if(this._weekdaysParseExact)return function(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],s=0;s<7;++s)r=y([2e3,1]).day(s),this._minWeekdaysParse[s]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[s]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[s]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(i=Ye.call(this._weekdaysParse,a))?i:null:"ddd"===t?-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:null:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:null:"dddd"===t?-1!==(i=Ye.call(this._weekdaysParse,a))?i:-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:null:"ddd"===t?-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ye.call(this._weekdaysParse,a))?i:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:null:-1!==(i=Ye.call(this._minWeekdaysParse,a))?i:-1!==(i=Ye.call(this._weekdaysParse,a))?i:-1!==(i=Ye.call(this._shortWeekdaysParse,a))?i:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),s=0;s<7;s++){if(i=y([2e3,1]).day(s),n&&!this._fullWeekdaysParse[s]&&(this._fullWeekdaysParse[s]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[s]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[s]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[s]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[s]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[s].test(e))return s;if(n&&"ddd"===t&&this._shortWeekdaysParse[s].test(e))return s;if(n&&"dd"===t&&this._minWeekdaysParse[s].test(e))return s;if(!n&&this._weekdaysParse[s].test(e))return s}},yn.weekdaysRegex=function(e){return this._weekdaysParseExact?(m(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(m(this,"_weekdaysRegex")||(this._weekdaysRegex=qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},yn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(m(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(m(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},yn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(m(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(m(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Be),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},yn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},yn.meridiem=function(e,t,n){return 11<e?n?"pm":"PM":n?"am":"AM"},ut("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===D(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),c.lang=n("moment.lang is deprecated. Use moment.locale instead.",ut),c.langData=n("moment.langData is deprecated. Use moment.localeData instead.",ht);var wn=Math.abs;function Mn(e,t,n,s){var i=jt(t,n);return e._milliseconds+=s*i._milliseconds,e._days+=s*i._days,e._months+=s*i._months,e._bubble()}function kn(e){return e<0?Math.floor(e):Math.ceil(e)}function Sn(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function Yn(e){return function(){return this.as(e)}}var On=Yn("ms"),Tn=Yn("s"),bn=Yn("m"),xn=Yn("h"),Pn=Yn("d"),Wn=Yn("w"),Cn=Yn("M"),Hn=Yn("Q"),Rn=Yn("y");function Un(e){return function(){return this.isValid()?this._data[e]:NaN}}var Fn=Un("milliseconds"),Ln=Un("seconds"),Nn=Un("minutes"),Gn=Un("hours"),Vn=Un("days"),En=Un("months"),In=Un("years");var An=Math.round,jn={ss:44,s:45,m:45,h:22,d:26,M:11};var Zn=Math.abs;function zn(e){return(0<e)-(e<0)||+e}function $n(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Zn(this._milliseconds)/1e3,s=Zn(this._days),i=Zn(this._months);t=S((e=S(n/60))/60),n%=60,e%=60;var r=S(i/12),a=i%=12,o=s,u=t,l=e,h=n?n.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var c=d<0?"-":"",f=zn(this._months)!==zn(d)?"-":"",m=zn(this._days)!==zn(d)?"-":"",_=zn(this._milliseconds)!==zn(d)?"-":"";return c+"P"+(r?f+r+"Y":"")+(a?f+a+"M":"")+(o?m+o+"D":"")+(u||l||h?"T":"")+(u?_+u+"H":"")+(l?_+l+"M":"")+(h?_+h+"S":"")}var qn=Ht.prototype;return qn.isValid=function(){return this._isValid},qn.abs=function(){var e=this._data;return this._milliseconds=wn(this._milliseconds),this._days=wn(this._days),this._months=wn(this._months),e.milliseconds=wn(e.milliseconds),e.seconds=wn(e.seconds),e.minutes=wn(e.minutes),e.hours=wn(e.hours),e.months=wn(e.months),e.years=wn(e.years),this},qn.add=function(e,t){return Mn(this,e,t,1)},qn.subtract=function(e,t){return Mn(this,e,t,-1)},qn.as=function(e){if(!this.isValid())return NaN;var t,n,s=this._milliseconds;if("month"===(e=H(e))||"quarter"===e||"year"===e)switch(t=this._days+s/864e5,n=this._months+Sn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+s/6048e5;case"day":return t+s/864e5;case"hour":return 24*t+s/36e5;case"minute":return 1440*t+s/6e4;case"second":return 86400*t+s/1e3;case"millisecond":return Math.floor(864e5*t)+s;default:throw new Error("Unknown unit "+e)}},qn.asMilliseconds=On,qn.asSeconds=Tn,qn.asMinutes=bn,qn.asHours=xn,qn.asDays=Pn,qn.asWeeks=Wn,qn.asMonths=Cn,qn.asQuarters=Hn,qn.asYears=Rn,qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*D(this._months/12):NaN},qn._bubble=function(){var e,t,n,s,i,r=this._milliseconds,a=this._days,o=this._months,u=this._data;return 0<=r&&0<=a&&0<=o||r<=0&&a<=0&&o<=0||(r+=864e5*kn(Dn(o)+a),o=a=0),u.milliseconds=r%1e3,e=S(r/1e3),u.seconds=e%60,t=S(e/60),u.minutes=t%60,n=S(t/60),u.hours=n%24,o+=i=S(Sn(a+=S(n/24))),a-=kn(Dn(i)),s=S(o/12),o%=12,u.days=a,u.months=o,u.years=s,this},qn.clone=function(){return jt(this)},qn.get=function(e){return e=H(e),this.isValid()?this[e+"s"]():NaN},qn.milliseconds=Fn,qn.seconds=Ln,qn.minutes=Nn,qn.hours=Gn,qn.days=Vn,qn.weeks=function(){return S(this.days()/7)},qn.months=En,qn.years=In,qn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t,n,s,i,r,a,o,u,l,h,d,c=this.localeData(),f=(n=!e,s=c,i=jt(t=this).abs(),r=An(i.as("s")),a=An(i.as("m")),o=An(i.as("h")),u=An(i.as("d")),l=An(i.as("M")),h=An(i.as("y")),(d=r<=jn.ss&&["s",r]||r<jn.s&&["ss",r]||a<=1&&["m"]||a<jn.m&&["mm",a]||o<=1&&["h"]||o<jn.h&&["hh",o]||u<=1&&["d"]||u<jn.d&&["dd",u]||l<=1&&["M"]||l<jn.M&&["MM",l]||h<=1&&["y"]||["yy",h])[2]=n,d[3]=0<+t,d[4]=s,function(e,t,n,s,i){return i.relativeTime(t||1,!!n,e,s)}.apply(null,d));return e&&(f=c.pastFuture(+this,f)),c.postformat(f)},qn.toISOString=$n,qn.toString=$n,qn.toJSON=$n,qn.locale=Xt,qn.localeData=en,qn.toIsoString=n("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",$n),qn.lang=Kt,I("X",0,0,"unix"),I("x",0,0,"valueOf"),ue("x",se),ue("X",/[+-]?\d+(\.\d{1,3})?/),ce("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ce("x",function(e,t,n){n._d=new Date(D(e))}),c.version="2.24.0",e=bt,c.fn=mn,c.min=function(){return Wt("isBefore",[].slice.call(arguments,0))},c.max=function(){return Wt("isAfter",[].slice.call(arguments,0))},c.now=function(){return Date.now?Date.now():+new Date},c.utc=y,c.unix=function(e){return bt(1e3*e)},c.months=function(e,t){return vn(e,t,"months")},c.isDate=d,c.locale=ut,c.invalid=p,c.duration=jt,c.isMoment=k,c.weekdays=function(e,t,n){return pn(e,t,n,"weekdays")},c.parseZone=function(){return bt.apply(null,arguments).parseZone()},c.localeData=ht,c.isDuration=Rt,c.monthsShort=function(e,t){return vn(e,t,"monthsShort")},c.weekdaysMin=function(e,t,n){return pn(e,t,n,"weekdaysMin")},c.defineLocale=lt,c.updateLocale=function(e,t){if(null!=t){var n,s,i=st;null!=(s=ot(e))&&(i=s._config),(n=new P(t=x(i,t))).parentLocale=it[e],it[e]=n,ut(e)}else null!=it[e]&&(null!=it[e].parentLocale?it[e]=it[e].parentLocale:null!=it[e]&&delete it[e]);return it[e]},c.locales=function(){return s(it)},c.weekdaysShort=function(e,t,n){return pn(e,t,n,"weekdaysShort")},c.normalizeUnits=H,c.relativeTimeRounding=function(e){return void 0===e?An:"function"==typeof e&&(An=e,!0)},c.relativeTimeThreshold=function(e,t){return void 0!==jn[e]&&(void 0===t?jn[e]:(jn[e]=t,"s"===e&&(jn.ss=t-1),!0))},c.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},c.prototype=mn,c.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},c});
},{}],"node_modules/stylis/stylis.js":[function(require,module,exports) {
var define;
/*
 *          __        ___
 *    _____/ /___  __/ (_)____
 *   / ___/ __/ / / / / / ___/
 *  (__  ) /_/ /_/ / / (__  )
 * /____/\__/\__, /_/_/____/
 *          /____/
 *
 * light - weight css preprocessor @licence MIT
 */
(function (factory) {/* eslint-disable */
	typeof exports === 'object' && typeof module !== 'undefined' ? (module['exports'] = factory(null)) :
		typeof define === 'function' && define['amd'] ? define(factory(null)) :
			(window['stylis'] = factory(null))
}(/** @param {*=} options */function factory (options) {/* eslint-disable */

	'use strict'

	/**
	 * Notes
	 *
	 * The ['<method name>'] pattern is used to support closure compiler
	 * the jsdoc signatures are also used to the same effect
	 *
	 * ----
	 *
	 * int + int + int === n4 [faster]
	 *
	 * vs
	 *
	 * int === n1 && int === n2 && int === n3
	 *
	 * ----
	 *
	 * switch (int) { case ints...} [faster]
	 *
	 * vs
	 *
	 * if (int == 1 && int === 2 ...)
	 *
	 * ----
	 *
	 * The (first*n1 + second*n2 + third*n3) format used in the property parser
	 * is a simple way to hash the sequence of characters
	 * taking into account the index they occur in
	 * since any number of 3 character sequences could produce duplicates.
	 *
	 * On the other hand sequences that are directly tied to the index of the character
	 * resolve a far more accurate measure, it's also faster
	 * to evaluate one condition in a switch statement
	 * than three in an if statement regardless of the added math.
	 *
	 * This allows the vendor prefixer to be both small and fast.
	 */

	var nullptn = /^\0+/g /* matches leading null characters */
	var formatptn = /[\0\r\f]/g /* matches new line, null and formfeed characters */
	var colonptn = /: */g /* splits animation rules */
	var cursorptn = /zoo|gra/ /* assert cursor varient */
	var transformptn = /([,: ])(transform)/g /* vendor prefix transform, older webkit */
	var animationptn = /,+\s*(?![^(]*[)])/g /* splits multiple shorthand notation animations */
	var propertiesptn = / +\s*(?![^(]*[)])/g /* animation properties */
	var elementptn = / *[\0] */g /* selector elements */
	var selectorptn = /,\r+?/g /* splits selectors */
	var andptn = /([\t\r\n ])*\f?&/g /* match & */
	var escapeptn = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g /* matches :global(.*) */
	var invalidptn = /\W+/g /* removes invalid characters from keyframes */
	var keyframeptn = /@(k\w+)\s*(\S*)\s*/ /* matches @keyframes $1 */
	var plcholdrptn = /::(place)/g /* match ::placeholder varient */
	var readonlyptn = /:(read-only)/g /* match :read-only varient */
	var beforeptn = /\s+(?=[{\];=:>])/g /* matches \s before ] ; = : */
	var afterptn = /([[}=:>])\s+/g /* matches \s after characters [ } = : */
	var tailptn = /(\{[^{]+?);(?=\})/g /* matches tail semi-colons ;} */
	var whiteptn = /\s{2,}/g /* matches repeating whitespace */
	var pseudoptn = /([^\(])(:+) */g /* pseudo element */
	var writingptn = /[svh]\w+-[tblr]{2}/ /* match writing mode property values */
	var gradientptn = /([\w-]+t\()/g /* match *gradient property */
	var supportsptn = /\(\s*(.*)\s*\)/g /* match supports (groups) */
	var propertyptn = /([\s\S]*?);/g /* match properties leading semicolon */
	var selfptn = /-self|flex-/g /* match flex- and -self in align-self: flex-*; */
	var pseudofmt = /[^]*?(:[rp][el]a[\w-]+)[^]*/ /* extrats :readonly or :placholder from selector */
	var trimptn = /[ \t]+$/ /* match tail whitspace */
	var dimensionptn = /stretch|:\s*\w+\-(?:conte|avail)/ /* match max/min/fit-content, fill-available */
	var imgsrcptn = /([^-])(image-set\()/

	/* vendors */
	var webkit = '-webkit-'
	var moz = '-moz-'
	var ms = '-ms-'

	/* character codes */
	var SEMICOLON = 59 /* ; */
	var CLOSEBRACES = 125 /* } */
	var OPENBRACES = 123 /* { */
	var OPENPARENTHESES = 40 /* ( */
	var CLOSEPARENTHESES = 41 /* ) */
	var OPENBRACKET = 91 /* [ */
	var CLOSEBRACKET = 93 /* ] */
	var NEWLINE = 10 /* \n */
	var CARRIAGE = 13 /* \r */
	var TAB = 9 /* \t */
	var AT = 64 /* @ */
	var SPACE = 32 /*   */
	var AND = 38 /* & */
	var DASH = 45 /* - */
	var UNDERSCORE = 95 /* _ */
	var STAR = 42 /* * */
	var COMMA = 44 /* , */
	var COLON = 58 /* : */
	var SINGLEQUOTE = 39 /* ' */
	var DOUBLEQUOTE = 34 /* " */
	var FOWARDSLASH = 47 /* / */
	var GREATERTHAN = 62 /* > */
	var PLUS = 43 /* + */
	var TILDE = 126 /* ~ */
	var NULL = 0 /* \0 */
	var FORMFEED = 12 /* \f */
	var VERTICALTAB = 11 /* \v */

	/* special identifiers */
	var KEYFRAME = 107 /* k */
	var MEDIA = 109 /* m */
	var SUPPORTS = 115 /* s */
	var PLACEHOLDER = 112 /* p */
	var READONLY = 111 /* o */
	var IMPORT = 105 /* <at>i */
	var CHARSET = 99 /* <at>c */
	var DOCUMENT = 100 /* <at>d */
	var PAGE = 112 /* <at>p */

	var column = 1 /* current column */
	var line = 1 /* current line numebr */
	var pattern = 0 /* :pattern */

	var cascade = 1 /* #id h1 h2 vs h1#id h2#id  */
	var prefix = 1 /* vendor prefix */
	var escape = 1 /* escape :global() pattern */
	var compress = 0 /* compress output */
	var semicolon = 0 /* no/semicolon option */
	var preserve = 0 /* preserve empty selectors */

	/* empty reference */
	var array = []

	/* plugins */
	var plugins = []
	var plugged = 0
	var should = null

	/* plugin context */
	var POSTS = -2
	var PREPS = -1
	var UNKWN = 0
	var PROPS = 1
	var BLCKS = 2
	var ATRUL = 3

	/* plugin newline context */
	var unkwn = 0

	/* keyframe animation */
	var keyed = 1
	var key = ''

	/* selector namespace */
	var nscopealt = ''
	var nscope = ''

	/**
	 * Compile
	 *
	 * @param {Array<string>} parent
	 * @param {Array<string>} current
	 * @param {string} body
	 * @param {number} id
	 * @param {number} depth
	 * @return {string}
	 */
	function compile (parent, current, body, id, depth) {
		var bracket = 0 /* brackets [] */
		var comment = 0 /* comments /* // or /* */
		var parentheses = 0 /* functions () */
		var quote = 0 /* quotes '', "" */

		var first = 0 /* first character code */
		var second = 0 /* second character code */
		var code = 0 /* current character code */
		var tail = 0 /* previous character code */
		var trail = 0 /* character before previous code */
		var peak = 0 /* previous non-whitespace code */

		var counter = 0 /* count sequence termination */
		var context = 0 /* track current context */
		var atrule = 0 /* track @at-rule context */
		var pseudo = 0 /* track pseudo token index */
		var caret = 0 /* current character index */
		var format = 0 /* control character formating context */
		var insert = 0 /* auto semicolon insertion */
		var invert = 0 /* inverted selector pattern */
		var length = 0 /* generic length address */
		var eof = body.length /* end of file(length) */
		var eol = eof - 1 /* end of file(characters) */

		var char = '' /* current character */
		var chars = '' /* current buffer of characters */
		var child = '' /* next buffer of characters */
		var out = '' /* compiled body */
		var children = '' /* compiled children */
		var flat = '' /* compiled leafs */
		var selector /* generic selector address */
		var result /* generic address */

		// ...build body
		while (caret < eof) {
			code = body.charCodeAt(caret)

			// eof varient
			if (caret === eol) {
				// last character + noop context, add synthetic padding for noop context to terminate
				if (comment + quote + parentheses + bracket !== 0) {
					if (comment !== 0) {
						code = comment === FOWARDSLASH ? NEWLINE : FOWARDSLASH
					}

					quote = parentheses = bracket = 0
					eof++
					eol++
				}
			}

			if (comment + quote + parentheses + bracket === 0) {
				// eof varient
				if (caret === eol) {
					if (format > 0) {
						chars = chars.replace(formatptn, '')
					}

					if (chars.trim().length > 0) {
						switch (code) {
							case SPACE:
							case TAB:
							case SEMICOLON:
							case CARRIAGE:
							case NEWLINE: {
								break
							}
							default: {
								chars += body.charAt(caret)
							}
						}

						code = SEMICOLON
					}
				}

				// auto semicolon insertion
				if (insert === 1) {
					switch (code) {
						// false flags
						case OPENBRACES:
						case CLOSEBRACES:
						case SEMICOLON:
						case DOUBLEQUOTE:
						case SINGLEQUOTE:
						case OPENPARENTHESES:
						case CLOSEPARENTHESES:
						case COMMA: {
							insert = 0
						}
						// ignore
						case TAB:
						case CARRIAGE:
						case NEWLINE:
						case SPACE: {
							break
						}
						// valid
						default: {
							insert = 0
							length = caret
							first = code
							caret--
							code = SEMICOLON

							while (length < eof) {
								switch (body.charCodeAt(length++)) {
									case NEWLINE:
									case CARRIAGE:
									case SEMICOLON: {
										++caret
										code = first
										length = eof
										break
									}
									case COLON: {
										if (format > 0) {
											++caret
											code = first
										}
									}
									case OPENBRACES: {
										length = eof
									}
								}
							}
						}
					}
				}

				// token varient
				switch (code) {
					case OPENBRACES: {
						chars = chars.trim()
						first = chars.charCodeAt(0)
						counter = 1
						length = ++caret

						while (caret < eof) {
							switch (code = body.charCodeAt(caret)) {
								case OPENBRACES: {
									counter++
									break
								}
								case CLOSEBRACES: {
									counter--
									break
								}
								case FOWARDSLASH: {
									switch (second = body.charCodeAt(caret + 1)) {
										// /*, //
										case STAR:
										case FOWARDSLASH: {
											caret = delimited(second, caret, eol, body)
										}
									}
									break
								}
								// given "[" === 91 & "]" === 93 hence forth 91 + 1 + 1 === 93
								case OPENBRACKET: {
									code++
								}
								// given "(" === 40 & ")" === 41 hence forth 40 + 1 === 41
								case OPENPARENTHESES: {
									code++
								}
								// quote tail delimiter is identical to the head delimiter hence noop,
								// fallthrough clauses have been shifted to the correct tail delimiter
								case DOUBLEQUOTE:
								case SINGLEQUOTE: {
									while (caret++ < eol) {
										if (body.charCodeAt(caret) === code) {
											break
										}
									}
								}
							}

							if (counter === 0) {
								break
							}

							caret++
						}

						child = body.substring(length, caret)

						if (first === NULL) {
							first = (chars = chars.replace(nullptn, '').trim()).charCodeAt(0)
						}

						switch (first) {
							// @at-rule
							case AT: {
								if (format > 0) {
									chars = chars.replace(formatptn, '')
								}

								second = chars.charCodeAt(1)

								switch (second) {
									case DOCUMENT:
									case MEDIA:
									case SUPPORTS:
									case DASH: {
										selector = current
										break
									}
									default: {
										selector = array
									}
								}

								child = compile(current, selector, child, second, depth+1)
								length = child.length

								// preserve empty @at-rule
								if (preserve > 0 && length === 0) {
									length = chars.length
								}

								// execute plugins, @at-rule context
								if (plugged > 0) {
									selector = select(array, chars, invert)
									result = proxy(ATRUL, child, selector, current, line, column, length, second, depth, id)
									chars = selector.join('')

									if (result !== void 0) {
										if ((length = (child = result.trim()).length) === 0) {
											second = 0
											child = ''
										}
									}
								}

								if (length > 0) {
									switch (second) {
										case SUPPORTS: {
											chars = chars.replace(supportsptn, supports)
										}
										case DOCUMENT:
										case MEDIA:
										case DASH: {
											child = chars + '{' + child + '}'
											break
										}
										case KEYFRAME: {
											chars = chars.replace(keyframeptn, '$1 $2' + (keyed > 0 ? key : ''))
											child = chars + '{' + child + '}'

											if (prefix === 1 || (prefix === 2 && vendor('@'+child, 3))) {
												child = '@' + webkit + child + '@' + child
											} else {
												child = '@' + child
											}
											break
										}
										default: {
											child = chars + child

											if (id === PAGE) {
												child = (out += child, '')
											}
										}
									}
								} else {
									child = ''
								}

								break
							}
							// selector
							default: {
								child = compile(current, select(current, chars, invert), child, id, depth+1)
							}
						}

						children += child

						// reset
						context = 0
						insert = 0
						pseudo = 0
						format = 0
						invert = 0
						atrule = 0
						chars = ''
						child = ''
						code = body.charCodeAt(++caret)
						break
					}
					case CLOSEBRACES:
					case SEMICOLON: {
						chars = (format > 0 ? chars.replace(formatptn, '') : chars).trim()

						if ((length = chars.length) > 1) {
							// monkey-patch missing colon
							if (pseudo === 0) {
								first = chars.charCodeAt(0)

								// first character is a letter or dash, buffer has a space character
								if ((first === DASH || first > 96 && first < 123)) {
									length = (chars = chars.replace(' ', ':')).length
								}
							}

							// execute plugins, property context
							if (plugged > 0) {
								if ((result = proxy(PROPS, chars, current, parent, line, column, out.length, id, depth, id)) !== void 0) {
									if ((length = (chars = result.trim()).length) === 0) {
										chars = '\0\0'
									}
								}
							}

							first = chars.charCodeAt(0)
							second = chars.charCodeAt(1)

							switch (first) {
								case NULL: {
									break
								}
								case AT: {
									if (second === IMPORT || second === CHARSET) {
										flat += chars + body.charAt(caret)
										break
									}
								}
								default: {
									if (chars.charCodeAt(length-1) === COLON) {
										break
									}

									out += property(chars, first, second, chars.charCodeAt(2))
								}
							}
						}

						// reset
						context = 0
						insert = 0
						pseudo = 0
						format = 0
						invert = 0
						chars = ''
						code = body.charCodeAt(++caret)
						break
					}
				}
			}

			// parse characters
			switch (code) {
				case CARRIAGE:
				case NEWLINE: {
					// auto insert semicolon
					if (comment + quote + parentheses + bracket + semicolon === 0) {
						// valid non-whitespace characters that
						// may precede a newline
						switch (peak) {
							case CLOSEPARENTHESES:
							case SINGLEQUOTE:
							case DOUBLEQUOTE:
							case AT:
							case TILDE:
							case GREATERTHAN:
							case STAR:
							case PLUS:
							case FOWARDSLASH:
							case DASH:
							case COLON:
							case COMMA:
							case SEMICOLON:
							case OPENBRACES:
							case CLOSEBRACES: {
								break
							}
							default: {
								// current buffer has a colon
								if (pseudo > 0) {
									insert = 1
								}
							}
						}
					}

					// terminate line comment
					if (comment === FOWARDSLASH) {
						comment = 0
					} else if (cascade + context === 0 && id !== KEYFRAME && chars.length > 0) {
						format = 1
						chars += '\0'
					}

					// execute plugins, newline context
					if (plugged * unkwn > 0) {
						proxy(UNKWN, chars, current, parent, line, column, out.length, id, depth, id)
					}

					// next line, reset column position
					column = 1
					line++
					break
				}
				case SEMICOLON:
				case CLOSEBRACES: {
					if (comment + quote + parentheses + bracket === 0) {
						column++
						break
					}
				}
				default: {
					// increment column position
					column++

					// current character
					char = body.charAt(caret)

					// remove comments, escape functions, strings, attributes and prepare selectors
					switch (code) {
						case TAB:
						case SPACE: {
							if (quote + bracket + comment === 0) {
								switch (tail) {
									case COMMA:
									case COLON:
									case TAB:
									case SPACE: {
										char = ''
										break
									}
									default: {
										if (code !== SPACE) {
											char = ' '
										}
									}
								}
							}
							break
						}
						// escape breaking control characters
						case NULL: {
							char = '\\0'
							break
						}
						case FORMFEED: {
							char = '\\f'
							break
						}
						case VERTICALTAB: {
							char = '\\v'
							break
						}
						// &
						case AND: {
							// inverted selector pattern i.e html &
							if (quote + comment + bracket === 0 && cascade > 0) {
								invert = 1
								format = 1
								char = '\f' + char
							}
							break
						}
						// ::p<l>aceholder, l
						// :read-on<l>y, l
						case 108: {
							if (quote + comment + bracket + pattern === 0 && pseudo > 0) {
								switch (caret - pseudo) {
									// ::placeholder
									case 2: {
										if (tail === PLACEHOLDER && body.charCodeAt(caret-3) === COLON) {
											pattern = tail
										}
									}
									// :read-only
									case 8: {
										if (trail === READONLY) {
											pattern = trail
										}
									}
								}
							}
							break
						}
						// :<pattern>
						case COLON: {
							if (quote + comment + bracket === 0) {
								pseudo = caret
							}
							break
						}
						// selectors
						case COMMA: {
							if (comment + parentheses + quote + bracket === 0) {
								format = 1
								char += '\r'
							}
							break
						}
						// quotes
						case DOUBLEQUOTE:
						case SINGLEQUOTE: {
							if (comment === 0) {
								quote = quote === code ? 0 : (quote === 0 ? code : quote)
							}
							break
						}
						// attributes
						case OPENBRACKET: {
							if (quote + comment + parentheses === 0) {
								bracket++
							}
							break
						}
						case CLOSEBRACKET: {
							if (quote + comment + parentheses === 0) {
								bracket--
							}
							break
						}
						// functions
						case CLOSEPARENTHESES: {
							if (quote + comment + bracket === 0) {
								parentheses--
							}
							break
						}
						case OPENPARENTHESES: {
							if (quote + comment + bracket === 0) {
								if (context === 0) {
									switch (tail*2 + trail*3) {
										// :matches
										case 533: {
											break
										}
										// :global, :not, :nth-child etc...
										default: {
											counter = 0
											context = 1
										}
									}
								}

								parentheses++
							}
							break
						}
						case AT: {
							if (comment + parentheses + quote + bracket + pseudo + atrule === 0) {
								atrule = 1
							}
							break
						}
						// block/line comments
						case STAR:
						case FOWARDSLASH: {
							if (quote + bracket + parentheses > 0) {
								break
							}

							switch (comment) {
								// initialize line/block comment context
								case 0: {
									switch (code*2 + body.charCodeAt(caret+1)*3) {
										// //
										case 235: {
											comment = FOWARDSLASH
											break
										}
										// /*
										case 220: {
											length = caret
											comment = STAR
											break
										}
									}
									break
								}
								// end block comment context
								case STAR: {
									if (code === FOWARDSLASH && tail === STAR && length + 2 !== caret) {
										// /*<!> ... */, !
										if (body.charCodeAt(length+2) === 33) {
											out += body.substring(length, caret+1)
										}
										char = ''
										comment = 0
									}
								}
							}
						}
					}

					// ignore comment blocks
					if (comment === 0) {
						// aggressive isolation mode, divide each individual selector
						// including selectors in :not function but excluding selectors in :global function
						if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {
							switch (code) {
								case COMMA:
								case TILDE:
								case GREATERTHAN:
								case PLUS:
								case CLOSEPARENTHESES:
								case OPENPARENTHESES: {
									if (context === 0) {
										// outside of an isolated context i.e nth-child(<...>)
										switch (tail) {
											case TAB:
											case SPACE:
											case NEWLINE:
											case CARRIAGE: {
												char = char + '\0'
												break
											}
											default: {
												char = '\0' + char + (code === COMMA ? '' : '\0')
											}
										}
										format = 1
									} else {
										// within an isolated context, sleep untill it's terminated
										switch (code) {
											case OPENPARENTHESES: {
												// :globa<l>(
												if (pseudo + 7 === caret && tail === 108) {
													pseudo = 0
												}
												context = ++counter
												break
											}
											case CLOSEPARENTHESES: {
												if ((context = --counter) === 0) {
													format = 1
													char += '\0'
												}
												break
											}
										}
									}
									break
								}
								case TAB:
								case SPACE: {
									switch (tail) {
										case NULL:
										case OPENBRACES:
										case CLOSEBRACES:
										case SEMICOLON:
										case COMMA:
										case FORMFEED:
										case TAB:
										case SPACE:
										case NEWLINE:
										case CARRIAGE: {
											break
										}
										default: {
											// ignore in isolated contexts
											if (context === 0) {
												format = 1
												char += '\0'
											}
										}
									}
								}
							}
						}

						// concat buffer of characters
						chars += char

						// previous non-whitespace character code
						if (code !== SPACE && code !== TAB) {
							peak = code
						}
					}
				}
			}

			// tail character codes
			trail = tail
			tail = code

			// visit every character
			caret++
		}

		length = out.length

		// preserve empty selector
 		if (preserve > 0) {
 			if (length === 0 && children.length === 0 && (current[0].length === 0) === false) {
 				if (id !== MEDIA || (current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0])) {
					length = current.join(',').length + 2
 				}
 			}
		}

		if (length > 0) {
			// cascade isolation mode?
			selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current

			// execute plugins, block context
			if (plugged > 0) {
				result = proxy(BLCKS, out, selector, parent, line, column, length, id, depth, id)

				if (result !== void 0 && (out = result).length === 0) {
					return flat + out + children
				}
			}

			out = selector.join(',') + '{' + out + '}'

			if (prefix*pattern !== 0) {
				if (prefix === 2 && !vendor(out, 2))
					pattern = 0

				switch (pattern) {
					// ::read-only
					case READONLY: {
						out = out.replace(readonlyptn, ':'+moz+'$1')+out
						break
					}
					// ::placeholder
					case PLACEHOLDER: {
						out = (
							out.replace(plcholdrptn, '::' + webkit + 'input-$1') +
							out.replace(plcholdrptn, '::' + moz + '$1') +
							out.replace(plcholdrptn, ':' + ms + 'input-$1') + out
						)
						break
					}
				}

				pattern = 0
			}
		}

		return flat + out + children
	}

	/**
	 * Select
	 *
	 * @param {Array<string>} parent
	 * @param {string} current
	 * @param {number} invert
	 * @return {Array<string>}
	 */
	function select (parent, current, invert) {
		var selectors = current.trim().split(selectorptn)
		var out = selectors

		var length = selectors.length
		var l = parent.length

		switch (l) {
			// 0-1 parent selectors
			case 0:
			case 1: {
				for (var i = 0, selector = l === 0 ? '' : parent[0] + ' '; i < length; ++i) {
					out[i] = scope(selector, out[i], invert, l).trim()
				}
				break
			}
			// >2 parent selectors, nested
			default: {
				for (var i = 0, j = 0, out = []; i < length; ++i) {
					for (var k = 0; k < l; ++k) {
						out[j++] = scope(parent[k] + ' ', selectors[i], invert, l).trim()
					}
				}
			}
		}

		return out
	}

	/**
	 * Scope
	 *
	 * @param {string} parent
	 * @param {string} current
	 * @param {number} invert
	 * @param {number} level
	 * @return {string}
	 */
	function scope (parent, current, invert, level) {
		var selector = current
		var code = selector.charCodeAt(0)

		// trim leading whitespace
		if (code < 33) {
			code = (selector = selector.trim()).charCodeAt(0)
		}

		switch (code) {
			// &
			case AND: {
				switch (cascade + level) {
					case 0:
					case 1: {
						if (parent.trim().length === 0) {
							break
						}
					}
					default: {
						return selector.replace(andptn, '$1'+parent.trim())
					}
				}
				break
			}
			// :
			case COLON: {
				switch (selector.charCodeAt(1)) {
					// g in :global
					case 103: {
						if (escape > 0 && cascade > 0) {
							return selector.replace(escapeptn, '$1').replace(andptn, '$1'+nscope)
						}
						break
					}
					default: {
						// :hover
						return parent.trim() + selector.replace(andptn, '$1'+parent.trim())
					}
				}
			}
			default: {
				// html &
				if (invert*cascade > 0 && selector.indexOf('\f') > 0) {
					return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? '' : '$1')+parent.trim())
				}
			}
		}

		return parent + selector
	}

	/**
	 * Property
	 *
	 * @param {string} input
	 * @param {number} first
	 * @param {number} second
	 * @param {number} third
	 * @return {string}
	 */
	function property (input, first, second, third) {
		var index = 0
		var out = input + ';'
		var hash = (first*2) + (second*3) + (third*4)
		var cache

		// animation: a, n, i characters
		if (hash === 944) {
			return animation(out)
		} else if (prefix === 0 || (prefix === 2 && !vendor(out, 1))) {
			return out
		}

		// vendor prefix
		switch (hash) {
			// text-decoration/text-size-adjust/text-shadow/text-align/text-transform: t, e, x
			case 1015: {
				// text-shadow/text-align/text-transform, a
				return out.charCodeAt(10) === 97 ? webkit + out + out : out
			}
			// filter/fill f, i, l
			case 951: {
				// filter, t
				return out.charCodeAt(3) === 116 ? webkit + out + out : out
			}
			// color/column, c, o, l
			case 963: {
				// column, n
				return out.charCodeAt(5) === 110 ? webkit + out + out : out
			}
			// box-decoration-break, b, o, x
			case 1009: {
				if (out.charCodeAt(4) !== 100) {
					break
				}
			}
			// mask, m, a, s
			// clip-path, c, l, i
			case 969:
			case 942: {
				return webkit + out + out
			}
			// appearance: a, p, p
			case 978: {
				return webkit + out + moz + out + out
			}
			// hyphens: h, y, p
			// user-select: u, s, e
			case 1019:
			case 983: {
				return webkit + out + moz + out + ms + out + out
			}
			// background/backface-visibility, b, a, c
			case 883: {
				// backface-visibility, -
				if (out.charCodeAt(8) === DASH) {
					return webkit + out + out
				}

				// image-set(...)
				if (out.indexOf('image-set(', 11) > 0) {
					return out.replace(imgsrcptn, '$1'+webkit+'$2') + out
				}

				return out
			}
			// flex: f, l, e
			case 932: {
				if (out.charCodeAt(4) === DASH) {
					switch (out.charCodeAt(5)) {
						// flex-grow, g
						case 103: {
							return webkit + 'box-' + out.replace('-grow', '') + webkit + out + ms + out.replace('grow', 'positive') + out
						}
						// flex-shrink, s
						case 115: {
							return webkit + out + ms + out.replace('shrink', 'negative') + out
						}
						// flex-basis, b
						case 98: {
							return webkit + out + ms + out.replace('basis', 'preferred-size') + out
						}
					}
				}

				return webkit + out + ms + out + out
			}
			// order: o, r, d
			case 964: {
				return webkit + out + ms + 'flex' + '-' + out + out
			}
			// justify-items/justify-content, j, u, s
			case 1023: {
				// justify-content, c
				if (out.charCodeAt(8) !== 99) {
					break
				}

				cache = out.substring(out.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify')
				return webkit + 'box-pack' + cache + webkit + out + ms + 'flex-pack' + cache + out
			}
			// cursor, c, u, r
			case 1005: {
				return cursorptn.test(out) ? out.replace(colonptn, ':' + webkit) + out.replace(colonptn, ':' + moz) + out : out
			}
			// writing-mode, w, r, i
			case 1000: {
				cache = out.substring(13).trim()
				index = cache.indexOf('-') + 1

				switch (cache.charCodeAt(0)+cache.charCodeAt(index)) {
					// vertical-lr
					case 226: {
						cache = out.replace(writingptn, 'tb')
						break
					}
					// vertical-rl
					case 232: {
						cache = out.replace(writingptn, 'tb-rl')
						break
					}
					// horizontal-tb
					case 220: {
						cache = out.replace(writingptn, 'lr')
						break
					}
					default: {
						return out
					}
				}

				return webkit + out + ms + cache + out
			}
			// position: sticky
			case 1017: {
				if (out.indexOf('sticky', 9) === -1) {
					return out
				}
			}
			// display(flex/inline-flex/inline-box): d, i, s
			case 975: {
				index = (out = input).length - 10
				cache = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input.indexOf(':', 7) + 1).trim()

				switch (hash = cache.charCodeAt(0) + (cache.charCodeAt(7)|0)) {
					// inline-
					case 203: {
						// inline-box
						if (cache.charCodeAt(8) < 111) {
							break
						}
					}
					// inline-box/sticky
					case 115: {
						out = out.replace(cache, webkit+cache)+';'+out
						break
					}
					// inline-flex
					// flex
					case 207:
					case 102: {
						out = (
							out.replace(cache, webkit+(hash > 102 ? 'inline-' : '')+'box')+';'+
							out.replace(cache, webkit+cache)+';'+
							out.replace(cache, ms+cache+'box')+';'+
							out
						)
					}
				}

				return out + ';'
			}
			// align-items, align-center, align-self: a, l, i, -
			case 938: {
				if (out.charCodeAt(5) === DASH) {
					switch (out.charCodeAt(6)) {
						// align-items, i
						case 105: {
							cache = out.replace('-items', '')
							return webkit + out + webkit + 'box-' + cache + ms + 'flex-' + cache + out
						}
						// align-self, s
						case 115: {
							return webkit + out + ms + 'flex-item-' + out.replace(selfptn, '') + out
						}
						// align-content
						default: {
							return webkit + out + ms + 'flex-line-pack' + out.replace('align-content', '').replace(selfptn, '') + out
						}
					}
				}
				break
			}
			// min/max
			case 973:
			case 989: {
				// min-/max- height/width/block-size/inline-size
				if (out.charCodeAt(3) !== DASH || out.charCodeAt(4) === 122) {
					break
				}
			}
			// height/width: min-content / width: max-content
			case 931:
			case 953: {
				if (dimensionptn.test(input) === true) {
					// stretch
					if ((cache = input.substring(input.indexOf(':') + 1)).charCodeAt(0) === 115)
						return property(input.replace('stretch', 'fill-available'), first, second, third).replace(':fill-available', ':stretch')
					else
						return out.replace(cache, webkit + cache) + out.replace(cache, moz + cache.replace('fill-', '')) + out
				}
				break
			}
			// transform, transition: t, r, a
			case 962: {
				out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : '') + out

				// transitions
				if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf('transform', 10) > 0) {
					return out.substring(0, out.indexOf(';', 27) + 1).replace(transformptn, '$1' + webkit + '$2') + out
				}

				break
			}
		}

		return out
	}

	/**
	 * Vendor
	 *
	 * @param {string} content
	 * @param {number} context
	 * @return {boolean}
	 */
	function vendor (content, context) {
		var index = content.indexOf(context === 1 ? ':' : '{')
		var key = content.substring(0, context !== 3 ? index : 10)
		var value = content.substring(index + 1, content.length - 1)

		return should(context !== 2 ? key : key.replace(pseudofmt, '$1'), value, context)
	}

	/**
	 * Supports
	 *
	 * @param {string} match
	 * @param {string} group
	 * @return {string}
	 */
	function supports (match, group) {
		var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2))

		return out !== group+';' ? out.replace(propertyptn, ' or ($1)').substring(4) : '('+group+')'
	}

	/**
	 * Animation
	 *
	 * @param {string} input
	 * @return {string}
	 */
	function animation (input) {
		var length = input.length
		var index = input.indexOf(':', 9) + 1
		var declare = input.substring(0, index).trim()
		var out = input.substring(index, length-1).trim()

		switch (input.charCodeAt(9)*keyed) {
			case 0: {
				break
			}
			// animation-*, -
			case DASH: {
				// animation-name, n
				if (input.charCodeAt(10) !== 110) {
					break
				}
			}
			// animation/animation-name
			default: {
				// split in case of multiple animations
				var list = out.split((out = '', animationptn))

				for (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {
					var value = list[i]
					var items = value.split(propertiesptn)

					while (value = items[index]) {
						var peak = value.charCodeAt(0)

						if (keyed === 1 && (
							// letters
							(peak > AT && peak < 90) || (peak > 96 && peak < 123) || peak === UNDERSCORE ||
							// dash but not in sequence i.e --
							(peak === DASH && value.charCodeAt(1) !== DASH)
						)) {
							// not a number/function
							switch (isNaN(parseFloat(value)) + (value.indexOf('(') !== -1)) {
								case 1: {
									switch (value) {
										// not a valid reserved keyword
										case 'infinite': case 'alternate': case 'backwards': case 'running':
										case 'normal': case 'forwards': case 'both': case 'none': case 'linear':
										case 'ease': case 'ease-in': case 'ease-out': case 'ease-in-out':
										case 'paused': case 'reverse': case 'alternate-reverse': case 'inherit':
										case 'initial': case 'unset': case 'step-start': case 'step-end': {
											break
										}
										default: {
											value += key
										}
									}
								}
							}
						}

						items[index++] = value
					}

					out += (i === 0 ? '' : ',') + items.join(' ')
				}
			}
		}

		out = declare + out + ';'

		if (prefix === 1 || (prefix === 2 && vendor(out, 1)))
			return webkit + out + out

		return out
	}

	/**
	 * Isolate
	 *
	 * @param {Array<string>} current
	 */
	function isolate (current) {
		for (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {
			// split individual elements in a selector i.e h1 h2 === [h1, h2]
			var elements = current[i].split(elementptn)
			var out = ''

			for (var j = 0, size = 0, tail = 0, code = 0, l = elements.length; j < l; ++j) {
				// empty element
				if ((size = (element = elements[j]).length) === 0 && l > 1) {
					continue
				}

				tail = out.charCodeAt(out.length-1)
				code = element.charCodeAt(0)
				padding = ''

				if (j !== 0) {
					// determine if we need padding
					switch (tail) {
						case STAR:
						case TILDE:
						case GREATERTHAN:
						case PLUS:
						case SPACE:
						case OPENPARENTHESES:  {
							break
						}
						default: {
							padding = ' '
						}
					}
				}

				switch (code) {
					case AND: {
						element = padding + nscopealt
					}
					case TILDE:
					case GREATERTHAN:
					case PLUS:
					case SPACE:
					case CLOSEPARENTHESES:
					case OPENPARENTHESES: {
						break
					}
					case OPENBRACKET: {
						element = padding + element + nscopealt
						break
					}
					case COLON: {
						switch (element.charCodeAt(1)*2 + element.charCodeAt(2)*3) {
							// :global
							case 530: {
								if (escape > 0) {
									element = padding + element.substring(8, size - 1)
									break
								}
							}
							// :hover, :nth-child(), ...
							default: {
								if (j < 1 || elements[j-1].length < 1) {
									element = padding + nscopealt + element
								}
							}
						}
						break
					}
					case COMMA: {
						padding = ''
					}
					default: {
						if (size > 1 && element.indexOf(':') > 0) {
							element = padding + element.replace(pseudoptn, '$1' + nscopealt + '$2')
						} else {
							element = padding + element + nscopealt
						}
					}
				}

				out += element
			}

			selector[i] = out.replace(formatptn, '').trim()
		}

		return selector
	}

	/**
	 * Proxy
	 *
	 * @param {number} context
	 * @param {string} content
	 * @param {Array<string>} selectors
	 * @param {Array<string>} parents
	 * @param {number} line
	 * @param {number} column
	 * @param {number} length
	 * @param {number} id
	 * @param {number} depth
	 * @param {number} at
	 * @return {(string|void|*)}
	 */
	function proxy (context, content, selectors, parents, line, column, length, id, depth, at) {
		for (var i = 0, out = content, next; i < plugged; ++i) {
			switch (next = plugins[i].call(stylis, context, out, selectors, parents, line, column, length, id, depth, at)) {
				case void 0:
				case false:
				case true:
				case null: {
					break
				}
				default: {
					out = next
				}
			}
		}
		if (out !== content) {
		  return out
		}
	}

	/**
	 * @param {number} code
	 * @param {number} index
	 * @param {number} length
	 * @param {string} body
	 * @return {number}
	 */
	function delimited (code, index, length, body) {
		for (var i = index + 1; i < length; ++i) {
			switch (body.charCodeAt(i)) {
				// /*
				case FOWARDSLASH: {
					if (code === STAR) {
						if (body.charCodeAt(i - 1) === STAR &&  index + 2 !== i) {
							return i + 1
						}
					}
					break
				}
				// //
				case NEWLINE: {
					if (code === FOWARDSLASH) {
						return i + 1
					}
				}
			}
		}

		return i
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @param {number} length
	 * @param {number} find
	 * @param {string} body
	 * @return {number}
	 */
	function match (type, index, length, body) {
		for (var i = index + 1; i < length; ++i) {
			switch (body.charCodeAt(i)) {
				case type: {
					return i
				}
			}
		}

		return i
	}

	/**
	 * Minify
	 *
	 * @param {(string|*)} output
	 * @return {string}
	 */
	function minify (output) {
		return output
			.replace(formatptn, '')
			.replace(beforeptn, '')
			.replace(afterptn, '$1')
			.replace(tailptn, '$1')
			.replace(whiteptn, ' ')
	}

	/**
	 * Use
	 *
	 * @param {(Array<function(...?)>|function(...?)|number|void)?} plugin
	 */
	function use (plugin) {
		switch (plugin) {
			case void 0:
			case null: {
				plugged = plugins.length = 0
				break
			}
			default: {
				if (typeof plugin === 'function') {
					plugins[plugged++] = plugin
				}	else if (typeof plugin === 'object') {
					for (var i = 0, length = plugin.length; i < length; ++i) {
						use(plugin[i])
					}
				} else {
					unkwn = !!plugin|0
				}
			}
 		}

 		return use
	}

	/**
	 * Set
	 *
	 * @param {*} options
	 */
	function set (options) {
		for (var name in options) {
			var value = options[name]
			switch (name) {
				case 'keyframe': keyed = value|0; break
				case 'global': escape = value|0; break
				case 'cascade': cascade = value|0; break
				case 'compress': compress = value|0; break
				case 'semicolon': semicolon = value|0; break
				case 'preserve': preserve = value|0; break
				case 'prefix':
					should = null

					if (!value) {
						prefix = 0
					} else if (typeof value !== 'function') {
						prefix = 1
					} else {
						prefix = 2
						should = value
					}
			}
		}

		return set
	}

	/**
	 * Stylis
	 *
	 * @param {string} selector
	 * @param {string} input
	 * @return {*}
	 */
	function stylis (selector, input) {
		if (this !== void 0 && this.constructor === stylis) {
			return factory(selector)
		}

		// setup
		var ns = selector
		var code = ns.charCodeAt(0)

		// trim leading whitespace
		if (code < 33) {
			code = (ns = ns.trim()).charCodeAt(0)
		}

		// keyframe/animation namespace
		if (keyed > 0) {
			key = ns.replace(invalidptn, code === OPENBRACKET ? '' : '-')
		}

		// reset, used to assert if a plugin is moneky-patching the return value
		code = 1

		// cascade/isolate
		if (cascade === 1) {
			nscope = ns
		} else {
			nscopealt = ns
		}

		var selectors = [nscope]
		var result

		// execute plugins, pre-process context
		if (plugged > 0) {
			result = proxy(PREPS, input, selectors, selectors, line, column, 0, 0, 0, 0)

			if (result !== void 0 && typeof result === 'string') {
				input = result
			}
		}

		// build
		var output = compile(array, selectors, input, 0, 0)

		// execute plugins, post-process context
		if (plugged > 0) {
			result = proxy(POSTS, output, selectors, selectors, line, column, output.length, 0, 0, 0)

			// bypass minification
			if (result !== void 0 && typeof(output = result) !== 'string') {
				code = 0
			}
		}

		// reset
		key = ''
		nscope = ''
		nscopealt = ''
		pattern = 0
		line = 1
		column = 1

		return compress*code === 0 ? output : minify(output)
	}

	stylis['use'] = use
	stylis['set'] = set

	if (options !== void 0) {
		set(options)
	}

	return stylis
}));

},{}],"node_modules/mermaid/dist/mermaid.core.js":[function(require,module,exports) {
var define;
var process = require("process");
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["mermaid"] = factory();else root["mermaid"] = factory();
})(typeof self !== "undefined" ? self : this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
          return value[key];
        }.bind(null, key));
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = "./src/mermaid.js");
      /******/
    }(
    /************************************************************************/

    /******/
    {
      /***/
      "./node_modules/node-libs-browser/mock/empty.js":
      /*!******************************************************!*\
        !*** ./node_modules/node-libs-browser/mock/empty.js ***!
        \******************************************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        /***/
      },

      /***/
      "./node_modules/path-browserify/index.js":
      /*!***********************************************!*\
        !*** ./node_modules/path-browserify/index.js ***!
        \***********************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process) {
          // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
          // backported and transplited with Babel, with backwards-compat fixes
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // resolves . and .. elements in a path array with directory names there
          // must be no slashes, empty elements, or device names (c:\) in the array
          // (so also no leading and trailing slashes - it does not distinguish
          // relative and absolute paths)
          function normalizeArray(parts, allowAboveRoot) {
            // if the path tries to go above the root, `up` ends up > 0
            var up = 0;

            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];

              if (last === '.') {
                parts.splice(i, 1);
              } else if (last === '..') {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            } // if the path is allowed to go above the root, restore leading ..s


            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift('..');
              }
            }

            return parts;
          } // path.resolve([from ...], to)
          // posix version


          exports.resolve = function () {
            var resolvedPath = '',
                resolvedAbsolute = false;

            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

              if (typeof path !== 'string') {
                throw new TypeError('Arguments to path.resolve must be strings');
              } else if (!path) {
                continue;
              }

              resolvedPath = path + '/' + resolvedPath;
              resolvedAbsolute = path.charAt(0) === '/';
            } // At this point the path should be resolved to a full absolute path, but
            // handle relative paths to be safe (might happen when process.cwd() fails)
            // Normalize the path


            resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
              return !!p;
            }), !resolvedAbsolute).join('/');
            return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
          }; // path.normalize(path)
          // posix version


          exports.normalize = function (path) {
            var isAbsolute = exports.isAbsolute(path),
                trailingSlash = substr(path, -1) === '/'; // Normalize the path

            path = normalizeArray(filter(path.split('/'), function (p) {
              return !!p;
            }), !isAbsolute).join('/');

            if (!path && !isAbsolute) {
              path = '.';
            }

            if (path && trailingSlash) {
              path += '/';
            }

            return (isAbsolute ? '/' : '') + path;
          }; // posix version


          exports.isAbsolute = function (path) {
            return path.charAt(0) === '/';
          }; // posix version


          exports.join = function () {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports.normalize(filter(paths, function (p, index) {
              if (typeof p !== 'string') {
                throw new TypeError('Arguments to path.join must be strings');
              }

              return p;
            }).join('/'));
          }; // path.relative(from, to)
          // posix version


          exports.relative = function (from, to) {
            from = exports.resolve(from).substr(1);
            to = exports.resolve(to).substr(1);

            function trim(arr) {
              var start = 0;

              for (; start < arr.length; start++) {
                if (arr[start] !== '') break;
              }

              var end = arr.length - 1;

              for (; end >= 0; end--) {
                if (arr[end] !== '') break;
              }

              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }

            var fromParts = trim(from.split('/'));
            var toParts = trim(to.split('/'));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;

            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }

            var outputParts = [];

            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push('..');
            }

            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join('/');
          };

          exports.sep = '/';
          exports.delimiter = ':';

          exports.dirname = function (path) {
            if (typeof path !== 'string') path = path + '';
            if (path.length === 0) return '.';
            var code = path.charCodeAt(0);
            var hasRoot = code === 47
            /*/*/
            ;
            var end = -1;
            var matchedSlash = true;

            for (var i = path.length - 1; i >= 1; --i) {
              code = path.charCodeAt(i);

              if (code === 47
              /*/*/
              ) {
                  if (!matchedSlash) {
                    end = i;
                    break;
                  }
                } else {
                // We saw the first non-path separator
                matchedSlash = false;
              }
            }

            if (end === -1) return hasRoot ? '/' : '.';

            if (hasRoot && end === 1) {
              // return '//';
              // Backwards-compat fix:
              return '/';
            }

            return path.slice(0, end);
          };

          function basename(path) {
            if (typeof path !== 'string') path = path + '';
            var start = 0;
            var end = -1;
            var matchedSlash = true;
            var i;

            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47
              /*/*/
              ) {
                  // If we reached a path separator that was not part of a set of path
                  // separators at the end of the string, stop now
                  if (!matchedSlash) {
                    start = i + 1;
                    break;
                  }
                } else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
              }
            }

            if (end === -1) return '';
            return path.slice(start, end);
          } // Uses a mixed approach for backwards-compatibility, as ext behavior changed
          // in new Node.js versions, so only basename() above is backported here


          exports.basename = function (path, ext) {
            var f = basename(path);

            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }

            return f;
          };

          exports.extname = function (path) {
            if (typeof path !== 'string') path = path + '';
            var startDot = -1;
            var startPart = 0;
            var end = -1;
            var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and
            // after any path separator we find

            var preDotState = 0;

            for (var i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);

              if (code === 47
              /*/*/
              ) {
                  // If we reached a path separator that was not part of a set of path
                  // separators at the end of the string, stop now
                  if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                  }

                  continue;
                }

              if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
              }

              if (code === 46
              /*.*/
              ) {
                  // If this is our first dot, mark it as the start of our extension
                  if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
                } else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
              }
            }

            if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
            preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
            preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
              return '';
            }

            return path.slice(startDot, end);
          };

          function filter(xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];

            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }

            return res;
          } // String.prototype.substr - negative index don't work in IE8


          var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
            return str.substr(start, len);
          } : function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
          };
          /* WEBPACK VAR INJECTION */
        }).call(this, __webpack_require__(
        /*! ./../process/browser.js */
        "./node_modules/process/browser.js"));
        /***/
      },

      /***/
      "./node_modules/process/browser.js":
      /*!*****************************************!*\
        !*** ./node_modules/process/browser.js ***!
        \*****************************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        // shim for using process in browser
        var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined');
        }

        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined');
        }

        (function () {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }

          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();

        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          } // if setTimeout wasn't available but was latter defined


          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }

          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }

        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          } // if clearTimeout wasn't available but was latter defined


          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }

          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }

        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }

          draining = false;

          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }

          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }

          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;

          while (len) {
            currentQueue = queue;
            queue = [];

            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }

            queueIndex = -1;
            len = queue.length;
          }

          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);

          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }

          queue.push(new Item(fun, args));

          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        }; // v8 likes predictible objects


        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }

        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };

        process.title = 'browser';
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues

        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
          return [];
        };

        process.binding = function (name) {
          throw new Error('process.binding is not supported');
        };

        process.cwd = function () {
          return '/';
        };

        process.chdir = function (dir) {
          throw new Error('process.chdir is not supported');
        };

        process.umask = function () {
          return 0;
        };
        /***/

      },

      /***/
      "./node_modules/webpack/buildin/module.js":
      /*!***********************************!*\
        !*** (webpack)/buildin/module.js ***!
        \***********************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = function (module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function () {};

            module.paths = []; // module.parent = undefined by default

            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function () {
                return module.l;
              }
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function () {
                return module.i;
              }
            });
            module.webpackPolyfill = 1;
          }

          return module;
        };
        /***/

      },

      /***/
      "./package.json":
      /*!**********************!*\
        !*** ./package.json ***!
        \**********************/

      /*! exports provided: name, version, description, main, keywords, scripts, repository, author, license, standard, dependencies, devDependencies, files, yarn-upgrade-all, sideEffects, husky, default */

      /***/
      function (module) {
        module.exports = JSON.parse("{\"name\":\"mermaid\",\"version\":\"8.9.2\",\"description\":\"Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.\",\"main\":\"dist/mermaid.core.js\",\"keywords\":[\"diagram\",\"markdown\",\"flowchart\",\"sequence diagram\",\"gantt\",\"class diagram\",\"git graph\"],\"scripts\":{\"build:development\":\"webpack --progress --colors\",\"build:production\":\"yarn build:development -p --config webpack.config.prod.babel.js\",\"build\":\"yarn build:development && yarn build:production\",\"postbuild\":\"documentation build src/mermaidAPI.js src/config.js src/defaultConfig.js --shallow -f md --markdown-toc false > docs/Setup.md\",\"build:watch\":\"yarn build --watch\",\"minify\":\"minify ./dist/mermaid.js > ./dist/mermaid.min.js\",\"release\":\"yarn build\",\"lint\":\"eslint src\",\"e2e:depr\":\"yarn lint && jest e2e --config e2e/jest.config.js\",\"cypress\":\"percy exec -- cypress run\",\"e2e\":\"start-server-and-test dev http://localhost:9000/ cypress\",\"e2e-upd\":\"yarn lint && jest e2e -u --config e2e/jest.config.js\",\"dev\":\"webpack-dev-server --config webpack.config.e2e.js\",\"test\":\"yarn lint && jest src/.*\",\"test:watch\":\"jest --watch src\",\"prepublishOnly\":\"yarn build && yarn test\",\"prepare\":\"yarn build\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/knsv/mermaid\"},\"author\":\"Knut Sveidqvist\",\"license\":\"MIT\",\"standard\":{\"ignore\":[\"**/parser/*.js\",\"dist/**/*.js\",\"cypress/**/*.js\"],\"globals\":[\"page\"]},\"dependencies\":{\"@braintree/sanitize-url\":\"^3.1.0\",\"d3\":\"^5.7.0\",\"dagre\":\"^0.8.4\",\"dagre-d3\":\"^0.6.4\",\"entity-decode\":\"^2.0.2\",\"graphlib\":\"^2.1.7\",\"he\":\"^1.2.0\",\"khroma\":\"^1.1.0\",\"minify\":\"^4.1.1\",\"moment-mini\":\"^2.22.1\",\"stylis\":\"^3.5.2\"},\"devDependencies\":{\"@babel/core\":\"^7.2.2\",\"@babel/preset-env\":\"^7.8.4\",\"@babel/register\":\"^7.0.0\",\"@percy/cypress\":\"*\",\"babel-core\":\"7.0.0-bridge.0\",\"babel-eslint\":\"^10.1.0\",\"babel-jest\":\"^24.9.0\",\"babel-loader\":\"^8.0.4\",\"coveralls\":\"^3.0.2\",\"css-loader\":\"^2.0.1\",\"css-to-string-loader\":\"^0.1.3\",\"cypress\":\"4.0.1\",\"documentation\":\"^12.0.1\",\"eslint\":\"^6.3.0\",\"eslint-config-prettier\":\"^6.3.0\",\"eslint-plugin-prettier\":\"^3.1.0\",\"husky\":\"^1.2.1\",\"identity-obj-proxy\":\"^3.0.0\",\"jest\":\"^24.9.0\",\"jison\":\"^0.4.18\",\"moment\":\"^2.23.0\",\"node-sass\":\"^5.0.0\",\"prettier\":\"^1.18.2\",\"puppeteer\":\"^1.17.0\",\"sass-loader\":\"^7.1.0\",\"start-server-and-test\":\"^1.10.6\",\"terser-webpack-plugin\":\"^2.2.2\",\"webpack\":\"^4.41.2\",\"webpack-bundle-analyzer\":\"^3.7.0\",\"webpack-cli\":\"^3.1.2\",\"webpack-dev-server\":\"^3.4.1\",\"webpack-node-externals\":\"^1.7.2\",\"yarn-upgrade-all\":\"^0.5.0\"},\"files\":[\"dist\"],\"yarn-upgrade-all\":{\"ignore\":[\"babel-core\"]},\"sideEffects\":[\"**/*.css\",\"**/*.scss\"],\"husky\":{\"hooks\":{\"pre-push\":\"yarn test\"}}}");
        /***/
      },

      /***/
      "./src/config.js":
      /*!***********************!*\
        !*** ./src/config.js ***!
        \***********************/

      /*! exports provided: defaultConfig, updateCurrentConfig, setSiteConfig, saveConfigFromInitilize, updateSiteConfig, getSiteConfig, setConfig, getConfig, sanitize, addDirective, reset */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "defaultConfig", function () {
          return defaultConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "updateCurrentConfig", function () {
          return updateCurrentConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setSiteConfig", function () {
          return setSiteConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "saveConfigFromInitilize", function () {
          return saveConfigFromInitilize;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "updateSiteConfig", function () {
          return updateSiteConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getSiteConfig", function () {
          return getSiteConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConfig", function () {
          return setConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getConfig", function () {
          return getConfig;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "sanitize", function () {
          return sanitize;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addDirective", function () {
          return addDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "reset", function () {
          return reset;
        });
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./utils */
        "./src/utils.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./logger */
        "./src/logger.js");
        /* harmony import */


        var _themes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./themes */
        "./src/themes/index.js");
        /* harmony import */


        var _defaultConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./defaultConfig */
        "./src/defaultConfig.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        } // debugger;


        var defaultConfig = Object.freeze(_defaultConfig__WEBPACK_IMPORTED_MODULE_3__["default"]);
        var siteConfig = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, defaultConfig);
        var configFromInitialize;
        var directives = [];
        var currentConfig = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, defaultConfig);

        var updateCurrentConfig = function updateCurrentConfig(siteCfg, _directives) {
          // start with config beeing the siteConfig
          var cfg = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, siteCfg); // let sCfg = assignWithDepth(defaultConfig, siteConfigDelta);
          // Join directives

          var sumOfDirectives = {};

          for (var i = 0; i < _directives.length; i++) {
            var d = _directives[i];
            sanitize(d); // Apply the data from the directive where the the overrides the themeVaraibles

            sumOfDirectives = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])(sumOfDirectives, d);
          }

          cfg = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])(cfg, sumOfDirectives);

          if (sumOfDirectives.theme) {
            var tmpConfigFromInitialize = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, configFromInitialize);
            var themeVariables = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])(tmpConfigFromInitialize.themeVariables || {}, sumOfDirectives.themeVariables);
            cfg.themeVariables = _themes__WEBPACK_IMPORTED_MODULE_2__["default"][cfg.theme].getThemeVariables(themeVariables);
          }

          currentConfig = cfg;
          return cfg;
        };
        /**
         *## setSiteConfig
         *| Function | Description         | Type    | Values             |
         *| --------- | ------------------- | ------- | ------------------ |
         *| setSiteConfig|Sets the siteConfig to desired values | Put Request | Any Values, except ones in secure array|
         ***Notes:**
         *Sets the siteConfig. The siteConfig is a protected configuration for repeat use. Calls to reset() will reset
         *the currentConfig to siteConfig. Calls to reset(configApi.defaultConfig) will reset siteConfig and currentConfig
         *to the defaultConfig
         *Note: currentConfig is set in this function
         **Default value: At default, will mirror Global Config**
         * @param conf - the base currentConfig to use as siteConfig
         * @returns {*} - the siteConfig
         */


        var setSiteConfig = function setSiteConfig(conf) {
          siteConfig = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, defaultConfig);
          siteConfig = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])(siteConfig, conf);

          if (conf.theme) {
            siteConfig.themeVariables = _themes__WEBPACK_IMPORTED_MODULE_2__["default"][conf.theme].getThemeVariables(conf.themeVariables);
          }

          currentConfig = updateCurrentConfig(siteConfig, directives);
          return siteConfig;
        };

        var saveConfigFromInitilize = function saveConfigFromInitilize(conf) {
          configFromInitialize = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, conf);
        };

        var updateSiteConfig = function updateSiteConfig(conf) {
          siteConfig = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])(siteConfig, conf);
          updateCurrentConfig(siteConfig, directives);
          return siteConfig;
        };
        /**
         *## getSiteConfig
         *| Function | Description         | Type    |  Values             |
         *| --------- | ------------------- | ------- |  ------------------ |
         *| setSiteConfig|Returns the current siteConfig base configuration | Get Request | Returns Any Values  in siteConfig|
         ***Notes**:
         *Returns **any** values in siteConfig.
         * @returns {*}
         */


        var getSiteConfig = function getSiteConfig() {
          return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, siteConfig);
        };
        /**
         *## setConfig
         *| Function  | Description         | Type    | Values             |
         *| --------- | ------------------- | ------- | ------------------ |
         *| setSiteConfig|Sets the siteConfig to desired values | Put Request| Any Values, except ones in secure array|
         ***Notes**:
         *Sets the currentConfig. The parameter conf is sanitized based on the siteConfig.secure keys. Any
         *values found in conf with key found in siteConfig.secure will be replaced with the corresponding
         *siteConfig value.
         * @param conf - the potential currentConfig
         * @returns {*} - the currentConfig merged with the sanitized conf
         */


        var setConfig = function setConfig(conf) {
          // sanitize(conf);
          // Object.keys(conf).forEach(key => {
          //   const manipulator = manipulators[key];
          //   conf[key] = manipulator ? manipulator(conf[key]) : conf[key];
          // });
          Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])(currentConfig, conf);
          return getConfig();
        };
        /**
         *   ## getConfig
         *| Function  | Description         | Type    | Return Values            |
         *| --------- | ------------------- | ------- | ------------------ |
         *| getConfig |Obtains the currentConfig | Get Request | Any Values from currentConfig|
         ***Notes**:
         *Returns **any** the currentConfig
         * @returns {*} - the currentConfig
         */


        var getConfig = function getConfig() {
          return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["assignWithDepth"])({}, currentConfig);
        };
        /**
         *## sanitize
         *| Function | Description         | Type    | Values             |
         *| --------- | ------------------- | ------- | ------------------ |
         *| sanitize  |Sets the siteConfig to desired values. | Put Request |None|
         *Ensures options parameter does not attempt to override siteConfig secure keys
         *Note: modifies options in-place
         * @param options - the potential setConfig parameter
         */


        var sanitize = function sanitize(options) {
          // Checking that options are not in the list of excluded options
          Object.keys(siteConfig.secure).forEach(function (key) {
            if (typeof options[siteConfig.secure[key]] !== 'undefined') {
              // DO NOT attempt to print options[siteConfig.secure[key]] within `${}` as a malicious script
              // can exploit the logger's attempt to stringify the value and execute arbitrary code
              _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug("Denied attempt to modify a secure key ".concat(siteConfig.secure[key]), options[siteConfig.secure[key]]);

              delete options[siteConfig.secure[key]];
            }
          }); // Check that there no attempts of prototype pollution

          Object.keys(options).forEach(function (key) {
            if (key.indexOf('__') === 0) {
              delete options[key];
            }
          }); // Check that there no attempts of xss, there should be no tags at all in the directive
          // blocking data urls as base64 urls can contain svgs with inline script tags

          Object.keys(options).forEach(function (key) {
            if (typeof options[key] === 'string') {
              if (options[key].indexOf('<') > -1 || options[key].indexOf('>') > -1 || options[key].indexOf('url(data:') > -1) {
                delete options[key];
              }
            }

            if (_typeof(options[key]) === 'object') {
              sanitize(options[key]);
            }
          });
        };

        var addDirective = function addDirective(directive) {
          if (directive.fontFamily) {
            if (!directive.themeVariables) {
              directive.themeVariables = {
                fontFamily: directive.fontFamily
              };
            } else {
              if (!directive.themeVariables.fontFamily) {
                directive.themeVariables = {
                  fontFamily: directive.fontFamily
                };
              }
            }
          }

          directives.push(directive);
          updateCurrentConfig(siteConfig, directives);
        };
        /**
         *## reset
         *| Function | Description         | Type    | Required | Values             |
         *| --------- | ------------------- | ------- | -------- | ------------------ |
         *| reset|Resets currentConfig to conf| Put Request | Required | None|
         *
         *| Parameter | Description |Type | Required | Values|
         *| --- | --- | --- | --- | --- |
         *| conf| base set of values, which currentConfig coul be **reset** to.| Dictionary | Required | Any Values, with respect to the secure Array|
         *
         **Notes :
         (default: current siteConfig ) (optional, default `getSiteConfig()`)
         * @param conf  the base currentConfig to reset to (default: current siteConfig ) (optional, default `getSiteConfig()`)
         */


        var reset = function reset() {
          // Replace current config with siteConfig
          directives = [];
          updateCurrentConfig(siteConfig, directives);
        };
        /***/

      },

      /***/
      "./src/dagre-wrapper/clusters.js":
      /*!***************************************!*\
        !*** ./src/dagre-wrapper/clusters.js ***!
        \***************************************/

      /*! exports provided: insertCluster, getClusterTitleWidth, clear, positionCluster */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertCluster", function () {
          return insertCluster;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClusterTitleWidth", function () {
          return getClusterTitleWidth;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "positionCluster", function () {
          return positionCluster;
        });
        /* harmony import */


        var _intersect_intersect_rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./intersect/intersect-rect */
        "./src/dagre-wrapper/intersect/intersect-rect.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");
        /* harmony import */


        var _createLabel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./createLabel */
        "./src/dagre-wrapper/createLabel.js");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_3__);
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../config */
        "./src/config.js");

        var rect = function rect(parent, node) {
          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].trace('Creating subgraph rect for ', node.id, node); // Add outer g element


          var shapeSvg = parent.insert('g').attr('class', 'cluster' + (node.class ? ' ' + node.class : '')).attr('id', node.id); // add the rect

          var rect = shapeSvg.insert('rect', ':first-child'); // Create the label and insert it after the rect

          var label = shapeSvg.insert('g').attr('class', 'cluster-label');
          var text = label.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_2__["default"])(node.labelText, node.labelStyle, undefined, true)); // Get the size of the label

          var bbox = text.getBBox();

          if (Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.htmlLabels) {
            var div = text.children[0];
            var dv = Object(d3__WEBPACK_IMPORTED_MODULE_3__["select"])(text);
            bbox = div.getBoundingClientRect();
            dv.attr('width', bbox.width);
            dv.attr('height', bbox.height);
          }

          var padding = 0 * node.padding;
          var halfPadding = padding / 2;

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].trace('Data ', node, JSON.stringify(node)); // center the rect around its coordinate


          rect.attr('style', node.style).attr('rx', node.rx).attr('ry', node.ry).attr('x', node.x - node.width / 2 - halfPadding).attr('y', node.y - node.height / 2 - halfPadding).attr('width', node.width + padding).attr('height', node.height + padding); // Center the label

          label.attr('transform', 'translate(' + (node.x - bbox.width / 2) + ', ' + (node.y - node.height / 2 + node.padding / 3) + ')');
          var rectBox = rect.node().getBBox();
          node.width = rectBox.width;
          node.height = rectBox.height;

          node.intersect = function (point) {
            return Object(_intersect_intersect_rect__WEBPACK_IMPORTED_MODULE_0__["default"])(node, point);
          };

          return shapeSvg;
        };
        /**
         * Non visiable cluster where the note is group with its
         */


        var noteGroup = function noteGroup(parent, node) {
          // Add outer g element
          var shapeSvg = parent.insert('g').attr('class', 'note-cluster').attr('id', node.id); // add the rect

          var rect = shapeSvg.insert('rect', ':first-child');
          var padding = 0 * node.padding;
          var halfPadding = padding / 2; // center the rect around its coordinate

          rect.attr('rx', node.rx).attr('ry', node.ry).attr('x', node.x - node.width / 2 - halfPadding).attr('y', node.y - node.height / 2 - halfPadding).attr('width', node.width + padding).attr('height', node.height + padding).attr('fill', 'none');
          var rectBox = rect.node().getBBox();
          node.width = rectBox.width;
          node.height = rectBox.height;

          node.intersect = function (point) {
            return Object(_intersect_intersect_rect__WEBPACK_IMPORTED_MODULE_0__["default"])(node, point);
          };

          return shapeSvg;
        };

        var roundedWithTitle = function roundedWithTitle(parent, node) {
          // Add outer g element
          var shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id); // add the rect

          var rect = shapeSvg.insert('rect', ':first-child'); // Create the label and insert it after the rect

          var label = shapeSvg.insert('g').attr('class', 'cluster-label');
          var innerRect = shapeSvg.append('rect');
          var text = label.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_2__["default"])(node.labelText, node.labelStyle, undefined, true)); // Get the size of the label

          var bbox = text.getBBox();

          if (Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.htmlLabels) {
            var div = text.children[0];
            var dv = Object(d3__WEBPACK_IMPORTED_MODULE_3__["select"])(text);
            bbox = div.getBoundingClientRect();
            dv.attr('width', bbox.width);
            dv.attr('height', bbox.height);
          }

          bbox = text.getBBox();
          var padding = 0 * node.padding;
          var halfPadding = padding / 2; // center the rect around its coordinate

          rect.attr('class', 'outer').attr('x', node.x - node.width / 2 - halfPadding).attr('y', node.y - node.height / 2 - halfPadding).attr('width', node.width + padding).attr('height', node.height + padding);
          innerRect.attr('class', 'inner').attr('x', node.x - node.width / 2 - halfPadding).attr('y', node.y - node.height / 2 - halfPadding + bbox.height - 1).attr('width', node.width + padding).attr('height', node.height + padding - bbox.height - 3); // Center the label

          label.attr('transform', 'translate(' + (node.x - bbox.width / 2) + ', ' + (node.y - node.height / 2 - node.padding / 3 + (Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.htmlLabels ? 5 : 3)) + ')');
          var rectBox = rect.node().getBBox();
          node.width = rectBox.width;
          node.height = rectBox.height;

          node.intersect = function (point) {
            return Object(_intersect_intersect_rect__WEBPACK_IMPORTED_MODULE_0__["default"])(node, point);
          };

          return shapeSvg;
        };

        var divider = function divider(parent, node) {
          // Add outer g element
          var shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id); // add the rect

          var rect = shapeSvg.insert('rect', ':first-child');
          var padding = 0 * node.padding;
          var halfPadding = padding / 2; // center the rect around its coordinate

          rect.attr('class', 'divider').attr('x', node.x - node.width / 2 - halfPadding).attr('y', node.y - node.height / 2).attr('width', node.width + padding).attr('height', node.height + padding);
          var rectBox = rect.node().getBBox();
          node.width = rectBox.width;
          node.height = rectBox.height;

          node.intersect = function (point) {
            return Object(_intersect_intersect_rect__WEBPACK_IMPORTED_MODULE_0__["default"])(node, point);
          };

          return shapeSvg;
        };

        var shapes = {
          rect: rect,
          roundedWithTitle: roundedWithTitle,
          noteGroup: noteGroup,
          divider: divider
        };
        var clusterElems = {};

        var insertCluster = function insertCluster(elem, node) {
          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].trace('Inserting cluster');

          var shape = node.shape || 'rect';
          clusterElems[node.id] = shapes[shape](elem, node);
        };

        var getClusterTitleWidth = function getClusterTitleWidth(elem, node) {
          var label = Object(_createLabel__WEBPACK_IMPORTED_MODULE_2__["default"])(node.labelText, node.labelStyle, undefined, true);
          elem.node().appendChild(label);
          var width = label.getBBox().width;
          elem.node().removeChild(label);
          return width;
        };

        var clear = function clear() {
          clusterElems = {};
        };

        var positionCluster = function positionCluster(node) {
          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Position cluster');

          var el = clusterElems[node.id];
          el.attr('transform', 'translate(' + node.x + ', ' + node.y + ')');
        };
        /***/

      },

      /***/
      "./src/dagre-wrapper/createLabel.js":
      /*!******************************************!*\
        !*** ./src/dagre-wrapper/createLabel.js ***!
        \******************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../config */
        "./src/config.js"); // eslint-disable-line
        // let vertexNode;
        // if (getConfig().flowchart.htmlLabels) {
        //   // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?
        //   const node = {
        //     label: vertexText.replace(/fa[lrsb]?:fa-[\w-]+/g, s => `<i class='${s.replace(':', ' ')}'></i>`)
        //   };
        //   vertexNode = addHtmlLabel(svg, node).node();
        //   vertexNode.parentNode.removeChild(vertexNode);
        // } else {
        //   const svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        //   svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));
        //   const rows = vertexText.split(common.lineBreakRegex);
        //   for (let j = 0; j < rows.length; j++) {
        //     const tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
        //     tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
        //     tspan.setAttribute('dy', '1em');
        //     tspan.setAttribute('x', '1');
        //     tspan.textContent = rows[j];
        //     svgLabel.appendChild(tspan);
        //   }
        //   vertexNode = svgLabel;
        // }


        function applyStyle(dom, styleFn) {
          if (styleFn) {
            dom.attr('style', styleFn);
          }
        }

        function addHtmlLabel(node) {
          // var fo = root.append('foreignObject').attr('width', '100000');
          // var div = fo.append('xhtml:div');
          // div.attr('xmlns', 'http://www.w3.org/1999/xhtml');
          // var label = node.label;
          // switch (typeof label) {
          //   case 'function':
          //     div.insert(label);
          //     break;
          //   case 'object':
          //     // Currently we assume this is a DOM object.
          //     div.insert(function() {
          //       return label;
          //     });
          //     break;
          //   default:
          //     div.html(label);
          // }
          // applyStyle(div, node.labelStyle);
          // div.style('display', 'inline-block');
          // // Fix for firefox
          // div.style('white-space', 'nowrap');
          // var client = div.node().getBoundingClientRect();
          // fo.attr('width', client.width).attr('height', client.height);
          var fo = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject'));
          var div = fo.append('xhtml:div');
          var label = node.label;
          var labelClass = node.isNode ? 'nodeLabel' : 'edgeLabel';
          div.html('<span class="' + labelClass + '" ' + (node.labelStyle ? 'style="' + node.labelStyle + '"' : '') + '>' + label + '</span>');
          applyStyle(div, node.labelStyle);
          div.style('display', 'inline-block'); // Fix for firefox

          div.style('white-space', 'nowrap');
          div.attr('xmlns', 'http://www.w3.org/1999/xhtml');
          return fo.node();
        }

        var createLabel = function createLabel(_vertexText, style, isTitle, isNode) {
          var vertexText = _vertexText || '';

          if (Object(_config__WEBPACK_IMPORTED_MODULE_2__["getConfig"])().flowchart.htmlLabels) {
            // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?
            vertexText = vertexText.replace(/\\n|\n/g, '<br />');

            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('vertexText' + vertexText);

            var node = {
              isNode: isNode,
              label: vertexText.replace(/fa[lrsb]?:fa-[\w-]+/g, function (s) {
                return "<i class='".concat(s.replace(':', ' '), "'></i>");
              }),
              labelStyle: style.replace('fill:', 'color:')
            };
            var vertexNode = addHtmlLabel(node); // vertexNode.parentNode.removeChild(vertexNode);

            return vertexNode;
          } else {
            var svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            svgLabel.setAttribute('style', style.replace('color:', 'fill:'));
            var rows = [];

            if (typeof vertexText === 'string') {
              rows = vertexText.split(/\\n|\n|<br\s*\/?>/gi);
            } else if (Array.isArray(vertexText)) {
              rows = vertexText;
            } else {
              rows = [];
            }

            for (var j = 0; j < rows.length; j++) {
              var tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
              tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
              tspan.setAttribute('dy', '1em');
              tspan.setAttribute('x', '0');

              if (isTitle) {
                tspan.setAttribute('class', 'title-row');
              } else {
                tspan.setAttribute('class', 'row');
              }

              tspan.textContent = rows[j].trim();
              svgLabel.appendChild(tspan);
            }

            return svgLabel;
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = createLabel;
        /***/
      },

      /***/
      "./src/dagre-wrapper/edges.js":
      /*!************************************!*\
        !*** ./src/dagre-wrapper/edges.js ***!
        \************************************/

      /*! exports provided: clear, insertEdgeLabel, positionEdgeLabel, intersection, insertEdge */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertEdgeLabel", function () {
          return insertEdgeLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "positionEdgeLabel", function () {
          return positionEdgeLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "intersection", function () {
          return intersection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertEdge", function () {
          return insertEdge;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");
        /* harmony import */


        var _createLabel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./createLabel */
        "./src/dagre-wrapper/createLabel.js");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../config */
        "./src/config.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../utils */
        "./src/utils.js"); // eslint-disable-line
        // import { calcLabelPosition } from '../utils';


        var edgeLabels = {};
        var terminalLabels = {};

        var clear = function clear() {
          edgeLabels = {};
          terminalLabels = {};
        };

        var insertEdgeLabel = function insertEdgeLabel(elem, edge) {
          // Create the actual text element
          var labelElement = Object(_createLabel__WEBPACK_IMPORTED_MODULE_1__["default"])(edge.label, edge.labelStyle); // Create outer g, edgeLabel, this will be positioned after graph layout

          var edgeLabel = elem.insert('g').attr('class', 'edgeLabel'); // Create inner g, label, this will be positioned now for centering the text

          var label = edgeLabel.insert('g').attr('class', 'label');
          label.node().appendChild(labelElement); // Center the label

          var bbox = labelElement.getBBox();

          if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
            var div = labelElement.children[0];
            var dv = Object(d3__WEBPACK_IMPORTED_MODULE_2__["select"])(labelElement);
            bbox = div.getBoundingClientRect();
            dv.attr('width', bbox.width);
            dv.attr('height', bbox.height);
          }

          label.attr('transform', 'translate(' + -bbox.width / 2 + ', ' + -bbox.height / 2 + ')'); // Make element accessible by id for positioning

          edgeLabels[edge.id] = edgeLabel; // Update the abstract data of the edge with the new information about its width and height

          edge.width = bbox.width;
          edge.height = bbox.height;

          if (edge.startLabelLeft) {
            // Create the actual text element
            var startLabelElement = Object(_createLabel__WEBPACK_IMPORTED_MODULE_1__["default"])(edge.startLabelLeft, edge.labelStyle);
            var startEdgeLabelLeft = elem.insert('g').attr('class', 'edgeTerminals');
            var inner = startEdgeLabelLeft.insert('g').attr('class', 'inner');
            inner.node().appendChild(startLabelElement);
            var slBox = startLabelElement.getBBox();
            inner.attr('transform', 'translate(' + -slBox.width / 2 + ', ' + -slBox.height / 2 + ')');

            if (!terminalLabels[edge.id]) {
              terminalLabels[edge.id] = {};
            }

            terminalLabels[edge.id].startLeft = startEdgeLabelLeft;
          }

          if (edge.startLabelRight) {
            // Create the actual text element
            var _startLabelElement = Object(_createLabel__WEBPACK_IMPORTED_MODULE_1__["default"])(edge.startLabelRight, edge.labelStyle);

            var startEdgeLabelRight = elem.insert('g').attr('class', 'edgeTerminals');

            var _inner = startEdgeLabelRight.insert('g').attr('class', 'inner');

            startEdgeLabelRight.node().appendChild(_startLabelElement);

            _inner.node().appendChild(_startLabelElement);

            var _slBox = _startLabelElement.getBBox();

            _inner.attr('transform', 'translate(' + -_slBox.width / 2 + ', ' + -_slBox.height / 2 + ')');

            if (!terminalLabels[edge.id]) {
              terminalLabels[edge.id] = {};
            }

            terminalLabels[edge.id].startRight = startEdgeLabelRight;
          }

          if (edge.endLabelLeft) {
            // Create the actual text element
            var endLabelElement = Object(_createLabel__WEBPACK_IMPORTED_MODULE_1__["default"])(edge.endLabelLeft, edge.labelStyle);
            var endEdgeLabelLeft = elem.insert('g').attr('class', 'edgeTerminals');

            var _inner2 = endEdgeLabelLeft.insert('g').attr('class', 'inner');

            _inner2.node().appendChild(endLabelElement);

            var _slBox2 = endLabelElement.getBBox();

            _inner2.attr('transform', 'translate(' + -_slBox2.width / 2 + ', ' + -_slBox2.height / 2 + ')');

            endEdgeLabelLeft.node().appendChild(endLabelElement);

            if (!terminalLabels[edge.id]) {
              terminalLabels[edge.id] = {};
            }

            terminalLabels[edge.id].endLeft = endEdgeLabelLeft;
          }

          if (edge.endLabelRight) {
            // Create the actual text element
            var _endLabelElement = Object(_createLabel__WEBPACK_IMPORTED_MODULE_1__["default"])(edge.endLabelRight, edge.labelStyle);

            var endEdgeLabelRight = elem.insert('g').attr('class', 'edgeTerminals');

            var _inner3 = endEdgeLabelRight.insert('g').attr('class', 'inner');

            _inner3.node().appendChild(_endLabelElement);

            var _slBox3 = _endLabelElement.getBBox();

            _inner3.attr('transform', 'translate(' + -_slBox3.width / 2 + ', ' + -_slBox3.height / 2 + ')');

            endEdgeLabelRight.node().appendChild(_endLabelElement);

            if (!terminalLabels[edge.id]) {
              terminalLabels[edge.id] = {};
            }

            terminalLabels[edge.id].endRight = endEdgeLabelRight;
          }
        };

        var positionEdgeLabel = function positionEdgeLabel(edge, paths) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Moving label', edge.id, edge.label, edgeLabels[edge.id]);

          var path = paths.updatedPath ? paths.updatedPath : paths.originalPath;

          if (edge.label) {
            var el = edgeLabels[edge.id];
            var x = edge.x;
            var y = edge.y;

            if (path) {
              //   // debugger;
              var pos = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].calcLabelPosition(path);

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Moving label from (', x, ',', y, ') to (', pos.x, ',', pos.y, ')'); // x = pos.x;
              // y = pos.y;

            }

            el.attr('transform', 'translate(' + x + ', ' + y + ')');
          } //let path = paths.updatedPath ? paths.updatedPath : paths.originalPath;


          if (edge.startLabelLeft) {
            var _el = terminalLabels[edge.id].startLeft;
            var _x = edge.x;
            var _y = edge.y;

            if (path) {
              // debugger;
              var _pos = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].calcTerminalLabelPosition(0, 'start_left', path);

              _x = _pos.x;
              _y = _pos.y;
            }

            _el.attr('transform', 'translate(' + _x + ', ' + _y + ')');
          }

          if (edge.startLabelRight) {
            var _el2 = terminalLabels[edge.id].startRight;
            var _x2 = edge.x;
            var _y2 = edge.y;

            if (path) {
              // debugger;
              var _pos2 = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].calcTerminalLabelPosition(0, 'start_right', path);

              _x2 = _pos2.x;
              _y2 = _pos2.y;
            }

            _el2.attr('transform', 'translate(' + _x2 + ', ' + _y2 + ')');
          }

          if (edge.endLabelLeft) {
            var _el3 = terminalLabels[edge.id].endLeft;
            var _x3 = edge.x;
            var _y3 = edge.y;

            if (path) {
              // debugger;
              var _pos3 = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].calcTerminalLabelPosition(0, 'end_left', path);

              _x3 = _pos3.x;
              _y3 = _pos3.y;
            }

            _el3.attr('transform', 'translate(' + _x3 + ', ' + _y3 + ')');
          }

          if (edge.endLabelRight) {
            var _el4 = terminalLabels[edge.id].endRight;
            var _x4 = edge.x;
            var _y4 = edge.y;

            if (path) {
              // debugger;
              var _pos4 = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].calcTerminalLabelPosition(0, 'end_right', path);

              _x4 = _pos4.x;
              _y4 = _pos4.y;
            }

            _el4.attr('transform', 'translate(' + _x4 + ', ' + _y4 + ')');
          }
        }; // const getRelationType = function(type) {
        //   switch (type) {
        //     case stateDb.relationType.AGGREGATION:
        //       return 'aggregation';
        //     case stateDb.relationType.EXTENSION:
        //       return 'extension';
        //     case stateDb.relationType.COMPOSITION:
        //       return 'composition';
        //     case stateDb.relationType.DEPENDENCY:
        //       return 'dependency';
        //   }
        // };


        var outsideNode = function outsideNode(node, point) {
          // log.warn('Checking bounds ', node, point);
          var x = node.x;
          var y = node.y;
          var dx = Math.abs(point.x - x);
          var dy = Math.abs(point.y - y);
          var w = node.width / 2;
          var h = node.height / 2;

          if (dx >= w || dy >= h) {
            return true;
          }

          return false;
        };

        var intersection = function intersection(node, outsidePoint, insidePoint) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('intersection calc o:', outsidePoint, ' i:', insidePoint, node);

          var x = node.x;
          var y = node.y;
          var dx = Math.abs(x - insidePoint.x);
          var w = node.width / 2;
          var r = insidePoint.x < outsidePoint.x ? w - dx : w + dx;
          var h = node.height / 2;
          var edges = {
            x1: x - w,
            x2: x + w,
            y1: y - h,
            y2: y + h
          };

          if (outsidePoint.x === edges.x1 || outsidePoint.x === edges.x2 || outsidePoint.y === edges.y1 || outsidePoint.y === edges.y2) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('calc equals on edge');

            return outsidePoint;
          }

          var Q = Math.abs(outsidePoint.y - insidePoint.y);
          var R = Math.abs(outsidePoint.x - insidePoint.x); // log.warn();

          if (Math.abs(y - outsidePoint.y) * w > Math.abs(x - outsidePoint.x) * h) {
            // eslint-disable-line
            // Intersection is top or bottom of rect.
            // let q = insidePoint.y < outsidePoint.y ? outsidePoint.y - h - y : y - h - outsidePoint.y;
            var q = insidePoint.y < outsidePoint.y ? outsidePoint.y - h - y : y - h - outsidePoint.y;
            r = R * q / Q;
            var res = {
              x: insidePoint.x < outsidePoint.x ? insidePoint.x + R - r : insidePoint.x - r,
              y: insidePoint.y < outsidePoint.y ? insidePoint.y + Q - q : insidePoint.y - q
            };

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn("topp/bott calc, Q ".concat(Q, ", q ").concat(q, ", R ").concat(R, ", r ").concat(r), res);

            return res;
          } else {
            // Intersection onn sides of rect
            // q = (Q * r) / R;
            // q = 2;
            // r = (R * q) / Q;
            if (insidePoint.x < outsidePoint.x) {
              r = outsidePoint.x - w - x;
            } else {
              // r = outsidePoint.x - w - x;
              r = x - w - outsidePoint.x;
            }

            var _q = _q = Q * r / R;

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn("sides calc, Q ".concat(Q, ", q ").concat(_q, ", R ").concat(R, ", r ").concat(r), {
              x: insidePoint.x < outsidePoint.x ? insidePoint.x + R - r : insidePoint.x + dx - w,
              y: insidePoint.y < outsidePoint.y ? insidePoint.y + _q : insidePoint.y - _q
            });

            return {
              x: insidePoint.x < outsidePoint.x ? insidePoint.x + R - r : insidePoint.x + dx - w,
              y: insidePoint.y < outsidePoint.y ? insidePoint.y + _q : insidePoint.y - _q
            };
          }
        }; //(edgePaths, e, edge, clusterDb, diagramtype, graph)


        var insertEdge = function insertEdge(elem, e, edge, clusterDb, diagramType, graph) {
          var points = edge.points;
          var pointsHasChanged = false;
          var tail = graph.node(e.v);
          var head = graph.node(e.w);

          if (head.intersect && tail.intersect) {
            points = points.slice(1, edge.points.length - 1);
            points.unshift(tail.intersect(points[0]));

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Last point', points[points.length - 1], head, head.intersect(points[points.length - 1]));

            points.push(head.intersect(points[points.length - 1]));
          }

          if (edge.toCluster) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('edge', edge);

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('to cluster', clusterDb[edge.toCluster]);

            points = [];
            var lastPointOutside;
            var isInside = false;
            edge.points.forEach(function (point) {
              var node = clusterDb[edge.toCluster].node;

              if (!outsideNode(node, point) && !isInside) {
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('inside', edge.toCluster, point, lastPointOutside); // First point inside the rect


                var inter = intersection(node, lastPointOutside, point);
                var pointPresent = false;
                points.forEach(function (p) {
                  pointPresent = pointPresent || p.x === inter.x && p.y === inter.y;
                }); // if (!pointPresent) {

                if (!points.find(function (e) {
                  return e.x === inter.x && e.y === inter.y;
                })) {
                  points.push(inter);
                } else {
                  _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('no intersect', inter, points);
                }

                isInside = true;
              } else {
                if (!isInside) points.push(point);
              }

              lastPointOutside = point;
            });
            pointsHasChanged = true;
          }

          if (edge.fromCluster) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('edge', edge);

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('from cluster', clusterDb[edge.fromCluster]);

            var updatedPoints = [];

            var _lastPointOutside;

            var _isInside = false;

            for (var i = points.length - 1; i >= 0; i--) {
              var point = points[i];
              var node = clusterDb[edge.fromCluster].node;

              if (!outsideNode(node, point) && !_isInside) {
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('inside', edge.fromCluster, point, node); // First point inside the rect


                var insterection = intersection(node, _lastPointOutside, point); // log.trace('intersect', intersection(node, lastPointOutside, point));

                updatedPoints.unshift(insterection); // points.push(insterection);

                _isInside = true;
              } else {
                // at the outside
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('Outside point', point);

                if (!_isInside) updatedPoints.unshift(point);
              }

              _lastPointOutside = point;
            }

            points = updatedPoints;
            pointsHasChanged = true;
          } // The data for our line


          var lineData = points.filter(function (p) {
            return !Number.isNaN(p.y);
          }); // This is the accessor function we talked about above

          var lineFunction = Object(d3__WEBPACK_IMPORTED_MODULE_2__["line"])().x(function (d) {
            return d.x;
          }).y(function (d) {
            return d.y;
          }).curve(d3__WEBPACK_IMPORTED_MODULE_2__["curveBasis"]); // Contruct stroke classes based on properties

          var strokeClasses;

          switch (edge.thickness) {
            case 'normal':
              strokeClasses = 'edge-thickness-normal';
              break;

            case 'thick':
              strokeClasses = 'edge-thickness-thick';
              break;

            default:
              strokeClasses = '';
          }

          switch (edge.pattern) {
            case 'solid':
              strokeClasses += ' edge-pattern-solid';
              break;

            case 'dotted':
              strokeClasses += ' edge-pattern-dotted';
              break;

            case 'dashed':
              strokeClasses += ' edge-pattern-dashed';
              break;
          }

          var svgPath = elem.append('path').attr('d', lineFunction(lineData)).attr('id', edge.id).attr('class', ' ' + strokeClasses + (edge.classes ? ' ' + edge.classes : '')).attr('style', edge.style); // DEBUG code, adds a red circle at each edge coordinate
          // edge.points.forEach(point => {
          //   elem
          //     .append('circle')
          //     .style('stroke', 'red')
          //     .style('fill', 'red')
          //     .attr('r', 1)
          //     .attr('cx', point.x)
          //     .attr('cy', point.y);
          // });

          var url = '';

          if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().state.arrowMarkerAbsolute) {
            url = window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;
            url = url.replace(/\(/g, '\\(');
            url = url.replace(/\)/g, '\\)');
          }

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('arrowTypeStart', edge.arrowTypeStart);

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('arrowTypeEnd', edge.arrowTypeEnd);

          switch (edge.arrowTypeStart) {
            case 'arrow_cross':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-crossStart' + ')');
              break;

            case 'arrow_point':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-pointStart' + ')');
              break;

            case 'arrow_barb':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-barbStart' + ')');
              break;

            case 'arrow_circle':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-circleStart' + ')');
              break;

            case 'aggregation':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-aggregationStart' + ')');
              break;

            case 'extension':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-extensionStart' + ')');
              break;

            case 'composition':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-compositionStart' + ')');
              break;

            case 'dependency':
              svgPath.attr('marker-start', 'url(' + url + '#' + diagramType + '-dependencyStart' + ')');
              break;

            default:
          }

          switch (edge.arrowTypeEnd) {
            case 'arrow_cross':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-crossEnd' + ')');
              break;

            case 'arrow_point':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-pointEnd' + ')');
              break;

            case 'arrow_barb':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-barbEnd' + ')');
              break;

            case 'arrow_circle':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-circleEnd' + ')');
              break;

            case 'aggregation':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-aggregationEnd' + ')');
              break;

            case 'extension':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-extensionEnd' + ')');
              break;

            case 'composition':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-compositionEnd' + ')');
              break;

            case 'dependency':
              svgPath.attr('marker-end', 'url(' + url + '#' + diagramType + '-dependencyEnd' + ')');
              break;

            default:
          }

          var paths = {};

          if (pointsHasChanged) {
            paths.updatedPath = points;
          }

          paths.originalPath = edge.points;
          return paths;
        };
        /***/

      },

      /***/
      "./src/dagre-wrapper/index.js":
      /*!************************************!*\
        !*** ./src/dagre-wrapper/index.js ***!
        \************************************/

      /*! exports provided: render */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "render", function () {
          return render;
        });
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! dagre */
        "dagre");
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dagre__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _markers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./markers */
        "./src/dagre-wrapper/markers.js");
        /* harmony import */


        var _shapes_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./shapes/util */
        "./src/dagre-wrapper/shapes/util.js");
        /* harmony import */


        var _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./mermaid-graphlib */
        "./src/dagre-wrapper/mermaid-graphlib.js");
        /* harmony import */


        var _nodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./nodes */
        "./src/dagre-wrapper/nodes.js");
        /* harmony import */


        var _clusters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./clusters */
        "./src/dagre-wrapper/clusters.js");
        /* harmony import */


        var _edges__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ./edges */
        "./src/dagre-wrapper/edges.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");

        var recursiveRender = function recursiveRender(_elem, graph, diagramtype, parentCluster) {
          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Graph in recursive render: XXX', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph), parentCluster);

          var dir = graph.graph().rankdir;

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].warn('Dir in recursive render - dir:', dir);

          var elem = _elem.insert('g').attr('class', 'root'); // eslint-disable-line


          if (!graph.nodes()) {
            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('No nodes found for', graph);
          } else {
            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Recursive render XXX', graph.nodes());
          }

          if (graph.edges().length > 0) {
            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Recursive edges', graph.edge(graph.edges()[0]));
          }

          var clusters = elem.insert('g').attr('class', 'clusters'); // eslint-disable-line

          var edgePaths = elem.insert('g').attr('class', 'edgePaths');
          var edgeLabels = elem.insert('g').attr('class', 'edgeLabels');
          var nodes = elem.insert('g').attr('class', 'nodes'); // Insert nodes, this will insert them into the dom and each node will get a size. The size is updated
          // to the abstract node and is later used by dagre for the layout

          graph.nodes().forEach(function (v) {
            var node = graph.node(v);

            if (typeof parentCluster !== 'undefined') {
              var data = JSON.parse(JSON.stringify(parentCluster.clusterData)); // data.clusterPositioning = true;

              _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Setting data for cluster XXX (', v, ') ', data, parentCluster);

              graph.setNode(parentCluster.id, data);

              if (!graph.parent(v)) {
                _logger__WEBPACK_IMPORTED_MODULE_8__["log"].warn('Setting parent', v, parentCluster.id);

                graph.setParent(v, parentCluster.id, data);
              }
            }

            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('(Insert) Node XXX' + v + ': ' + JSON.stringify(graph.node(v)));

            if (node && node.clusterNode) {
              // const children = graph.children(v);
              _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Cluster identified', v, node, graph.node(v));

              var newEl = recursiveRender(nodes, node.graph, diagramtype, graph.node(v));
              Object(_shapes_util__WEBPACK_IMPORTED_MODULE_3__["updateNodeBounds"])(node, newEl);
              Object(_nodes__WEBPACK_IMPORTED_MODULE_5__["setNodeElem"])(newEl, node);

              _logger__WEBPACK_IMPORTED_MODULE_8__["log"].warn('Recursive render complete', newEl, node);
            } else {
              if (graph.children(v).length > 0) {
                // This is a cluster but not to be rendered recusively
                // Render as before
                _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Cluster - the non recursive path XXX', v, node.id, node, graph);

                _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info(Object(_mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["findNonClusterChild"])(node.id, graph));

                _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clusterDb"][node.id] = {
                  id: Object(_mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["findNonClusterChild"])(node.id, graph),
                  node: node
                }; // insertCluster(clusters, graph.node(v));
              } else {
                _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Node - the non recursive path', v, node.id, node);

                Object(_nodes__WEBPACK_IMPORTED_MODULE_5__["insertNode"])(nodes, graph.node(v), dir);
              }
            }
          }); // Insert labels, this will insert them into the dom so that the width can be calculated
          // Also figure out which edges point to/from clusters and adjust them accordingly
          // Edges from/to clusters really points to the first child in the cluster.
          // TODO: pick optimal child in the cluster to us as link anchor

          graph.edges().forEach(function (e) {
            var edge = graph.edge(e.v, e.w, e.name);

            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));

            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Edge ' + e.v + ' -> ' + e.w + ': ', e, ' ', JSON.stringify(graph.edge(e))); // Check if link is either from or to a cluster


            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Fix', _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clusterDb"], 'ids:', e.v, e.w, 'Translateing: ', _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clusterDb"][e.v], _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clusterDb"][e.w]);

            Object(_edges__WEBPACK_IMPORTED_MODULE_7__["insertEdgeLabel"])(edgeLabels, edge);
          });
          graph.edges().forEach(function (e) {
            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));
          });

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('#############################################');

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('###                Layout                 ###');

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('#############################################');

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info(graph);

          dagre__WEBPACK_IMPORTED_MODULE_0___default.a.layout(graph);

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Graph after layout:', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph)); // Move the nodes to the correct place


          Object(_mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["sortNodesByHierarchy"])(graph).forEach(function (v) {
            var node = graph.node(v);

            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Position ' + v + ': ' + JSON.stringify(graph.node(v)));

            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Position ' + v + ': (' + node.x, ',' + node.y, ') width: ', node.width, ' height: ', node.height);

            if (node && node.clusterNode) {
              // clusterDb[node.id].node = node;
              Object(_nodes__WEBPACK_IMPORTED_MODULE_5__["positionNode"])(node);
            } else {
              // Non cluster node
              if (graph.children(v).length > 0) {
                // A cluster in the non-recurive way
                // positionCluster(node);
                Object(_clusters__WEBPACK_IMPORTED_MODULE_6__["insertCluster"])(clusters, node);
                _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clusterDb"][node.id].node = node;
              } else {
                Object(_nodes__WEBPACK_IMPORTED_MODULE_5__["positionNode"])(node);
              }
            }
          }); // Move the edge labels to the correct place after layout

          graph.edges().forEach(function (e) {
            var edge = graph.edge(e);

            _logger__WEBPACK_IMPORTED_MODULE_8__["log"].info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(edge), edge);

            var paths = Object(_edges__WEBPACK_IMPORTED_MODULE_7__["insertEdge"])(edgePaths, e, edge, _mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clusterDb"], diagramtype, graph);
            Object(_edges__WEBPACK_IMPORTED_MODULE_7__["positionEdgeLabel"])(edge, paths);
          });
          return elem;
        };

        var render = function render(elem, graph, markers, diagramtype, id) {
          Object(_markers__WEBPACK_IMPORTED_MODULE_2__["default"])(elem, markers, diagramtype, id);
          Object(_nodes__WEBPACK_IMPORTED_MODULE_5__["clear"])();
          Object(_edges__WEBPACK_IMPORTED_MODULE_7__["clear"])();
          Object(_clusters__WEBPACK_IMPORTED_MODULE_6__["clear"])();
          Object(_mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["clear"])();

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].warn('Graph at first:', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph));

          Object(_mermaid_graphlib__WEBPACK_IMPORTED_MODULE_4__["adjustClustersAndEdges"])(graph);

          _logger__WEBPACK_IMPORTED_MODULE_8__["log"].warn('Graph after:', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph)); // log.warn('Graph ever  after:', graphlib.json.write(graph.node('A').graph));


          recursiveRender(elem, graph, diagramtype);
        }; // const shapeDefinitions = {};
        // export const addShape = ({ shapeType: fun }) => {
        //   shapeDefinitions[shapeType] = fun;
        // };
        // const arrowDefinitions = {};
        // export const addArrow = ({ arrowType: fun }) => {
        //   arrowDefinitions[arrowType] = fun;
        // };

        /***/

      },

      /***/
      "./src/dagre-wrapper/intersect/index.js":
      /*!**********************************************!*\
        !*** ./src/dagre-wrapper/intersect/index.js ***!
        \**********************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _intersect_node_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./intersect-node.js */
        "./src/dagre-wrapper/intersect/intersect-node.js");
        /* harmony import */


        var _intersect_node_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_intersect_node_js__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _intersect_circle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./intersect-circle.js */
        "./src/dagre-wrapper/intersect/intersect-circle.js");
        /* harmony import */


        var _intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./intersect-ellipse.js */
        "./src/dagre-wrapper/intersect/intersect-ellipse.js");
        /* harmony import */


        var _intersect_polygon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./intersect-polygon.js */
        "./src/dagre-wrapper/intersect/intersect-polygon.js");
        /* harmony import */


        var _intersect_rect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./intersect-rect.js */
        "./src/dagre-wrapper/intersect/intersect-rect.js");
        /*
         * Borrowed with love from from dagrge-d3. Many thanks to cpettitt!
         */

        /* harmony default export */


        __webpack_exports__["default"] = {
          node: _intersect_node_js__WEBPACK_IMPORTED_MODULE_0___default.a,
          circle: _intersect_circle_js__WEBPACK_IMPORTED_MODULE_1__["default"],
          ellipse: _intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_2__["default"],
          polygon: _intersect_polygon_js__WEBPACK_IMPORTED_MODULE_3__["default"],
          rect: _intersect_rect_js__WEBPACK_IMPORTED_MODULE_4__["default"]
        };
        /***/
      },

      /***/
      "./src/dagre-wrapper/intersect/intersect-circle.js":
      /*!*********************************************************!*\
        !*** ./src/dagre-wrapper/intersect/intersect-circle.js ***!
        \*********************************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _intersect_ellipse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./intersect-ellipse */
        "./src/dagre-wrapper/intersect/intersect-ellipse.js");

        function intersectCircle(node, rx, point) {
          return Object(_intersect_ellipse__WEBPACK_IMPORTED_MODULE_0__["default"])(node, rx, rx, point);
        }
        /* harmony default export */


        __webpack_exports__["default"] = intersectCircle;
        /***/
      },

      /***/
      "./src/dagre-wrapper/intersect/intersect-ellipse.js":
      /*!**********************************************************!*\
        !*** ./src/dagre-wrapper/intersect/intersect-ellipse.js ***!
        \**********************************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        function intersectEllipse(node, rx, ry, point) {
          // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html
          var cx = node.x;
          var cy = node.y;
          var px = cx - point.x;
          var py = cy - point.y;
          var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);
          var dx = Math.abs(rx * ry * px / det);

          if (point.x < cx) {
            dx = -dx;
          }

          var dy = Math.abs(rx * ry * py / det);

          if (point.y < cy) {
            dy = -dy;
          }

          return {
            x: cx + dx,
            y: cy + dy
          };
        }
        /* harmony default export */


        __webpack_exports__["default"] = intersectEllipse;
        /***/
      },

      /***/
      "./src/dagre-wrapper/intersect/intersect-line.js":
      /*!*******************************************************!*\
        !*** ./src/dagre-wrapper/intersect/intersect-line.js ***!
        \*******************************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /*
         * Returns the point at which two lines, p and q, intersect or returns
         * undefined if they do not intersect.
         */


        function intersectLine(p1, p2, q1, q2) {
          // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,
          // p7 and p473.
          var a1, a2, b1, b2, c1, c2;
          var r1, r2, r3, r4;
          var denom, offset, num;
          var x, y; // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +
          // b1 y + c1 = 0.

          a1 = p2.y - p1.y;
          b1 = p1.x - p2.x;
          c1 = p2.x * p1.y - p1.x * p2.y; // Compute r3 and r4.

          r3 = a1 * q1.x + b1 * q1.y + c1;
          r4 = a1 * q2.x + b1 * q2.y + c1; // Check signs of r3 and r4. If both point 3 and point 4 lie on
          // same side of line 1, the line segments do not intersect.

          if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {
            return;
          } // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0


          a2 = q2.y - q1.y;
          b2 = q1.x - q2.x;
          c2 = q2.x * q1.y - q1.x * q2.y; // Compute r1 and r2

          r1 = a2 * p1.x + b2 * p1.y + c2;
          r2 = a2 * p2.x + b2 * p2.y + c2; // Check signs of r1 and r2. If both point 1 and point 2 lie
          // on same side of second line segment, the line segments do
          // not intersect.

          if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {
            return;
          } // Line segments intersect: compute intersection point.


          denom = a1 * b2 - a2 * b1;

          if (denom === 0) {
            return;
          }

          offset = Math.abs(denom / 2); // The denom/2 is to get rounding instead of truncating. It
          // is added or subtracted to the numerator, depending upon the
          // sign of the numerator.

          num = b1 * c2 - b2 * c1;
          x = num < 0 ? (num - offset) / denom : (num + offset) / denom;
          num = a2 * c1 - a1 * c2;
          y = num < 0 ? (num - offset) / denom : (num + offset) / denom;
          return {
            x: x,
            y: y
          };
        }

        function sameSign(r1, r2) {
          return r1 * r2 > 0;
        }
        /* harmony default export */


        __webpack_exports__["default"] = intersectLine;
        /***/
      },

      /***/
      "./src/dagre-wrapper/intersect/intersect-node.js":
      /*!*******************************************************!*\
        !*** ./src/dagre-wrapper/intersect/intersect-node.js ***!
        \*******************************************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = intersectNode;

        function intersectNode(node, point) {
          // console.info('Intersect Node');
          return node.intersect(point);
        }
        /***/

      },

      /***/
      "./src/dagre-wrapper/intersect/intersect-polygon.js":
      /*!**********************************************************!*\
        !*** ./src/dagre-wrapper/intersect/intersect-polygon.js ***!
        \**********************************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _intersect_line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./intersect-line */
        "./src/dagre-wrapper/intersect/intersect-line.js");
        /* eslint "no-console": off */

        /* harmony default export */


        __webpack_exports__["default"] = intersectPolygon;
        /*
         * Returns the point ({x, y}) at which the point argument intersects with the
         * node argument assuming that it has the shape specified by polygon.
         */

        function intersectPolygon(node, polyPoints, point) {
          var x1 = node.x;
          var y1 = node.y;
          var intersections = [];
          var minX = Number.POSITIVE_INFINITY;
          var minY = Number.POSITIVE_INFINITY;

          if (typeof polyPoints.forEach === 'function') {
            polyPoints.forEach(function (entry) {
              minX = Math.min(minX, entry.x);
              minY = Math.min(minY, entry.y);
            });
          } else {
            minX = Math.min(minX, polyPoints.x);
            minY = Math.min(minY, polyPoints.y);
          }

          var left = x1 - node.width / 2 - minX;
          var top = y1 - node.height / 2 - minY;

          for (var i = 0; i < polyPoints.length; i++) {
            var p1 = polyPoints[i];
            var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];
            var intersect = Object(_intersect_line__WEBPACK_IMPORTED_MODULE_0__["default"])(node, point, {
              x: left + p1.x,
              y: top + p1.y
            }, {
              x: left + p2.x,
              y: top + p2.y
            });

            if (intersect) {
              intersections.push(intersect);
            }
          }

          if (!intersections.length) {
            // console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);
            return node;
          }

          if (intersections.length > 1) {
            // More intersections, find the one nearest to edge end point
            intersections.sort(function (p, q) {
              var pdx = p.x - point.x;
              var pdy = p.y - point.y;
              var distp = Math.sqrt(pdx * pdx + pdy * pdy);
              var qdx = q.x - point.x;
              var qdy = q.y - point.y;
              var distq = Math.sqrt(qdx * qdx + qdy * qdy);
              return distp < distq ? -1 : distp === distq ? 0 : 1;
            });
          }

          return intersections[0];
        }
        /***/

      },

      /***/
      "./src/dagre-wrapper/intersect/intersect-rect.js":
      /*!*******************************************************!*\
        !*** ./src/dagre-wrapper/intersect/intersect-rect.js ***!
        \*******************************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var intersectRect = function intersectRect(node, point) {
          var x = node.x;
          var y = node.y; // Rectangle intersection algorithm from:
          // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes

          var dx = point.x - x;
          var dy = point.y - y;
          var w = node.width / 2;
          var h = node.height / 2;
          var sx, sy;

          if (Math.abs(dy) * w > Math.abs(dx) * h) {
            // Intersection is top or bottom of rect.
            if (dy < 0) {
              h = -h;
            }

            sx = dy === 0 ? 0 : h * dx / dy;
            sy = h;
          } else {
            // Intersection is left or right of rect.
            if (dx < 0) {
              w = -w;
            }

            sx = w;
            sy = dx === 0 ? 0 : w * dy / dx;
          }

          return {
            x: x + sx,
            y: y + sy
          };
        };
        /* harmony default export */


        __webpack_exports__["default"] = intersectRect;
        /***/
      },

      /***/
      "./src/dagre-wrapper/markers.js":
      /*!**************************************!*\
        !*** ./src/dagre-wrapper/markers.js ***!
        \**************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");
        /**
         * Setup arrow head and define the marker. The result is appended to the svg.
         */
        // Only add the number of markers that the diagram needs


        var insertMarkers = function insertMarkers(elem, markerArray, type, id) {
          markerArray.forEach(function (markerName) {
            markers[markerName](elem, type, id);
          });
        };

        var extension = function extension(elem, type, id) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('Making markers for ', id);

          elem.append('defs').append('marker').attr('id', type + '-extensionStart').attr('class', 'marker extension ' + type).attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 1,7 L18,13 V 1 Z');
          elem.append('defs').append('marker').attr('id', type + '-extensionEnd').attr('class', 'marker extension ' + type).attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 1,1 V 13 L18,7 Z'); // this is actual shape for arrowhead
        };

        var composition = function composition(elem, type) {
          elem.append('defs').append('marker').attr('id', type + '-compositionStart').attr('class', 'marker composition ' + type).attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', type + '-compositionEnd').attr('class', 'marker composition ' + type).attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
        };

        var aggregation = function aggregation(elem, type) {
          elem.append('defs').append('marker').attr('id', type + '-aggregationStart').attr('class', 'marker aggregation ' + type).attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', type + '-aggregationEnd').attr('class', 'marker aggregation ' + type).attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
        };

        var dependency = function dependency(elem, type) {
          elem.append('defs').append('marker').attr('id', type + '-dependencyStart').attr('class', 'marker dependency ' + type).attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 5,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', type + '-dependencyEnd').attr('class', 'marker dependency ' + type).attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');
        };

        var point = function point(elem, type) {
          elem.append('marker').attr('id', type + '-pointEnd').attr('class', 'marker ' + type).attr('viewBox', '0 0 10 10').attr('refX', 9).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 12).attr('markerHeight', 12).attr('orient', 'auto').append('path').attr('d', 'M 0 0 L 10 5 L 0 10 z').attr('class', 'arrowMarkerPath').style('stroke-width', 1).style('stroke-dasharray', '1,0');
          elem.append('marker').attr('id', type + '-pointStart').attr('class', 'marker ' + type).attr('viewBox', '0 0 10 10').attr('refX', 0).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 12).attr('markerHeight', 12).attr('orient', 'auto').append('path').attr('d', 'M 0 5 L 10 10 L 10 0 z').attr('class', 'arrowMarkerPath').style('stroke-width', 1).style('stroke-dasharray', '1,0');
        };

        var circle = function circle(elem, type) {
          elem.append('marker').attr('id', type + '-circleEnd').attr('class', 'marker ' + type).attr('viewBox', '0 0 10 10').attr('refX', 11).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 11).attr('markerHeight', 11).attr('orient', 'auto').append('circle').attr('cx', '5').attr('cy', '5').attr('r', '5').attr('class', 'arrowMarkerPath').style('stroke-width', 1).style('stroke-dasharray', '1,0');
          elem.append('marker').attr('id', type + '-circleStart').attr('class', 'marker ' + type).attr('viewBox', '0 0 10 10').attr('refX', -1).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 11).attr('markerHeight', 11).attr('orient', 'auto').append('circle').attr('cx', '5').attr('cy', '5').attr('r', '5').attr('class', 'arrowMarkerPath').style('stroke-width', 1).style('stroke-dasharray', '1,0');
        };

        var cross = function cross(elem, type) {
          elem.append('marker').attr('id', type + '-crossEnd').attr('class', 'marker cross ' + type).attr('viewBox', '0 0 11 11').attr('refX', 12).attr('refY', 5.2).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 11).attr('markerHeight', 11).attr('orient', 'auto').append('path') // .attr('stroke', 'black')
          .attr('d', 'M 1,1 l 9,9 M 10,1 l -9,9').attr('class', 'arrowMarkerPath').style('stroke-width', 2).style('stroke-dasharray', '1,0');
          elem.append('marker').attr('id', type + '-crossStart').attr('class', 'marker cross ' + type).attr('viewBox', '0 0 11 11').attr('refX', -1).attr('refY', 5.2).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 11).attr('markerHeight', 11).attr('orient', 'auto').append('path') // .attr('stroke', 'black')
          .attr('d', 'M 1,1 l 9,9 M 10,1 l -9,9').attr('class', 'arrowMarkerPath').style('stroke-width', 2).style('stroke-dasharray', '1,0');
        };

        var barb = function barb(elem, type) {
          elem.append('defs').append('marker').attr('id', type + '-barbEnd').attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 14).attr('markerUnits', 'strokeWidth').attr('orient', 'auto').append('path').attr('d', 'M 19,7 L9,13 L14,7 L9,1 Z');
        }; // TODO rename the class diagram markers to something shape descriptive and semanitc free


        var markers = {
          extension: extension,
          composition: composition,
          aggregation: aggregation,
          dependency: dependency,
          point: point,
          circle: circle,
          cross: cross,
          barb: barb
        };
        /* harmony default export */

        __webpack_exports__["default"] = insertMarkers;
        /***/
      },

      /***/
      "./src/dagre-wrapper/mermaid-graphlib.js":
      /*!***********************************************!*\
        !*** ./src/dagre-wrapper/mermaid-graphlib.js ***!
        \***********************************************/

      /*! exports provided: clusterDb, clear, extractDecendants, validate, findNonClusterChild, adjustClustersAndEdges, extractor, sortNodesByHierarchy */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clusterDb", function () {
          return clusterDb;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "extractDecendants", function () {
          return extractDecendants;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "validate", function () {
          return validate;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "findNonClusterChild", function () {
          return findNonClusterChild;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "adjustClustersAndEdges", function () {
          return adjustClustersAndEdges;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "extractor", function () {
          return extractor;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "sortNodesByHierarchy", function () {
          return sortNodesByHierarchy;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_1__);
        /**
         * Decorates with functions required by mermaids dagre-wrapper.
         */


        var clusterDb = {};
        var decendants = {};
        var parents = {};

        var clear = function clear() {
          decendants = {};
          parents = {};
          clusterDb = {};
        };

        var isDecendant = function isDecendant(id, ancenstorId) {
          // if (id === ancenstorId) return true;
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('In isDecendant', ancenstorId, ' ', id, ' = ', decendants[ancenstorId].indexOf(id) >= 0);

          if (decendants[ancenstorId].indexOf(id) >= 0) return true;
          return false;
        };

        var edgeInCluster = function edgeInCluster(edge, clusterId) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Decendants of ', clusterId, ' is ', decendants[clusterId]);

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Edge is ', edge); // Edges to/from the cluster is not in the cluster, they are in the parent


          if (edge.v === clusterId) return false;
          if (edge.w === clusterId) return false;

          if (!decendants[clusterId]) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Tilt, ', clusterId, ',not in decendants');

            return false;
          }

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Here ');

          if (decendants[clusterId].indexOf(edge.v) >= 0) return true;
          if (isDecendant(edge.v, clusterId)) return true;
          if (isDecendant(edge.w, clusterId)) return true;
          if (decendants[clusterId].indexOf(edge.w) >= 0) return true;
          return false;
        };

        var copy = function copy(clusterId, graph, newGraph, rootId) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Copying children of ', clusterId, 'root', rootId, 'data', graph.node(clusterId), rootId);

          var nodes = graph.children(clusterId) || []; // Include cluster node if it is not the root

          if (clusterId !== rootId) {
            nodes.push(clusterId);
          }

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Copying (nodes) clusterId', clusterId, 'nodes', nodes);

          nodes.forEach(function (node) {
            if (graph.children(node).length > 0) {
              copy(node, graph, newGraph, rootId);
            } else {
              var data = graph.node(node);

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('cp ', node, ' to ', rootId, ' with parent ', clusterId); //,node, data, ' parent is ', clusterId);


              newGraph.setNode(node, data);

              if (rootId !== graph.parent(node)) {
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Setting parent', node, graph.parent(node));

                newGraph.setParent(node, graph.parent(node));
              }

              if (clusterId !== rootId && node !== clusterId) {
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Setting parent', node, clusterId);

                newGraph.setParent(node, clusterId);
              } else {
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('In copy ', clusterId, 'root', rootId, 'data', graph.node(clusterId), rootId);

                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Not Setting parent for node=', node, 'cluster!==rootId', clusterId !== rootId, 'node!==clusterId', node !== clusterId);
              }

              var edges = graph.edges(node);

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Copying Edges', edges);

              edges.forEach(function (edge) {
                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Edge', edge);

                var data = graph.edge(edge.v, edge.w, edge.name);

                _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Edge data', data, rootId);

                try {
                  // Do not copy edges in and out of the root cluster, they belong to the parent graph
                  if (edgeInCluster(edge, rootId)) {
                    _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Copying as ', edge.v, edge.w, data, edge.name);

                    newGraph.setEdge(edge.v, edge.w, data, edge.name);

                    _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('newGraph edges ', newGraph.edges(), newGraph.edge(newGraph.edges()[0]));
                  } else {
                    _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Skipping copy of edge ', edge.v, '-->', edge.w, ' rootId: ', rootId, ' clusterId:', clusterId);
                  }
                } catch (e) {
                  _logger__WEBPACK_IMPORTED_MODULE_0__["log"].error(e);
                }
              });
            }

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Removing node', node);

            graph.removeNode(node);
          });
        };

        var extractDecendants = function extractDecendants(id, graph) {
          // log.debug('Extracting ', id);
          var children = graph.children(id);
          var res = [].concat(children);

          for (var i = 0; i < children.length; i++) {
            parents[children[i]] = id;
            res = res.concat(extractDecendants(children[i], graph));
          }

          return res;
        };
        /**
         * Validates the graph, checking that all parent child relation points to existing nodes and that
         * edges between nodes also ia correct. When not correct the function logs the discrepancies.
         * @param {graphlib graph} g
         */


        var validate = function validate(graph) {
          var edges = graph.edges();

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('Edges: ', edges);

          for (var i = 0; i < edges.length; i++) {
            if (graph.children(edges[i].v).length > 0) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('The node ', edges[i].v, ' is part of and edge even though it has children');

              return false;
            }

            if (graph.children(edges[i].w).length > 0) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('The node ', edges[i].w, ' is part of and edge even though it has children');

              return false;
            }
          }

          return true;
        };
        /**
         * Finds a child that is not a cluster. When faking a edge between a node and a cluster.
         * @param {Finds a } id
         * @param {*} graph
         */


        var findNonClusterChild = function findNonClusterChild(id, graph) {
          // const node = graph.node(id);
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('Searching', id); // const children = graph.children(id).reverse();


          var children = graph.children(id); //.reverse();

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('Searching children of id ', id, children);

          if (children.length < 1) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('This is a valid node', id);

            return id;
          }

          for (var i = 0; i < children.length; i++) {
            var _id = findNonClusterChild(children[i], graph);

            if (_id) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace('Found replacement for', id, ' => ', _id);

              return _id;
            }
          }
        };

        var getAnchorId = function getAnchorId(id) {
          if (!clusterDb[id]) {
            return id;
          } // If the cluster has no external connections


          if (!clusterDb[id].externalConnections) {
            return id;
          } // Return the replacement node


          if (clusterDb[id]) {
            return clusterDb[id].id;
          }

          return id;
        };

        var adjustClustersAndEdges = function adjustClustersAndEdges(graph, depth) {
          if (!graph || depth > 10) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Opting out, no graph ');

            return;
          } else {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Opting in, graph ');
          } // Go through the nodes and for each cluster found, save a replacment node, this can be used when
          // faking a link to a cluster


          graph.nodes().forEach(function (id) {
            var children = graph.children(id);

            if (children.length > 0) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Cluster identified', id, ' Replacement id in edges: ', findNonClusterChild(id, graph));

              decendants[id] = extractDecendants(id, graph);
              clusterDb[id] = {
                id: findNonClusterChild(id, graph),
                clusterData: graph.node(id)
              };
            }
          }); // Check incoming and outgoing edges for each cluster

          graph.nodes().forEach(function (id) {
            var children = graph.children(id);
            var edges = graph.edges();

            if (children.length > 0) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Cluster identified', id, decendants);

              edges.forEach(function (edge) {
                // log.debug('Edge, decendants: ', edge, decendants[id]);
                // Check if any edge leaves the cluster (not the actual cluster, thats a link from the box)
                if (edge.v !== id && edge.w !== id) {
                  // Any edge where either the one of the nodes is decending to the cluster but not the other
                  // if (decendants[id].indexOf(edge.v) < 0 && decendants[id].indexOf(edge.w) < 0) {
                  var d1 = isDecendant(edge.v, id);
                  var d2 = isDecendant(edge.w, id); // d1 xor d2 - if either d1 is true and d2 is false or the other way around

                  if (d1 ^ d2) {
                    _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Edge: ', edge, ' leaves cluster ', id);

                    _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Decendants of XXX ', id, ': ', decendants[id]);

                    clusterDb[id].externalConnections = true;
                  }
                }
              });
            } else {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Not a cluster ', id, decendants);
            }
          }); // For clusters with incoming and/or outgoing edges translate those edges to a real node
          // in the cluster inorder to fake the edge

          graph.edges().forEach(function (e) {
            var edge = graph.edge(e);

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));

            var v = e.v;
            var w = e.w; // Check if link is either from or to a cluster

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Fix XXX', clusterDb, 'ids:', e.v, e.w, 'Translateing: ', clusterDb[e.v], ' --- ', clusterDb[e.w]);

            if (clusterDb[e.v] || clusterDb[e.w]) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);

              v = getAnchorId(e.v);
              w = getAnchorId(e.w);
              graph.removeEdge(e.v, e.w, e.name);
              if (v !== e.v) edge.fromCluster = e.v;
              if (w !== e.w) edge.toCluster = e.w;

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Fix Replacing with XXX', v, w, e.name);

              graph.setEdge(v, w, edge, e.name);
            }
          });

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Adjusted Graph', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph));

          extractor(graph, 0);

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].trace(clusterDb); // Remove references to extracted cluster
          // graph.edges().forEach(edge => {
          //   if (isDecendant(edge.v, clusterId) || isDecendant(edge.w, clusterId)) {
          //     graph.removeEdge(edge);
          //   }
          // });

        };

        var extractor = function extractor(graph, depth) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('extractor - ', depth, graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph), graph.children('D'));

          if (depth > 10) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].error('Bailing out');

            return;
          } // For clusters without incoming and/or outgoing edges, create a new cluster-node
          // containing the nodes and edges in the custer in a new graph
          // for (let i = 0;)


          var nodes = graph.nodes();
          var hasChildren = false;

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var children = graph.children(node);
            hasChildren = hasChildren || children.length > 0;
          }

          if (!hasChildren) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Done, no node has children', graph.nodes());

            return;
          } // const clusters = Object.keys(clusterDb);
          // clusters.forEach(clusterId => {


          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Nodes = ', nodes, depth);

          for (var _i = 0; _i < nodes.length; _i++) {
            var _node = nodes[_i];

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Extracting node', _node, clusterDb, clusterDb[_node] && !clusterDb[_node].externalConnections, !graph.parent(_node), graph.node(_node), graph.children('D'), ' Depth ', depth); // Note that the node might have been removed after the Object.keys call so better check
            // that it still is in the game


            if (!clusterDb[_node]) {
              // Skip if the node is not a cluster
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Not a cluster', _node, depth); // break;

            } else if (!clusterDb[_node].externalConnections && // !graph.parent(node) &&
            graph.children(_node) && graph.children(_node).length > 0) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Cluster without external connections, without a parent and with children', _node, depth);

              var graphSettings = graph.graph();
              var clusterGraph = new graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.Graph({
                multigraph: true,
                compound: true
              }).setGraph({
                rankdir: graphSettings.rankdir === 'TB' ? 'LR' : 'TB',
                // Todo: set proper spacing
                nodesep: 50,
                ranksep: 50,
                marginx: 8,
                marginy: 8
              }).setDefaultEdgeLabel(function () {
                return {};
              });

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Old graph before copy', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph));

              copy(_node, graph, clusterGraph, _node);
              graph.setNode(_node, {
                clusterNode: true,
                id: _node,
                clusterData: clusterDb[_node].clusterData,
                labelText: clusterDb[_node].labelText,
                graph: clusterGraph
              });

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('New graph after copy node: (', _node, ')', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(clusterGraph));

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Old graph after copy', graphlib__WEBPACK_IMPORTED_MODULE_1___default.a.json.write(graph));
            } else {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('Cluster ** ', _node, ' **not meeting the criteria !externalConnections:', !clusterDb[_node].externalConnections, ' no parent: ', !graph.parent(_node), ' children ', graph.children(_node) && graph.children(_node).length > 0, graph.children('D'), depth);

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(clusterDb);
            }
          }

          nodes = graph.nodes();

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn('New list of nodes', nodes);

          for (var _i2 = 0; _i2 < nodes.length; _i2++) {
            var _node2 = nodes[_i2];
            var data = graph.node(_node2);

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].warn(' Now next level', _node2, data);

            if (data.clusterNode) {
              extractor(data.graph, depth + 1);
            }
          }
        };

        var sorter = function sorter(graph, nodes) {
          if (nodes.length === 0) return [];
          var result = Object.assign(nodes);
          nodes.forEach(function (node) {
            var children = graph.children(node);
            var sorted = sorter(graph, children);
            result = result.concat(sorted);
          });
          return result;
        };

        var sortNodesByHierarchy = function sortNodesByHierarchy(graph) {
          return sorter(graph, graph.children());
        };
        /***/

      },

      /***/
      "./src/dagre-wrapper/nodes.js":
      /*!************************************!*\
        !*** ./src/dagre-wrapper/nodes.js ***!
        \************************************/

      /*! exports provided: insertNode, setNodeElem, clear, positionNode */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertNode", function () {
          return insertNode;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setNodeElem", function () {
          return setNodeElem;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "positionNode", function () {
          return positionNode;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../logger */
        "./src/logger.js");
        /* harmony import */


        var _shapes_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./shapes/util */
        "./src/dagre-wrapper/shapes/util.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../config */
        "./src/config.js");
        /* harmony import */


        var _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./intersect/index.js */
        "./src/dagre-wrapper/intersect/index.js");
        /* harmony import */


        var _createLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./createLabel */
        "./src/dagre-wrapper/createLabel.js");
        /* harmony import */


        var _shapes_note__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./shapes/note */
        "./src/dagre-wrapper/shapes/note.js");
        /* harmony import */


        var _diagrams_class_svgDraw__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../diagrams/class/svgDraw */
        "./src/diagrams/class/svgDraw.js"); // eslint-disable-line


        var question = function question(parent, node) {
          var _labelHelper = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper.shapeSvg,
              bbox = _labelHelper.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var s = w + h;
          var points = [{
            x: s / 2,
            y: 0
          }, {
            x: s,
            y: -s / 2
          }, {
            x: s / 2,
            y: -s
          }, {
            x: 0,
            y: -s / 2
          }];

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Question main (Circle)');

          var questionElem = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, s, s, points);
          questionElem.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, questionElem);

          node.intersect = function (point) {
            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].warn('Intersect called');

            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var hexagon = function hexagon(parent, node) {
          var _labelHelper2 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper2.shapeSvg,
              bbox = _labelHelper2.bbox;

          var f = 4;
          var h = bbox.height + node.padding;
          var m = h / f;
          var w = bbox.width + 2 * m + node.padding;
          var points = [{
            x: m,
            y: 0
          }, {
            x: w - m,
            y: 0
          }, {
            x: w,
            y: -h / 2
          }, {
            x: w - m,
            y: -h
          }, {
            x: m,
            y: -h
          }, {
            x: 0,
            y: -h / 2
          }];
          var hex = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          hex.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, hex);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var rect_left_inv_arrow = function rect_left_inv_arrow(parent, node) {
          var _labelHelper3 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper3.shapeSvg,
              bbox = _labelHelper3.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: -h / 2,
            y: 0
          }, {
            x: w,
            y: 0
          }, {
            x: w,
            y: -h
          }, {
            x: -h / 2,
            y: -h
          }, {
            x: 0,
            y: -h / 2
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          node.width = w + h;
          node.height = h;

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var lean_right = function lean_right(parent, node) {
          var _labelHelper4 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper4.shapeSvg,
              bbox = _labelHelper4.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: -2 * h / 6,
            y: 0
          }, {
            x: w - h / 6,
            y: 0
          }, {
            x: w + 2 * h / 6,
            y: -h
          }, {
            x: h / 6,
            y: -h
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var lean_left = function lean_left(parent, node) {
          var _labelHelper5 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper5.shapeSvg,
              bbox = _labelHelper5.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: 2 * h / 6,
            y: 0
          }, {
            x: w + h / 6,
            y: 0
          }, {
            x: w - 2 * h / 6,
            y: -h
          }, {
            x: -h / 6,
            y: -h
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var trapezoid = function trapezoid(parent, node) {
          var _labelHelper6 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper6.shapeSvg,
              bbox = _labelHelper6.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: -2 * h / 6,
            y: 0
          }, {
            x: w + 2 * h / 6,
            y: 0
          }, {
            x: w - h / 6,
            y: -h
          }, {
            x: h / 6,
            y: -h
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var inv_trapezoid = function inv_trapezoid(parent, node) {
          var _labelHelper7 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper7.shapeSvg,
              bbox = _labelHelper7.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: h / 6,
            y: 0
          }, {
            x: w - h / 6,
            y: 0
          }, {
            x: w + 2 * h / 6,
            y: -h
          }, {
            x: -2 * h / 6,
            y: -h
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var rect_right_inv_arrow = function rect_right_inv_arrow(parent, node) {
          var _labelHelper8 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper8.shapeSvg,
              bbox = _labelHelper8.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: 0,
            y: 0
          }, {
            x: w + h / 2,
            y: 0
          }, {
            x: w,
            y: -h / 2
          }, {
            x: w + h / 2,
            y: -h
          }, {
            x: 0,
            y: -h
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var cylinder = function cylinder(parent, node) {
          var _labelHelper9 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper9.shapeSvg,
              bbox = _labelHelper9.bbox;

          var w = bbox.width + node.padding;
          var rx = w / 2;
          var ry = rx / (2.5 + w / 50);
          var h = bbox.height + ry + node.padding;
          var shape = 'M 0,' + ry + ' a ' + rx + ',' + ry + ' 0,0,0 ' + w + ' 0 a ' + rx + ',' + ry + ' 0,0,0 ' + -w + ' 0 l 0,' + h + ' a ' + rx + ',' + ry + ' 0,0,0 ' + w + ' 0 l 0,' + -h;
          var el = shapeSvg.attr('label-offset-y', ry).insert('path', ':first-child').attr('style', node.style).attr('d', shape).attr('transform', 'translate(' + -w / 2 + ',' + -(h / 2 + ry) + ')');
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            var pos = _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].rect(node, point);

            var x = pos.x - node.x;

            if (rx != 0 && (Math.abs(x) < node.width / 2 || Math.abs(x) == node.width / 2 && Math.abs(pos.y - node.y) > node.height / 2 - ry)) {
              // ellipsis equation: x*x / a*a + y*y / b*b = 1
              // solve for y to get adjustion value for pos.y
              var y = ry * ry * (1 - x * x / (rx * rx));
              if (y != 0) y = Math.sqrt(y);
              y = ry - y;
              if (point.y - node.y > 0) y = -y;
              pos.y += y;
            }

            return pos;
          };

          return shapeSvg;
        };

        var rect = function rect(parent, node) {
          var _labelHelper10 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, 'node ' + node.classes, true),
              shapeSvg = _labelHelper10.shapeSvg,
              bbox = _labelHelper10.bbox,
              halfPadding = _labelHelper10.halfPadding;

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].trace('Classes = ', node.classes); // add the rect


          var rect = shapeSvg.insert('rect', ':first-child');
          rect.attr('class', 'basic label-container').attr('style', node.style).attr('rx', node.rx).attr('ry', node.ry).attr('x', -bbox.width / 2 - halfPadding).attr('y', -bbox.height / 2 - halfPadding).attr('width', bbox.width + node.padding).attr('height', bbox.height + node.padding);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, rect);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].rect(node, point);
          };

          return shapeSvg;
        };

        var rectWithTitle = function rectWithTitle(parent, node) {
          // const { shapeSvg, bbox, halfPadding } = labelHelper(parent, node, 'node ' + node.classes);
          var classes;

          if (!node.classes) {
            classes = 'node default';
          } else {
            classes = 'node ' + node.classes;
          } // Add outer g element


          var shapeSvg = parent.insert('g').attr('class', classes).attr('id', node.domId || node.id); // Create the title label and insert it after the rect

          var rect = shapeSvg.insert('rect', ':first-child'); // const innerRect = shapeSvg.insert('rect');

          var innerLine = shapeSvg.insert('line');
          var label = shapeSvg.insert('g').attr('class', 'label');
          var text2 = node.labelText.flat();

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Label text', text2[0]);

          var text = label.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_5__["default"])(text2[0], node.labelStyle, true, true));
          var bbox;

          if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
            var div = text.children[0];
            var dv = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(text);
            bbox = div.getBoundingClientRect();
            dv.attr('width', bbox.width);
            dv.attr('height', bbox.height);
          }

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Text 2', text2);

          var textRows = text2.slice(1, text2.length);
          var titleBox = text.getBBox();
          var descr = label.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_5__["default"])(textRows.join('<br/>'), node.labelStyle, true, true));

          if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
            var _div = descr.children[0];

            var _dv = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(descr);

            bbox = _div.getBoundingClientRect();

            _dv.attr('width', bbox.width);

            _dv.attr('height', bbox.height);
          } // bbox = label.getBBox();
          // log.info(descr);


          var halfPadding = node.padding / 2;
          Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(descr).attr('transform', 'translate( ' + ( // (titleBox.width - bbox.width) / 2 +
          bbox.width > titleBox.width ? 0 : (titleBox.width - bbox.width) / 2) + ', ' + (titleBox.height + halfPadding + 5) + ')');
          Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(text).attr('transform', 'translate( ' + ( // (titleBox.width - bbox.width) / 2 +
          bbox.width < titleBox.width ? 0 : -(titleBox.width - bbox.width) / 2) + ', ' + 0 + ')'); // Get the size of the label
          // Bounding box for title and text

          bbox = label.node().getBBox(); // Center the label

          label.attr('transform', 'translate(' + -bbox.width / 2 + ', ' + (-bbox.height / 2 - halfPadding + 3) + ')');
          rect.attr('class', 'outer title-state').attr('x', -bbox.width / 2 - halfPadding).attr('y', -bbox.height / 2 - halfPadding).attr('width', bbox.width + node.padding).attr('height', bbox.height + node.padding);
          innerLine.attr('class', 'divider').attr('x1', -bbox.width / 2 - halfPadding).attr('x2', bbox.width / 2 + halfPadding).attr('y1', -bbox.height / 2 - halfPadding + titleBox.height + halfPadding).attr('y2', -bbox.height / 2 - halfPadding + titleBox.height + halfPadding);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, rect);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].rect(node, point);
          };

          return shapeSvg;
        };

        var stadium = function stadium(parent, node) {
          var _labelHelper11 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper11.shapeSvg,
              bbox = _labelHelper11.bbox;

          var h = bbox.height + node.padding;
          var w = bbox.width + h / 4 + node.padding; // add the rect

          var rect = shapeSvg.insert('rect', ':first-child').attr('style', node.style).attr('rx', h / 2).attr('ry', h / 2).attr('x', -w / 2).attr('y', -h / 2).attr('width', w).attr('height', h);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, rect);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].rect(node, point);
          };

          return shapeSvg;
        };

        var circle = function circle(parent, node) {
          var _labelHelper12 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper12.shapeSvg,
              bbox = _labelHelper12.bbox,
              halfPadding = _labelHelper12.halfPadding;

          var circle = shapeSvg.insert('circle', ':first-child'); // center the circle around its coordinate

          circle.attr('style', node.style).attr('rx', node.rx).attr('ry', node.ry).attr('r', bbox.width / 2 + halfPadding).attr('width', bbox.width + node.padding).attr('height', bbox.height + node.padding);

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Circle main');

          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, circle);

          node.intersect = function (point) {
            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Circle intersect', node, bbox.width / 2 + halfPadding, point);

            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].circle(node, bbox.width / 2 + halfPadding, point);
          };

          return shapeSvg;
        };

        var subroutine = function subroutine(parent, node) {
          var _labelHelper13 = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["labelHelper"])(parent, node, undefined, true),
              shapeSvg = _labelHelper13.shapeSvg,
              bbox = _labelHelper13.bbox;

          var w = bbox.width + node.padding;
          var h = bbox.height + node.padding;
          var points = [{
            x: 0,
            y: 0
          }, {
            x: w,
            y: 0
          }, {
            x: w,
            y: -h
          }, {
            x: 0,
            y: -h
          }, {
            x: 0,
            y: 0
          }, {
            x: -8,
            y: 0
          }, {
            x: w + 8,
            y: 0
          }, {
            x: w + 8,
            y: -h
          }, {
            x: -8,
            y: -h
          }, {
            x: -8,
            y: 0
          }];
          var el = Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["insertPolygonShape"])(shapeSvg, w, h, points);
          el.attr('style', node.style);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, el);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].polygon(node, points, point);
          };

          return shapeSvg;
        };

        var start = function start(parent, node) {
          var shapeSvg = parent.insert('g').attr('class', 'node default').attr('id', node.domId || node.id);
          var circle = shapeSvg.insert('circle', ':first-child'); // center the circle around its coordinate

          circle.attr('class', 'state-start').attr('r', 7).attr('width', 14).attr('height', 14);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, circle);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].circle(node, 7, point);
          };

          return shapeSvg;
        };

        var forkJoin = function forkJoin(parent, node, dir) {
          var shapeSvg = parent.insert('g').attr('class', 'node default').attr('id', node.domId || node.id);
          var width = 70;
          var height = 10;

          if (dir === 'LR') {
            width = 10;
            height = 70;
          }

          var shape = shapeSvg.append('rect').style('stroke', 'black').style('fill', 'black').attr('x', -1 * width / 2).attr('y', -1 * height / 2).attr('width', width).attr('height', height).attr('class', 'fork-join');
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, shape);
          node.height = node.height + node.padding / 2;
          node.width = node.width + node.padding / 2;

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].rect(node, point);
          };

          return shapeSvg;
        };

        var end = function end(parent, node) {
          var shapeSvg = parent.insert('g').attr('class', 'node default').attr('id', node.domId || node.id);
          var innerCircle = shapeSvg.insert('circle', ':first-child');
          var circle = shapeSvg.insert('circle', ':first-child');
          circle.attr('class', 'state-start').attr('r', 7).attr('width', 14).attr('height', 14);
          innerCircle.attr('class', 'state-end').attr('r', 5).attr('width', 10).attr('height', 10);
          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, circle);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].circle(node, 7, point);
          };

          return shapeSvg;
        };

        var class_box = function class_box(parent, node) {
          var halfPadding = node.padding / 2;
          var rowPadding = 4;
          var lineHeight = 8;
          var classes;

          if (!node.classes) {
            classes = 'node default';
          } else {
            classes = 'node ' + node.classes;
          } // Add outer g element


          var shapeSvg = parent.insert('g').attr('class', classes).attr('id', node.domId || node.id); // Create the title label and insert it after the rect

          var rect = shapeSvg.insert('rect', ':first-child');
          var topLine = shapeSvg.insert('line');
          var bottomLine = shapeSvg.insert('line');
          var maxWidth = 0;
          var maxHeight = rowPadding;
          var labelContainer = shapeSvg.insert('g').attr('class', 'label');
          var verticalPos = 0;
          var hasInterface = node.classData.annotations && node.classData.annotations[0]; // 1. Create the labels

          var interfaceLabelText = node.classData.annotations[0] ? '«' + node.classData.annotations[0] + '»' : '';
          var interfaceLabel = labelContainer.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_5__["default"])(interfaceLabelText, node.labelStyle, true, true));
          var interfaceBBox = interfaceLabel.getBBox();

          if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
            var div = interfaceLabel.children[0];
            var dv = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(interfaceLabel);
            interfaceBBox = div.getBoundingClientRect();
            dv.attr('width', interfaceBBox.width);
            dv.attr('height', interfaceBBox.height);
          }

          if (node.classData.annotations[0]) {
            maxHeight += interfaceBBox.height + rowPadding;
            maxWidth += interfaceBBox.width;
          }

          var classTitleString = node.classData.id;

          if (node.classData.type !== undefined && node.classData.type !== '') {
            classTitleString += '<' + node.classData.type + '>';
          }

          var classTitleLabel = labelContainer.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_5__["default"])(classTitleString, node.labelStyle, true, true));
          Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(classTitleLabel).attr('class', 'classTitle');
          var classTitleBBox = classTitleLabel.getBBox();

          if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
            var _div2 = classTitleLabel.children[0];

            var _dv2 = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(classTitleLabel);

            classTitleBBox = _div2.getBoundingClientRect();

            _dv2.attr('width', classTitleBBox.width);

            _dv2.attr('height', classTitleBBox.height);
          }

          maxHeight += classTitleBBox.height + rowPadding;

          if (classTitleBBox.width > maxWidth) {
            maxWidth = classTitleBBox.width;
          }

          var classAttributes = [];
          node.classData.members.forEach(function (str) {
            var parsedText = Object(_diagrams_class_svgDraw__WEBPACK_IMPORTED_MODULE_7__["parseMember"])(str).displayText;
            var lbl = labelContainer.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_5__["default"])(parsedText, node.labelStyle, true, true));
            var bbox = lbl.getBBox();

            if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
              var _div3 = lbl.children[0];

              var _dv3 = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(lbl);

              bbox = _div3.getBoundingClientRect();

              _dv3.attr('width', bbox.width);

              _dv3.attr('height', bbox.height);
            }

            if (bbox.width > maxWidth) {
              maxWidth = bbox.width;
            }

            maxHeight += bbox.height + rowPadding;
            classAttributes.push(lbl);
          });
          maxHeight += lineHeight;
          var classMethods = [];
          node.classData.methods.forEach(function (str) {
            var parsedText = Object(_diagrams_class_svgDraw__WEBPACK_IMPORTED_MODULE_7__["parseMember"])(str).displayText;
            var lbl = labelContainer.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_5__["default"])(parsedText, node.labelStyle, true, true));
            var bbox = lbl.getBBox();

            if (Object(_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"])().flowchart.htmlLabels) {
              var _div4 = lbl.children[0];

              var _dv4 = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(lbl);

              bbox = _div4.getBoundingClientRect();

              _dv4.attr('width', bbox.width);

              _dv4.attr('height', bbox.height);
            }

            if (bbox.width > maxWidth) {
              maxWidth = bbox.width;
            }

            maxHeight += bbox.height + rowPadding;
            classMethods.push(lbl);
          });
          maxHeight += lineHeight; // 2. Position the labels
          // position the interface label

          if (hasInterface) {
            var _diffX = (maxWidth - interfaceBBox.width) / 2;

            Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(interfaceLabel).attr('transform', 'translate( ' + (-1 * maxWidth / 2 + _diffX) + ', ' + -1 * maxHeight / 2 + ')');
            verticalPos = interfaceBBox.height + rowPadding;
          } // Positin the class title label


          var diffX = (maxWidth - classTitleBBox.width) / 2;
          Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(classTitleLabel).attr('transform', 'translate( ' + (-1 * maxWidth / 2 + diffX) + ', ' + (-1 * maxHeight / 2 + verticalPos) + ')');
          verticalPos += classTitleBBox.height + rowPadding;
          topLine.attr('class', 'divider').attr('x1', -maxWidth / 2 - halfPadding).attr('x2', maxWidth / 2 + halfPadding).attr('y1', -maxHeight / 2 - halfPadding + lineHeight + verticalPos).attr('y2', -maxHeight / 2 - halfPadding + lineHeight + verticalPos);
          verticalPos += lineHeight;
          classAttributes.forEach(function (lbl) {
            Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(lbl).attr('transform', 'translate( ' + -maxWidth / 2 + ', ' + (-1 * maxHeight / 2 + verticalPos + lineHeight / 2) + ')');
            verticalPos += classTitleBBox.height + rowPadding;
          });
          verticalPos += lineHeight;
          bottomLine.attr('class', 'divider').attr('x1', -maxWidth / 2 - halfPadding).attr('x2', maxWidth / 2 + halfPadding).attr('y1', -maxHeight / 2 - halfPadding + lineHeight + verticalPos).attr('y2', -maxHeight / 2 - halfPadding + lineHeight + verticalPos);
          verticalPos += lineHeight;
          classMethods.forEach(function (lbl) {
            Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(lbl).attr('transform', 'translate( ' + -maxWidth / 2 + ', ' + (-1 * maxHeight / 2 + verticalPos) + ')');
            verticalPos += classTitleBBox.height + rowPadding;
          }); //
          // let bbox;
          // if (getConfig().flowchart.htmlLabels) {
          //   const div = interfaceLabel.children[0];
          //   const dv = select(interfaceLabel);
          //   bbox = div.getBoundingClientRect();
          //   dv.attr('width', bbox.width);
          //   dv.attr('height', bbox.height);
          // }
          // bbox = labelContainer.getBBox();
          // log.info('Text 2', text2);
          // const textRows = text2.slice(1, text2.length);
          // let titleBox = text.getBBox();
          // const descr = label
          //   .node()
          //   .appendChild(createLabel(textRows.join('<br/>'), node.labelStyle, true, true));
          // if (getConfig().flowchart.htmlLabels) {
          //   const div = descr.children[0];
          //   const dv = select(descr);
          //   bbox = div.getBoundingClientRect();
          //   dv.attr('width', bbox.width);
          //   dv.attr('height', bbox.height);
          // }
          // // bbox = label.getBBox();
          // // log.info(descr);
          // select(descr).attr(
          //   'transform',
          //   'translate( ' +
          //     // (titleBox.width - bbox.width) / 2 +
          //     (bbox.width > titleBox.width ? 0 : (titleBox.width - bbox.width) / 2) +
          //     ', ' +
          //     (titleBox.height + halfPadding + 5) +
          //     ')'
          // );
          // select(text).attr(
          //   'transform',
          //   'translate( ' +
          //     // (titleBox.width - bbox.width) / 2 +
          //     (bbox.width < titleBox.width ? 0 : -(titleBox.width - bbox.width) / 2) +
          //     ', ' +
          //     0 +
          //     ')'
          // );
          // // Get the size of the label
          // // Bounding box for title and text
          // bbox = label.node().getBBox();
          // // Center the label
          // label.attr(
          //   'transform',
          //   'translate(' + -bbox.width / 2 + ', ' + (-bbox.height / 2 - halfPadding + 3) + ')'
          // );

          rect.attr('class', 'outer title-state').attr('x', -maxWidth / 2 - halfPadding).attr('y', -(maxHeight / 2) - halfPadding).attr('width', maxWidth + node.padding).attr('height', maxHeight + node.padding); // innerLine
          //   .attr('class', 'divider')
          //   .attr('x1', -bbox.width / 2 - halfPadding)
          //   .attr('x2', bbox.width / 2 + halfPadding)
          //   .attr('y1', -bbox.height / 2 - halfPadding + titleBox.height + halfPadding)
          //   .attr('y2', -bbox.height / 2 - halfPadding + titleBox.height + halfPadding);

          Object(_shapes_util__WEBPACK_IMPORTED_MODULE_2__["updateNodeBounds"])(node, rect);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].rect(node, point);
          };

          return shapeSvg;
        };

        var shapes = {
          question: question,
          rect: rect,
          rectWithTitle: rectWithTitle,
          circle: circle,
          stadium: stadium,
          hexagon: hexagon,
          rect_left_inv_arrow: rect_left_inv_arrow,
          lean_right: lean_right,
          lean_left: lean_left,
          trapezoid: trapezoid,
          inv_trapezoid: inv_trapezoid,
          rect_right_inv_arrow: rect_right_inv_arrow,
          cylinder: cylinder,
          start: start,
          end: end,
          note: _shapes_note__WEBPACK_IMPORTED_MODULE_6__["default"],
          subroutine: subroutine,
          fork: forkJoin,
          join: forkJoin,
          class_box: class_box
        };
        var nodeElems = {};

        var insertNode = function insertNode(elem, node, dir) {
          var newEl;
          var el; // Add link when appropriate

          if (node.link) {
            newEl = elem.insert('svg:a').attr('xlink:href', node.link).attr('target', node.linkTarget || '_blank');
            el = shapes[node.shape](newEl, node, dir);
          } else {
            el = shapes[node.shape](elem, node, dir);
            newEl = el;
          }

          if (node.tooltip) {
            el.attr('title', node.tooltip);
          }

          if (node.class) {
            el.attr('class', 'node default ' + node.class);
          }

          nodeElems[node.id] = newEl;

          if (node.haveCallback) {
            nodeElems[node.id].attr('class', nodeElems[node.id].attr('class') + ' clickable');
          }
        };

        var setNodeElem = function setNodeElem(elem, node) {
          nodeElems[node.id] = elem;
        };

        var clear = function clear() {
          nodeElems = {};
        };

        var positionNode = function positionNode(node) {
          var el = nodeElems[node.id];

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].trace('Transforming node', node, 'translate(' + (node.x - node.width / 2 - 5) + ', ' + (node.y - node.height / 2 - 5) + ')');

          var padding = 8;

          if (node.clusterNode) {
            el.attr('transform', 'translate(' + (node.x - node.width / 2 - padding) + ', ' + (node.y - node.height / 2 - padding) + ')');
          } else {
            el.attr('transform', 'translate(' + node.x + ', ' + node.y + ')');
          }
        };
        /***/

      },

      /***/
      "./src/dagre-wrapper/shapes/note.js":
      /*!******************************************!*\
        !*** ./src/dagre-wrapper/shapes/note.js ***!
        \******************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./util */
        "./src/dagre-wrapper/shapes/util.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _intersect_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../intersect/index.js */
        "./src/dagre-wrapper/intersect/index.js"); // eslint-disable-line


        var note = function note(parent, node) {
          var _labelHelper = Object(_util__WEBPACK_IMPORTED_MODULE_0__["labelHelper"])(parent, node, 'node ' + node.classes, true),
              shapeSvg = _labelHelper.shapeSvg,
              bbox = _labelHelper.bbox,
              halfPadding = _labelHelper.halfPadding;

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].info('Classes = ', node.classes); // add the rect


          var rect = shapeSvg.insert('rect', ':first-child');
          rect.attr('rx', node.rx).attr('ry', node.ry).attr('x', -bbox.width / 2 - halfPadding).attr('y', -bbox.height / 2 - halfPadding).attr('width', bbox.width + node.padding).attr('height', bbox.height + node.padding);
          Object(_util__WEBPACK_IMPORTED_MODULE_0__["updateNodeBounds"])(node, rect);

          node.intersect = function (point) {
            return _intersect_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].rect(node, point);
          };

          return shapeSvg;
        };
        /* harmony default export */


        __webpack_exports__["default"] = note;
        /***/
      },

      /***/
      "./src/dagre-wrapper/shapes/util.js":
      /*!******************************************!*\
        !*** ./src/dagre-wrapper/shapes/util.js ***!
        \******************************************/

      /*! exports provided: labelHelper, updateNodeBounds, insertPolygonShape */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "labelHelper", function () {
          return labelHelper;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "updateNodeBounds", function () {
          return updateNodeBounds;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertPolygonShape", function () {
          return insertPolygonShape;
        });
        /* harmony import */


        var _createLabel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../createLabel */
        "./src/dagre-wrapper/createLabel.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_2__);

        var labelHelper = function labelHelper(parent, node, _classes, isNode) {
          var classes;

          if (!_classes) {
            classes = 'node default';
          } else {
            classes = _classes;
          } // Add outer g element


          var shapeSvg = parent.insert('g').attr('class', classes).attr('id', node.domId || node.id); // Create the label and insert it after the rect

          var label = shapeSvg.insert('g').attr('class', 'label').attr('style', node.labelStyle);
          var text = label.node().appendChild(Object(_createLabel__WEBPACK_IMPORTED_MODULE_0__["default"])(node.labelText, node.labelStyle, false, isNode)); // Get the size of the label

          var bbox = text.getBBox();

          if (Object(_config__WEBPACK_IMPORTED_MODULE_1__["getConfig"])().flowchart.htmlLabels) {
            var div = text.children[0];
            var dv = Object(d3__WEBPACK_IMPORTED_MODULE_2__["select"])(text);
            bbox = div.getBoundingClientRect();
            dv.attr('width', bbox.width);
            dv.attr('height', bbox.height);
          }

          var halfPadding = node.padding / 2; // Center the label

          label.attr('transform', 'translate(' + -bbox.width / 2 + ', ' + -bbox.height / 2 + ')');
          return {
            shapeSvg: shapeSvg,
            bbox: bbox,
            halfPadding: halfPadding,
            label: label
          };
        };

        var updateNodeBounds = function updateNodeBounds(node, element) {
          var bbox = element.node().getBBox();
          node.width = bbox.width;
          node.height = bbox.height;
        };

        function insertPolygonShape(parent, w, h, points) {
          return parent.insert('polygon', ':first-child').attr('points', points.map(function (d) {
            return d.x + ',' + d.y;
          }).join(' ')).attr('class', 'label-container').attr('transform', 'translate(' + -w / 2 + ',' + h / 2 + ')');
        }
        /***/

      },

      /***/
      "./src/defaultConfig.js":
      /*!******************************!*\
        !*** ./src/defaultConfig.js ***!
        \******************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _themes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./themes */
        "./src/themes/index.js");
        /**
         * **Configuration methods in Mermaid version 8.6.0 have been updated, to learn more[[click here](8.6.0_docs.md)].**
         *
         * ## **What follows are config instructions for older versions**
         * These are the default options which can be overridden with the initialization call like so:
         * **Example 1:**
         * <pre>
         * mermaid.initialize({
         *   flowchart:{
         *     htmlLabels: false
         *   }
         * });
         * </pre>
         *
         * **Example 2:**
         * <pre>
         * &lt;script>
         *   var config = {
         *     startOnLoad:true,
         *     flowchart:{
         *       useMaxWidth:true,
         *       htmlLabels:true,
         *       curve:'cardinal',
         *     },
         *
         *     securityLevel:'loose',
         *   };
         *   mermaid.initialize(config);
         * &lt;/script>
         * </pre>
         * A summary of all options and their defaults is found [here](#mermaidapi-configuration-defaults). A description of each option follows below.
         *
         * @name Configuration
         */


        var config = {
          /** theme , the CSS style sheet
           *
           * theme , the CSS style sheet
           *
           *| Parameter | Description |Type | Required | Values|
           *| --- | --- | --- | --- | --- |
           *| Theme |Built in Themes| String | Optional | Values include, default, forest, dark, neutral, null|
           *
           ***Notes:**To disable any pre-defined mermaid theme, use "null".
           * <pre>
           *  "theme": "forest",
           *  "themeCSS": ".node rect { fill: red; }"
           * </pre>
           */
          theme: 'default',
          themeVariables: _themes__WEBPACK_IMPORTED_MODULE_0__["default"]['default'].getThemeVariables(),
          themeCSS: undefined,

          /* **maxTextSize** - The maximum allowed size of the users text diamgram */
          maxTextSize: 50000,

          /**
           *| Parameter | Description |Type | Required | Values|
           *| --- | --- | --- | --- | --- |
           *|fontFamily | specifies the font to be used in the rendered diagrams| String | Required | Trebuchet MS, Verdana, Arial, Sans-Serif |
           *
           ***notes: Default value is \\"trebuchet ms\\".
           */
          fontFamily: '"trebuchet ms", verdana, arial, sans-serif;',

          /**
           *| Parameter | Description |Type | Required | Values|
           *| --- | --- | --- | --- | --- |
           *| logLevel |This option decides the amount of logging to be used.| String | Required | 1, 2, 3, 4, 5 |
           *
           *
           ***Notes:**
           *-   debug: 1.
           *-   info: 2.
           *-   warn: 3.
           *-   error: 4.
           *-   fatal: 5(default).
           */
          logLevel: 5,

          /**
           *| Parameter | Description |Type | Required | Values|
           *| --- | --- | --- | --- | --- |
           *| securitylevel | Level of trust for parsed diagram|String | Required | Strict, Loose, antiscript |
           *
           ***Notes:
           *-   **strict**: (**default**) tags in text are encoded, click functionality is disabeled
           *-   **loose**: tags in text are allowed, click functionality is enabled
           *-   **antiscript**: html tags in text are allowed, (only script element is removed), click functionality is enabled
           */
          securityLevel: 'strict',

          /**
           *| Parameter | Description |Type | Required | Values|
           *| --- | --- | --- | --- | --- |
           *| startOnLoad| Dictates whether mermaind starts on Page load | Boolean | Required | True, False |
           *
           ***Notes:**
           ***Default value: true**
           */
          startOnLoad: true,

          /**
           *| Parameter | Description |Type | Required |Values|
           *| --- | --- | --- | --- | --- |
           *| arrowMarkerAbsolute | Controls whether or arrow markers in html code are absolute paths or anchors | Boolean | Required |  True, False |
           *
           *
           *## Notes**: This matters if you are using base tag settings.
           ***Default value: false**.
           */
          arrowMarkerAbsolute: false,

          /**
           * This option controls which currentConfig keys are considered _secure_ and can only be changed via
           * call to mermaidAPI.initialize. Calls to mermaidAPI.reinitialize cannot make changes to
           * the `secure` keys in the current currentConfig. This prevents malicious graph directives from
           * overriding a site's default security.
           */
          secure: ['secure', 'securityLevel', 'startOnLoad', 'maxTextSize'],

          /**
           * This option controls if the generated ids of nodes in the SVG are generated randomly or based on a seed.
           * If set to false, the IDs are generated based on the current date and thus are not deterministic. This is the default behaviour.
           *
           *## Notes**: This matters if your files are checked into sourcecontrol e.g. git and should not change unless content is changed.
           ***Default value: false**
           */
          deterministicIds: false,

          /**
           * This option is the optional seed for deterministic ids. if set to undefined but deterministicIds is true, a simple number iterator is used.
           * You can set this attribute to base the seed on a static string.
           */
          deterministicIDSeed: undefined,

          /**
           * The object containing configurations specific for flowcharts
           */
          flowchart: {
            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| diagramPadding | amount of padding around the diagram as a whole | Integer | Required | Any Positive Value |
             *
             ***Notes:**The amount of padding around the diagram as a whole so that embedded diagrams have margins, expressed in pixels
             ***Default value: 8**.
             */
            diagramPadding: 8,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| htmlLabels | Flag for setting whether or not a html tag should be used for rendering labels on the edges. | Boolean| Required | True, False|
             *
             ***Notes: Default value: true**.
             */
            htmlLabels: true,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| nodeSpacing | Defines the spacing between nodes on the same level | Integer| Required | Any positive Numbers |
             *
             ***Notes:
             *Pertains to horizontal spacing for TB (top to bottom) or BT (bottom to top) graphs, and the vertical spacing for LR as well as RL graphs.**
             ***Default value 50**.
             */
            nodeSpacing: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| rankSpacing | Defines the spacing between nodes on different levels | Integer | Required| Any Positive Numbers |
             *
             ***Notes: pertains to vertical spacing for TB (top to bottom) or BT (bottom to top), and the horizontal spacing for LR as well as RL graphs.
             ***Default value 50**.
             */
            rankSpacing: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| curve | Defines how mermaid renders curves for flowcharts. | String | Required | Basis, Linear, Cardinal|
             *
             ***Notes:
             *Default Vaue: Linear**
             */
            curve: 'linear',
            // Only used in new experimental rendering
            // represents the padding between the labels and the shape
            padding: 15,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See notes | Boolean | 4 | True, False |
             *
             ***Notes:**when this flag is set the height and width is set to 100% and is then scaling with the
             *available space if not the absolute space required is used.
             *
             ***Default value true**.
             */
            useMaxWidth: true
          },

          /**
           * The object containing configurations specific for sequence diagrams
           */
          sequence: {
            /**
             * widt of the activation rect
             * **Default value 10**.
             */
            activationWidth: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| diagramMarginX | margin to the right and left of the sequence diagram | Integer | Required | Any Positive Values |
             *
             ***Notes:**
             ***Default value 50**.
             */
            diagramMarginX: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| diagramMarginY | Margin to the over and under the sequence diagram | Integer | Required | Any Positive Values|
             *
             ***Notes:**
             ***Default value 10**.
             */
            diagramMarginY: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| actorMargin | Margin between actors. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 50**.
             */
            actorMargin: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| width | Width of actor boxes | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 150**.
             */
            width: 150,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| height | Height of actor boxes | Integer | Required | Any Positive Value|
             *
             ***Notes:**
             ***Default value 65**..
             */
            height: 65,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| boxMargin | Margin around loop boxes | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             *
             ***Default value 10**.
             */
            boxMargin: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| boxTextMargin| margin around the text in loop/alt/opt boxes | Integer | Required| Any Positive Value|
             *
             ***Notes:**
             *
             ***Default value 5**.
             */
            boxTextMargin: 5,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| noteMargin | margin around notes. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             *
             ***Default value 10**.
             */
            noteMargin: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| messageMargin | Space between messages. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             *
             *Space between messages.
             ***Default value 35**.
             */
            messageMargin: 35,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| messageAlign | Multiline message alignment | Integer | Required | left, center, right |
             *
             ***Notes:**center **default**
             */
            messageAlign: 'center',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| mirrorActors | mirror actors under diagram. | Boolean| Required | True, False |
             *
             ***Notes:**
             *
             ***Default value true**.
             */
            mirrorActors: true,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| bottomMarginAdj | Prolongs the edge of the diagram downwards. | Integer | Required | Any Positive Value |
             *
             ***Notes:**Depending on css styling this might need adjustment.
             ***Default value 1**.
             */
            bottomMarginAdj: 1,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See Notes | Boolean | Required | True, False |
             *
             ***Notes:**
             *when this flag is set to true, the height and width is set to 100% and is then scaling with the
             *available space. If set to false, the absolute space required is used.
             ***Default value: True**.
             */
            useMaxWidth: true,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| rightAngles | display curve arrows as right angles| Boolean | Required | True, False |
             *
             ***Notes:**
             *
             *This will display arrows that start and begin at the same node as right angles, rather than a curve
             ***Default value false**.
             */
            rightAngles: false,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| showSequenceNumbers | This will show the node numbers | Boolean | Required | True, False |
             *
             ***Notes:**
             ***Default value false**.
             */
            showSequenceNumbers: false,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| actorFontSize| This sets the font size of the actor's description | Integer | Require | Any Positive Value |
             *
             ***Notes:**
             ***Default value 14**..
             */
            actorFontSize: 14,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| actorFontFamily |This sets the font family of the actor's description | 3 | 4 | Open-Sans, Sans-Serif |
             *
             ***Notes:**
             ***Default value "Open-Sans", "sans-serif"**.
             */
            actorFontFamily: '"Open-Sans", "sans-serif"',

            /**
             * This sets the font weight of the actor's description
             * **Default value 400.
             */
            actorFontWeight: 400,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| noteFontSize |This sets the font size of actor-attached notes. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 14**..
             */
            noteFontSize: 14,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| noteFontFamily| This sets the font family of actor-attached notes. | String | Required |  trebuchet ms, verdana, arial, sans-serif |
             *
             ***Notes:**
             ***Default value: trebuchet ms **.
             */
            noteFontFamily: '"trebuchet ms", verdana, arial, sans-serif',

            /**
             * This sets the font weight of the note's description
             * **Default value 400.
             */
            noteFontWeight: 400,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| noteAlign | This sets the text alignment of actor-attached notes. | string | required | left, center, right|
             *
             ***Notes:**
             ***Default value center**.
             */
            noteAlign: 'center',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| messageFontSize | This sets the font size of actor messages. | Integer | Required | Any Positive Number |
             *
             ***Notes:**
             ***Default value 16**.
             */
            messageFontSize: 16,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| messageFontFamily | This sets the font family of actor messages. | String| Required | trebuchet ms", verdana, arial, sans-serif |
             *
             ***Notes:**
             ***Default value: "trebuchet ms**.
             */
            messageFontFamily: '"trebuchet ms", verdana, arial, sans-serif',

            /**
             * This sets the font weight of the message's description
             * **Default value 400.
             */
            messageFontWeight: 400,

            /**
             * This sets the auto-wrap state for the diagram
             * **Default value false.
             */
            wrap: false,

            /**
             * This sets the auto-wrap padding for the diagram (sides only)
             * **Default value 10.
             */
            wrapPadding: 10,

            /**
             * This sets the width of the loop-box (loop, alt, opt, par)
             * **Default value 50.
             */
            labelBoxWidth: 50,

            /**
             * This sets the height of the loop-box (loop, alt, opt, par)
             * **Default value 20.
             */
            labelBoxHeight: 20,
            messageFont: function messageFont() {
              return {
                fontFamily: this.messageFontFamily,
                fontSize: this.messageFontSize,
                fontWeight: this.messageFontWeight
              };
            },
            noteFont: function noteFont() {
              return {
                fontFamily: this.noteFontFamily,
                fontSize: this.noteFontSize,
                fontWeight: this.noteFontWeight
              };
            },
            actorFont: function actorFont() {
              return {
                fontFamily: this.actorFontFamily,
                fontSize: this.actorFontSize,
                fontWeight: this.actorFontWeight
              };
            }
          },

          /**
           * The object containing configurations specific for gantt diagrams*
           */
          gantt: {
            /**
             *### titleTopMargin
             *
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| titleTopMargin | Margin top for the text over the gantt diagram | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 25**.
             */
            titleTopMargin: 25,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| barHeight | The height of the bars in the graph | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 20**.
             */
            barHeight: 20,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| barGap | The margin between the different activities in the gantt diagram. | Integer | Optional |Any Positive Value |
             *
             ***Notes:**
             ***Default value 4**.
             */
            barGap: 4,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| topPadding | Margin between title and gantt diagram and between axis and gantt diagram. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 50**.
             */
            topPadding: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| leftPadding | The space allocated for the section name to the left of the activities. | Integer| Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 75**.
             */
            leftPadding: 75,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| gridLineStartPadding | Vertical starting position of the grid lines. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 35**.
             */
            gridLineStartPadding: 35,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| fontSize | Font size| Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 11**.
             */
            fontSize: 11,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| fontFamily | font Family | string | required |"Open-Sans", "sans-serif" |
             *
             ***Notes:**
             *
             ***Default value '"Open-Sans", "sans-serif"'**.
             */
            fontFamily: '"Open-Sans", "sans-serif"',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| numberSectionStyles | The number of alternating section styles | Integer | 4 | Any Positive Value |
             *
             ***Notes:**
             ***Default value 4**.
             */
            numberSectionStyles: 4,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| axisFormat | Datetime format of the axis. | 3 | Required | Date in yy-mm-dd |
             *
             ***Notes:**
             *
             * This might need adjustment to match your locale and preferences
             ***Default value '%Y-%m-%d'**.
             */
            axisFormat: '%Y-%m-%d',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See notes | Boolean | 4 | True, False |
             *
             ***Notes:**when this flag is set the height and width is set to 100% and is then scaling with the
             *available space if not the absolute space required is used.
             *
             ***Default value true**.
             */
            useMaxWidth: true,
            useWidth: undefined
          },

          /**
           * The object containing configurations specific for journey diagrams
           */
          journey: {
            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| diagramMarginX | margin to the right and left of the sequence diagram | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 50**.
             */
            diagramMarginX: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| diagramMarginY | margin to the over and under the sequence diagram. | Integer | Required | Any Positive Value|
             *
             ***Notes:**
             ***Default value 10**..
             */
            diagramMarginY: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| actorMargin | Margin between actors. | Integer | Required | Any Positive Value|
             *
             ***Notes:**
             ***Default value 50**.
             */
            actorMargin: 50,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| width | Width of actor boxes | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 150**.
             */
            width: 150,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| height | Height of actor boxes | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 65**.
             */
            height: 65,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| boxMargin | Margin around loop boxes | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 10**.
             */
            boxMargin: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| boxTextMargin | margin around the text in loop/alt/opt boxes | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             */
            boxTextMargin: 5,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| noteMargin | margin around notes. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             ***Default value 10**.
             */
            noteMargin: 10,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| messageMargin |Space between messages. | Integer | Required | Any Positive Value |
             *
             ***Notes:**
             *
             *Space between messages.
             ***Default value 35**.
             */
            messageMargin: 35,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| messageAlign |Multiline message alignment | 3 | 4 | left, center, right |
             *
             ***Notes:**default:center**
             */
            messageAlign: 'center',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| bottomMarginAdj | Prolongs the edge of the diagram downwards. | Integer | 4 | Any Positive Value |
             *
             ***Notes:**Depending on css styling this might need adjustment.
             ***Default value 1**.
             */
            bottomMarginAdj: 1,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See notes | Boolean | 4 | True, False |
             *
             ***Notes:**when this flag is set the height and width is set to 100% and is then scaling with the
             *available space if not the absolute space required is used.
             *
             ***Default value true**.
             */
            useMaxWidth: true,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| rightAngles | Curved Arrows become Right Angles,  | 3 | 4 | True, False |
             *
             ***Notes:**This will display arrows that start and begin at the same node as right angles, rather than a curves
             ***Default value false**.
             */
            rightAngles: false
          },
          class: {
            arrowMarkerAbsolute: false,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See notes | Boolean | 4 | True, False |
             *
             ***Notes:**when this flag is set the height and width is set to 100% and is then scaling with the
             *available space if not the absolute space required is used.
             *
             ***Default value true**.
             */
            useMaxWidth: true
          },
          git: {
            arrowMarkerAbsolute: false,
            useWidth: undefined,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See notes | Boolean | 4 | True, False |
             *
             ***Notes:**when this flag is set the height and width is set to 100% and is then scaling with the
             *available space if not the absolute space required is used.
             *
             ***Default value true**.
             */
            useMaxWidth: true
          },
          state: {
            dividerMargin: 10,
            sizeUnit: 5,
            padding: 8,
            textHeight: 10,
            titleShift: -15,
            noteMargin: 10,
            forkWidth: 70,
            forkHeight: 7,
            // Used
            miniPadding: 2,
            // Font size factor, this is used to guess the width of the edges labels before rendering by dagre
            // layout. This might need updating if/when switching font
            fontSizeFactor: 5.02,
            fontSize: 24,
            labelHeight: 16,
            edgeLengthFactor: '20',
            compositTitleSize: 35,
            radius: 5,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See notes | Boolean | 4 | True, False |
             *
             ***Notes:**when this flag is set the height and width is set to 100% and is then scaling with the
             *available space if not the absolute space required is used.
             *
             ***Default value true**.
             */
            useMaxWidth: true
          },

          /**
           * The object containing configurations specific for entity relationship diagrams
           */
          er: {
            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| diagramPadding | amount of padding around the diagram as a whole | Integer | Required | Any Positive Value |
             *
             ***Notes:**The amount of padding around the diagram as a whole so that embedded diagrams have margins, expressed in pixels
             ***Default value: 20**.
             */
            diagramPadding: 20,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| layoutDirection | Directional bias for layout of entities. | String | Required | "TB", "BT","LR","RL" |
             *
             ***Notes:**
             *'TB' for Top-Bottom, 'BT'for Bottom-Top, 'LR' for Left-Right, or 'RL' for Right to Left.
             * T = top, B = bottom, L = left, and R = right.
             ***Default value: TB **.
             */
            layoutDirection: 'TB',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| minEntityWidth | The mimimum width of an entity box, | Integer | Required| Any Positive Value  |
             *
             ***Notes:**expressed in pixels
             ***Default value: 100**.
             */
            minEntityWidth: 100,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| minEntityHeight| The minimum height of an entity box, | Integer | 4 | Any Positive Value |
             *
             ***Notes:**expressed in pixels
             ***Default value: 75 **
             */
            minEntityHeight: 75,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| entityPadding|minimum internal padding betweentext in box and  box borders| Integer | 4 | Any Positive Value |
             *
             ***Notes:**The minimum internal padding betweentext in an entity box and the enclosing box borders, expressed in pixels.
             ***Default value: 15 **
             */
            entityPadding: 15,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| stroke | Stroke color of box edges and lines | String | 4 | Any recognized color |
             ***Default value: gray **
             */
            stroke: 'gray',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| fill | Fill color of entity boxes | String | 4 | Any recognized color |
             *
             ***Notes:**
             ***Default value:'honeydew'**
             */
            fill: 'honeydew',

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| fontSize| Font Size in pixels| Integer |  | Any Positive Value |
             *
             ***Notes:**Font size (expressed as an integer representing a number of pixels)
             ***Default value: 12 **
             */
            fontSize: 12,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See Notes | Boolean | Required | true, false |
             *
             ***Notes:**
             *When this flag is set to true, the diagram width is locked to 100% and
             *scaled based on available space. If set to false, the diagram reserves its
             *absolute width.
             ***Default value: true**.
             */
            useMaxWidth: true
          },

          /**
           * The object containing configurations specific for pie diagrams
           */
          pie: {
            useWidth: undefined,

            /**
             *| Parameter | Description |Type | Required | Values|
             *| --- | --- | --- | --- | --- |
             *| useMaxWidth | See Notes | Boolean | Required | true, false |
             *
             ***Notes:**
             *When this flag is set to true, the diagram width is locked to 100% and
             *scaled based on available space. If set to false, the diagram reserves its
             *absolute width.
             ***Default value: true**.
             */
            useMaxWidth: true
          }
        };
        config.class.arrowMarkerAbsolute = config.arrowMarkerAbsolute;
        config.git.arrowMarkerAbsolute = config.arrowMarkerAbsolute;
        /* harmony default export */

        __webpack_exports__["default"] = config;
        /***/
      },

      /***/
      "./src/diagrams/class/classDb.js":
      /*!***************************************!*\
        !*** ./src/diagrams/class/classDb.js ***!
        \***************************************/

      /*! exports provided: parseDirective, addClass, lookUpDomId, clear, getClass, getClasses, getRelations, addRelation, addAnnotation, addMember, addMembers, cleanupLabel, setCssClass, setLink, setClickEvent, bindFunctions, lineType, relationType, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addClass", function () {
          return addClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "lookUpDomId", function () {
          return lookUpDomId;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClass", function () {
          return getClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClasses", function () {
          return getClasses;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getRelations", function () {
          return getRelations;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addRelation", function () {
          return addRelation;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addAnnotation", function () {
          return addAnnotation;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addMember", function () {
          return addMember;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addMembers", function () {
          return addMembers;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "cleanupLabel", function () {
          return cleanupLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setCssClass", function () {
          return setCssClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setLink", function () {
          return setLink;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setClickEvent", function () {
          return setClickEvent;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "bindFunctions", function () {
          return bindFunctions;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "lineType", function () {
          return lineType;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "relationType", function () {
          return relationType;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

        function _iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        }

        var MERMAID_DOM_ID_PREFIX = 'classid-';
        var relations = [];
        var classes = {};
        var classCounter = 0;
        var funs = [];

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_5__["default"].parseDirective(this, statement, context, type);
        };

        var splitClassNameAndType = function splitClassNameAndType(id) {
          var genericType = '';
          var className = id;

          if (id.indexOf('~') > 0) {
            var split = id.split('~');
            className = split[0];
            genericType = split[1];
          }

          return {
            className: className,
            type: genericType
          };
        };
        /**
         * Function called by parser when a node definition has been found.
         * @param id
         * @public
         */


        var addClass = function addClass(id) {
          var classId = splitClassNameAndType(id); // Only add class if not exists

          if (typeof classes[classId.className] !== 'undefined') return;
          classes[classId.className] = {
            id: classId.className,
            type: classId.type,
            cssClasses: [],
            methods: [],
            members: [],
            annotations: [],
            domId: MERMAID_DOM_ID_PREFIX + classId.className + '-' + classCounter
          };
          classCounter++;
        };
        /**
         * Function to lookup domId from id in the graph definition.
         * @param id
         * @public
         */


        var lookUpDomId = function lookUpDomId(id) {
          var classKeys = Object.keys(classes);

          for (var i = 0; i < classKeys.length; i++) {
            if (classes[classKeys[i]].id === id) {
              return classes[classKeys[i]].domId;
            }
          }
        };

        var clear = function clear() {
          relations = [];
          classes = {};
          funs = [];
          funs.push(setupToolTips);
        };

        var getClass = function getClass(id) {
          return classes[id];
        };

        var getClasses = function getClasses() {
          return classes;
        };

        var getRelations = function getRelations() {
          return relations;
        };

        var addRelation = function addRelation(relation) {
          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Adding relation: ' + JSON.stringify(relation));

          addClass(relation.id1);
          addClass(relation.id2);
          relation.id1 = splitClassNameAndType(relation.id1).className;
          relation.id2 = splitClassNameAndType(relation.id2).className;
          relations.push(relation);
        };
        /**
         * Adds an annotation to the specified class
         * Annotations mark special properties of the given type (like 'interface' or 'service')
         * @param className The class name
         * @param annotation The name of the annotation without any brackets
         * @public
         */


        var addAnnotation = function addAnnotation(className, annotation) {
          var validatedClassName = splitClassNameAndType(className).className;
          classes[validatedClassName].annotations.push(annotation);
        };
        /**
         * Adds a member to the specified class
         * @param className The class name
         * @param member The full name of the member.
         * If the member is enclosed in <<brackets>> it is treated as an annotation
         * If the member is ending with a closing bracket ) it is treated as a method
         * Otherwise the member will be treated as a normal property
         * @public
         */


        var addMember = function addMember(className, member) {
          var validatedClassName = splitClassNameAndType(className).className;
          var theClass = classes[validatedClassName];

          if (typeof member === 'string') {
            // Member can contain white spaces, we trim them out
            var memberString = member.trim();

            if (memberString.startsWith('<<') && memberString.endsWith('>>')) {
              // Remove leading and trailing brackets
              theClass.annotations.push(memberString.substring(2, memberString.length - 2));
            } else if (memberString.indexOf(')') > 0) {
              theClass.methods.push(memberString);
            } else if (memberString) {
              theClass.members.push(memberString);
            }
          }
        };

        var addMembers = function addMembers(className, members) {
          if (Array.isArray(members)) {
            members.reverse();
            members.forEach(function (member) {
              return addMember(className, member);
            });
          }
        };

        var cleanupLabel = function cleanupLabel(label) {
          if (label.substring(0, 1) === ':') {
            return label.substr(1).trim();
          } else {
            return label.trim();
          }
        };
        /**
         * Called by parser when a special node is found, e.g. a clickable element.
         * @param ids Comma separated list of ids
         * @param className Class to add
         */


        var setCssClass = function setCssClass(ids, className) {
          ids.split(',').forEach(function (_id) {
            var id = _id;
            if (_id[0].match(/\d/)) id = MERMAID_DOM_ID_PREFIX + id;

            if (typeof classes[id] !== 'undefined') {
              classes[id].cssClasses.push(className);
            }
          });
        };
        /**
         * Called by parser when a tooltip is found, e.g. a clickable element.
         * @param ids Comma separated list of ids
         * @param tooltip Tooltip to add
         */


        var setTooltip = function setTooltip(ids, tooltip) {
          var config = _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]();

          ids.split(',').forEach(function (id) {
            if (typeof tooltip !== 'undefined') {
              classes[id].tooltip = _common_common__WEBPACK_IMPORTED_MODULE_3__["default"].sanitizeText(tooltip, config);
            }
          });
        };
        /**
         * Called by parser when a link is found. Adds the URL to the vertex data.
         * @param ids Comma separated list of ids
         * @param linkStr URL to create a link for
         * @param target Target of the link, _blank by default as originally defined in the svgDraw.js file
         */


        var setLink = function setLink(ids, linkStr, target) {
          var config = _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]();

          ids.split(',').forEach(function (_id) {
            var id = _id;
            if (_id[0].match(/\d/)) id = MERMAID_DOM_ID_PREFIX + id;

            if (typeof classes[id] !== 'undefined') {
              classes[id].link = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].formatUrl(linkStr, config);

              if (typeof target === 'string') {
                classes[id].linkTarget = target;
              } else {
                classes[id].linkTarget = '_blank';
              }
            }
          });
          setCssClass(ids, 'clickable');
        };
        /**
         * Called by parser when a click definition is found. Registers an event handler.
         * @param ids Comma separated list of ids
         * @param functionName Function to be called on click
         * @param functionArgs Function args the function should be called with
         */


        var setClickEvent = function setClickEvent(ids, functionName, functionArgs) {
          ids.split(',').forEach(function (id) {
            setClickFunc(id, functionName, functionArgs);
            classes[id].haveCallback = true;
          });
          setCssClass(ids, 'clickable');
        };

        var setClickFunc = function setClickFunc(domId, functionName, functionArgs) {
          var config = _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]();

          var id = domId;
          var elemId = lookUpDomId(id);

          if (config.securityLevel !== 'loose') {
            return;
          }

          if (typeof functionName === 'undefined') {
            return;
          }

          if (typeof classes[id] !== 'undefined') {
            var argList = [];

            if (typeof functionArgs === 'string') {
              /* Splits functionArgs by ',', ignoring all ',' in double quoted strings */
              argList = functionArgs.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);

              for (var i = 0; i < argList.length; i++) {
                var item = argList[i].trim();
                /* Removes all double quotes at the start and end of an argument */

                /* This preserves all starting and ending whitespace inside */

                if (item.charAt(0) === '"' && item.charAt(item.length - 1) === '"') {
                  item = item.substr(1, item.length - 2);
                }

                argList[i] = item;
              }
            }
            /* if no arguments passed into callback, default to passing in id */


            if (argList.length === 0) {
              argList.push(elemId);
            }

            funs.push(function () {
              var elem = document.querySelector("[id=\"".concat(elemId, "\"]"));

              if (elem !== null) {
                elem.addEventListener('click', function () {
                  _utils__WEBPACK_IMPORTED_MODULE_4__["default"].runFunc.apply(_utils__WEBPACK_IMPORTED_MODULE_4__["default"], [functionName].concat(_toConsumableArray(argList)));
                }, false);
              }
            });
          }
        };

        var bindFunctions = function bindFunctions(element) {
          funs.forEach(function (fun) {
            fun(element);
          });
        };

        var lineType = {
          LINE: 0,
          DOTTED_LINE: 1
        };
        var relationType = {
          AGGREGATION: 0,
          EXTENSION: 1,
          COMPOSITION: 2,
          DEPENDENCY: 3
        };

        var setupToolTips = function setupToolTips(element) {
          var tooltipElem = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('.mermaidTooltip');

          if ((tooltipElem._groups || tooltipElem)[0][0] === null) {
            tooltipElem = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('body').append('div').attr('class', 'mermaidTooltip').style('opacity', 0);
          }

          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(element).select('svg');
          var nodes = svg.selectAll('g.node');
          nodes.on('mouseover', function () {
            var el = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(this);
            var title = el.attr('title'); // Dont try to draw a tooltip if no data is provided

            if (title === null) {
              return;
            }

            var rect = this.getBoundingClientRect();
            tooltipElem.transition().duration(200).style('opacity', '.9');
            tooltipElem.html(el.attr('title')).style('left', window.scrollX + rect.left + (rect.right - rect.left) / 2 + 'px').style('top', window.scrollY + rect.top - 14 + document.body.scrollTop + 'px');
            el.classed('hover', true);
          }).on('mouseout', function () {
            tooltipElem.transition().duration(500).style('opacity', 0);
            var el = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(this);
            el.classed('hover', false);
          });
        };

        funs.push(setupToolTips);
        /* harmony default export */

        __webpack_exports__["default"] = {
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]().class;
          },
          addClass: addClass,
          bindFunctions: bindFunctions,
          clear: clear,
          getClass: getClass,
          getClasses: getClasses,
          addAnnotation: addAnnotation,
          getRelations: getRelations,
          addRelation: addRelation,
          addMember: addMember,
          addMembers: addMembers,
          cleanupLabel: cleanupLabel,
          lineType: lineType,
          relationType: relationType,
          setClickEvent: setClickEvent,
          setCssClass: setCssClass,
          setLink: setLink,
          setTooltip: setTooltip,
          lookUpDomId: lookUpDomId
        };
        /***/
      },

      /***/
      "./src/diagrams/class/classRenderer-v2.js":
      /*!************************************************!*\
        !*** ./src/diagrams/class/classRenderer-v2.js ***!
        \************************************************/

      /*! exports provided: addClasses, addRelations, setConf, drawOld, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addClasses", function () {
          return addClasses;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addRelations", function () {
          return addRelations;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawOld", function () {
          return drawOld;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! dagre */
        "dagre");
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dagre__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _classDb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./classDb */
        "./src/diagrams/class/classDb.js");
        /* harmony import */


        var _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./parser/classDiagram */
        "./src/diagrams/class/parser/classDiagram.jison");
        /* harmony import */


        var _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__);
        /* harmony import */


        var _svgDraw__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./svgDraw */
        "./src/diagrams/class/svgDraw.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _dagre_wrapper_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ../../dagre-wrapper/index.js */
        "./src/dagre-wrapper/index.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js"); // import addHtmlLabel from 'dagre-d3/lib/label/add-html-label.js';


        _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].yy = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"];
        var idCache = {};
        var padding = 20;
        var conf = {
          dividerMargin: 10,
          padding: 5,
          textHeight: 10
        };
        /**
         * Function that adds the vertices found during parsing to the graph to be rendered.
         * @param vert Object containing the vertices.
         * @param g The graph that is to be drawn.
         */

        var addClasses = function addClasses(classes, g) {
          // const svg = select(`[id="${svgId}"]`);
          var keys = Object.keys(classes);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('keys:', keys);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info(classes); // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition


          keys.forEach(function (id) {
            var vertex = classes[id];
            /**
             * Variable for storing the classes for the vertex
             * @type {string}
             */

            var cssClassStr = '';

            if (vertex.cssClasses.length > 0) {
              cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');
            } // if (vertex.classes.length > 0) {
            //   classStr = vertex.classes.join(' ');
            // }


            var styles = {
              labelStyle: ''
            }; //getStylesFromArray(vertex.styles);
            // Use vertex id as text in the box if no text is provided by the graph definition

            var vertexText = vertex.text !== undefined ? vertex.text : vertex.id; // We create a SVG label, either by delegating to addHtmlLabel or manually
            // let vertexNode;
            // if (getConfig().flowchart.htmlLabels) {
            //   const node = {
            //     label: vertexText.replace(
            //       /fa[lrsb]?:fa-[\w-]+/g,
            //       s => `<i class='${s.replace(':', ' ')}'></i>`
            //     )
            //   };
            //   vertexNode = addHtmlLabel(svg, node).node();
            //   vertexNode.parentNode.removeChild(vertexNode);
            // } else {
            //   const svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            //   svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));
            //   const rows = vertexText.split(common.lineBreakRegex);
            //   for (let j = 0; j < rows.length; j++) {
            //     const tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
            //     tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
            //     tspan.setAttribute('dy', '1em');
            //     tspan.setAttribute('x', '1');
            //     tspan.textContent = rows[j];
            //     svgLabel.appendChild(tspan);
            //   }
            //   vertexNode = svgLabel;
            // }

            var radious = 0;
            var _shape = ''; // Set the shape based parameters

            switch (vertex.type) {
              case 'class':
                _shape = 'class_box';
                break;

              default:
                _shape = 'class_box';
            } // Add the node


            g.setNode(vertex.id, {
              labelStyle: styles.labelStyle,
              shape: _shape,
              labelText: vertexText,
              classData: vertex,
              rx: radious,
              ry: radious,
              class: cssClassStr,
              style: styles.style,
              id: vertex.id,
              domId: vertex.domId,
              haveCallback: vertex.haveCallback,
              link: vertex.link,
              width: vertex.type === 'group' ? 500 : undefined,
              type: vertex.type,
              padding: Object(_config__WEBPACK_IMPORTED_MODULE_7__["getConfig"])().flowchart.padding
            });

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('setNode', {
              labelStyle: styles.labelStyle,
              shape: _shape,
              labelText: vertexText,
              rx: radious,
              ry: radious,
              class: cssClassStr,
              style: styles.style,
              id: vertex.id,
              width: vertex.type === 'group' ? 500 : undefined,
              type: vertex.type,
              padding: Object(_config__WEBPACK_IMPORTED_MODULE_7__["getConfig"])().flowchart.padding
            });
          });
        };
        /**
         * Add edges to graph based on parsed graph defninition
         * @param {Object} edges The edges to add to the graph
         * @param {Object} g The graph object
         */


        var addRelations = function addRelations(relations, g) {
          var cnt = 0;
          var defaultStyle;
          var defaultLabelStyle; // if (typeof relations.defaultStyle !== 'undefined') {
          //   const defaultStyles = getStylesFromArray(relations.defaultStyle);
          //   defaultStyle = defaultStyles.style;
          //   defaultLabelStyle = defaultStyles.labelStyle;
          // }

          relations.forEach(function (edge) {
            cnt++;
            var edgeData = {}; //Set relationship style and line type

            edgeData.classes = 'relation';
            edgeData.pattern = edge.relation.lineType == 1 ? 'dashed' : 'solid';
            edgeData.id = 'id' + cnt; // Set link type for rendering

            if (edge.type === 'arrow_open') {
              edgeData.arrowhead = 'none';
            } else {
              edgeData.arrowhead = 'normal';
            }

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info(edgeData, edge); //Set edge extra labels
            //edgeData.startLabelLeft = edge.relationTitle1;


            edgeData.startLabelRight = edge.relationTitle1 === 'none' ? '' : edge.relationTitle1;
            edgeData.endLabelLeft = edge.relationTitle2 === 'none' ? '' : edge.relationTitle2; //edgeData.endLabelRight = edge.relationTitle2;
            //Set relation arrow types

            edgeData.arrowTypeStart = getArrowMarker(edge.relation.type1);
            edgeData.arrowTypeEnd = getArrowMarker(edge.relation.type2);
            var style = '';
            var labelStyle = '';

            if (typeof edge.style !== 'undefined') {
              var styles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(edge.style);
              style = styles.style;
              labelStyle = styles.labelStyle;
            } else {
              style = 'fill:none';

              if (typeof defaultStyle !== 'undefined') {
                style = defaultStyle;
              }

              if (typeof defaultLabelStyle !== 'undefined') {
                labelStyle = defaultLabelStyle;
              }
            }

            edgeData.style = style;
            edgeData.labelStyle = labelStyle;

            if (typeof edge.interpolate !== 'undefined') {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(edge.interpolate, d3__WEBPACK_IMPORTED_MODULE_0__["curveLinear"]);
            } else if (typeof relations.defaultInterpolate !== 'undefined') {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(relations.defaultInterpolate, d3__WEBPACK_IMPORTED_MODULE_0__["curveLinear"]);
            } else {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(conf.curve, d3__WEBPACK_IMPORTED_MODULE_0__["curveLinear"]);
            }

            edge.text = edge.title;

            if (typeof edge.text === 'undefined') {
              if (typeof edge.style !== 'undefined') {
                edgeData.arrowheadStyle = 'fill: #333';
              }
            } else {
              edgeData.arrowheadStyle = 'fill: #333';
              edgeData.labelpos = 'c';

              if (Object(_config__WEBPACK_IMPORTED_MODULE_7__["getConfig"])().flowchart.htmlLabels && false) {
                // eslint-disable-line
                edgeData.labelType = 'html';
                edgeData.label = '<span class="edgeLabel">' + edge.text + '</span>';
              } else {
                edgeData.labelType = 'text';
                edgeData.label = edge.text.replace(_common_common__WEBPACK_IMPORTED_MODULE_10__["default"].lineBreakRegex, '\n');

                if (typeof edge.style === 'undefined') {
                  edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';
                }

                edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');
              }
            } // Add the edge to the graph


            g.setEdge(edge.id1, edge.id2, edgeData, cnt);
          });
        }; // Todo optimize


        var getGraphId = function getGraphId(label) {
          var keys = Object.keys(idCache);

          for (var i = 0; i < keys.length; i++) {
            if (idCache[keys[i]].label === label) {
              return keys[i];
            }
          }

          return undefined;
        };

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };
        /**
         * Draws a flowchart in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var drawOld = function drawOld(text, id) {
          idCache = {};

          _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].yy.clear();

          _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].parse(text);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Rendering diagram ' + text); // Fetch the default direction, use TD if none was found


          var diagram = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id='".concat(id, "']")); // insertMarkers(diagram);
          // Layout graph, Create a new directed graph

          var g = new graphlib__WEBPACK_IMPORTED_MODULE_2___default.a.Graph({
            multigraph: true
          }); // Set an object for the graph label

          g.setGraph({
            isMultiGraph: true
          }); // Default to assigning a new object as a label for each new edge.

          g.setDefaultEdgeLabel(function () {
            return {};
          });

          var classes = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].getClasses();

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('classes:');

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info(classes);

          var keys = Object.keys(classes);

          for (var i = 0; i < keys.length; i++) {
            var classDef = classes[keys[i]];

            var node = _svgDraw__WEBPACK_IMPORTED_MODULE_6__["default"].drawClass(diagram, classDef, conf);

            idCache[node.id] = node; // Add nodes to the graph. The first argument is the node id. The second is
            // metadata about the node. In this case we're going to add labels to each of
            // our nodes.

            g.setNode(node.id, node);

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Org height: ' + node.height);
          }

          var relations = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].getRelations();

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('relations:', relations);

          relations.forEach(function (relation) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('tjoho' + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation));

            g.setEdge(getGraphId(relation.id1), getGraphId(relation.id2), {
              relation: relation
            }, relation.title || 'DEFAULT');
          });
          dagre__WEBPACK_IMPORTED_MODULE_1___default.a.layout(g);
          g.nodes().forEach(function (v) {
            if (typeof v !== 'undefined' && typeof g.node(v) !== 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Node ' + v + ': ' + JSON.stringify(g.node(v)));

              Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + Object(_classDb__WEBPACK_IMPORTED_MODULE_4__["lookUpDomId"])(v)).attr('transform', 'translate(' + (g.node(v).x - g.node(v).width / 2) + ',' + (g.node(v).y - g.node(v).height / 2) + ' )');
            }
          });
          g.edges().forEach(function (e) {
            if (typeof e !== 'undefined' && typeof g.edge(e) !== 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(g.edge(e)));

              _svgDraw__WEBPACK_IMPORTED_MODULE_6__["default"].drawEdge(diagram, g.edge(e), g.edge(e).relation, conf);
            }
          });
          var svgBounds = diagram.node().getBBox();
          var width = svgBounds.width + padding * 2;
          var height = svgBounds.height + padding * 2;
          Object(_utils__WEBPACK_IMPORTED_MODULE_9__["configureSvgSize"])(diagram, height, width, conf.useMaxWidth); // Ensure the viewBox includes the whole svgBounds area with extra space for padding

          var vBox = "".concat(svgBounds.x - padding, " ").concat(svgBounds.y - padding, " ").concat(width, " ").concat(height);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug("viewBox ".concat(vBox));

          diagram.attr('viewBox', vBox);
        };

        var draw = function draw(text, id) {
          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Drawing class');

          _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].clear(); // const parser = classDb.parser;
          // parser.yy = classDb;
          // Parse the graph definition
          // try {


          _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].parse(text); // } catch (err) {
          // log.debug('Parsing failed');
          // }
          // Fetch the default direction, use TD if none was found


          var dir = 'TD';
          var conf = Object(_config__WEBPACK_IMPORTED_MODULE_7__["getConfig"])().flowchart;

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('config:', conf);

          var nodeSpacing = conf.nodeSpacing || 50;
          var rankSpacing = conf.rankSpacing || 50; // Create the input mermaid.graph

          var g = new graphlib__WEBPACK_IMPORTED_MODULE_2___default.a.Graph({
            multigraph: true,
            compound: true
          }).setGraph({
            rankdir: dir,
            nodesep: nodeSpacing,
            ranksep: rankSpacing,
            marginx: 8,
            marginy: 8
          }).setDefaultEdgeLabel(function () {
            return {};
          }); // let subG;
          // const subGraphs = flowDb.getSubGraphs();
          // log.info('Subgraphs - ', subGraphs);
          // for (let i = subGraphs.length - 1; i >= 0; i--) {
          //   subG = subGraphs[i];
          //   log.info('Subgraph - ', subG);
          //   flowDb.addVertex(subG.id, subG.title, 'group', undefined, subG.classes);
          // }
          // Fetch the verices/nodes and edges/links from the parsed graph definition

          var classes = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].getClasses();

          var relations = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].getRelations();

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info(relations); // let i = 0;
          // for (i = subGraphs.length - 1; i >= 0; i--) {
          //   subG = subGraphs[i];
          //   selectAll('cluster').append('text');
          //   for (let j = 0; j < subG.nodes.length; j++) {
          //     g.setParent(subG.nodes[j], subG.id);
          //   }
          // }


          addClasses(classes, g, id);
          addRelations(relations, g); // Add custom shapes
          // flowChartShapes.addToRenderV2(addShape);
          // Set up an SVG group so that we can translate the final graph.

          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id=\"".concat(id, "\"]"));
          svg.attr('xmlns:xlink', 'http://www.w3.org/1999/xlink'); // Run the renderer. This is what draws the final graph.

          var element = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + id + ' g');
          Object(_dagre_wrapper_index_js__WEBPACK_IMPORTED_MODULE_8__["render"])(element, g, ['aggregation', 'extension', 'composition', 'dependency'], 'classDiagram', id); // element.selectAll('g.node').attr('title', function() {
          //   return flowDb.getTooltip(this.id);
          // });

          var padding = 8;
          var svgBounds = svg.node().getBBox();
          var width = svgBounds.width + padding * 2;
          var height = svgBounds.height + padding * 2;

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug("new ViewBox 0 0 ".concat(width, " ").concat(height), "translate(".concat(padding - g._label.marginx, ", ").concat(padding - g._label.marginy, ")"));

          Object(_utils__WEBPACK_IMPORTED_MODULE_9__["configureSvgSize"])(svg, height, width, conf.useMaxWidth);
          svg.attr('viewBox', "0 0 ".concat(width, " ").concat(height));
          svg.select('g').attr('transform', "translate(".concat(padding - g._label.marginx, ", ").concat(padding - svgBounds.y, ")")); // Index nodes
          // flowDb.indexNodes('subGraph' + i);
          // Add label rects for non html labels

          if (!conf.htmlLabels) {
            var labels = document.querySelectorAll('[id="' + id + '"] .edgeLabel .label');

            for (var k = 0; k < labels.length; k++) {
              var label = labels[k]; // Get dimensions of label

              var dim = label.getBBox();
              var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
              rect.setAttribute('rx', 0);
              rect.setAttribute('ry', 0);
              rect.setAttribute('width', dim.width);
              rect.setAttribute('height', dim.height);
              rect.setAttribute('style', 'fill:#e8e8e8;');
              label.insertBefore(rect, label.firstChild);
            }
          } // If node has a link, wrap it in an anchor SVG object.
          // const keys = Object.keys(classes);
          // keys.forEach(function(key) {
          //   const vertex = classes[key];
          //   if (vertex.link) {
          //     const node = select('#' + id + ' [id="' + key + '"]');
          //     if (node) {
          //       const link = document.createElementNS('http://www.w3.org/2000/svg', 'a');
          //       link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));
          //       link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);
          //       link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');
          //       const linkNode = node.insert(function() {
          //         return link;
          //       }, ':first-child');
          //       const shape = node.select('.label-container');
          //       if (shape) {
          //         linkNode.append(function() {
          //           return shape.node();
          //         });
          //       }
          //       const label = node.select('.label');
          //       if (label) {
          //         linkNode.append(function() {
          //           return label.node();
          //         });
          //       }
          //     }
          //   }
          // });

        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };

        function getArrowMarker(type) {
          var marker;

          switch (type) {
            case 0:
              marker = 'aggregation';
              break;

            case 1:
              marker = 'extension';
              break;

            case 2:
              marker = 'composition';
              break;

            case 3:
              marker = 'dependency';
              break;

            default:
              marker = 'none';
          }

          return marker;
        }
        /***/

      },

      /***/
      "./src/diagrams/class/classRenderer.js":
      /*!*********************************************!*\
        !*** ./src/diagrams/class/classRenderer.js ***!
        \*********************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! dagre */
        "dagre");
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dagre__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _classDb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./classDb */
        "./src/diagrams/class/classDb.js");
        /* harmony import */


        var _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./parser/classDiagram */
        "./src/diagrams/class/parser/classDiagram.jison");
        /* harmony import */


        var _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__);
        /* harmony import */


        var _svgDraw__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./svgDraw */
        "./src/diagrams/class/svgDraw.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].yy = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"];
        var idCache = {};
        var padding = 20;
        var conf = {
          dividerMargin: 10,
          padding: 5,
          textHeight: 10
        }; // Todo optimize

        var getGraphId = function getGraphId(label) {
          var keys = Object.keys(idCache);

          for (var i = 0; i < keys.length; i++) {
            if (idCache[keys[i]].label === label) {
              return keys[i];
            }
          }

          return undefined;
        };
        /**
         * Setup arrow head and define the marker. The result is appended to the svg.
         */


        var insertMarkers = function insertMarkers(elem) {
          elem.append('defs').append('marker').attr('id', 'extensionStart').attr('class', 'extension').attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 1,7 L18,13 V 1 Z');
          elem.append('defs').append('marker').attr('id', 'extensionEnd').attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 1,1 V 13 L18,7 Z'); // this is actual shape for arrowhead

          elem.append('defs').append('marker').attr('id', 'compositionStart').attr('class', 'extension').attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', 'compositionEnd').attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', 'aggregationStart').attr('class', 'extension').attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', 'aggregationEnd').attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', 'dependencyStart').attr('class', 'extension').attr('refX', 0).attr('refY', 7).attr('markerWidth', 190).attr('markerHeight', 240).attr('orient', 'auto').append('path').attr('d', 'M 5,7 L9,13 L1,7 L9,1 Z');
          elem.append('defs').append('marker').attr('id', 'dependencyEnd').attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');
        };

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };
        /**
         * Draws a flowchart in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(text, id) {
          idCache = {};

          _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].yy.clear();

          _parser_classDiagram__WEBPACK_IMPORTED_MODULE_5__["parser"].parse(text);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Rendering diagram ' + text); // Fetch the default direction, use TD if none was found


          var diagram = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id='".concat(id, "']"));
          diagram.attr('xmlns:xlink', 'http://www.w3.org/1999/xlink');
          insertMarkers(diagram); // Layout graph, Create a new directed graph

          var g = new graphlib__WEBPACK_IMPORTED_MODULE_2___default.a.Graph({
            multigraph: true
          }); // Set an object for the graph label

          g.setGraph({
            isMultiGraph: true
          }); // Default to assigning a new object as a label for each new edge.

          g.setDefaultEdgeLabel(function () {
            return {};
          });

          var classes = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].getClasses();

          var keys = Object.keys(classes);

          for (var i = 0; i < keys.length; i++) {
            var classDef = classes[keys[i]];

            var node = _svgDraw__WEBPACK_IMPORTED_MODULE_6__["default"].drawClass(diagram, classDef, conf);

            idCache[node.id] = node; // Add nodes to the graph. The first argument is the node id. The second is
            // metadata about the node. In this case we're going to add labels to each of
            // our nodes.

            g.setNode(node.id, node);

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Org height: ' + node.height);
          }

          var relations = _classDb__WEBPACK_IMPORTED_MODULE_4__["default"].getRelations();

          relations.forEach(function (relation) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('tjoho' + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation));

            g.setEdge(getGraphId(relation.id1), getGraphId(relation.id2), {
              relation: relation
            }, relation.title || 'DEFAULT');
          });
          dagre__WEBPACK_IMPORTED_MODULE_1___default.a.layout(g);
          g.nodes().forEach(function (v) {
            if (typeof v !== 'undefined' && typeof g.node(v) !== 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Node ' + v + ': ' + JSON.stringify(g.node(v)));

              Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + Object(_classDb__WEBPACK_IMPORTED_MODULE_4__["lookUpDomId"])(v)).attr('transform', 'translate(' + (g.node(v).x - g.node(v).width / 2) + ',' + (g.node(v).y - g.node(v).height / 2) + ' )');
            }
          });
          g.edges().forEach(function (e) {
            if (typeof e !== 'undefined' && typeof g.edge(e) !== 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(g.edge(e)));

              _svgDraw__WEBPACK_IMPORTED_MODULE_6__["default"].drawEdge(diagram, g.edge(e), g.edge(e).relation, conf);
            }
          });
          var svgBounds = diagram.node().getBBox();
          var width = svgBounds.width + padding * 2;
          var height = svgBounds.height + padding * 2;
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["configureSvgSize"])(diagram, height, width, conf.useMaxWidth); // Ensure the viewBox includes the whole svgBounds area with extra space for padding

          var vBox = "".concat(svgBounds.x - padding, " ").concat(svgBounds.y - padding, " ").concat(width, " ").concat(height);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug("viewBox ".concat(vBox));

          diagram.attr('viewBox', vBox);
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/class/parser/classDiagram.jison":
      /*!******************************************************!*\
        !*** ./src/diagrams/class/parser/classDiagram.jison ***!
        \******************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 7],
                $V1 = [1, 6],
                $V2 = [1, 14],
                $V3 = [1, 25],
                $V4 = [1, 28],
                $V5 = [1, 26],
                $V6 = [1, 27],
                $V7 = [1, 29],
                $V8 = [1, 30],
                $V9 = [1, 31],
                $Va = [1, 32],
                $Vb = [1, 34],
                $Vc = [1, 35],
                $Vd = [1, 36],
                $Ve = [10, 19],
                $Vf = [1, 48],
                $Vg = [1, 49],
                $Vh = [1, 50],
                $Vi = [1, 51],
                $Vj = [1, 52],
                $Vk = [1, 53],
                $Vl = [10, 19, 25, 32, 33, 41, 44, 45, 46, 47, 48, 49, 54, 56],
                $Vm = [10, 19, 23, 25, 32, 33, 37, 41, 44, 45, 46, 47, 48, 49, 54, 56, 71, 72, 73],
                $Vn = [10, 13, 17, 19],
                $Vo = [41, 71, 72, 73],
                $Vp = [41, 48, 49, 71, 72, 73],
                $Vq = [41, 44, 45, 46, 47, 71, 72, 73],
                $Vr = [10, 19, 25],
                $Vs = [1, 85];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "mermaidDoc": 4,
                "directive": 5,
                "graphConfig": 6,
                "openDirective": 7,
                "typeDirective": 8,
                "closeDirective": 9,
                "NEWLINE": 10,
                ":": 11,
                "argDirective": 12,
                "open_directive": 13,
                "type_directive": 14,
                "arg_directive": 15,
                "close_directive": 16,
                "CLASS_DIAGRAM": 17,
                "statements": 18,
                "EOF": 19,
                "statement": 20,
                "className": 21,
                "alphaNumToken": 22,
                "GENERICTYPE": 23,
                "relationStatement": 24,
                "LABEL": 25,
                "classStatement": 26,
                "methodStatement": 27,
                "annotationStatement": 28,
                "clickStatement": 29,
                "cssClassStatement": 30,
                "CLASS": 31,
                "STYLE_SEPARATOR": 32,
                "STRUCT_START": 33,
                "members": 34,
                "STRUCT_STOP": 35,
                "ANNOTATION_START": 36,
                "ANNOTATION_END": 37,
                "MEMBER": 38,
                "SEPARATOR": 39,
                "relation": 40,
                "STR": 41,
                "relationType": 42,
                "lineType": 43,
                "AGGREGATION": 44,
                "EXTENSION": 45,
                "COMPOSITION": 46,
                "DEPENDENCY": 47,
                "LINE": 48,
                "DOTTED_LINE": 49,
                "CALLBACK": 50,
                "LINK": 51,
                "LINK_TARGET": 52,
                "CLICK": 53,
                "CALLBACK_NAME": 54,
                "CALLBACK_ARGS": 55,
                "HREF": 56,
                "CSSCLASS": 57,
                "commentToken": 58,
                "textToken": 59,
                "graphCodeTokens": 60,
                "textNoTagsToken": 61,
                "TAGSTART": 62,
                "TAGEND": 63,
                "==": 64,
                "--": 65,
                "PCT": 66,
                "DEFAULT": 67,
                "SPACE": 68,
                "MINUS": 69,
                "keywords": 70,
                "UNICODE_TEXT": 71,
                "NUM": 72,
                "ALPHA": 73,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                10: "NEWLINE",
                11: ":",
                13: "open_directive",
                14: "type_directive",
                15: "arg_directive",
                16: "close_directive",
                17: "CLASS_DIAGRAM",
                19: "EOF",
                23: "GENERICTYPE",
                25: "LABEL",
                31: "CLASS",
                32: "STYLE_SEPARATOR",
                33: "STRUCT_START",
                35: "STRUCT_STOP",
                36: "ANNOTATION_START",
                37: "ANNOTATION_END",
                38: "MEMBER",
                39: "SEPARATOR",
                41: "STR",
                44: "AGGREGATION",
                45: "EXTENSION",
                46: "COMPOSITION",
                47: "DEPENDENCY",
                48: "LINE",
                49: "DOTTED_LINE",
                50: "CALLBACK",
                51: "LINK",
                52: "LINK_TARGET",
                53: "CLICK",
                54: "CALLBACK_NAME",
                55: "CALLBACK_ARGS",
                56: "HREF",
                57: "CSSCLASS",
                60: "graphCodeTokens",
                62: "TAGSTART",
                63: "TAGEND",
                64: "==",
                65: "--",
                66: "PCT",
                67: "DEFAULT",
                68: "SPACE",
                69: "MINUS",
                70: "keywords",
                71: "UNICODE_TEXT",
                72: "NUM",
                73: "ALPHA"
              },
              productions_: [0, [3, 1], [3, 2], [4, 1], [5, 4], [5, 6], [7, 1], [8, 1], [12, 1], [9, 1], [6, 4], [18, 1], [18, 2], [18, 3], [21, 1], [21, 2], [21, 3], [21, 2], [20, 1], [20, 2], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [26, 2], [26, 4], [26, 5], [26, 7], [28, 4], [34, 1], [34, 2], [27, 1], [27, 2], [27, 1], [27, 1], [24, 3], [24, 4], [24, 4], [24, 5], [40, 3], [40, 2], [40, 2], [40, 1], [42, 1], [42, 1], [42, 1], [42, 1], [43, 1], [43, 1], [29, 3], [29, 4], [29, 3], [29, 4], [29, 4], [29, 5], [29, 3], [29, 4], [29, 4], [29, 5], [29, 3], [29, 4], [29, 4], [29, 5], [30, 3], [58, 1], [58, 1], [59, 1], [59, 1], [59, 1], [59, 1], [59, 1], [59, 1], [59, 1], [61, 1], [61, 1], [61, 1], [61, 1], [22, 1], [22, 1], [22, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 6:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 7:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 8:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 9:
                    yy.parseDirective('}%%', 'close_directive', 'class');
                    break;

                  case 14:
                    this.$ = $$[$0];
                    break;

                  case 15:
                    this.$ = $$[$0 - 1] + $$[$0];
                    break;

                  case 16:
                    this.$ = $$[$0 - 2] + '~' + $$[$0 - 1] + $$[$0];
                    break;

                  case 17:
                    this.$ = $$[$0 - 1] + '~' + $$[$0];
                    break;

                  case 18:
                    yy.addRelation($$[$0]);
                    break;

                  case 19:
                    $$[$0 - 1].title = yy.cleanupLabel($$[$0]);
                    yy.addRelation($$[$0 - 1]);
                    break;

                  case 26:
                    yy.addClass($$[$0]);
                    break;

                  case 27:
                    yy.addClass($$[$0 - 2]);
                    yy.setCssClass($$[$0 - 2], $$[$0]);
                    break;

                  case 28:
                    /*console.log($$[$0-3],JSON.stringify($$[$0-1]));*/
                    yy.addClass($$[$0 - 3]);
                    yy.addMembers($$[$0 - 3], $$[$0 - 1]);
                    break;

                  case 29:
                    yy.addClass($$[$0 - 5]);
                    yy.setCssClass($$[$0 - 5], $$[$0 - 3]);
                    yy.addMembers($$[$0 - 5], $$[$0 - 1]);
                    break;

                  case 30:
                    yy.addAnnotation($$[$0], $$[$0 - 2]);
                    break;

                  case 31:
                    this.$ = [$$[$0]];
                    break;

                  case 32:
                    $$[$0].push($$[$0 - 1]);
                    this.$ = $$[$0];
                    break;

                  case 33:
                    /*console.log('Rel found',$$[$0]);*/
                    break;

                  case 34:
                    yy.addMember($$[$0 - 1], yy.cleanupLabel($$[$0]));
                    break;

                  case 35:
                    /*console.warn('Member',$$[$0]);*/
                    break;

                  case 36:
                    /*console.log('sep found',$$[$0]);*/
                    break;

                  case 37:
                    this.$ = {
                      'id1': $$[$0 - 2],
                      'id2': $$[$0],
                      relation: $$[$0 - 1],
                      relationTitle1: 'none',
                      relationTitle2: 'none'
                    };
                    break;

                  case 38:
                    this.$ = {
                      id1: $$[$0 - 3],
                      id2: $$[$0],
                      relation: $$[$0 - 1],
                      relationTitle1: $$[$0 - 2],
                      relationTitle2: 'none'
                    };
                    break;

                  case 39:
                    this.$ = {
                      id1: $$[$0 - 3],
                      id2: $$[$0],
                      relation: $$[$0 - 2],
                      relationTitle1: 'none',
                      relationTitle2: $$[$0 - 1]
                    };
                    break;

                  case 40:
                    this.$ = {
                      id1: $$[$0 - 4],
                      id2: $$[$0],
                      relation: $$[$0 - 2],
                      relationTitle1: $$[$0 - 3],
                      relationTitle2: $$[$0 - 1]
                    };
                    break;

                  case 41:
                    this.$ = {
                      type1: $$[$0 - 2],
                      type2: $$[$0],
                      lineType: $$[$0 - 1]
                    };
                    break;

                  case 42:
                    this.$ = {
                      type1: 'none',
                      type2: $$[$0],
                      lineType: $$[$0 - 1]
                    };
                    break;

                  case 43:
                    this.$ = {
                      type1: $$[$0 - 1],
                      type2: 'none',
                      lineType: $$[$0]
                    };
                    break;

                  case 44:
                    this.$ = {
                      type1: 'none',
                      type2: 'none',
                      lineType: $$[$0]
                    };
                    break;

                  case 45:
                    this.$ = yy.relationType.AGGREGATION;
                    break;

                  case 46:
                    this.$ = yy.relationType.EXTENSION;
                    break;

                  case 47:
                    this.$ = yy.relationType.COMPOSITION;
                    break;

                  case 48:
                    this.$ = yy.relationType.DEPENDENCY;
                    break;

                  case 49:
                    this.$ = yy.lineType.LINE;
                    break;

                  case 50:
                    this.$ = yy.lineType.DOTTED_LINE;
                    break;

                  case 51:
                  case 57:
                    this.$ = $$[$0 - 2];
                    yy.setClickEvent($$[$0 - 1], $$[$0]);
                    break;

                  case 52:
                  case 58:
                    this.$ = $$[$0 - 3];
                    yy.setClickEvent($$[$0 - 2], $$[$0 - 1]);
                    yy.setTooltip($$[$0 - 2], $$[$0]);
                    break;

                  case 53:
                  case 61:
                    this.$ = $$[$0 - 2];
                    yy.setLink($$[$0 - 1], $$[$0]);
                    break;

                  case 54:
                    this.$ = $$[$0 - 3];
                    yy.setLink($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;

                  case 55:
                  case 63:
                    this.$ = $$[$0 - 3];
                    yy.setLink($$[$0 - 2], $$[$0 - 1]);
                    yy.setTooltip($$[$0 - 2], $$[$0]);
                    break;

                  case 56:
                  case 64:
                    this.$ = $$[$0 - 4];
                    yy.setLink($$[$0 - 3], $$[$0 - 2], $$[$0]);
                    yy.setTooltip($$[$0 - 3], $$[$0 - 1]);
                    break;

                  case 59:
                    this.$ = $$[$0 - 3];
                    yy.setClickEvent($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;

                  case 60:
                    this.$ = $$[$0 - 4];
                    yy.setClickEvent($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);
                    yy.setTooltip($$[$0 - 3], $$[$0]);
                    break;

                  case 62:
                    this.$ = $$[$0 - 3];
                    yy.setLink($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;

                  case 65:
                    yy.setCssClass($$[$0 - 1], $$[$0]);
                    break;
                }
              },
              table: [{
                3: 1,
                4: 2,
                5: 3,
                6: 4,
                7: 5,
                13: $V0,
                17: $V1
              }, {
                1: [3]
              }, {
                1: [2, 1]
              }, {
                3: 8,
                4: 2,
                5: 3,
                6: 4,
                7: 5,
                13: $V0,
                17: $V1
              }, {
                1: [2, 3]
              }, {
                8: 9,
                14: [1, 10]
              }, {
                10: [1, 11]
              }, {
                14: [2, 6]
              }, {
                1: [2, 2]
              }, {
                9: 12,
                11: [1, 13],
                16: $V2
              }, o([11, 16], [2, 7]), {
                5: 23,
                7: 5,
                13: $V0,
                18: 15,
                20: 16,
                21: 24,
                22: 33,
                24: 17,
                26: 18,
                27: 19,
                28: 20,
                29: 21,
                30: 22,
                31: $V3,
                36: $V4,
                38: $V5,
                39: $V6,
                50: $V7,
                51: $V8,
                53: $V9,
                57: $Va,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                10: [1, 37]
              }, {
                12: 38,
                15: [1, 39]
              }, {
                10: [2, 9]
              }, {
                19: [1, 40]
              }, {
                10: [1, 41],
                19: [2, 11]
              }, o($Ve, [2, 18], {
                25: [1, 42]
              }), o($Ve, [2, 20]), o($Ve, [2, 21]), o($Ve, [2, 22]), o($Ve, [2, 23]), o($Ve, [2, 24]), o($Ve, [2, 25]), o($Ve, [2, 33], {
                40: 43,
                42: 46,
                43: 47,
                25: [1, 45],
                41: [1, 44],
                44: $Vf,
                45: $Vg,
                46: $Vh,
                47: $Vi,
                48: $Vj,
                49: $Vk
              }), {
                21: 54,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, o($Ve, [2, 35]), o($Ve, [2, 36]), {
                22: 55,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                21: 56,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                21: 57,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                21: 58,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                41: [1, 59]
              }, o($Vl, [2, 14], {
                22: 33,
                21: 60,
                23: [1, 61],
                71: $Vb,
                72: $Vc,
                73: $Vd
              }), o($Vm, [2, 79]), o($Vm, [2, 80]), o($Vm, [2, 81]), o($Vn, [2, 4]), {
                9: 62,
                16: $V2
              }, {
                16: [2, 8]
              }, {
                1: [2, 10]
              }, {
                5: 23,
                7: 5,
                13: $V0,
                18: 63,
                19: [2, 12],
                20: 16,
                21: 24,
                22: 33,
                24: 17,
                26: 18,
                27: 19,
                28: 20,
                29: 21,
                30: 22,
                31: $V3,
                36: $V4,
                38: $V5,
                39: $V6,
                50: $V7,
                51: $V8,
                53: $V9,
                57: $Va,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, o($Ve, [2, 19]), {
                21: 64,
                22: 33,
                41: [1, 65],
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                40: 66,
                42: 46,
                43: 47,
                44: $Vf,
                45: $Vg,
                46: $Vh,
                47: $Vi,
                48: $Vj,
                49: $Vk
              }, o($Ve, [2, 34]), {
                43: 67,
                48: $Vj,
                49: $Vk
              }, o($Vo, [2, 44], {
                42: 68,
                44: $Vf,
                45: $Vg,
                46: $Vh,
                47: $Vi
              }), o($Vp, [2, 45]), o($Vp, [2, 46]), o($Vp, [2, 47]), o($Vp, [2, 48]), o($Vq, [2, 49]), o($Vq, [2, 50]), o($Ve, [2, 26], {
                32: [1, 69],
                33: [1, 70]
              }), {
                37: [1, 71]
              }, {
                41: [1, 72]
              }, {
                41: [1, 73]
              }, {
                54: [1, 74],
                56: [1, 75]
              }, {
                22: 76,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, o($Vl, [2, 15]), o($Vl, [2, 17], {
                22: 33,
                21: 77,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }), {
                10: [1, 78]
              }, {
                19: [2, 13]
              }, o($Vr, [2, 37]), {
                21: 79,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                21: 80,
                22: 33,
                41: [1, 81],
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, o($Vo, [2, 43], {
                42: 82,
                44: $Vf,
                45: $Vg,
                46: $Vh,
                47: $Vi
              }), o($Vo, [2, 42]), {
                22: 83,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, {
                34: 84,
                38: $Vs
              }, {
                21: 86,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, o($Ve, [2, 51], {
                41: [1, 87]
              }), o($Ve, [2, 53], {
                41: [1, 89],
                52: [1, 88]
              }), o($Ve, [2, 57], {
                41: [1, 90],
                55: [1, 91]
              }), o($Ve, [2, 61], {
                41: [1, 93],
                52: [1, 92]
              }), o($Ve, [2, 65]), o($Vl, [2, 16]), o($Vn, [2, 5]), o($Vr, [2, 39]), o($Vr, [2, 38]), {
                21: 94,
                22: 33,
                71: $Vb,
                72: $Vc,
                73: $Vd
              }, o($Vo, [2, 41]), o($Ve, [2, 27], {
                33: [1, 95]
              }), {
                35: [1, 96]
              }, {
                34: 97,
                35: [2, 31],
                38: $Vs
              }, o($Ve, [2, 30]), o($Ve, [2, 52]), o($Ve, [2, 54]), o($Ve, [2, 55], {
                52: [1, 98]
              }), o($Ve, [2, 58]), o($Ve, [2, 59], {
                41: [1, 99]
              }), o($Ve, [2, 62]), o($Ve, [2, 63], {
                52: [1, 100]
              }), o($Vr, [2, 40]), {
                34: 101,
                38: $Vs
              }, o($Ve, [2, 28]), {
                35: [2, 32]
              }, o($Ve, [2, 56]), o($Ve, [2, 60]), o($Ve, [2, 64]), {
                35: [1, 102]
              }, o($Ve, [2, 29])],
              defaultActions: {
                2: [2, 1],
                4: [2, 3],
                7: [2, 6],
                8: [2, 2],
                14: [2, 9],
                39: [2, 8],
                40: [2, 10],
                63: [2, 13],
                97: [2, 32]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {},
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 13;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 14;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 11;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 16;
                      break;

                    case 4:
                      return 15;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      break;

                    case 7:
                      return 10;
                      break;

                    case 8:
                      /* skip whitespace */
                      break;

                    case 9:
                      return 17;
                      break;

                    case 10:
                      return 17;
                      break;

                    case 11:
                      this.begin("struct");
                      /*console.log('Starting struct');*/

                      return 33;
                      break;

                    case 12:
                      return "EOF_IN_STRUCT";
                      break;

                    case 13:
                      return "OPEN_IN_STRUCT";
                      break;

                    case 14:
                      /*console.log('Ending struct');*/
                      this.popState();
                      return 35;
                      break;

                    case 15:
                      /* nothing */
                      break;

                    case 16:
                      /*console.log('lex-member: ' + yy_.yytext);*/
                      return "MEMBER";
                      break;

                    case 17:
                      return 31;
                      break;

                    case 18:
                      return 57;
                      break;

                    case 19:
                      return 50;
                      break;

                    case 20:
                      return 51;
                      break;

                    case 21:
                      return 53;
                      break;

                    case 22:
                      return 36;
                      break;

                    case 23:
                      return 37;
                      break;

                    case 24:
                      this.begin("generic");
                      break;

                    case 25:
                      this.popState();
                      break;

                    case 26:
                      return "GENERICTYPE";
                      break;

                    case 27:
                      this.begin("string");
                      break;

                    case 28:
                      this.popState();
                      break;

                    case 29:
                      return "STR";
                      break;

                    case 30:
                      this.begin("href");
                      break;

                    case 31:
                      this.popState();
                      break;

                    case 32:
                      return 56;
                      break;

                    case 33:
                      this.begin("callback_name");
                      break;

                    case 34:
                      this.popState();
                      break;

                    case 35:
                      this.popState();
                      this.begin("callback_args");
                      break;

                    case 36:
                      return 54;
                      break;

                    case 37:
                      this.popState();
                      break;

                    case 38:
                      return 55;
                      break;

                    case 39:
                      return 52;
                      break;

                    case 40:
                      return 52;
                      break;

                    case 41:
                      return 52;
                      break;

                    case 42:
                      return 52;
                      break;

                    case 43:
                      return 45;
                      break;

                    case 44:
                      return 45;
                      break;

                    case 45:
                      return 47;
                      break;

                    case 46:
                      return 47;
                      break;

                    case 47:
                      return 46;
                      break;

                    case 48:
                      return 44;
                      break;

                    case 49:
                      return 48;
                      break;

                    case 50:
                      return 49;
                      break;

                    case 51:
                      return 25;
                      break;

                    case 52:
                      return 32;
                      break;

                    case 53:
                      return 69;
                      break;

                    case 54:
                      return 'DOT';
                      break;

                    case 55:
                      return 'PLUS';
                      break;

                    case 56:
                      return 66;
                      break;

                    case 57:
                      return 'EQUALS';
                      break;

                    case 58:
                      return 'EQUALS';
                      break;

                    case 59:
                      return 73;
                      break;

                    case 60:
                      return 'PUNCTUATION';
                      break;

                    case 61:
                      return 72;
                      break;

                    case 62:
                      return 71;
                      break;

                    case 63:
                      return 68;
                      break;

                    case 64:
                      return 19;
                      break;
                  }
                },
                rules: [/^(?:%%\{)/, /^(?:((?:(?!\}%%)[^:.])*))/, /^(?::)/, /^(?:\}%%)/, /^(?:((?:(?!\}%%).|\n)*))/, /^(?:%%(?!\{)*[^\n]*(\r?\n?)+)/, /^(?:%%[^\n]*(\r?\n)*)/, /^(?:(\r?\n)+)/, /^(?:\s+)/, /^(?:classDiagram-v2\b)/, /^(?:classDiagram\b)/, /^(?:[{])/, /^(?:$)/, /^(?:[{])/, /^(?:[}])/, /^(?:[\n])/, /^(?:[^{}\n]*)/, /^(?:class\b)/, /^(?:cssClass\b)/, /^(?:callback\b)/, /^(?:link\b)/, /^(?:click\b)/, /^(?:<<)/, /^(?:>>)/, /^(?:[~])/, /^(?:[~])/, /^(?:[^~]*)/, /^(?:["])/, /^(?:["])/, /^(?:[^"]*)/, /^(?:href[\s]+["])/, /^(?:["])/, /^(?:[^"]*)/, /^(?:call[\s]+)/, /^(?:\([\s]*\))/, /^(?:\()/, /^(?:[^(]*)/, /^(?:\))/, /^(?:[^)]*)/, /^(?:_self\b)/, /^(?:_blank\b)/, /^(?:_parent\b)/, /^(?:_top\b)/, /^(?:\s*<\|)/, /^(?:\s*\|>)/, /^(?:\s*>)/, /^(?:\s*<)/, /^(?:\s*\*)/, /^(?:\s*o\b)/, /^(?:--)/, /^(?:\.\.)/, /^(?::{1}[^:\n;]+)/, /^(?::{3})/, /^(?:-)/, /^(?:\.)/, /^(?:\+)/, /^(?:%)/, /^(?:=)/, /^(?:=)/, /^(?:\w+)/, /^(?:[!"#$%&'*+,-.`?\\/])/, /^(?:[0-9]+)/, /^(?:[\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6]|[\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377]|[\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5]|[\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA]|[\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE]|[\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA]|[\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0]|[\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977]|[\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2]|[\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A]|[\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39]|[\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8]|[\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C]|[\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C]|[\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99]|[\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0]|[\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D]|[\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3]|[\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10]|[\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1]|[\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81]|[\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3]|[\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6]|[\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A]|[\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081]|[\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D]|[\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0]|[\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310]|[\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C]|[\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711]|[\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7]|[\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C]|[\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16]|[\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF]|[\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC]|[\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D]|[\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D]|[\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3]|[\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F]|[\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128]|[\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184]|[\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3]|[\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6]|[\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE]|[\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C]|[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D]|[\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC]|[\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B]|[\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788]|[\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805]|[\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB]|[\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28]|[\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5]|[\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4]|[\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E]|[\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D]|[\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36]|[\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D]|[\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC]|[\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF]|[\uFFD2-\uFFD7\uFFDA-\uFFDC])/, /^(?:\s)/, /^(?:$)/],
                conditions: {
                  "arg_directive": {
                    "rules": [3, 4],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3],
                    "inclusive": false
                  },
                  "open_directive": {
                    "rules": [1],
                    "inclusive": false
                  },
                  "callback_args": {
                    "rules": [37, 38],
                    "inclusive": false
                  },
                  "callback_name": {
                    "rules": [34, 35, 36],
                    "inclusive": false
                  },
                  "href": {
                    "rules": [31, 32],
                    "inclusive": false
                  },
                  "struct": {
                    "rules": [12, 13, 14, 15, 16],
                    "inclusive": false
                  },
                  "generic": {
                    "rules": [25, 26],
                    "inclusive": false
                  },
                  "string": {
                    "rules": [28, 29],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 27, 30, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/class/styles.js":
      /*!**************************************!*\
        !*** ./src/diagrams/class/styles.js ***!
        \**************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return "g.classGroup text {\n  fill: ".concat(options.nodeBorder, ";\n  fill: ").concat(options.classText, ";\n  stroke: none;\n  font-family: ").concat(options.fontFamily, ";\n  font-size: 10px;\n\n  .title {\n    font-weight: bolder;\n  }\n\n}\n\n.classTitle {\n  font-weight: bolder;\n}\n.node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ").concat(options.mainBkg, ";\n    stroke: ").concat(options.nodeBorder, ";\n    stroke-width: 1px;\n  }\n\n\n.divider {\n  stroke: ").concat(options.nodeBorder, ";\n  stroke: 1;\n}\n\ng.clickable {\n  cursor: pointer;\n}\n\ng.classGroup rect {\n  fill: ").concat(options.mainBkg, ";\n  stroke: ").concat(options.nodeBorder, ";\n}\n\ng.classGroup line {\n  stroke: ").concat(options.nodeBorder, ";\n  stroke-width: 1;\n}\n\n.classLabel .box {\n  stroke: none;\n  stroke-width: 0;\n  fill: ").concat(options.mainBkg, ";\n  opacity: 0.5;\n}\n\n.classLabel .label {\n  fill: ").concat(options.nodeBorder, ";\n  font-size: 10px;\n}\n\n.relation {\n  stroke: ").concat(options.lineColor, ";\n  stroke-width: 1;\n  fill: none;\n}\n\n.dashed-line{\n  stroke-dasharray: 3;\n}\n\n#compositionStart, .composition {\n  fill: ").concat(options.lineColor, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#compositionEnd, .composition {\n  fill: ").concat(options.lineColor, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#dependencyStart, .dependency {\n  fill: ").concat(options.lineColor, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#dependencyStart, .dependency {\n  fill: ").concat(options.lineColor, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#extensionStart, .extension {\n  fill: ").concat(options.lineColor, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#extensionEnd, .extension {\n  fill: ").concat(options.lineColor, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#aggregationStart, .aggregation {\n  fill: ").concat(options.mainBkg, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n#aggregationEnd, .aggregation {\n  fill: ").concat(options.mainBkg, " !important;\n  stroke: ").concat(options.lineColor, " !important;\n  stroke-width: 1;\n}\n\n.edgeTerminals {\n  font-size: 11px;\n}\n\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/class/svgDraw.js":
      /*!***************************************!*\
        !*** ./src/diagrams/class/svgDraw.js ***!
        \***************************************/

      /*! exports provided: drawEdge, drawClass, parseMember, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawEdge", function () {
          return drawEdge;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawClass", function () {
          return drawClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseMember", function () {
          return parseMember;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _classDb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./classDb */
        "./src/diagrams/class/classDb.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");

        var edgeCount = 0;

        var drawEdge = function drawEdge(elem, path, relation, conf) {
          var getRelationType = function getRelationType(type) {
            switch (type) {
              case _classDb__WEBPACK_IMPORTED_MODULE_1__["relationType"].AGGREGATION:
                return 'aggregation';

              case _classDb__WEBPACK_IMPORTED_MODULE_1__["relationType"].EXTENSION:
                return 'extension';

              case _classDb__WEBPACK_IMPORTED_MODULE_1__["relationType"].COMPOSITION:
                return 'composition';

              case _classDb__WEBPACK_IMPORTED_MODULE_1__["relationType"].DEPENDENCY:
                return 'dependency';
            }
          };

          path.points = path.points.filter(function (p) {
            return !Number.isNaN(p.y);
          }); // The data for our line

          var lineData = path.points; // This is the accessor function we talked about above

          var lineFunction = Object(d3__WEBPACK_IMPORTED_MODULE_0__["line"])().x(function (d) {
            return d.x;
          }).y(function (d) {
            return d.y;
          }).curve(d3__WEBPACK_IMPORTED_MODULE_0__["curveBasis"]);
          var svgPath = elem.append('path').attr('d', lineFunction(lineData)).attr('id', 'edge' + edgeCount).attr('class', 'relation');
          var url = '';

          if (conf.arrowMarkerAbsolute) {
            url = window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;
            url = url.replace(/\(/g, '\\(');
            url = url.replace(/\)/g, '\\)');
          }

          if (relation.relation.lineType == 1) {
            svgPath.attr('class', 'relation dashed-line');
          }

          if (relation.relation.type1 !== 'none') {
            svgPath.attr('marker-start', 'url(' + url + '#' + getRelationType(relation.relation.type1) + 'Start' + ')');
          }

          if (relation.relation.type2 !== 'none') {
            svgPath.attr('marker-end', 'url(' + url + '#' + getRelationType(relation.relation.type2) + 'End' + ')');
          }

          var x, y;
          var l = path.points.length; // Calculate Label position

          var labelPosition = _utils__WEBPACK_IMPORTED_MODULE_2__["default"].calcLabelPosition(path.points);

          x = labelPosition.x;
          y = labelPosition.y;
          var p1_card_x, p1_card_y;
          var p2_card_x, p2_card_y;

          if (l % 2 !== 0 && l > 1) {
            var cardinality_1_point = _utils__WEBPACK_IMPORTED_MODULE_2__["default"].calcCardinalityPosition(relation.relation.type1 !== 'none', path.points, path.points[0]);

            var cardinality_2_point = _utils__WEBPACK_IMPORTED_MODULE_2__["default"].calcCardinalityPosition(relation.relation.type2 !== 'none', path.points, path.points[l - 1]);

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('cardinality_1_point ' + JSON.stringify(cardinality_1_point));

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('cardinality_2_point ' + JSON.stringify(cardinality_2_point));

            p1_card_x = cardinality_1_point.x;
            p1_card_y = cardinality_1_point.y;
            p2_card_x = cardinality_2_point.x;
            p2_card_y = cardinality_2_point.y;
          }

          if (typeof relation.title !== 'undefined') {
            var g = elem.append('g').attr('class', 'classLabel');
            var label = g.append('text').attr('class', 'label').attr('x', x).attr('y', y).attr('fill', 'red').attr('text-anchor', 'middle').text(relation.title);
            window.label = label;
            var bounds = label.node().getBBox();
            g.insert('rect', ':first-child').attr('class', 'box').attr('x', bounds.x - conf.padding / 2).attr('y', bounds.y - conf.padding / 2).attr('width', bounds.width + conf.padding).attr('height', bounds.height + conf.padding);
          }

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Rendering relation ' + JSON.stringify(relation));

          if (typeof relation.relationTitle1 !== 'undefined' && relation.relationTitle1 !== 'none') {
            var _g = elem.append('g').attr('class', 'cardinality');

            _g.append('text').attr('class', 'type1').attr('x', p1_card_x).attr('y', p1_card_y).attr('fill', 'black').attr('font-size', '6').text(relation.relationTitle1);
          }

          if (typeof relation.relationTitle2 !== 'undefined' && relation.relationTitle2 !== 'none') {
            var _g2 = elem.append('g').attr('class', 'cardinality');

            _g2.append('text').attr('class', 'type2').attr('x', p2_card_x).attr('y', p2_card_y).attr('fill', 'black').attr('font-size', '6').text(relation.relationTitle2);
          }

          edgeCount++;
        };

        var drawClass = function drawClass(elem, classDef, conf) {
          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('Rendering class ' + classDef);

          var id = classDef.id;
          var classInfo = {
            id: id,
            label: classDef.id,
            width: 0,
            height: 0
          }; // add class group

          var g = elem.append('g').attr('id', Object(_classDb__WEBPACK_IMPORTED_MODULE_1__["lookUpDomId"])(id)).attr('class', 'classGroup'); // add title

          var title;

          if (classDef.link) {
            title = g.append('svg:a').attr('xlink:href', classDef.link).attr('target', classDef.linkTarget).append('text').attr('y', conf.textHeight + conf.padding).attr('x', 0);
          } else {
            title = g.append('text').attr('y', conf.textHeight + conf.padding).attr('x', 0);
          } // add annotations


          var isFirst = true;
          classDef.annotations.forEach(function (member) {
            var titleText2 = title.append('tspan').text('«' + member + '»');
            if (!isFirst) titleText2.attr('dy', conf.textHeight);
            isFirst = false;
          });
          var classTitleString = classDef.id;

          if (classDef.type !== undefined && classDef.type !== '') {
            classTitleString += '<' + classDef.type + '>';
          }

          var classTitle = title.append('tspan').text(classTitleString).attr('class', 'title'); // If class has annotations the title needs to have an offset of the text height

          if (!isFirst) classTitle.attr('dy', conf.textHeight);
          var titleHeight = title.node().getBBox().height;
          var membersLine = g.append('line') // text label for the x axis
          .attr('x1', 0).attr('y1', conf.padding + titleHeight + conf.dividerMargin / 2).attr('y2', conf.padding + titleHeight + conf.dividerMargin / 2);
          var members = g.append('text') // text label for the x axis
          .attr('x', conf.padding).attr('y', titleHeight + conf.dividerMargin + conf.textHeight).attr('fill', 'white').attr('class', 'classText');
          isFirst = true;
          classDef.members.forEach(function (member) {
            addTspan(members, member, isFirst, conf);
            isFirst = false;
          });
          var membersBox = members.node().getBBox();
          var methodsLine = g.append('line') // text label for the x axis
          .attr('x1', 0).attr('y1', conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr('y2', conf.padding + titleHeight + conf.dividerMargin + membersBox.height);
          var methods = g.append('text') // text label for the x axis
          .attr('x', conf.padding).attr('y', titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr('fill', 'white').attr('class', 'classText');
          isFirst = true;
          classDef.methods.forEach(function (method) {
            addTspan(methods, method, isFirst, conf);
            isFirst = false;
          });
          var classBox = g.node().getBBox();
          var cssClassStr = ' ';

          if (classDef.cssClasses.length > 0) {
            cssClassStr = cssClassStr + classDef.cssClasses.join(' ');
          }

          var rect = g.insert('rect', ':first-child').attr('x', 0).attr('y', 0).attr('width', classBox.width + 2 * conf.padding).attr('height', classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr('class', cssClassStr);
          var rectWidth = rect.node().getBBox().width; // Center title
          // We subtract the width of each text element from the class box width and divide it by 2

          title.node().childNodes.forEach(function (x) {
            x.setAttribute('x', (rectWidth - x.getBBox().width) / 2);
          });

          if (classDef.tooltip) {
            title.insert('title').text(classDef.tooltip);
          }

          membersLine.attr('x2', rectWidth);
          methodsLine.attr('x2', rectWidth);
          classInfo.width = rectWidth;
          classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;
          return classInfo;
        };

        var parseMember = function parseMember(text) {
          var fieldRegEx = /(\+|-|~|#)?(\w+)(~\w+~|\[\])?\s+(\w+)/;
          var methodRegEx = /^([+|\-|~|#])?(\w+) *\( *(.*)\) *(\*|\$)? *(\w*[~|[\]]*\s*\w*~?)$/;
          var fieldMatch = text.match(fieldRegEx);
          var methodMatch = text.match(methodRegEx);

          if (fieldMatch && !methodMatch) {
            return buildFieldDisplay(fieldMatch);
          } else if (methodMatch) {
            return buildMethodDisplay(methodMatch);
          } else {
            return buildLegacyDisplay(text);
          }
        };

        var buildFieldDisplay = function buildFieldDisplay(parsedText) {
          var displayText = '';

          try {
            var visibility = parsedText[1] ? parsedText[1].trim() : '';
            var fieldType = parsedText[2] ? parsedText[2].trim() : '';
            var genericType = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';
            var fieldName = parsedText[4] ? parsedText[4].trim() : '';
            displayText = visibility + fieldType + genericType + ' ' + fieldName;
          } catch (err) {
            displayText = parsedText;
          }

          return {
            displayText: displayText,
            cssStyle: ''
          };
        };

        var buildMethodDisplay = function buildMethodDisplay(parsedText) {
          var cssStyle = '';
          var displayText = '';

          try {
            var visibility = parsedText[1] ? parsedText[1].trim() : '';
            var methodName = parsedText[2] ? parsedText[2].trim() : '';
            var parameters = parsedText[3] ? parseGenericTypes(parsedText[3].trim()) : '';
            var classifier = parsedText[4] ? parsedText[4].trim() : '';
            var returnType = parsedText[5] ? ' : ' + parseGenericTypes(parsedText[5]).trim() : '';
            displayText = visibility + methodName + '(' + parameters + ')' + returnType;
            cssStyle = parseClassifier(classifier);
          } catch (err) {
            displayText = parsedText;
          }

          return {
            displayText: displayText,
            cssStyle: cssStyle
          };
        };

        var buildLegacyDisplay = function buildLegacyDisplay(text) {
          // if for some reason we dont have any match, use old format to parse text
          var displayText = '';
          var cssStyle = '';
          var memberText = '';
          var returnType = '';
          var methodStart = text.indexOf('(');
          var methodEnd = text.indexOf(')');

          if (methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length) {
            var visibility = '';
            var methodName = '';
            var firstChar = text.substring(0, 1);

            if (firstChar.match(/\w/)) {
              methodName = text.substring(0, methodStart).trim();
            } else {
              if (firstChar.match(/\+|-|~|#/)) {
                visibility = firstChar;
              }

              methodName = text.substring(1, methodStart).trim();
            }

            var parameters = text.substring(methodStart + 1, methodEnd);
            var classifier = text.substring(methodEnd + 1, 1);
            cssStyle = parseClassifier(classifier);
            displayText = visibility + methodName + '(' + parseGenericTypes(parameters.trim()) + ')';

            if (methodEnd < memberText.length) {
              returnType = text.substring(methodEnd + 2).trim();

              if (returnType !== '') {
                returnType = ' : ' + parseGenericTypes(returnType);
              }
            }
          } else {
            // finally - if all else fails, just send the text back as written (other than parsing for generic types)
            displayText = parseGenericTypes(text);
          }

          return {
            displayText: displayText,
            cssStyle: cssStyle
          };
        };

        var addTspan = function addTspan(textEl, txt, isFirst, conf) {
          var member = parseMember(txt);
          var tSpan = textEl.append('tspan').attr('x', conf.padding).text(member.displayText);

          if (member.cssStyle !== '') {
            tSpan.attr('style', member.cssStyle);
          }

          if (!isFirst) {
            tSpan.attr('dy', conf.textHeight);
          }
        };

        var parseGenericTypes = function parseGenericTypes(text) {
          var cleanedText = text;

          if (text.indexOf('~') != -1) {
            cleanedText = cleanedText.replace('~', '<');
            cleanedText = cleanedText.replace('~', '>');
            return parseGenericTypes(cleanedText);
          } else {
            return cleanedText;
          }
        };

        var parseClassifier = function parseClassifier(classifier) {
          switch (classifier) {
            case '*':
              return 'font-style:italic;';

            case '$':
              return 'text-decoration:underline;';

            default:
              return '';
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          drawClass: drawClass,
          drawEdge: drawEdge,
          parseMember: parseMember
        };
        /***/
      },

      /***/
      "./src/diagrams/common/common.js":
      /*!***************************************!*\
        !*** ./src/diagrams/common/common.js ***!
        \***************************************/

      /*! exports provided: getRows, removeScript, sanitizeText, lineBreakRegex, hasBreaks, splitBreaks, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getRows", function () {
          return getRows;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "removeScript", function () {
          return removeScript;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "sanitizeText", function () {
          return sanitizeText;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "lineBreakRegex", function () {
          return lineBreakRegex;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "hasBreaks", function () {
          return hasBreaks;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "splitBreaks", function () {
          return splitBreaks;
        });

        var getRows = function getRows(s) {
          if (!s) return 1;
          var str = breakToPlaceholder(s);
          str = str.replace(/\\n/g, '#br#');
          return str.split('#br#');
        };

        var removeScript = function removeScript(txt) {
          var rs = '';
          var idx = 0;

          while (idx >= 0) {
            idx = txt.indexOf('<script');

            if (idx >= 0) {
              rs += txt.substr(0, idx);
              txt = txt.substr(idx + 1);
              idx = txt.indexOf('</script>');

              if (idx >= 0) {
                idx += 9;
                txt = txt.substr(idx);
              }
            } else {
              rs += txt;
              idx = -1;
              break;
            }
          }

          return rs;
        };

        var sanitizeText = function sanitizeText(text, config) {
          var txt = text;
          var htmlLabels = true;

          if (config.flowchart && (config.flowchart.htmlLabels === false || config.flowchart.htmlLabels === 'false')) {
            htmlLabels = false;
          }

          if (htmlLabels) {
            var level = config.securityLevel;

            if (level === 'antiscript') {
              txt = removeScript(txt);
            } else if (level !== 'loose') {
              // eslint-disable-line
              txt = breakToPlaceholder(txt);
              txt = txt.replace(/</g, '&lt;').replace(/>/g, '&gt;');
              txt = txt.replace(/=/g, '&equals;');
              txt = placeholderToBreak(txt);
            }
          }

          return txt;
        };

        var lineBreakRegex = /<br\s*\/?>/gi;

        var hasBreaks = function hasBreaks(text) {
          return /<br\s*[/]?>/gi.test(text);
        };

        var splitBreaks = function splitBreaks(text) {
          return text.split(/<br\s*[/]?>/gi);
        };

        var breakToPlaceholder = function breakToPlaceholder(s) {
          return s.replace(lineBreakRegex, '#br#');
        };

        var placeholderToBreak = function placeholderToBreak(s) {
          return s.replace(/#br#/g, '<br/>');
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          getRows: getRows,
          sanitizeText: sanitizeText,
          hasBreaks: hasBreaks,
          splitBreaks: splitBreaks,
          lineBreakRegex: lineBreakRegex,
          removeScript: removeScript
        };
        /***/
      },

      /***/
      "./src/diagrams/er/erDb.js":
      /*!*********************************!*\
        !*** ./src/diagrams/er/erDb.js ***!
        \*********************************/

      /*! exports provided: parseDirective, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /**
         *
         */


        var entities = {};
        var relationships = [];
        var title = '';
        var Cardinality = {
          ZERO_OR_ONE: 'ZERO_OR_ONE',
          ZERO_OR_MORE: 'ZERO_OR_MORE',
          ONE_OR_MORE: 'ONE_OR_MORE',
          ONLY_ONE: 'ONLY_ONE'
        };
        var Identification = {
          NON_IDENTIFYING: 'NON_IDENTIFYING',
          IDENTIFYING: 'IDENTIFYING'
        };

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_1__["default"].parseDirective(this, statement, context, type);
        };

        var addEntity = function addEntity(name) {
          if (typeof entities[name] === 'undefined') {
            entities[name] = {
              attributes: []
            };

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Added new entity :', name);
          }

          return entities[name];
        };

        var getEntities = function getEntities() {
          return entities;
        };

        var addAttributes = function addAttributes(entityName, attribs) {
          var entity = addEntity(entityName); // May do nothing (if entity has already been added)
          // Process attribs in reverse order due to effect of recursive construction (last attribute is first)

          var i;

          for (i = attribs.length - 1; i >= 0; i--) {
            entity.attributes.push(attribs[i]);

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Added attribute ', attribs[i].attributeName);
          }
        };
        /**
         * Add a relationship
         * @param entA The first entity in the relationship
         * @param rolA The role played by the first entity in relation to the second
         * @param entB The second entity in the relationship
         * @param rSpec The details of the relationship between the two entities
         */


        var addRelationship = function addRelationship(entA, rolA, entB, rSpec) {
          var rel = {
            entityA: entA,
            roleA: rolA,
            entityB: entB,
            relSpec: rSpec
          };
          relationships.push(rel);

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Added new relationship :', rel);
        };

        var getRelationships = function getRelationships() {
          return relationships;
        }; // Keep this - TODO: revisit...allow the diagram to have a title


        var setTitle = function setTitle(txt) {
          title = txt;
        };

        var getTitle = function getTitle() {
          return title;
        };

        var clear = function clear() {
          entities = {};
          relationships = [];
          title = '';
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          Cardinality: Cardinality,
          Identification: Identification,
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]().er;
          },
          addEntity: addEntity,
          addAttributes: addAttributes,
          getEntities: getEntities,
          addRelationship: addRelationship,
          getRelationships: getRelationships,
          clear: clear,
          setTitle: setTitle,
          getTitle: getTitle
        };
        /***/
      },

      /***/
      "./src/diagrams/er/erMarkers.js":
      /*!**************************************!*\
        !*** ./src/diagrams/er/erMarkers.js ***!
        \**************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var ERMarkers = {
          ONLY_ONE_START: 'ONLY_ONE_START',
          ONLY_ONE_END: 'ONLY_ONE_END',
          ZERO_OR_ONE_START: 'ZERO_OR_ONE_START',
          ZERO_OR_ONE_END: 'ZERO_OR_ONE_END',
          ONE_OR_MORE_START: 'ONE_OR_MORE_START',
          ONE_OR_MORE_END: 'ONE_OR_MORE_END',
          ZERO_OR_MORE_START: 'ZERO_OR_MORE_START',
          ZERO_OR_MORE_END: 'ZERO_OR_MORE_END'
        };
        /**
         * Put the markers into the svg DOM for later use with edge paths
         */

        var insertMarkers = function insertMarkers(elem, conf) {
          var marker;
          elem.append('defs').append('marker').attr('id', ERMarkers.ONLY_ONE_START).attr('refX', 0).attr('refY', 9).attr('markerWidth', 18).attr('markerHeight', 18).attr('orient', 'auto').append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M9,0 L9,18 M15,0 L15,18');
          elem.append('defs').append('marker').attr('id', ERMarkers.ONLY_ONE_END).attr('refX', 18).attr('refY', 9).attr('markerWidth', 18).attr('markerHeight', 18).attr('orient', 'auto').append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M3,0 L3,18 M9,0 L9,18');
          marker = elem.append('defs').append('marker').attr('id', ERMarkers.ZERO_OR_ONE_START).attr('refX', 0).attr('refY', 9).attr('markerWidth', 30).attr('markerHeight', 18).attr('orient', 'auto');
          marker.append('circle').attr('stroke', conf.stroke).attr('fill', 'white').attr('cx', 21).attr('cy', 9).attr('r', 6);
          marker.append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M9,0 L9,18');
          marker = elem.append('defs').append('marker').attr('id', ERMarkers.ZERO_OR_ONE_END).attr('refX', 30).attr('refY', 9).attr('markerWidth', 30).attr('markerHeight', 18).attr('orient', 'auto');
          marker.append('circle').attr('stroke', conf.stroke).attr('fill', 'white').attr('cx', 9).attr('cy', 9).attr('r', 6);
          marker.append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M21,0 L21,18');
          elem.append('defs').append('marker').attr('id', ERMarkers.ONE_OR_MORE_START).attr('refX', 18).attr('refY', 18).attr('markerWidth', 45).attr('markerHeight', 36).attr('orient', 'auto').append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M0,18 Q 18,0 36,18 Q 18,36 0,18 M42,9 L42,27');
          elem.append('defs').append('marker').attr('id', ERMarkers.ONE_OR_MORE_END).attr('refX', 27).attr('refY', 18).attr('markerWidth', 45).attr('markerHeight', 36).attr('orient', 'auto').append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M3,9 L3,27 M9,18 Q27,0 45,18 Q27,36 9,18');
          marker = elem.append('defs').append('marker').attr('id', ERMarkers.ZERO_OR_MORE_START).attr('refX', 18).attr('refY', 18).attr('markerWidth', 57).attr('markerHeight', 36).attr('orient', 'auto');
          marker.append('circle').attr('stroke', conf.stroke).attr('fill', 'white').attr('cx', 48).attr('cy', 18).attr('r', 6);
          marker.append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M0,18 Q18,0 36,18 Q18,36 0,18');
          marker = elem.append('defs').append('marker').attr('id', ERMarkers.ZERO_OR_MORE_END).attr('refX', 39).attr('refY', 18).attr('markerWidth', 57).attr('markerHeight', 36).attr('orient', 'auto');
          marker.append('circle').attr('stroke', conf.stroke).attr('fill', 'white').attr('cx', 9).attr('cy', 18).attr('r', 6);
          marker.append('path').attr('stroke', conf.stroke).attr('fill', 'none').attr('d', 'M21,18 Q39,0 57,18 Q39,36 21,18');
          return;
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          ERMarkers: ERMarkers,
          insertMarkers: insertMarkers
        };
        /***/
      },

      /***/
      "./src/diagrams/er/erRenderer.js":
      /*!***************************************!*\
        !*** ./src/diagrams/er/erRenderer.js ***!
        \***************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _erDb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./erDb */
        "./src/diagrams/er/erDb.js");
        /* harmony import */


        var _parser_erDiagram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./parser/erDiagram */
        "./src/diagrams/er/parser/erDiagram.jison");
        /* harmony import */


        var _parser_erDiagram__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_parser_erDiagram__WEBPACK_IMPORTED_MODULE_3__);
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! dagre */
        "dagre");
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dagre__WEBPACK_IMPORTED_MODULE_4__);
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _erMarkers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ./erMarkers */
        "./src/diagrams/er/erMarkers.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        var conf = {};
        /**
         * Allows the top-level API module to inject config specific to this renderer,
         * storing it in the local conf object. Note that generic config still needs to be
         * retrieved using getConfig() imported from the config module
         */

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);

          for (var i = 0; i < keys.length; i++) {
            conf[keys[i]] = cnf[keys[i]];
          }
        };
        /**
         * Draw attributes for an entity
         * @param groupNode the svg group node for the entity
         * @param entityTextNode the svg node for the entity label text
         * @param attributes an array of attributes defined for the entity (each attribute has a type and a name)
         * @return the bounding box of the entity, after attributes have been added
         */


        var drawAttributes = function drawAttributes(groupNode, entityTextNode, attributes) {
          var heightPadding = conf.entityPadding / 3; // Padding internal to attribute boxes

          var widthPadding = conf.entityPadding / 3; // Ditto

          var attrFontSize = conf.fontSize * 0.85;
          var labelBBox = entityTextNode.node().getBBox();
          var attributeNodes = []; // Intermediate storage for attribute nodes created so that we can do a second pass

          var maxTypeWidth = 0;
          var maxNameWidth = 0;
          var cumulativeHeight = labelBBox.height + heightPadding * 2;
          var attrNum = 1;
          attributes.forEach(function (item) {
            var attrPrefix = "".concat(entityTextNode.node().id, "-attr-").concat(attrNum); // Add a text node for the attribute type

            var typeNode = groupNode.append('text').attr('class', 'er entityLabel').attr('id', "".concat(attrPrefix, "-type")).attr('x', 0).attr('y', 0).attr('dominant-baseline', 'middle').attr('text-anchor', 'left').attr('style', 'font-family: ' + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().fontFamily + '; font-size: ' + attrFontSize + 'px').text(item.attributeType); // Add a text node for the attribute name

            var nameNode = groupNode.append('text').attr('class', 'er entityLabel').attr('id', "".concat(attrPrefix, "-name")).attr('x', 0).attr('y', 0).attr('dominant-baseline', 'middle').attr('text-anchor', 'left').attr('style', 'font-family: ' + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().fontFamily + '; font-size: ' + attrFontSize + 'px').text(item.attributeName); // Keep a reference to the nodes so that we can iterate through them later

            attributeNodes.push({
              tn: typeNode,
              nn: nameNode
            });
            var typeBBox = typeNode.node().getBBox();
            var nameBBox = nameNode.node().getBBox();
            maxTypeWidth = Math.max(maxTypeWidth, typeBBox.width);
            maxNameWidth = Math.max(maxNameWidth, nameBBox.width);
            cumulativeHeight += Math.max(typeBBox.height, nameBBox.height) + heightPadding * 2;
            attrNum += 1;
          }); // Calculate the new bounding box of the overall entity, now that attributes have been added

          var bBox = {
            width: Math.max(conf.minEntityWidth, Math.max(labelBBox.width + conf.entityPadding * 2, maxTypeWidth + maxNameWidth + widthPadding * 4)),
            height: attributes.length > 0 ? cumulativeHeight : Math.max(conf.minEntityHeight, labelBBox.height + conf.entityPadding * 2)
          }; // There might be some spare width for padding out attributes if the entity name is very long

          var spareWidth = Math.max(0, bBox.width - (maxTypeWidth + maxNameWidth) - widthPadding * 4);

          if (attributes.length > 0) {
            // Position the entity label near the top of the entity bounding box
            entityTextNode.attr('transform', 'translate(' + bBox.width / 2 + ',' + (heightPadding + labelBBox.height / 2) + ')'); // Add rectangular boxes for the attribute types/names

            var heightOffset = labelBBox.height + heightPadding * 2; // Start at the bottom of the entity label

            var attribStyle = 'attributeBoxOdd'; // We will flip the style on alternate rows to achieve a banded effect

            attributeNodes.forEach(function (nodePair) {
              // Calculate the alignment y co-ordinate for the type/name of the attribute
              var alignY = heightOffset + heightPadding + Math.max(nodePair.tn.node().getBBox().height, nodePair.nn.node().getBBox().height) / 2; // Position the type of the attribute

              nodePair.tn.attr('transform', 'translate(' + widthPadding + ',' + alignY + ')'); // Insert a rectangle for the type

              var typeRect = groupNode.insert('rect', '#' + nodePair.tn.node().id).attr('class', "er ".concat(attribStyle)).attr('fill', conf.fill).attr('fill-opacity', '100%').attr('stroke', conf.stroke).attr('x', 0).attr('y', heightOffset).attr('width', maxTypeWidth + widthPadding * 2 + spareWidth / 2).attr('height', nodePair.tn.node().getBBox().height + heightPadding * 2); // Position the name of the attribute

              nodePair.nn.attr('transform', 'translate(' + (parseFloat(typeRect.attr('width')) + widthPadding) + ',' + alignY + ')'); // Insert a rectangle for the name

              groupNode.insert('rect', '#' + nodePair.nn.node().id).attr('class', "er ".concat(attribStyle)).attr('fill', conf.fill).attr('fill-opacity', '100%').attr('stroke', conf.stroke).attr('x', "".concat(typeRect.attr('x') + typeRect.attr('width'))) //.attr('x', maxTypeWidth + (widthPadding * 2))
              .attr('y', heightOffset).attr('width', maxNameWidth + widthPadding * 2 + spareWidth / 2).attr('height', nodePair.nn.node().getBBox().height + heightPadding * 2); // Increment the height offset to move to the next row

              heightOffset += Math.max(nodePair.tn.node().getBBox().height, nodePair.nn.node().getBBox().height) + heightPadding * 2; // Flip the attribute style for row banding

              attribStyle = attribStyle == 'attributeBoxOdd' ? 'attributeBoxEven' : 'attributeBoxOdd';
            });
          } else {
            // Ensure the entity box is a decent size without any attributes
            bBox.height = Math.max(conf.minEntityHeight, cumulativeHeight); // Position the entity label in the middle of the box

            entityTextNode.attr('transform', 'translate(' + bBox.width / 2 + ',' + bBox.height / 2 + ')');
          }

          return bBox;
        };
        /**
         * Use D3 to construct the svg elements for the entities
         * @param svgNode the svg node that contains the diagram
         * @param entities The entities to be drawn
         * @param graph The graph that contains the vertex and edge definitions post-layout
         * @return The first entity that was inserted
         */


        var drawEntities = function drawEntities(svgNode, entities, graph) {
          var keys = Object.keys(entities);
          var firstOne;
          keys.forEach(function (id) {
            // Create a group for each entity
            var groupNode = svgNode.append('g').attr('id', id);
            firstOne = firstOne === undefined ? id : firstOne; // Label the entity - this is done first so that we can get the bounding box
            // which then determines the size of the rectangle

            var textId = 'entity-' + id;
            var textNode = groupNode.append('text').attr('class', 'er entityLabel').attr('id', textId).attr('x', 0).attr('y', 0).attr('dominant-baseline', 'middle').attr('text-anchor', 'middle').attr('style', 'font-family: ' + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().fontFamily + '; font-size: ' + conf.fontSize + 'px').text(id);

            var _drawAttributes = drawAttributes(groupNode, textNode, entities[id].attributes),
                entityWidth = _drawAttributes.width,
                entityHeight = _drawAttributes.height; // Draw the rectangle - insert it before the text so that the text is not obscured


            var rectNode = groupNode.insert('rect', '#' + textId).attr('class', 'er entityBox').attr('fill', conf.fill).attr('fill-opacity', '100%').attr('stroke', conf.stroke).attr('x', 0).attr('y', 0).attr('width', entityWidth).attr('height', entityHeight);
            var rectBBox = rectNode.node().getBBox(); // Add the entity to the graph

            graph.setNode(id, {
              width: rectBBox.width,
              height: rectBBox.height,
              shape: 'rect',
              id: id
            });
          });
          return firstOne;
        }; // drawEntities


        var adjustEntities = function adjustEntities(svgNode, graph) {
          graph.nodes().forEach(function (v) {
            if (typeof v !== 'undefined' && typeof graph.node(v) !== 'undefined') {
              svgNode.select('#' + v).attr('transform', 'translate(' + (graph.node(v).x - graph.node(v).width / 2) + ',' + (graph.node(v).y - graph.node(v).height / 2) + ' )');
            }
          });
          return;
        };

        var getEdgeName = function getEdgeName(rel) {
          return (rel.entityA + rel.roleA + rel.entityB).replace(/\s/g, '');
        };
        /**
         * Add each relationship to the graph
         * @param relationships the relationships to be added
         * @param g the graph
         * @return {Array} The array of relationships
         */


        var addRelationships = function addRelationships(relationships, g) {
          relationships.forEach(function (r) {
            g.setEdge(r.entityA, r.entityB, {
              relationship: r
            }, getEdgeName(r));
          });
          return relationships;
        }; // addRelationships


        var relCnt = 0;
        /**
         * Draw a relationship using edge information from the graph
         * @param svg the svg node
         * @param rel the relationship to draw in the svg
         * @param g the graph containing the edge information
         * @param insert the insertion point in the svg DOM (because relationships have markers that need to sit 'behind' opaque entity boxes)
         */

        var drawRelationshipFromLayout = function drawRelationshipFromLayout(svg, rel, g, insert) {
          relCnt++; // Find the edge relating to this relationship

          var edge = g.edge(rel.entityA, rel.entityB, getEdgeName(rel)); // Get a function that will generate the line path

          var lineFunction = Object(d3__WEBPACK_IMPORTED_MODULE_1__["line"])().x(function (d) {
            return d.x;
          }).y(function (d) {
            return d.y;
          }).curve(d3__WEBPACK_IMPORTED_MODULE_1__["curveBasis"]); // Insert the line at the right place

          var svgPath = svg.insert('path', '#' + insert).attr('class', 'er relationshipLine').attr('d', lineFunction(edge.points)).attr('stroke', conf.stroke).attr('fill', 'none'); // ...and with dashes if necessary

          if (rel.relSpec.relType === _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Identification.NON_IDENTIFYING) {
            svgPath.attr('stroke-dasharray', '8,8');
          } // TODO: Understand this better


          var url = '';

          if (conf.arrowMarkerAbsolute) {
            url = window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;
            url = url.replace(/\(/g, '\\(');
            url = url.replace(/\)/g, '\\)');
          } // Decide which start and end markers it needs. It may be possible to be more concise here
          // by reversing a start marker to make an end marker...but this will do for now
          // Note that the 'A' entity's marker is at the end of the relationship and the 'B' entity's marker is at the start


          switch (rel.relSpec.cardA) {
            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ZERO_OR_ONE:
              svgPath.attr('marker-end', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ZERO_OR_ONE_END + ')');
              break;

            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ZERO_OR_MORE:
              svgPath.attr('marker-end', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ZERO_OR_MORE_END + ')');
              break;

            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ONE_OR_MORE:
              svgPath.attr('marker-end', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ONE_OR_MORE_END + ')');
              break;

            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ONLY_ONE:
              svgPath.attr('marker-end', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ONLY_ONE_END + ')');
              break;
          }

          switch (rel.relSpec.cardB) {
            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ZERO_OR_ONE:
              svgPath.attr('marker-start', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ZERO_OR_ONE_START + ')');
              break;

            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ZERO_OR_MORE:
              svgPath.attr('marker-start', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ZERO_OR_MORE_START + ')');
              break;

            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ONE_OR_MORE:
              svgPath.attr('marker-start', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ONE_OR_MORE_START + ')');
              break;

            case _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].Cardinality.ONLY_ONE:
              svgPath.attr('marker-start', 'url(' + url + '#' + _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].ERMarkers.ONLY_ONE_START + ')');
              break;
          } // Now label the relationship
          // Find the half-way point


          var len = svgPath.node().getTotalLength();
          var labelPoint = svgPath.node().getPointAtLength(len * 0.5); // Append a text node containing the label

          var labelId = 'rel' + relCnt;
          var labelNode = svg.append('text').attr('class', 'er relationshipLabel').attr('id', labelId).attr('x', labelPoint.x).attr('y', labelPoint.y).attr('text-anchor', 'middle').attr('dominant-baseline', 'middle').attr('style', 'font-family: ' + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().fontFamily + '; font-size: ' + conf.fontSize + 'px').text(rel.roleA); // Figure out how big the opaque 'container' rectangle needs to be

          var labelBBox = labelNode.node().getBBox(); // Insert the opaque rectangle before the text label

          svg.insert('rect', '#' + labelId).attr('class', 'er relationshipLabelBox').attr('x', labelPoint.x - labelBBox.width / 2).attr('y', labelPoint.y - labelBBox.height / 2).attr('width', labelBBox.width).attr('height', labelBBox.height).attr('fill', 'white').attr('fill-opacity', '85%');
          return;
        };
        /**
         * Draw en E-R diagram in the tag with id: id based on the text definition of the diagram
         * @param text the text of the diagram
         * @param id the unique id of the DOM node that contains the diagram
         */


        var draw = function draw(text, id) {
          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info('Drawing ER diagram');

          _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          var parser = _parser_erDiagram__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
          parser.yy = _erDb__WEBPACK_IMPORTED_MODULE_2__["default"]; // Parse the text to populate erDb

          try {
            parser.parse(text);
          } catch (err) {
            _logger__WEBPACK_IMPORTED_MODULE_6__["log"].debug('Parsing failed');
          } // Get a reference to the svg node that contains the text


          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id='".concat(id, "']")); // Add cardinality marker definitions to the svg

          _erMarkers__WEBPACK_IMPORTED_MODULE_7__["default"].insertMarkers(svg, conf); // Now we have to construct the diagram in a specific way:
          // ---
          // 1. Create all the entities in the svg node at 0,0, but with the correct dimensions (allowing for text content)
          // 2. Make sure they are all added to the graph
          // 3. Add all the edges (relationships) to the graph aswell
          // 4. Let dagre do its magic to layout the graph.  This assigns:
          //    - the centre co-ordinates for each node, bearing in mind the dimensions and edge relationships
          //    - the path co-ordinates for each edge
          //    But it has no impact on the svg child nodes - the diagram remains with every entity rooted at 0,0
          // 5. Now assign a transform to each entity in the svg node so that it gets drawn in the correct place, as determined by
          //    its centre point, which is obtained from the graph, and it's width and height
          // 6. And finally, create all the edges in the svg node using information from the graph
          // ---
          // Create the graph


          var g; // TODO: Explore directed vs undirected graphs, and how the layout is affected
          // An E-R diagram could be said to be undirected, but there is merit in setting
          // the direction from parent to child in a one-to-many as this influences graphlib to
          // put the parent above the child (does it?), which is intuitive.  Most relationships
          // in ER diagrams are one-to-many.

          g = new graphlib__WEBPACK_IMPORTED_MODULE_0___default.a.Graph({
            multigraph: true,
            directed: true,
            compound: false
          }).setGraph({
            rankdir: conf.layoutDirection,
            marginx: 20,
            marginy: 20,
            nodesep: 100,
            edgesep: 100,
            ranksep: 100
          }).setDefaultEdgeLabel(function () {
            return {};
          }); // Draw the entities (at 0,0), returning the first svg node that got
          // inserted - this represents the insertion point for relationship paths

          var firstEntity = drawEntities(svg, _erDb__WEBPACK_IMPORTED_MODULE_2__["default"].getEntities(), g); // TODO: externalise the addition of entities to the graph - it's a bit 'buried' in the above
          // Add all the relationships to the graph

          var relationships = addRelationships(_erDb__WEBPACK_IMPORTED_MODULE_2__["default"].getRelationships(), g);
          dagre__WEBPACK_IMPORTED_MODULE_4___default.a.layout(g); // Node and edge positions will be updated
          // Adjust the positions of the entities so that they adhere to the layout

          adjustEntities(svg, g); // Draw the relationships

          relationships.forEach(function (rel) {
            drawRelationshipFromLayout(svg, rel, g, firstEntity);
          });
          var padding = conf.diagramPadding;
          var svgBounds = svg.node().getBBox();
          var width = svgBounds.width + padding * 2;
          var height = svgBounds.height + padding * 2;
          Object(_utils__WEBPACK_IMPORTED_MODULE_8__["configureSvgSize"])(svg, height, width, conf.useMaxWidth);
          svg.attr('viewBox', "".concat(svgBounds.x - padding, " ").concat(svgBounds.y - padding, " ").concat(width, " ").concat(height));
        }; // draw

        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/er/parser/erDiagram.jison":
      /*!************************************************!*\
        !*** ./src/diagrams/er/parser/erDiagram.jison ***!
        \************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 2],
                $V1 = [1, 5],
                $V2 = [6, 9, 11, 23, 37],
                $V3 = [1, 17],
                $V4 = [1, 20],
                $V5 = [1, 25],
                $V6 = [1, 26],
                $V7 = [1, 27],
                $V8 = [1, 28],
                $V9 = [1, 37],
                $Va = [23, 34, 35],
                $Vb = [4, 6, 9, 11, 23, 37],
                $Vc = [30, 31, 32, 33],
                $Vd = [22, 27];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "ER_DIAGRAM": 4,
                "document": 5,
                "EOF": 6,
                "directive": 7,
                "line": 8,
                "SPACE": 9,
                "statement": 10,
                "NEWLINE": 11,
                "openDirective": 12,
                "typeDirective": 13,
                "closeDirective": 14,
                ":": 15,
                "argDirective": 16,
                "entityName": 17,
                "relSpec": 18,
                "role": 19,
                "BLOCK_START": 20,
                "attributes": 21,
                "BLOCK_STOP": 22,
                "ALPHANUM": 23,
                "attribute": 24,
                "attributeType": 25,
                "attributeName": 26,
                "ATTRIBUTE_WORD": 27,
                "cardinality": 28,
                "relType": 29,
                "ZERO_OR_ONE": 30,
                "ZERO_OR_MORE": 31,
                "ONE_OR_MORE": 32,
                "ONLY_ONE": 33,
                "NON_IDENTIFYING": 34,
                "IDENTIFYING": 35,
                "WORD": 36,
                "open_directive": 37,
                "type_directive": 38,
                "arg_directive": 39,
                "close_directive": 40,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                4: "ER_DIAGRAM",
                6: "EOF",
                9: "SPACE",
                11: "NEWLINE",
                15: ":",
                20: "BLOCK_START",
                22: "BLOCK_STOP",
                23: "ALPHANUM",
                27: "ATTRIBUTE_WORD",
                30: "ZERO_OR_ONE",
                31: "ZERO_OR_MORE",
                32: "ONE_OR_MORE",
                33: "ONLY_ONE",
                34: "NON_IDENTIFYING",
                35: "IDENTIFYING",
                36: "WORD",
                37: "open_directive",
                38: "type_directive",
                39: "arg_directive",
                40: "close_directive"
              },
              productions_: [0, [3, 3], [3, 2], [5, 0], [5, 2], [8, 2], [8, 1], [8, 1], [8, 1], [7, 4], [7, 6], [10, 1], [10, 5], [10, 4], [10, 3], [10, 1], [17, 1], [21, 1], [21, 2], [24, 2], [25, 1], [26, 1], [18, 3], [28, 1], [28, 1], [28, 1], [28, 1], [29, 1], [29, 1], [19, 1], [19, 1], [12, 1], [13, 1], [16, 1], [14, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 1:
                    /*console.log('finished parsing');*/
                    break;

                  case 3:
                    this.$ = [];
                    break;

                  case 4:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 5:
                  case 6:
                    this.$ = $$[$0];
                    break;

                  case 7:
                  case 8:
                    this.$ = [];
                    break;

                  case 12:
                    yy.addEntity($$[$0 - 4]);
                    yy.addEntity($$[$0 - 2]);
                    yy.addRelationship($$[$0 - 4], $$[$0], $$[$0 - 2], $$[$0 - 3]);
                    /*console.log($$[$0-4] + $$[$0-3] + $$[$0-2] + ':' + $$[$0]);*/

                    break;

                  case 13:
                    /* console.log('detected block'); */
                    yy.addEntity($$[$0 - 3]);
                    yy.addAttributes($$[$0 - 3], $$[$0 - 1]);
                    /* console.log('handled block'); */

                    break;

                  case 14:
                    yy.addEntity($$[$0 - 2]);
                    break;

                  case 15:
                    yy.addEntity($$[$0]);
                    break;

                  case 16:
                    this.$ = $$[$0];
                    /*console.log('Entity: ' + $$[$0]);*/

                    break;

                  case 17:
                    this.$ = [$$[$0]];
                    break;

                  case 18:
                    $$[$0].push($$[$0 - 1]);
                    this.$ = $$[$0];
                    break;

                  case 19:
                    this.$ = {
                      attributeType: $$[$0 - 1],
                      attributeName: $$[$0]
                    };
                    break;

                  case 20:
                  case 21:
                    this.$ = $$[$0];
                    break;

                  case 22:
                    this.$ = {
                      cardA: $$[$0],
                      relType: $$[$0 - 1],
                      cardB: $$[$0 - 2]
                    };
                    /*console.log('relSpec: ' + $$[$0] + $$[$0-1] + $$[$0-2]);*/

                    break;

                  case 23:
                    this.$ = yy.Cardinality.ZERO_OR_ONE;
                    break;

                  case 24:
                    this.$ = yy.Cardinality.ZERO_OR_MORE;
                    break;

                  case 25:
                    this.$ = yy.Cardinality.ONE_OR_MORE;
                    break;

                  case 26:
                    this.$ = yy.Cardinality.ONLY_ONE;
                    break;

                  case 27:
                    this.$ = yy.Identification.NON_IDENTIFYING;
                    break;

                  case 28:
                    this.$ = yy.Identification.IDENTIFYING;
                    break;

                  case 29:
                    this.$ = $$[$0].replace(/"/g, '');
                    break;

                  case 30:
                    this.$ = $$[$0];
                    break;

                  case 31:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 32:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 33:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 34:
                    yy.parseDirective('}%%', 'close_directive', 'er');
                    break;
                }
              },
              table: [{
                3: 1,
                4: $V0,
                7: 3,
                12: 4,
                37: $V1
              }, {
                1: [3]
              }, o($V2, [2, 3], {
                5: 6
              }), {
                3: 7,
                4: $V0,
                7: 3,
                12: 4,
                37: $V1
              }, {
                13: 8,
                38: [1, 9]
              }, {
                38: [2, 31]
              }, {
                6: [1, 10],
                7: 15,
                8: 11,
                9: [1, 12],
                10: 13,
                11: [1, 14],
                12: 4,
                17: 16,
                23: $V3,
                37: $V1
              }, {
                1: [2, 2]
              }, {
                14: 18,
                15: [1, 19],
                40: $V4
              }, o([15, 40], [2, 32]), o($V2, [2, 8], {
                1: [2, 1]
              }), o($V2, [2, 4]), {
                7: 15,
                10: 21,
                12: 4,
                17: 16,
                23: $V3,
                37: $V1
              }, o($V2, [2, 6]), o($V2, [2, 7]), o($V2, [2, 11]), o($V2, [2, 15], {
                18: 22,
                28: 24,
                20: [1, 23],
                30: $V5,
                31: $V6,
                32: $V7,
                33: $V8
              }), o([6, 9, 11, 15, 20, 23, 30, 31, 32, 33, 37], [2, 16]), {
                11: [1, 29]
              }, {
                16: 30,
                39: [1, 31]
              }, {
                11: [2, 34]
              }, o($V2, [2, 5]), {
                17: 32,
                23: $V3
              }, {
                21: 33,
                22: [1, 34],
                24: 35,
                25: 36,
                27: $V9
              }, {
                29: 38,
                34: [1, 39],
                35: [1, 40]
              }, o($Va, [2, 23]), o($Va, [2, 24]), o($Va, [2, 25]), o($Va, [2, 26]), o($Vb, [2, 9]), {
                14: 41,
                40: $V4
              }, {
                40: [2, 33]
              }, {
                15: [1, 42]
              }, {
                22: [1, 43]
              }, o($V2, [2, 14]), {
                21: 44,
                22: [2, 17],
                24: 35,
                25: 36,
                27: $V9
              }, {
                26: 45,
                27: [1, 46]
              }, {
                27: [2, 20]
              }, {
                28: 47,
                30: $V5,
                31: $V6,
                32: $V7,
                33: $V8
              }, o($Vc, [2, 27]), o($Vc, [2, 28]), {
                11: [1, 48]
              }, {
                19: 49,
                23: [1, 51],
                36: [1, 50]
              }, o($V2, [2, 13]), {
                22: [2, 18]
              }, o($Vd, [2, 19]), o($Vd, [2, 21]), {
                23: [2, 22]
              }, o($Vb, [2, 10]), o($V2, [2, 12]), o($V2, [2, 29]), o($V2, [2, 30])],
              defaultActions: {
                5: [2, 31],
                7: [2, 2],
                20: [2, 34],
                31: [2, 33],
                37: [2, 20],
                44: [2, 18],
                47: [2, 22]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 37;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 38;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 15;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 40;
                      break;

                    case 4:
                      return 39;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      break;

                    case 7:
                      return 11;
                      break;

                    case 8:
                      /* skip whitespace */
                      break;

                    case 9:
                      return 9;
                      break;

                    case 10:
                      return 36;
                      break;

                    case 11:
                      return 4;
                      break;

                    case 12:
                      this.begin("block");
                      return 20;
                      break;

                    case 13:
                      /* skip whitespace in block */
                      break;

                    case 14:
                      return 27;
                      break;

                    case 15:
                      /* nothing */
                      break;

                    case 16:
                      this.popState();
                      return 22;
                      break;

                    case 17:
                      return yy_.yytext[0];
                      break;

                    case 18:
                      return 30;
                      break;

                    case 19:
                      return 31;
                      break;

                    case 20:
                      return 32;
                      break;

                    case 21:
                      return 33;
                      break;

                    case 22:
                      return 30;
                      break;

                    case 23:
                      return 31;
                      break;

                    case 24:
                      return 32;
                      break;

                    case 25:
                      return 34;
                      break;

                    case 26:
                      return 35;
                      break;

                    case 27:
                      return 34;
                      break;

                    case 28:
                      return 34;
                      break;

                    case 29:
                      return 23;
                      break;

                    case 30:
                      return yy_.yytext[0];
                      break;

                    case 31:
                      return 6;
                      break;
                  }
                },
                rules: [/^(?:%%\{)/i, /^(?:((?:(?!\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\}%%)/i, /^(?:((?:(?!\}%%).|\n)*))/i, /^(?:%(?!\{)[^\n]*)/i, /^(?:[^\}]%%[^\n]*)/i, /^(?:[\n]+)/i, /^(?:\s+)/i, /^(?:[\s]+)/i, /^(?:"[^"]*")/i, /^(?:erDiagram\b)/i, /^(?:\{)/i, /^(?:\s+)/i, /^(?:[A-Za-z][A-Za-z0-9\-_]*)/i, /^(?:[\n]+)/i, /^(?:\})/i, /^(?:.)/i, /^(?:\|o\b)/i, /^(?:\}o\b)/i, /^(?:\}\|)/i, /^(?:\|\|)/i, /^(?:o\|)/i, /^(?:o\{)/i, /^(?:\|\{)/i, /^(?:\.\.)/i, /^(?:--)/i, /^(?:\.-)/i, /^(?:-\.)/i, /^(?:[A-Za-z][A-Za-z0-9\-_]*)/i, /^(?:.)/i, /^(?:$)/i],
                conditions: {
                  "open_directive": {
                    "rules": [1],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4],
                    "inclusive": false
                  },
                  "block": {
                    "rules": [13, 14, 15, 16, 17],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/er/styles.js":
      /*!***********************************!*\
        !*** ./src/diagrams/er/styles.js ***!
        \***********************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return "\n  .entityBox {\n    fill: ".concat(options.mainBkg, ";\n    stroke: ").concat(options.nodeBorder, ";\n  }\n\n  .attributeBoxOdd {\n    fill: #ffffff;\n    stroke: ").concat(options.nodeBorder, ";\n  }\n\n  .attributeBoxEven {\n    fill: #f2f2f2;\n    stroke: ").concat(options.nodeBorder, ";\n  }\n\n  .relationshipLabelBox {\n    fill: ").concat(options.tertiaryColor, ";\n    opacity: 0.7;\n    background-color: ").concat(options.tertiaryColor, ";\n      rect {\n        opacity: 0.5;\n      }\n  }\n\n    .relationshipLine {\n      stroke: ").concat(options.lineColor, ";\n    }\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/flowchart/flowChartShapes.js":
      /*!***************************************************!*\
        !*** ./src/diagrams/flowchart/flowChartShapes.js ***!
        \***************************************************/

      /*! exports provided: addToRender, addToRenderV2, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addToRender", function () {
          return addToRender;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addToRenderV2", function () {
          return addToRenderV2;
        });
        /* harmony import */


        var dagre_d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! dagre-d3 */
        "dagre-d3");
        /* harmony import */


        var dagre_d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dagre_d3__WEBPACK_IMPORTED_MODULE_0__);

        function question(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var s = (w + h) * 0.9;
          var points = [{
            x: s / 2,
            y: 0
          }, {
            x: s,
            y: -s / 2
          }, {
            x: s / 2,
            y: -s
          }, {
            x: 0,
            y: -s / 2
          }];
          var shapeSvg = insertPolygonShape(parent, s, s, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function hexagon(parent, bbox, node) {
          var f = 4;
          var h = bbox.height;
          var m = h / f;
          var w = bbox.width + 2 * m;
          var points = [{
            x: m,
            y: 0
          }, {
            x: w - m,
            y: 0
          }, {
            x: w,
            y: -h / 2
          }, {
            x: w - m,
            y: -h
          }, {
            x: m,
            y: -h
          }, {
            x: 0,
            y: -h / 2
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function rect_left_inv_arrow(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: -h / 2,
            y: 0
          }, {
            x: w,
            y: 0
          }, {
            x: w,
            y: -h
          }, {
            x: -h / 2,
            y: -h
          }, {
            x: 0,
            y: -h / 2
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function lean_right(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: -2 * h / 6,
            y: 0
          }, {
            x: w - h / 6,
            y: 0
          }, {
            x: w + 2 * h / 6,
            y: -h
          }, {
            x: h / 6,
            y: -h
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function lean_left(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: 2 * h / 6,
            y: 0
          }, {
            x: w + h / 6,
            y: 0
          }, {
            x: w - 2 * h / 6,
            y: -h
          }, {
            x: -h / 6,
            y: -h
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function trapezoid(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: -2 * h / 6,
            y: 0
          }, {
            x: w + 2 * h / 6,
            y: 0
          }, {
            x: w - h / 6,
            y: -h
          }, {
            x: h / 6,
            y: -h
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function inv_trapezoid(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: h / 6,
            y: 0
          }, {
            x: w - h / 6,
            y: 0
          }, {
            x: w + 2 * h / 6,
            y: -h
          }, {
            x: -2 * h / 6,
            y: -h
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function rect_right_inv_arrow(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: 0,
            y: 0
          }, {
            x: w + h / 2,
            y: 0
          }, {
            x: w,
            y: -h / 2
          }, {
            x: w + h / 2,
            y: -h
          }, {
            x: 0,
            y: -h
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function stadium(parent, bbox, node) {
          var h = bbox.height;
          var w = bbox.width + h / 4;
          var shapeSvg = parent.insert('rect', ':first-child').attr('rx', h / 2).attr('ry', h / 2).attr('x', -w / 2).attr('y', -h / 2).attr('width', w).attr('height', h);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.rect(node, point);
          };

          return shapeSvg;
        }

        function subroutine(parent, bbox, node) {
          var w = bbox.width;
          var h = bbox.height;
          var points = [{
            x: 0,
            y: 0
          }, {
            x: w,
            y: 0
          }, {
            x: w,
            y: -h
          }, {
            x: 0,
            y: -h
          }, {
            x: 0,
            y: 0
          }, {
            x: -8,
            y: 0
          }, {
            x: w + 8,
            y: 0
          }, {
            x: w + 8,
            y: -h
          }, {
            x: -8,
            y: -h
          }, {
            x: -8,
            y: 0
          }];
          var shapeSvg = insertPolygonShape(parent, w, h, points);

          node.intersect = function (point) {
            return dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.polygon(node, points, point);
          };

          return shapeSvg;
        }

        function cylinder(parent, bbox, node) {
          var w = bbox.width;
          var rx = w / 2;
          var ry = rx / (2.5 + w / 50);
          var h = bbox.height + ry;
          var shape = 'M 0,' + ry + ' a ' + rx + ',' + ry + ' 0,0,0 ' + w + ' 0 a ' + rx + ',' + ry + ' 0,0,0 ' + -w + ' 0 l 0,' + h + ' a ' + rx + ',' + ry + ' 0,0,0 ' + w + ' 0 l 0,' + -h;
          var shapeSvg = parent.attr('label-offset-y', ry).insert('path', ':first-child').attr('d', shape).attr('transform', 'translate(' + -w / 2 + ',' + -(h / 2 + ry) + ')');

          node.intersect = function (point) {
            var pos = dagre_d3__WEBPACK_IMPORTED_MODULE_0___default.a.intersect.rect(node, point);
            var x = pos.x - node.x;

            if (rx != 0 && (Math.abs(x) < node.width / 2 || Math.abs(x) == node.width / 2 && Math.abs(pos.y - node.y) > node.height / 2 - ry)) {
              // ellipsis equation: x*x / a*a + y*y / b*b = 1
              // solve for y to get adjustion value for pos.y
              var y = ry * ry * (1 - x * x / (rx * rx));
              if (y != 0) y = Math.sqrt(y);
              y = ry - y;
              if (point.y - node.y > 0) y = -y;
              pos.y += y;
            }

            return pos;
          };

          return shapeSvg;
        }

        function addToRender(render) {
          render.shapes().question = question;
          render.shapes().hexagon = hexagon;
          render.shapes().stadium = stadium;
          render.shapes().subroutine = subroutine;
          render.shapes().cylinder = cylinder; // Add custom shape for box with inverted arrow on left side

          render.shapes().rect_left_inv_arrow = rect_left_inv_arrow; // Add custom shape for box with inverted arrow on left side

          render.shapes().lean_right = lean_right; // Add custom shape for box with inverted arrow on left side

          render.shapes().lean_left = lean_left; // Add custom shape for box with inverted arrow on left side

          render.shapes().trapezoid = trapezoid; // Add custom shape for box with inverted arrow on left side

          render.shapes().inv_trapezoid = inv_trapezoid; // Add custom shape for box with inverted arrow on right side

          render.shapes().rect_right_inv_arrow = rect_right_inv_arrow;
        }

        function addToRenderV2(addShape) {
          addShape({
            question: question
          });
          addShape({
            hexagon: hexagon
          });
          addShape({
            stadium: stadium
          });
          addShape({
            subroutine: subroutine
          });
          addShape({
            cylinder: cylinder
          }); // Add custom shape for box with inverted arrow on left side

          addShape({
            rect_left_inv_arrow: rect_left_inv_arrow
          }); // Add custom shape for box with inverted arrow on left side

          addShape({
            lean_right: lean_right
          }); // Add custom shape for box with inverted arrow on left side

          addShape({
            lean_left: lean_left
          }); // Add custom shape for box with inverted arrow on left side

          addShape({
            trapezoid: trapezoid
          }); // Add custom shape for box with inverted arrow on left side

          addShape({
            inv_trapezoid: inv_trapezoid
          }); // Add custom shape for box with inverted arrow on right side

          addShape({
            rect_right_inv_arrow: rect_right_inv_arrow
          });
        }

        function insertPolygonShape(parent, w, h, points) {
          return parent.insert('polygon', ':first-child').attr('points', points.map(function (d) {
            return d.x + ',' + d.y;
          }).join(' ')).attr('transform', 'translate(' + -w / 2 + ',' + h / 2 + ')');
        }
        /* harmony default export */


        __webpack_exports__["default"] = {
          addToRender: addToRender,
          addToRenderV2: addToRenderV2
        };
        /***/
      },

      /***/
      "./src/diagrams/flowchart/flowDb.js":
      /*!******************************************!*\
        !*** ./src/diagrams/flowchart/flowDb.js ***!
        \******************************************/

      /*! exports provided: parseDirective, lookUpDomId, addVertex, addSingleLink, addLink, updateLinkInterpolate, updateLink, addClass, setDirection, setClass, setLink, getTooltip, setClickEvent, bindFunctions, getDirection, getVertices, getEdges, getClasses, clear, setGen, defaultStyle, addSubGraph, getDepthFirstPos, indexNodes, getSubGraphs, firstGraph, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "lookUpDomId", function () {
          return lookUpDomId;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addVertex", function () {
          return addVertex;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addSingleLink", function () {
          return addSingleLink;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addLink", function () {
          return addLink;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "updateLinkInterpolate", function () {
          return updateLinkInterpolate;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "updateLink", function () {
          return updateLink;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addClass", function () {
          return addClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setDirection", function () {
          return setDirection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setClass", function () {
          return setClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setLink", function () {
          return setLink;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTooltip", function () {
          return getTooltip;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setClickEvent", function () {
          return setClickEvent;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "bindFunctions", function () {
          return bindFunctions;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getDirection", function () {
          return getDirection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getVertices", function () {
          return getVertices;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getEdges", function () {
          return getEdges;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClasses", function () {
          return getClasses;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setGen", function () {
          return setGen;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "defaultStyle", function () {
          return defaultStyle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addSubGraph", function () {
          return addSubGraph;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getDepthFirstPos", function () {
          return getDepthFirstPos;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "indexNodes", function () {
          return indexNodes;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getSubGraphs", function () {
          return getSubGraphs;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "firstGraph", function () {
          return firstGraph;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

        function _iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        }

        var MERMAID_DOM_ID_PREFIX = 'flowchart-';
        var vertexCounter = 0;

        var config = _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]();

        var vertices = {};
        var edges = [];
        var classes = [];
        var subGraphs = [];
        var subGraphLookup = {};
        var tooltips = {};
        var subCount = 0;
        var firstGraphFlag = true;
        var direction;
        var version; // As in graph
        // Functions to be run after graph rendering

        var funs = [];

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_4__["default"].parseDirective(this, statement, context, type);
        };
        /**
         * Function to lookup domId from id in the graph definition.
         * @param id
         * @public
         */


        var lookUpDomId = function lookUpDomId(id) {
          var veritceKeys = Object.keys(vertices);

          for (var i = 0; i < veritceKeys.length; i++) {
            if (vertices[veritceKeys[i]].id === id) {
              return vertices[veritceKeys[i]].domId;
            }
          }

          return id;
        };
        /**
         * Function called by parser when a node definition has been found
         * @param id
         * @param text
         * @param type
         * @param style
         * @param classes
         */


        var addVertex = function addVertex(_id, text, type, style, classes) {
          var txt;
          var id = _id;

          if (typeof id === 'undefined') {
            return;
          }

          if (id.trim().length === 0) {
            return;
          } // if (id[0].match(/\d/)) id = MERMAID_DOM_ID_PREFIX + id;


          if (typeof vertices[id] === 'undefined') {
            vertices[id] = {
              id: id,
              domId: MERMAID_DOM_ID_PREFIX + id + '-' + vertexCounter,
              styles: [],
              classes: []
            };
          }

          vertexCounter++;

          if (typeof text !== 'undefined') {
            config = _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]();
            txt = _common_common__WEBPACK_IMPORTED_MODULE_3__["default"].sanitizeText(text.trim(), config); // strip quotes if string starts and ends with a quote

            if (txt[0] === '"' && txt[txt.length - 1] === '"') {
              txt = txt.substring(1, txt.length - 1);
            }

            vertices[id].text = txt;
          } else {
            if (typeof vertices[id].text === 'undefined') {
              vertices[id].text = _id;
            }
          }

          if (typeof type !== 'undefined') {
            vertices[id].type = type;
          }

          if (typeof style !== 'undefined') {
            if (style !== null) {
              style.forEach(function (s) {
                vertices[id].styles.push(s);
              });
            }
          }

          if (typeof classes !== 'undefined') {
            if (classes !== null) {
              classes.forEach(function (s) {
                vertices[id].classes.push(s);
              });
            }
          }
        };
        /**
         * Function called by parser when a link/edge definition has been found
         * @param start
         * @param end
         * @param type
         * @param linktext
         */


        var addSingleLink = function addSingleLink(_start, _end, type, linktext) {
          var start = _start;
          var end = _end; // if (start[0].match(/\d/)) start = MERMAID_DOM_ID_PREFIX + start;
          // if (end[0].match(/\d/)) end = MERMAID_DOM_ID_PREFIX + end;
          // log.info('Got edge...', start, end);

          var edge = {
            start: start,
            end: end,
            type: undefined,
            text: ''
          };
          linktext = type.text;

          if (typeof linktext !== 'undefined') {
            edge.text = _common_common__WEBPACK_IMPORTED_MODULE_3__["default"].sanitizeText(linktext.trim(), config); // strip quotes if string starts and exnds with a quote

            if (edge.text[0] === '"' && edge.text[edge.text.length - 1] === '"') {
              edge.text = edge.text.substring(1, edge.text.length - 1);
            }
          }

          if (typeof type !== 'undefined') {
            edge.type = type.type;
            edge.stroke = type.stroke;
            edge.length = type.length;
          }

          edges.push(edge);
        };

        var addLink = function addLink(_start, _end, type, linktext) {
          var i, j;

          for (i = 0; i < _start.length; i++) {
            for (j = 0; j < _end.length; j++) {
              addSingleLink(_start[i], _end[j], type, linktext);
            }
          }
        };
        /**
         * Updates a link's line interpolation algorithm
         * @param pos
         * @param interpolate
         */


        var updateLinkInterpolate = function updateLinkInterpolate(positions, interp) {
          positions.forEach(function (pos) {
            if (pos === 'default') {
              edges.defaultInterpolate = interp;
            } else {
              edges[pos].interpolate = interp;
            }
          });
        };
        /**
         * Updates a link with a style
         * @param pos
         * @param style
         */


        var updateLink = function updateLink(positions, style) {
          positions.forEach(function (pos) {
            if (pos === 'default') {
              edges.defaultStyle = style;
            } else {
              if (_utils__WEBPACK_IMPORTED_MODULE_1__["default"].isSubstringInArray('fill', style) === -1) {
                style.push('fill:none');
              }

              edges[pos].style = style;
            }
          });
        };

        var addClass = function addClass(id, style) {
          if (typeof classes[id] === 'undefined') {
            classes[id] = {
              id: id,
              styles: [],
              textStyles: []
            };
          }

          if (typeof style !== 'undefined') {
            if (style !== null) {
              style.forEach(function (s) {
                if (s.match('color')) {
                  var newStyle1 = s.replace('fill', 'bgFill');
                  var newStyle2 = newStyle1.replace('color', 'fill');
                  classes[id].textStyles.push(newStyle2);
                }

                classes[id].styles.push(s);
              });
            }
          }
        };
        /**
         * Called by parser when a graph definition is found, stores the direction of the chart.
         * @param dir
         */


        var setDirection = function setDirection(dir) {
          direction = dir;

          if (direction.match(/.*</)) {
            direction = 'RL';
          }

          if (direction.match(/.*\^/)) {
            direction = 'BT';
          }

          if (direction.match(/.*>/)) {
            direction = 'LR';
          }

          if (direction.match(/.*v/)) {
            direction = 'TB';
          }
        };
        /**
         * Called by parser when a special node is found, e.g. a clickable element.
         * @param ids Comma separated list of ids
         * @param className Class to add
         */


        var setClass = function setClass(ids, className) {
          ids.split(',').forEach(function (_id) {
            // let id = version === 'gen-2' ? lookUpDomId(_id) : _id;
            var id = _id; // if (_id[0].match(/\d/)) id = MERMAID_DOM_ID_PREFIX + id;

            if (typeof vertices[id] !== 'undefined') {
              vertices[id].classes.push(className);
            }

            if (typeof subGraphLookup[id] !== 'undefined') {
              subGraphLookup[id].classes.push(className);
            }
          });
        };

        var setTooltip = function setTooltip(ids, tooltip) {
          ids.split(',').forEach(function (id) {
            if (typeof tooltip !== 'undefined') {
              tooltips[version === 'gen-1' ? lookUpDomId(id) : id] = _common_common__WEBPACK_IMPORTED_MODULE_3__["default"].sanitizeText(tooltip, config);
            }
          });
        };

        var setClickFun = function setClickFun(id, functionName, functionArgs) {
          var domId = lookUpDomId(id); // if (_id[0].match(/\d/)) id = MERMAID_DOM_ID_PREFIX + id;

          if (_config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]().securityLevel !== 'loose') {
            return;
          }

          if (typeof functionName === 'undefined') {
            return;
          }

          var argList = [];

          if (typeof functionArgs === 'string') {
            /* Splits functionArgs by ',', ignoring all ',' in double quoted strings */
            argList = functionArgs.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);

            for (var i = 0; i < argList.length; i++) {
              var item = argList[i].trim();
              /* Removes all double quotes at the start and end of an argument */

              /* This preserves all starting and ending whitespace inside */

              if (item.charAt(0) === '"' && item.charAt(item.length - 1) === '"') {
                item = item.substr(1, item.length - 2);
              }

              argList[i] = item;
            }
          }
          /* if no arguments passed into callback, default to passing in id */


          if (argList.length === 0) {
            argList.push(id);
          }

          if (typeof vertices[id] !== 'undefined') {
            vertices[id].haveCallback = true;
            funs.push(function () {
              var elem = document.querySelector("[id=\"".concat(domId, "\"]"));

              if (elem !== null) {
                elem.addEventListener('click', function () {
                  _utils__WEBPACK_IMPORTED_MODULE_1__["default"].runFunc.apply(_utils__WEBPACK_IMPORTED_MODULE_1__["default"], [functionName].concat(_toConsumableArray(argList)));
                }, false);
              }
            });
          }
        };
        /**
         * Called by parser when a link is found. Adds the URL to the vertex data.
         * @param ids Comma separated list of ids
         * @param linkStr URL to create a link for
         */


        var setLink = function setLink(ids, linkStr, target) {
          ids.split(',').forEach(function (id) {
            if (typeof vertices[id] !== 'undefined') {
              vertices[id].link = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].formatUrl(linkStr, config);
              vertices[id].linkTarget = target;
            }
          });
          setClass(ids, 'clickable');
        };

        var getTooltip = function getTooltip(id) {
          return tooltips[id];
        };
        /**
         * Called by parser when a click definition is found. Registers an event handler.
         * @param ids Comma separated list of ids
         * @param functionName Function to be called on click
         * @param tooltip Tooltip for the clickable element
         */


        var setClickEvent = function setClickEvent(ids, functionName, functionArgs) {
          ids.split(',').forEach(function (id) {
            setClickFun(id, functionName, functionArgs);
          });
          setClass(ids, 'clickable');
        };

        var bindFunctions = function bindFunctions(element) {
          funs.forEach(function (fun) {
            fun(element);
          });
        };

        var getDirection = function getDirection() {
          return direction.trim();
        };
        /**
         * Retrieval function for fetching the found nodes after parsing has completed.
         * @returns {{}|*|vertices}
         */


        var getVertices = function getVertices() {
          return vertices;
        };
        /**
         * Retrieval function for fetching the found links after parsing has completed.
         * @returns {{}|*|edges}
         */


        var getEdges = function getEdges() {
          return edges;
        };
        /**
         * Retrieval function for fetching the found class definitions after parsing has completed.
         * @returns {{}|*|classes}
         */


        var getClasses = function getClasses() {
          return classes;
        };

        var setupToolTips = function setupToolTips(element) {
          var tooltipElem = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('.mermaidTooltip');

          if ((tooltipElem._groups || tooltipElem)[0][0] === null) {
            tooltipElem = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('body').append('div').attr('class', 'mermaidTooltip').style('opacity', 0);
          }

          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(element).select('svg');
          var nodes = svg.selectAll('g.node');
          nodes.on('mouseover', function () {
            var el = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(this);
            var title = el.attr('title'); // Dont try to draw a tooltip if no data is provided

            if (title === null) {
              return;
            }

            var rect = this.getBoundingClientRect();
            tooltipElem.transition().duration(200).style('opacity', '.9');
            tooltipElem.html(el.attr('title')).style('left', window.scrollX + rect.left + (rect.right - rect.left) / 2 + 'px').style('top', window.scrollY + rect.top - 14 + document.body.scrollTop + 'px');
            el.classed('hover', true);
          }).on('mouseout', function () {
            tooltipElem.transition().duration(500).style('opacity', 0);
            var el = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])(this);
            el.classed('hover', false);
          });
        };

        funs.push(setupToolTips);
        /**
         * Clears the internal graph db so that a new graph can be parsed.
         */

        var clear = function clear(ver) {
          vertices = {};
          classes = {};
          edges = [];
          funs = [];
          funs.push(setupToolTips);
          subGraphs = [];
          subGraphLookup = {};
          subCount = 0;
          tooltips = [];
          firstGraphFlag = true;
          version = ver || 'gen-1';
        };

        var setGen = function setGen(ver) {
          version = ver || 'gen-1';
        };
        /**
         *
         * @returns {string}
         */


        var defaultStyle = function defaultStyle() {
          return 'fill:#ffa;stroke: #f66; stroke-width: 3px; stroke-dasharray: 5, 5;fill:#ffa;stroke: #666;';
        };
        /**
         * Clears the internal graph db so that a new graph can be parsed.
         */


        var addSubGraph = function addSubGraph(_id, list, _title) {
          var id = _id.trim();

          var title = _title;

          if (_id === _title && _title.match(/\s/)) {
            id = undefined;
          }

          function uniq(a) {
            var prims = {
              boolean: {},
              number: {},
              string: {}
            };
            var objs = [];
            return a.filter(function (item) {
              var type = _typeof(item);

              if (item.trim() === '') {
                return false;
              }

              if (type in prims) {
                return prims[type].hasOwnProperty(item) ? false : prims[type][item] = true; // eslint-disable-line
              } else {
                return objs.indexOf(item) >= 0 ? false : objs.push(item);
              }
            });
          }

          var nodeList = [];
          nodeList = uniq(nodeList.concat.apply(nodeList, list));

          if (version === 'gen-1') {
            _logger__WEBPACK_IMPORTED_MODULE_5__["log"].warn('LOOKING UP');

            for (var i = 0; i < nodeList.length; i++) {
              nodeList[i] = lookUpDomId(nodeList[i]);
            }
          }

          id = id || 'subGraph' + subCount; // if (id[0].match(/\d/)) id = lookUpDomId(id);

          title = title || '';
          title = _common_common__WEBPACK_IMPORTED_MODULE_3__["default"].sanitizeText(title, config);
          subCount = subCount + 1;
          var subGraph = {
            id: id,
            nodes: nodeList,
            title: title.trim(),
            classes: []
          };

          _logger__WEBPACK_IMPORTED_MODULE_5__["log"].info('Adding', subGraph.id, subGraph.nodes);
          /**
           * Deletes an id from all subgraphs
           */
          // const del = _id => {
          //   subGraphs.forEach(sg => {
          //     const pos = sg.nodes.indexOf(_id);
          //     if (pos >= 0) {
          //       sg.nodes.splice(pos, 1);
          //     }
          //   });
          // };
          // // Removes the members of this subgraph from any other subgraphs, a node only belong to one subgraph
          // subGraph.nodes.forEach(_id => del(_id));
          // Remove the members in the new subgraph if they already belong to another subgraph


          subGraph.nodes = makeUniq(subGraph, subGraphs).nodes;
          subGraphs.push(subGraph);
          subGraphLookup[id] = subGraph;
          return id;
        };

        var getPosForId = function getPosForId(id) {
          for (var i = 0; i < subGraphs.length; i++) {
            if (subGraphs[i].id === id) {
              return i;
            }
          }

          return -1;
        };

        var secCount = -1;
        var posCrossRef = [];

        var indexNodes2 = function indexNodes2(id, pos) {
          var nodes = subGraphs[pos].nodes;
          secCount = secCount + 1;

          if (secCount > 2000) {
            return;
          }

          posCrossRef[secCount] = pos; // Check if match

          if (subGraphs[pos].id === id) {
            return {
              result: true,
              count: 0
            };
          }

          var count = 0;
          var posCount = 1;

          while (count < nodes.length) {
            var childPos = getPosForId(nodes[count]); // Ignore regular nodes (pos will be -1)

            if (childPos >= 0) {
              var res = indexNodes2(id, childPos);

              if (res.result) {
                return {
                  result: true,
                  count: posCount + res.count
                };
              } else {
                posCount = posCount + res.count;
              }
            }

            count = count + 1;
          }

          return {
            result: false,
            count: posCount
          };
        };

        var getDepthFirstPos = function getDepthFirstPos(pos) {
          return posCrossRef[pos];
        };

        var indexNodes = function indexNodes() {
          secCount = -1;

          if (subGraphs.length > 0) {
            indexNodes2('none', subGraphs.length - 1, 0);
          }
        };

        var getSubGraphs = function getSubGraphs() {
          return subGraphs;
        };

        var firstGraph = function firstGraph() {
          if (firstGraphFlag) {
            firstGraphFlag = false;
            return true;
          }

          return false;
        };

        var destructStartLink = function destructStartLink(_str) {
          var str = _str.trim();

          var type = 'arrow_open';

          switch (str[0]) {
            case '<':
              type = 'arrow_point';
              str = str.slice(1);
              break;

            case 'x':
              type = 'arrow_cross';
              str = str.slice(1);
              break;

            case 'o':
              type = 'arrow_circle';
              str = str.slice(1);
              break;
          }

          var stroke = 'normal';

          if (str.indexOf('=') !== -1) {
            stroke = 'thick';
          }

          if (str.indexOf('.') !== -1) {
            stroke = 'dotted';
          }

          return {
            type: type,
            stroke: stroke
          };
        };

        var countChar = function countChar(char, str) {
          var length = str.length;
          var count = 0;

          for (var i = 0; i < length; ++i) {
            if (str[i] === char) {
              ++count;
            }
          }

          return count;
        };

        var destructEndLink = function destructEndLink(_str) {
          var str = _str.trim();

          var line = str.slice(0, -1);
          var type = 'arrow_open';

          switch (str.slice(-1)) {
            case 'x':
              type = 'arrow_cross';

              if (str[0] === 'x') {
                type = 'double_' + type;
                line = line.slice(1);
              }

              break;

            case '>':
              type = 'arrow_point';

              if (str[0] === '<') {
                type = 'double_' + type;
                line = line.slice(1);
              }

              break;

            case 'o':
              type = 'arrow_circle';

              if (str[0] === 'o') {
                type = 'double_' + type;
                line = line.slice(1);
              }

              break;
          }

          var stroke = 'normal';
          var length = line.length - 1;

          if (line[0] === '=') {
            stroke = 'thick';
          }

          var dots = countChar('.', line);

          if (dots) {
            stroke = 'dotted';
            length = dots;
          }

          return {
            type: type,
            stroke: stroke,
            length: length
          };
        };

        var destructLink = function destructLink(_str, _startStr) {
          var info = destructEndLink(_str);
          var startInfo;

          if (_startStr) {
            startInfo = destructStartLink(_startStr);

            if (startInfo.stroke !== info.stroke) {
              return {
                type: 'INVALID',
                stroke: 'INVALID'
              };
            }

            if (startInfo.type === 'arrow_open') {
              // -- xyz -->  - take arrow type from ending
              startInfo.type = info.type;
            } else {
              // x-- xyz -->  - not supported
              if (startInfo.type !== info.type) return {
                type: 'INVALID',
                stroke: 'INVALID'
              };
              startInfo.type = 'double_' + startInfo.type;
            }

            if (startInfo.type === 'double_arrow') {
              startInfo.type = 'double_arrow_point';
            }

            startInfo.length = info.length;
            return startInfo;
          }

          return info;
        }; // Todo optimizer this by caching existing nodes


        var exists = function exists(allSgs, _id) {
          var res = false;
          allSgs.forEach(function (sg) {
            var pos = sg.nodes.indexOf(_id);

            if (pos >= 0) {
              res = true;
            }
          });
          return res;
        };
        /**
         * Deletes an id from all subgraphs
         */


        var makeUniq = function makeUniq(sg, allSubgraphs) {
          var res = [];
          sg.nodes.forEach(function (_id, pos) {
            if (!exists(allSubgraphs, _id)) {
              res.push(sg.nodes[pos]);
            }
          });
          return {
            nodes: res
          };
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          parseDirective: parseDirective,
          defaultConfig: function defaultConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_2__["defaultConfig"].flowchart;
          },
          addVertex: addVertex,
          lookUpDomId: lookUpDomId,
          addLink: addLink,
          updateLinkInterpolate: updateLinkInterpolate,
          updateLink: updateLink,
          addClass: addClass,
          setDirection: setDirection,
          setClass: setClass,
          setTooltip: setTooltip,
          getTooltip: getTooltip,
          setClickEvent: setClickEvent,
          setLink: setLink,
          bindFunctions: bindFunctions,
          getDirection: getDirection,
          getVertices: getVertices,
          getEdges: getEdges,
          getClasses: getClasses,
          clear: clear,
          setGen: setGen,
          defaultStyle: defaultStyle,
          addSubGraph: addSubGraph,
          getDepthFirstPos: getDepthFirstPos,
          indexNodes: indexNodes,
          getSubGraphs: getSubGraphs,
          destructLink: destructLink,
          lex: {
            firstGraph: firstGraph
          },
          exists: exists,
          makeUniq: makeUniq
        };
        /***/
      },

      /***/
      "./src/diagrams/flowchart/flowRenderer-v2.js":
      /*!***************************************************!*\
        !*** ./src/diagrams/flowchart/flowRenderer-v2.js ***!
        \***************************************************/

      /*! exports provided: setConf, addVertices, addEdges, getClasses, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addVertices", function () {
          return addVertices;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addEdges", function () {
          return addEdges;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClasses", function () {
          return getClasses;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _flowDb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./flowDb */
        "./src/diagrams/flowchart/flowDb.js");
        /* harmony import */


        var _parser_flow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./parser/flow */
        "./src/diagrams/flowchart/parser/flow.jison");
        /* harmony import */


        var _parser_flow__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_parser_flow__WEBPACK_IMPORTED_MODULE_3__);
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _dagre_wrapper_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../dagre-wrapper/index.js */
        "./src/dagre-wrapper/index.js");
        /* harmony import */


        var dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! dagre-d3/lib/label/add-html-label.js */
        "dagre-d3/lib/label/add-html-label.js");
        /* harmony import */


        var dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        var conf = {};

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);

          for (var i = 0; i < keys.length; i++) {
            conf[keys[i]] = cnf[keys[i]];
          }
        };
        /**
         * Function that adds the vertices found during parsing to the graph to be rendered.
         * @param vert Object containing the vertices.
         * @param g The graph that is to be drawn.
         */


        var addVertices = function addVertices(vert, g, svgId) {
          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id=\"".concat(svgId, "\"]"));
          var keys = Object.keys(vert); // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition

          keys.forEach(function (id) {
            var vertex = vert[id];
            /**
             * Variable for storing the classes for the vertex
             * @type {string}
             */

            var classStr = 'default';

            if (vertex.classes.length > 0) {
              classStr = vertex.classes.join(' ');
            }

            var styles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(vertex.styles); // Use vertex id as text in the box if no text is provided by the graph definition

            var vertexText = vertex.text !== undefined ? vertex.text : vertex.id; // We create a SVG label, either by delegating to addHtmlLabel or manually

            var vertexNode;

            if (Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.htmlLabels) {
              // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?
              var node = {
                label: vertexText.replace(/fa[lrsb]?:fa-[\w-]+/g, function (s) {
                  return "<i class='".concat(s.replace(':', ' '), "'></i>");
                })
              };
              vertexNode = dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6___default()(svg, node).node();
              vertexNode.parentNode.removeChild(vertexNode);
            } else {
              var svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
              svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));
              var rows = vertexText.split(_common_common__WEBPACK_IMPORTED_MODULE_8__["default"].lineBreakRegex);

              for (var j = 0; j < rows.length; j++) {
                var tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
                tspan.setAttribute('dy', '1em');
                tspan.setAttribute('x', '1');
                tspan.textContent = rows[j];
                svgLabel.appendChild(tspan);
              }

              vertexNode = svgLabel;
            }

            var radious = 0;
            var _shape = ''; // Set the shape based parameters

            switch (vertex.type) {
              case 'round':
                radious = 5;
                _shape = 'rect';
                break;

              case 'square':
                _shape = 'rect';
                break;

              case 'diamond':
                _shape = 'question';
                break;

              case 'hexagon':
                _shape = 'hexagon';
                break;

              case 'odd':
                _shape = 'rect_left_inv_arrow';
                break;

              case 'lean_right':
                _shape = 'lean_right';
                break;

              case 'lean_left':
                _shape = 'lean_left';
                break;

              case 'trapezoid':
                _shape = 'trapezoid';
                break;

              case 'inv_trapezoid':
                _shape = 'inv_trapezoid';
                break;

              case 'odd_right':
                _shape = 'rect_left_inv_arrow';
                break;

              case 'circle':
                _shape = 'circle';
                break;

              case 'ellipse':
                _shape = 'ellipse';
                break;

              case 'stadium':
                _shape = 'stadium';
                break;

              case 'subroutine':
                _shape = 'subroutine';
                break;

              case 'cylinder':
                _shape = 'cylinder';
                break;

              case 'group':
                _shape = 'rect';
                break;

              default:
                _shape = 'rect';
            } // Add the node


            g.setNode(vertex.id, {
              labelStyle: styles.labelStyle,
              shape: _shape,
              labelText: vertexText,
              rx: radious,
              ry: radious,
              class: classStr,
              style: styles.style,
              id: vertex.id,
              link: vertex.link,
              linkTarget: vertex.linkTarget,
              tooltip: _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getTooltip(vertex.id) || '',
              domId: _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(vertex.id),
              haveCallback: vertex.haveCallback,
              width: vertex.type === 'group' ? 500 : undefined,
              type: vertex.type,
              padding: Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.padding
            });

            _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('setNode', {
              labelStyle: styles.labelStyle,
              shape: _shape,
              labelText: vertexText,
              rx: radious,
              ry: radious,
              class: classStr,
              style: styles.style,
              id: vertex.id,
              domId: _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(vertex.id),
              width: vertex.type === 'group' ? 500 : undefined,
              type: vertex.type,
              padding: Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.padding
            });
          });
        };
        /**
         * Add edges to graph based on parsed graph defninition
         * @param {Object} edges The edges to add to the graph
         * @param {Object} g The graph object
         */


        var addEdges = function addEdges(edges, g) {
          var cnt = 0;
          var defaultStyle;
          var defaultLabelStyle;

          if (typeof edges.defaultStyle !== 'undefined') {
            var defaultStyles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(edges.defaultStyle);
            defaultStyle = defaultStyles.style;
            defaultLabelStyle = defaultStyles.labelStyle;
          }

          edges.forEach(function (edge) {
            cnt++; // Identify Link

            var linkId = 'L-' + edge.start + '-' + edge.end;
            var linkNameStart = 'LS-' + edge.start;
            var linkNameEnd = 'LE-' + edge.end;
            var edgeData = {
              style: '',
              labelStyle: ''
            };
            edgeData.minlen = edge.length || 1; //edgeData.id = 'id' + cnt;
            // Set link type for rendering

            if (edge.type === 'arrow_open') {
              edgeData.arrowhead = 'none';
            } else {
              edgeData.arrowhead = 'normal';
            } // Check of arrow types, placed here in order not to break old rendering


            edgeData.arrowTypeStart = 'arrow_open';
            edgeData.arrowTypeEnd = 'arrow_open';
            /* eslint-disable no-fallthrough */

            switch (edge.type) {
              case 'double_arrow_cross':
                edgeData.arrowTypeStart = 'arrow_cross';

              case 'arrow_cross':
                edgeData.arrowTypeEnd = 'arrow_cross';
                break;

              case 'double_arrow_point':
                edgeData.arrowTypeStart = 'arrow_point';

              case 'arrow_point':
                edgeData.arrowTypeEnd = 'arrow_point';
                break;

              case 'double_arrow_circle':
                edgeData.arrowTypeStart = 'arrow_circle';

              case 'arrow_circle':
                edgeData.arrowTypeEnd = 'arrow_circle';
                break;
            }

            var style = '';
            var labelStyle = '';

            switch (edge.stroke) {
              case 'normal':
                style = 'fill:none;';

                if (typeof defaultStyle !== 'undefined') {
                  style = defaultStyle;
                }

                if (typeof defaultLabelStyle !== 'undefined') {
                  labelStyle = defaultLabelStyle;
                }

                edgeData.thickness = 'normal';
                edgeData.pattern = 'solid';
                break;

              case 'dotted':
                edgeData.thickness = 'normal';
                edgeData.pattern = 'dotted';
                edgeData.style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';
                break;

              case 'thick':
                edgeData.thickness = 'thick';
                edgeData.pattern = 'solid';
                edgeData.style = 'stroke-width: 3.5px;fill:none;';
                break;
            }

            if (typeof edge.style !== 'undefined') {
              var styles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(edge.style);
              style = styles.style;
              labelStyle = styles.labelStyle;
            }

            edgeData.style = edgeData.style += style;
            edgeData.labelStyle = edgeData.labelStyle += labelStyle;

            if (typeof edge.interpolate !== 'undefined') {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(edge.interpolate, d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"]);
            } else if (typeof edges.defaultInterpolate !== 'undefined') {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(edges.defaultInterpolate, d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"]);
            } else {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(conf.curve, d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"]);
            }

            if (typeof edge.text === 'undefined') {
              if (typeof edge.style !== 'undefined') {
                edgeData.arrowheadStyle = 'fill: #333';
              }
            } else {
              edgeData.arrowheadStyle = 'fill: #333';
              edgeData.labelpos = 'c';
            } // if (getConfig().flowchart.htmlLabels && false) {
            //   // eslint-disable-line
            //   edgeData.labelType = 'html';
            //   edgeData.label = `<span id="L-${linkId}" class="edgeLabel L-${linkNameStart}' L-${linkNameEnd}">${edge.text}</span>`;
            // } else {


            edgeData.labelType = 'text';
            edgeData.label = edge.text.replace(_common_common__WEBPACK_IMPORTED_MODULE_8__["default"].lineBreakRegex, '\n');

            if (typeof edge.style === 'undefined') {
              edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none;';
            }

            edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:'); // }

            edgeData.id = linkId;
            edgeData.classes = 'flowchart-link ' + linkNameStart + ' ' + linkNameEnd; // Add the edge to the graph

            g.setEdge(edge.start, edge.end, edgeData, cnt);
          });
        };
        /**
         * Returns the all the styles from classDef statements in the graph definition.
         * @returns {object} classDef styles
         */


        var getClasses = function getClasses(text) {
          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Extracting classes');

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          var parser = _parser_flow__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
          parser.yy = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"];

          try {
            // Parse the graph definition
            parser.parse(text);
          } catch (e) {
            return;
          }

          return _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getClasses();
        };
        /**
         * Draws a flowchart in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(text, id) {
          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Drawing flowchart');

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].setGen('gen-2');

          var parser = _parser_flow__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
          parser.yy = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"]; // Parse the graph definition
          // try {

          parser.parse(text); // } catch (err) {
          // log.debug('Parsing failed');
          // }
          // Fetch the default direction, use TD if none was found

          var dir = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getDirection();

          if (typeof dir === 'undefined') {
            dir = 'TD';
          }

          var conf = Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart;
          var nodeSpacing = conf.nodeSpacing || 50;
          var rankSpacing = conf.rankSpacing || 50; // Create the input mermaid.graph

          var g = new graphlib__WEBPACK_IMPORTED_MODULE_0___default.a.Graph({
            multigraph: true,
            compound: true
          }).setGraph({
            rankdir: dir,
            nodesep: nodeSpacing,
            ranksep: rankSpacing,
            marginx: 8,
            marginy: 8
          }).setDefaultEdgeLabel(function () {
            return {};
          });
          var subG;

          var subGraphs = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getSubGraphs();

          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Subgraphs - ', subGraphs);

          for (var _i = subGraphs.length - 1; _i >= 0; _i--) {
            subG = subGraphs[_i];

            _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Subgraph - ', subG);

            _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].addVertex(subG.id, subG.title, 'group', undefined, subG.classes);
          } // Fetch the verices/nodes and edges/links from the parsed graph definition


          var vert = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getVertices();

          var edges = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getEdges();

          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info(edges);

          var i = 0;

          for (i = subGraphs.length - 1; i >= 0; i--) {
            // for (let i = 0; i < subGraphs.length; i++) {
            subG = subGraphs[i];
            Object(d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"])('cluster').append('text');

            for (var j = 0; j < subG.nodes.length; j++) {
              _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Setting up subgraphs', subG.nodes[j], subG.id);

              g.setParent(subG.nodes[j], subG.id);
            }
          }

          addVertices(vert, g, id);
          addEdges(edges, g); // Add custom shapes
          // flowChartShapes.addToRenderV2(addShape);
          // Set up an SVG group so that we can translate the final graph.

          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id=\"".concat(id, "\"]"));
          svg.attr('xmlns:xlink', 'http://www.w3.org/1999/xlink'); // Run the renderer. This is what draws the final graph.

          var element = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#' + id + ' g');
          Object(_dagre_wrapper_index_js__WEBPACK_IMPORTED_MODULE_5__["render"])(element, g, ['point', 'circle', 'cross'], 'flowchart', id);
          var padding = conf.diagramPadding;
          var svgBounds = svg.node().getBBox();
          var width = svgBounds.width + padding * 2;
          var height = svgBounds.height + padding * 2;

          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].debug("new ViewBox 0 0 ".concat(width, " ").concat(height), "translate(".concat(padding - g._label.marginx, ", ").concat(padding - g._label.marginy, ")"));

          Object(_utils__WEBPACK_IMPORTED_MODULE_9__["configureSvgSize"])(svg, height, width, conf.useMaxWidth);
          svg.attr('viewBox', "0 0 ".concat(width, " ").concat(height));
          svg.select('g').attr('transform', "translate(".concat(padding - g._label.marginx, ", ").concat(padding - svgBounds.y, ")")); // Index nodes

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].indexNodes('subGraph' + i); // Add label rects for non html labels


          if (!conf.htmlLabels) {
            var labels = document.querySelectorAll('[id="' + id + '"] .edgeLabel .label');

            for (var k = 0; k < labels.length; k++) {
              var label = labels[k]; // Get dimensions of label

              var dim = label.getBBox();
              var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
              rect.setAttribute('rx', 0);
              rect.setAttribute('ry', 0);
              rect.setAttribute('width', dim.width);
              rect.setAttribute('height', dim.height); // rect.setAttribute('style', 'fill:#e8e8e8;');

              label.insertBefore(rect, label.firstChild);
            }
          } // If node has a link, wrap it in an anchor SVG object.


          var keys = Object.keys(vert);
          keys.forEach(function (key) {
            var vertex = vert[key];

            if (vertex.link) {
              var node = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#' + id + ' [id="' + key + '"]');

              if (node) {
                var link = document.createElementNS('http://www.w3.org/2000/svg', 'a');
                link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));
                link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);
                link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');

                if (vertex.linkTarget) {
                  link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);
                }

                var linkNode = node.insert(function () {
                  return link;
                }, ':first-child');
                var shape = node.select('.label-container');

                if (shape) {
                  linkNode.append(function () {
                    return shape.node();
                  });
                }

                var _label = node.select('.label');

                if (_label) {
                  linkNode.append(function () {
                    return _label.node();
                  });
                }
              }
            }
          });
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          addVertices: addVertices,
          addEdges: addEdges,
          getClasses: getClasses,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/flowchart/flowRenderer.js":
      /*!************************************************!*\
        !*** ./src/diagrams/flowchart/flowRenderer.js ***!
        \************************************************/

      /*! exports provided: setConf, addVertices, addEdges, getClasses, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addVertices", function () {
          return addVertices;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addEdges", function () {
          return addEdges;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClasses", function () {
          return getClasses;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _flowDb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./flowDb */
        "./src/diagrams/flowchart/flowDb.js");
        /* harmony import */


        var _parser_flow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./parser/flow */
        "./src/diagrams/flowchart/parser/flow.jison");
        /* harmony import */


        var _parser_flow__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_parser_flow__WEBPACK_IMPORTED_MODULE_3__);
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var dagre_d3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! dagre-d3 */
        "dagre-d3");
        /* harmony import */


        var dagre_d3__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dagre_d3__WEBPACK_IMPORTED_MODULE_5__);
        /* harmony import */


        var dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! dagre-d3/lib/label/add-html-label.js */
        "dagre-d3/lib/label/add-html-label.js");
        /* harmony import */


        var dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _flowChartShapes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
        /*! ./flowChartShapes */
        "./src/diagrams/flowchart/flowChartShapes.js");

        var conf = {};

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);

          for (var i = 0; i < keys.length; i++) {
            conf[keys[i]] = cnf[keys[i]];
          }
        };
        /**
         * Function that adds the vertices found in the graph definition to the graph to be rendered.
         * @param vert Object containing the vertices.
         * @param g The graph that is to be drawn.
         */


        var addVertices = function addVertices(vert, g, svgId) {
          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id=\"".concat(svgId, "\"]"));
          var keys = Object.keys(vert); // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition

          keys.forEach(function (id) {
            var vertex = vert[id];
            /**
             * Variable for storing the classes for the vertex
             * @type {string}
             */

            var classStr = 'default';

            if (vertex.classes.length > 0) {
              classStr = vertex.classes.join(' ');
            }

            var styles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(vertex.styles); // Use vertex id as text in the box if no text is provided by the graph definition

            var vertexText = vertex.text !== undefined ? vertex.text : vertex.id; // We create a SVG label, either by delegating to addHtmlLabel or manually

            var vertexNode;

            if (Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.htmlLabels) {
              // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?
              var node = {
                label: vertexText.replace(/fa[lrsb]?:fa-[\w-]+/g, function (s) {
                  return "<i class='".concat(s.replace(':', ' '), "'></i>");
                })
              };
              vertexNode = dagre_d3_lib_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_6___default()(svg, node).node();
              vertexNode.parentNode.removeChild(vertexNode);
            } else {
              var svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
              svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));
              var rows = vertexText.split(_common_common__WEBPACK_IMPORTED_MODULE_8__["default"].lineBreakRegex);

              for (var j = 0; j < rows.length; j++) {
                var tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
                tspan.setAttribute('dy', '1em');
                tspan.setAttribute('x', '1');
                tspan.textContent = rows[j];
                svgLabel.appendChild(tspan);
              }

              vertexNode = svgLabel;
            }

            var radious = 0;
            var _shape = ''; // Set the shape based parameters

            switch (vertex.type) {
              case 'round':
                radious = 5;
                _shape = 'rect';
                break;

              case 'square':
                _shape = 'rect';
                break;

              case 'diamond':
                _shape = 'question';
                break;

              case 'hexagon':
                _shape = 'hexagon';
                break;

              case 'odd':
                _shape = 'rect_left_inv_arrow';
                break;

              case 'lean_right':
                _shape = 'lean_right';
                break;

              case 'lean_left':
                _shape = 'lean_left';
                break;

              case 'trapezoid':
                _shape = 'trapezoid';
                break;

              case 'inv_trapezoid':
                _shape = 'inv_trapezoid';
                break;

              case 'odd_right':
                _shape = 'rect_left_inv_arrow';
                break;

              case 'circle':
                _shape = 'circle';
                break;

              case 'ellipse':
                _shape = 'ellipse';
                break;

              case 'stadium':
                _shape = 'stadium';
                break;

              case 'subroutine':
                _shape = 'subroutine';
                break;

              case 'cylinder':
                _shape = 'cylinder';
                break;

              case 'group':
                _shape = 'rect';
                break;

              default:
                _shape = 'rect';
            } // Add the node


            _logger__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Adding node', vertex.id, vertex.domId);

            g.setNode(_flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(vertex.id), {
              labelType: 'svg',
              labelStyle: styles.labelStyle,
              shape: _shape,
              label: vertexNode,
              rx: radious,
              ry: radious,
              class: classStr,
              style: styles.style,
              id: _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(vertex.id)
            });
          });
        };
        /**
         * Add edges to graph based on parsed graph defninition
         * @param {Object} edges The edges to add to the graph
         * @param {Object} g The graph object
         */


        var addEdges = function addEdges(edges, g) {
          var cnt = 0;
          var defaultStyle;
          var defaultLabelStyle;

          if (typeof edges.defaultStyle !== 'undefined') {
            var defaultStyles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(edges.defaultStyle);
            defaultStyle = defaultStyles.style;
            defaultLabelStyle = defaultStyles.labelStyle;
          }

          edges.forEach(function (edge) {
            cnt++; // Identify Link

            var linkId = 'L-' + edge.start + '-' + edge.end;
            var linkNameStart = 'LS-' + edge.start;
            var linkNameEnd = 'LE-' + edge.end;
            var edgeData = {}; // Set link type for rendering

            if (edge.type === 'arrow_open') {
              edgeData.arrowhead = 'none';
            } else {
              edgeData.arrowhead = 'normal';
            }

            var style = '';
            var labelStyle = '';

            if (typeof edge.style !== 'undefined') {
              var styles = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["getStylesFromArray"])(edge.style);
              style = styles.style;
              labelStyle = styles.labelStyle;
            } else {
              switch (edge.stroke) {
                case 'normal':
                  style = 'fill:none';

                  if (typeof defaultStyle !== 'undefined') {
                    style = defaultStyle;
                  }

                  if (typeof defaultLabelStyle !== 'undefined') {
                    labelStyle = defaultLabelStyle;
                  }

                  break;

                case 'dotted':
                  style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';
                  break;

                case 'thick':
                  style = ' stroke-width: 3.5px;fill:none';
                  break;
              }
            }

            edgeData.style = style;
            edgeData.labelStyle = labelStyle;

            if (typeof edge.interpolate !== 'undefined') {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(edge.interpolate, d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"]);
            } else if (typeof edges.defaultInterpolate !== 'undefined') {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(edges.defaultInterpolate, d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"]);
            } else {
              edgeData.curve = Object(_utils__WEBPACK_IMPORTED_MODULE_9__["interpolateToCurve"])(conf.curve, d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"]);
            }

            if (typeof edge.text === 'undefined') {
              if (typeof edge.style !== 'undefined') {
                edgeData.arrowheadStyle = 'fill: #333';
              }
            } else {
              edgeData.arrowheadStyle = 'fill: #333';
              edgeData.labelpos = 'c';

              if (Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart.htmlLabels) {
                edgeData.labelType = 'html';
                edgeData.label = "<span id=\"L-".concat(linkId, "\" class=\"edgeLabel L-").concat(linkNameStart, "' L-").concat(linkNameEnd, "\">").concat(edge.text.replace(/fa[lrsb]?:fa-[\w-]+/g, function (s) {
                  return "<i class='".concat(s.replace(':', ' '), "'></i>");
                }), "</span>");
              } else {
                edgeData.labelType = 'text';
                edgeData.label = edge.text.replace(_common_common__WEBPACK_IMPORTED_MODULE_8__["default"].lineBreakRegex, '\n');

                if (typeof edge.style === 'undefined') {
                  edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';
                }

                edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');
              }
            }

            edgeData.id = linkId;
            edgeData.class = linkNameStart + ' ' + linkNameEnd;
            edgeData.minlen = edge.length || 1; // Add the edge to the graph

            g.setEdge(_flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(edge.start), _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(edge.end), edgeData, cnt);
          });
        };
        /**
         * Returns the all the styles from classDef statements in the graph definition.
         * @returns {object} classDef styles
         */


        var getClasses = function getClasses(text) {
          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Extracting classes');

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          try {
            var parser = _parser_flow__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
            parser.yy = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"]; // Parse the graph definition

            parser.parse(text);
            return _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getClasses();
          } catch (e) {
            return;
          }
        };
        /**
         * Draws a flowchart in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(text, id) {
          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].info('Drawing flowchart');

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].setGen('gen-1');

          var parser = _parser_flow__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
          parser.yy = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"]; // Parse the graph definition
          // try {

          parser.parse(text); // } catch (err) {
          // log.debug('Parsing failed');
          // }
          // Fetch the default direction, use TD if none was found

          var dir = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getDirection();

          if (typeof dir === 'undefined') {
            dir = 'TD';
          }

          var conf = Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().flowchart;
          var nodeSpacing = conf.nodeSpacing || 50;
          var rankSpacing = conf.rankSpacing || 50; // Create the input mermaid.graph

          var g = new graphlib__WEBPACK_IMPORTED_MODULE_0___default.a.Graph({
            multigraph: true,
            compound: true
          }).setGraph({
            rankdir: dir,
            nodesep: nodeSpacing,
            ranksep: rankSpacing,
            marginx: 8,
            marginy: 8
          }).setDefaultEdgeLabel(function () {
            return {};
          });
          var subG;

          var subGraphs = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getSubGraphs();

          for (var _i = subGraphs.length - 1; _i >= 0; _i--) {
            subG = subGraphs[_i];

            _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].addVertex(subG.id, subG.title, 'group', undefined, subG.classes);
          } // Fetch the verices/nodes and edges/links from the parsed graph definition


          var vert = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getVertices();

          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Get vertices', vert);

          var edges = _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getEdges();

          var i = 0;

          for (i = subGraphs.length - 1; i >= 0; i--) {
            subG = subGraphs[i];
            Object(d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"])('cluster').append('text');

            for (var j = 0; j < subG.nodes.length; j++) {
              _logger__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Setting subgraph', subG.nodes[j], _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(subG.nodes[j]), _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(subG.id));

              g.setParent(_flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(subG.nodes[j]), _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(subG.id));
            }
          }

          addVertices(vert, g, id);
          addEdges(edges, g); // Create the renderer

          var Render = dagre_d3__WEBPACK_IMPORTED_MODULE_5___default.a.render;
          var render = new Render(); // Add custom shapes

          _flowChartShapes__WEBPACK_IMPORTED_MODULE_10__["default"].addToRender(render); // Add our custom arrow - an empty arrowhead


          render.arrows().none = function normal(parent, id, edge, type) {
            var marker = parent.append('marker').attr('id', id).attr('viewBox', '0 0 10 10').attr('refX', 9).attr('refY', 5).attr('markerUnits', 'strokeWidth').attr('markerWidth', 8).attr('markerHeight', 6).attr('orient', 'auto');
            var path = marker.append('path').attr('d', 'M 0 0 L 0 0 L 0 0 z');
            dagre_d3__WEBPACK_IMPORTED_MODULE_5___default.a.util.applyStyle(path, edge[type + 'Style']);
          }; // Override normal arrowhead defined in d3. Remove style & add class to allow css styling.


          render.arrows().normal = function normal(parent, id) {
            var marker = parent.append('marker').attr('id', id).attr('viewBox', '0 0 10 10').attr('refX', 9).attr('refY', 5).attr('markerUnits', 'strokeWidth').attr('markerWidth', 8).attr('markerHeight', 6).attr('orient', 'auto');
            marker.append('path').attr('d', 'M 0 0 L 10 5 L 0 10 z').attr('class', 'arrowheadPath').style('stroke-width', 1).style('stroke-dasharray', '1,0');
          }; // Set up an SVG group so that we can translate the final graph.


          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id=\"".concat(id, "\"]"));
          svg.attr('xmlns:xlink', 'http://www.w3.org/1999/xlink');

          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].warn(g); // Run the renderer. This is what draws the final graph.


          var element = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#' + id + ' g');
          render(element, g);
          element.selectAll('g.node').attr('title', function () {
            return _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].getTooltip(this.id);
          });
          var padding = conf.diagramPadding;
          var svgBounds = svg.node().getBBox();
          var width = svgBounds.width + padding * 2;
          var height = svgBounds.height + padding * 2;
          Object(_utils__WEBPACK_IMPORTED_MODULE_9__["configureSvgSize"])(svg, height, width, conf.useMaxWidth); // Ensure the viewBox includes the whole svgBounds area with extra space for padding

          var vBox = "".concat(svgBounds.x - padding, " ").concat(svgBounds.y - padding, " ").concat(width, " ").concat(height);

          _logger__WEBPACK_IMPORTED_MODULE_7__["log"].debug("viewBox ".concat(vBox));

          svg.attr('viewBox', vBox); // Index nodes

          _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].indexNodes('subGraph' + i); // reposition labels


          for (i = 0; i < subGraphs.length; i++) {
            subG = subGraphs[i];

            if (subG.title !== 'undefined') {
              var clusterRects = document.querySelectorAll('#' + id + ' [id="' + _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(subG.id) + '"] rect');
              var clusterEl = document.querySelectorAll('#' + id + ' [id="' + _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(subG.id) + '"]');
              var xPos = clusterRects[0].x.baseVal.value;
              var yPos = clusterRects[0].y.baseVal.value;
              var _width = clusterRects[0].width.baseVal.value;
              var cluster = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])(clusterEl[0]);
              var te = cluster.select('.label');
              te.attr('transform', "translate(".concat(xPos + _width / 2, ", ").concat(yPos + 14, ")"));
              te.attr('id', id + 'Text');

              for (var _j = 0; _j < subG.classes.length; _j++) {
                clusterEl[0].classList.add(subG.classes[_j]);
              }
            }
          } // Add label rects for non html labels


          if (!conf.htmlLabels || true) {
            // eslint-disable-line
            var labels = document.querySelectorAll('[id="' + id + '"] .edgeLabel .label');

            for (var k = 0; k < labels.length; k++) {
              var label = labels[k]; // Get dimensions of label

              var dim = label.getBBox();
              var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
              rect.setAttribute('rx', 0);
              rect.setAttribute('ry', 0);
              rect.setAttribute('width', dim.width);
              rect.setAttribute('height', dim.height); // rect.setAttribute('style', 'fill:#e8e8e8;');

              label.insertBefore(rect, label.firstChild);
            }
          } // If node has a link, wrap it in an anchor SVG object.


          var keys = Object.keys(vert);
          keys.forEach(function (key) {
            var vertex = vert[key];

            if (vertex.link) {
              var node = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#' + id + ' [id="' + _flowDb__WEBPACK_IMPORTED_MODULE_2__["default"].lookUpDomId(key) + '"]');

              if (node) {
                var link = document.createElementNS('http://www.w3.org/2000/svg', 'a');
                link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));
                link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);
                link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');

                if (vertex.linkTarget) {
                  link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);
                }

                var linkNode = node.insert(function () {
                  return link;
                }, ':first-child');
                var shape = node.select('.label-container');

                if (shape) {
                  linkNode.append(function () {
                    return shape.node();
                  });
                }

                var _label = node.select('.label');

                if (_label) {
                  linkNode.append(function () {
                    return _label.node();
                  });
                }
              }
            }
          });
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          addVertices: addVertices,
          addEdges: addEdges,
          getClasses: getClasses,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/flowchart/parser/flow.jison":
      /*!**************************************************!*\
        !*** ./src/diagrams/flowchart/parser/flow.jison ***!
        \**************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 9],
                $V1 = [1, 7],
                $V2 = [1, 6],
                $V3 = [1, 8],
                $V4 = [1, 20, 21, 22, 23, 38, 46, 75, 76, 77, 78, 79, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $V5 = [2, 10],
                $V6 = [1, 20],
                $V7 = [1, 21],
                $V8 = [1, 22],
                $V9 = [1, 23],
                $Va = [1, 30],
                $Vb = [1, 54],
                $Vc = [1, 32],
                $Vd = [1, 33],
                $Ve = [1, 34],
                $Vf = [1, 35],
                $Vg = [1, 36],
                $Vh = [1, 48],
                $Vi = [1, 43],
                $Vj = [1, 45],
                $Vk = [1, 40],
                $Vl = [1, 44],
                $Vm = [1, 47],
                $Vn = [1, 51],
                $Vo = [1, 52],
                $Vp = [1, 53],
                $Vq = [1, 42],
                $Vr = [1, 46],
                $Vs = [1, 49],
                $Vt = [1, 50],
                $Vu = [1, 41],
                $Vv = [1, 57],
                $Vw = [1, 62],
                $Vx = [1, 20, 21, 22, 23, 38, 42, 46, 75, 76, 77, 78, 79, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $Vy = [1, 66],
                $Vz = [1, 65],
                $VA = [1, 67],
                $VB = [20, 21, 23, 69, 70],
                $VC = [1, 88],
                $VD = [1, 93],
                $VE = [1, 90],
                $VF = [1, 95],
                $VG = [1, 98],
                $VH = [1, 96],
                $VI = [1, 97],
                $VJ = [1, 91],
                $VK = [1, 103],
                $VL = [1, 102],
                $VM = [1, 92],
                $VN = [1, 94],
                $VO = [1, 99],
                $VP = [1, 100],
                $VQ = [1, 101],
                $VR = [1, 104],
                $VS = [20, 21, 22, 23, 69, 70],
                $VT = [20, 21, 22, 23, 47, 69, 70],
                $VU = [20, 21, 22, 23, 40, 46, 47, 49, 51, 53, 55, 57, 59, 61, 62, 64, 69, 70, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $VV = [20, 21, 23],
                $VW = [20, 21, 23, 46, 69, 70, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $VX = [1, 12, 20, 21, 22, 23, 24, 38, 42, 46, 75, 76, 77, 78, 79, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $VY = [46, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $VZ = [1, 136],
                $V_ = [1, 144],
                $V$ = [1, 145],
                $V01 = [1, 146],
                $V11 = [1, 147],
                $V21 = [1, 131],
                $V31 = [1, 132],
                $V41 = [1, 128],
                $V51 = [1, 139],
                $V61 = [1, 140],
                $V71 = [1, 141],
                $V81 = [1, 142],
                $V91 = [1, 143],
                $Va1 = [1, 148],
                $Vb1 = [1, 149],
                $Vc1 = [1, 134],
                $Vd1 = [1, 137],
                $Ve1 = [1, 133],
                $Vf1 = [1, 130],
                $Vg1 = [20, 21, 22, 23, 38, 42, 46, 75, 76, 77, 78, 79, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $Vh1 = [1, 152],
                $Vi1 = [20, 21, 22, 23, 26, 46, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114],
                $Vj1 = [20, 21, 22, 23, 24, 26, 38, 40, 41, 42, 46, 50, 52, 54, 56, 58, 60, 61, 63, 65, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 84, 94, 95, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114],
                $Vk1 = [12, 21, 22, 24],
                $Vl1 = [22, 95],
                $Vm1 = [1, 233],
                $Vn1 = [1, 237],
                $Vo1 = [1, 234],
                $Vp1 = [1, 231],
                $Vq1 = [1, 228],
                $Vr1 = [1, 229],
                $Vs1 = [1, 230],
                $Vt1 = [1, 232],
                $Vu1 = [1, 235],
                $Vv1 = [1, 236],
                $Vw1 = [1, 238],
                $Vx1 = [1, 255],
                $Vy1 = [20, 21, 23, 95],
                $Vz1 = [20, 21, 22, 23, 75, 91, 94, 95, 98, 99, 100, 101, 102, 103, 104];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "mermaidDoc": 4,
                "directive": 5,
                "openDirective": 6,
                "typeDirective": 7,
                "closeDirective": 8,
                "separator": 9,
                ":": 10,
                "argDirective": 11,
                "open_directive": 12,
                "type_directive": 13,
                "arg_directive": 14,
                "close_directive": 15,
                "graphConfig": 16,
                "document": 17,
                "line": 18,
                "statement": 19,
                "SEMI": 20,
                "NEWLINE": 21,
                "SPACE": 22,
                "EOF": 23,
                "GRAPH": 24,
                "NODIR": 25,
                "DIR": 26,
                "FirstStmtSeperator": 27,
                "ending": 28,
                "endToken": 29,
                "spaceList": 30,
                "spaceListNewline": 31,
                "verticeStatement": 32,
                "styleStatement": 33,
                "linkStyleStatement": 34,
                "classDefStatement": 35,
                "classStatement": 36,
                "clickStatement": 37,
                "subgraph": 38,
                "text": 39,
                "SQS": 40,
                "SQE": 41,
                "end": 42,
                "link": 43,
                "node": 44,
                "vertex": 45,
                "AMP": 46,
                "STYLE_SEPARATOR": 47,
                "idString": 48,
                "PS": 49,
                "PE": 50,
                "(-": 51,
                "-)": 52,
                "STADIUMSTART": 53,
                "STADIUMEND": 54,
                "SUBROUTINESTART": 55,
                "SUBROUTINEEND": 56,
                "CYLINDERSTART": 57,
                "CYLINDEREND": 58,
                "DIAMOND_START": 59,
                "DIAMOND_STOP": 60,
                "TAGEND": 61,
                "TRAPSTART": 62,
                "TRAPEND": 63,
                "INVTRAPSTART": 64,
                "INVTRAPEND": 65,
                "linkStatement": 66,
                "arrowText": 67,
                "TESTSTR": 68,
                "START_LINK": 69,
                "LINK": 70,
                "PIPE": 71,
                "textToken": 72,
                "STR": 73,
                "keywords": 74,
                "STYLE": 75,
                "LINKSTYLE": 76,
                "CLASSDEF": 77,
                "CLASS": 78,
                "CLICK": 79,
                "DOWN": 80,
                "UP": 81,
                "textNoTags": 82,
                "textNoTagsToken": 83,
                "DEFAULT": 84,
                "stylesOpt": 85,
                "alphaNum": 86,
                "CALLBACKNAME": 87,
                "CALLBACKARGS": 88,
                "HREF": 89,
                "LINK_TARGET": 90,
                "HEX": 91,
                "numList": 92,
                "INTERPOLATE": 93,
                "NUM": 94,
                "COMMA": 95,
                "style": 96,
                "styleComponent": 97,
                "ALPHA": 98,
                "COLON": 99,
                "MINUS": 100,
                "UNIT": 101,
                "BRKT": 102,
                "DOT": 103,
                "PCT": 104,
                "TAGSTART": 105,
                "alphaNumToken": 106,
                "idStringToken": 107,
                "alphaNumStatement": 108,
                "PUNCTUATION": 109,
                "UNICODE_TEXT": 110,
                "PLUS": 111,
                "EQUALS": 112,
                "MULT": 113,
                "UNDERSCORE": 114,
                "graphCodeTokens": 115,
                "ARROW_CROSS": 116,
                "ARROW_POINT": 117,
                "ARROW_CIRCLE": 118,
                "ARROW_OPEN": 119,
                "QUOTE": 120,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                10: ":",
                12: "open_directive",
                13: "type_directive",
                14: "arg_directive",
                15: "close_directive",
                20: "SEMI",
                21: "NEWLINE",
                22: "SPACE",
                23: "EOF",
                24: "GRAPH",
                25: "NODIR",
                26: "DIR",
                38: "subgraph",
                40: "SQS",
                41: "SQE",
                42: "end",
                46: "AMP",
                47: "STYLE_SEPARATOR",
                49: "PS",
                50: "PE",
                51: "(-",
                52: "-)",
                53: "STADIUMSTART",
                54: "STADIUMEND",
                55: "SUBROUTINESTART",
                56: "SUBROUTINEEND",
                57: "CYLINDERSTART",
                58: "CYLINDEREND",
                59: "DIAMOND_START",
                60: "DIAMOND_STOP",
                61: "TAGEND",
                62: "TRAPSTART",
                63: "TRAPEND",
                64: "INVTRAPSTART",
                65: "INVTRAPEND",
                68: "TESTSTR",
                69: "START_LINK",
                70: "LINK",
                71: "PIPE",
                73: "STR",
                75: "STYLE",
                76: "LINKSTYLE",
                77: "CLASSDEF",
                78: "CLASS",
                79: "CLICK",
                80: "DOWN",
                81: "UP",
                84: "DEFAULT",
                87: "CALLBACKNAME",
                88: "CALLBACKARGS",
                89: "HREF",
                90: "LINK_TARGET",
                91: "HEX",
                93: "INTERPOLATE",
                94: "NUM",
                95: "COMMA",
                98: "ALPHA",
                99: "COLON",
                100: "MINUS",
                101: "UNIT",
                102: "BRKT",
                103: "DOT",
                104: "PCT",
                105: "TAGSTART",
                109: "PUNCTUATION",
                110: "UNICODE_TEXT",
                111: "PLUS",
                112: "EQUALS",
                113: "MULT",
                114: "UNDERSCORE",
                116: "ARROW_CROSS",
                117: "ARROW_POINT",
                118: "ARROW_CIRCLE",
                119: "ARROW_OPEN",
                120: "QUOTE"
              },
              productions_: [0, [3, 1], [3, 2], [5, 4], [5, 6], [6, 1], [7, 1], [11, 1], [8, 1], [4, 2], [17, 0], [17, 2], [18, 1], [18, 1], [18, 1], [18, 1], [18, 1], [16, 2], [16, 2], [16, 2], [16, 3], [28, 2], [28, 1], [29, 1], [29, 1], [29, 1], [27, 1], [27, 1], [27, 2], [31, 2], [31, 2], [31, 1], [31, 1], [30, 2], [30, 1], [19, 2], [19, 2], [19, 2], [19, 2], [19, 2], [19, 2], [19, 9], [19, 6], [19, 4], [9, 1], [9, 1], [9, 1], [32, 3], [32, 4], [32, 2], [32, 1], [44, 1], [44, 5], [44, 3], [45, 4], [45, 6], [45, 4], [45, 4], [45, 4], [45, 4], [45, 4], [45, 4], [45, 6], [45, 4], [45, 4], [45, 4], [45, 4], [45, 4], [45, 1], [43, 2], [43, 3], [43, 3], [43, 1], [43, 3], [66, 1], [67, 3], [39, 1], [39, 2], [39, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [74, 1], [82, 1], [82, 2], [35, 5], [35, 5], [36, 5], [37, 2], [37, 4], [37, 3], [37, 5], [37, 2], [37, 4], [37, 4], [37, 6], [37, 2], [37, 4], [37, 2], [37, 4], [37, 4], [37, 6], [33, 5], [33, 5], [34, 5], [34, 5], [34, 9], [34, 9], [34, 7], [34, 7], [92, 1], [92, 3], [85, 1], [85, 3], [96, 1], [96, 2], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [72, 1], [72, 1], [72, 1], [72, 1], [72, 1], [72, 1], [83, 1], [83, 1], [83, 1], [83, 1], [48, 1], [48, 2], [86, 1], [86, 2], [108, 1], [108, 1], [108, 1], [108, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [106, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [107, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1], [115, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 5:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 6:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 7:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 8:
                    yy.parseDirective('}%%', 'close_directive', 'flowchart');
                    break;

                  case 10:
                    this.$ = [];
                    break;

                  case 11:
                    if ($$[$0] !== []) {
                      $$[$0 - 1].push($$[$0]);
                    }

                    this.$ = $$[$0 - 1];
                    break;

                  case 12:
                  case 76:
                  case 78:
                  case 90:
                  case 146:
                  case 148:
                  case 149:
                    this.$ = $$[$0];
                    break;

                  case 19:
                    yy.setDirection('TB');
                    this.$ = 'TB';
                    break;

                  case 20:
                    yy.setDirection($$[$0 - 1]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 35:
                    /* console.warn('finat vs', $$[$0-1].nodes); */
                    this.$ = $$[$0 - 1].nodes;
                    break;

                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                    this.$ = [];
                    break;

                  case 41:
                    this.$ = yy.addSubGraph($$[$0 - 6], $$[$0 - 1], $$[$0 - 4]);
                    break;

                  case 42:
                    this.$ = yy.addSubGraph($$[$0 - 3], $$[$0 - 1], $$[$0 - 3]);
                    break;

                  case 43:
                    this.$ = yy.addSubGraph(undefined, $$[$0 - 1], undefined);
                    break;

                  case 47:
                    /* console.warn('vs',$$[$0-2].stmt,$$[$0]); */
                    yy.addLink($$[$0 - 2].stmt, $$[$0], $$[$0 - 1]);
                    this.$ = {
                      stmt: $$[$0],
                      nodes: $$[$0].concat($$[$0 - 2].nodes)
                    };
                    break;

                  case 48:
                    /* console.warn('vs',$$[$0-3].stmt,$$[$0-1]); */
                    yy.addLink($$[$0 - 3].stmt, $$[$0 - 1], $$[$0 - 2]);
                    this.$ = {
                      stmt: $$[$0 - 1],
                      nodes: $$[$0 - 1].concat($$[$0 - 3].nodes)
                    };
                    break;

                  case 49:
                    /*console.warn('noda', $$[$0-1]);*/
                    this.$ = {
                      stmt: $$[$0 - 1],
                      nodes: $$[$0 - 1]
                    };
                    break;

                  case 50:
                    /*console.warn('noda', $$[$0]);*/
                    this.$ = {
                      stmt: $$[$0],
                      nodes: $$[$0]
                    };
                    break;

                  case 51:
                    /* console.warn('nod', $$[$0]); */
                    this.$ = [$$[$0]];
                    break;

                  case 52:
                    this.$ = $$[$0 - 4].concat($$[$0]);
                    /* console.warn('pip', $$[$0-4][0], $$[$0], this.$); */

                    break;

                  case 53:
                    this.$ = [$$[$0 - 2]];
                    yy.setClass($$[$0 - 2], $$[$0]);
                    break;

                  case 54:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'square');
                    break;

                  case 55:
                    this.$ = $$[$0 - 5];
                    yy.addVertex($$[$0 - 5], $$[$0 - 2], 'circle');
                    break;

                  case 56:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'ellipse');
                    break;

                  case 57:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'stadium');
                    break;

                  case 58:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'subroutine');
                    break;

                  case 59:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'cylinder');
                    break;

                  case 60:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'round');
                    break;

                  case 61:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'diamond');
                    break;

                  case 62:
                    this.$ = $$[$0 - 5];
                    yy.addVertex($$[$0 - 5], $$[$0 - 2], 'hexagon');
                    break;

                  case 63:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'odd');
                    break;

                  case 64:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'trapezoid');
                    break;

                  case 65:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'inv_trapezoid');
                    break;

                  case 66:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'lean_right');
                    break;

                  case 67:
                    this.$ = $$[$0 - 3];
                    yy.addVertex($$[$0 - 3], $$[$0 - 1], 'lean_left');
                    break;

                  case 68:
                    /*console.warn('h: ', $$[$0]);*/
                    this.$ = $$[$0];
                    yy.addVertex($$[$0]);
                    break;

                  case 69:
                    $$[$0 - 1].text = $$[$0];
                    this.$ = $$[$0 - 1];
                    break;

                  case 70:
                  case 71:
                    $$[$0 - 2].text = $$[$0 - 1];
                    this.$ = $$[$0 - 2];
                    break;

                  case 72:
                    this.$ = $$[$0];
                    break;

                  case 73:
                    var inf = yy.destructLink($$[$0], $$[$0 - 2]);
                    this.$ = {
                      "type": inf.type,
                      "stroke": inf.stroke,
                      "length": inf.length,
                      "text": $$[$0 - 1]
                    };
                    break;

                  case 74:
                    var inf = yy.destructLink($$[$0]);
                    this.$ = {
                      "type": inf.type,
                      "stroke": inf.stroke,
                      "length": inf.length
                    };
                    break;

                  case 75:
                    this.$ = $$[$0 - 1];
                    break;

                  case 77:
                  case 91:
                  case 147:
                    this.$ = $$[$0 - 1] + '' + $$[$0];
                    break;

                  case 92:
                  case 93:
                    this.$ = $$[$0 - 4];
                    yy.addClass($$[$0 - 2], $$[$0]);
                    break;

                  case 94:
                    this.$ = $$[$0 - 4];
                    yy.setClass($$[$0 - 2], $$[$0]);
                    break;

                  case 95:
                  case 103:
                    this.$ = $$[$0 - 1];
                    yy.setClickEvent($$[$0 - 1], $$[$0]);
                    break;

                  case 96:
                  case 104:
                    this.$ = $$[$0 - 3];
                    yy.setClickEvent($$[$0 - 3], $$[$0 - 2]);
                    yy.setTooltip($$[$0 - 3], $$[$0]);
                    break;

                  case 97:
                    this.$ = $$[$0 - 2];
                    yy.setClickEvent($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;

                  case 98:
                    this.$ = $$[$0 - 4];
                    yy.setClickEvent($$[$0 - 4], $$[$0 - 3], $$[$0 - 2]);
                    yy.setTooltip($$[$0 - 4], $$[$0]);
                    break;

                  case 99:
                  case 105:
                    this.$ = $$[$0 - 1];
                    yy.setLink($$[$0 - 1], $$[$0]);
                    break;

                  case 100:
                  case 106:
                    this.$ = $$[$0 - 3];
                    yy.setLink($$[$0 - 3], $$[$0 - 2]);
                    yy.setTooltip($$[$0 - 3], $$[$0]);
                    break;

                  case 101:
                  case 107:
                    this.$ = $$[$0 - 3];
                    yy.setLink($$[$0 - 3], $$[$0 - 2], $$[$0]);
                    break;

                  case 102:
                  case 108:
                    this.$ = $$[$0 - 5];
                    yy.setLink($$[$0 - 5], $$[$0 - 4], $$[$0]);
                    yy.setTooltip($$[$0 - 5], $$[$0 - 2]);
                    break;

                  case 109:
                    this.$ = $$[$0 - 4];
                    yy.addVertex($$[$0 - 2], undefined, undefined, $$[$0]);
                    break;

                  case 110:
                  case 112:
                    this.$ = $$[$0 - 4];
                    yy.updateLink($$[$0 - 2], $$[$0]);
                    break;

                  case 111:
                    this.$ = $$[$0 - 4];
                    yy.updateLink([$$[$0 - 2]], $$[$0]);
                    break;

                  case 113:
                    this.$ = $$[$0 - 8];
                    yy.updateLinkInterpolate([$$[$0 - 6]], $$[$0 - 2]);
                    yy.updateLink([$$[$0 - 6]], $$[$0]);
                    break;

                  case 114:
                    this.$ = $$[$0 - 8];
                    yy.updateLinkInterpolate($$[$0 - 6], $$[$0 - 2]);
                    yy.updateLink($$[$0 - 6], $$[$0]);
                    break;

                  case 115:
                    this.$ = $$[$0 - 6];
                    yy.updateLinkInterpolate([$$[$0 - 4]], $$[$0]);
                    break;

                  case 116:
                    this.$ = $$[$0 - 6];
                    yy.updateLinkInterpolate($$[$0 - 4], $$[$0]);
                    break;

                  case 117:
                  case 119:
                    this.$ = [$$[$0]];
                    break;

                  case 118:
                  case 120:
                    $$[$0 - 2].push($$[$0]);
                    this.$ = $$[$0 - 2];
                    break;

                  case 122:
                    this.$ = $$[$0 - 1] + $$[$0];
                    break;

                  case 144:
                    this.$ = $$[$0];
                    break;

                  case 145:
                    this.$ = $$[$0 - 1] + '' + $$[$0];
                    break;

                  case 150:
                    this.$ = 'v';
                    break;

                  case 151:
                    this.$ = '-';
                    break;
                }
              },
              table: [{
                3: 1,
                4: 2,
                5: 3,
                6: 5,
                12: $V0,
                16: 4,
                21: $V1,
                22: $V2,
                24: $V3
              }, {
                1: [3]
              }, {
                1: [2, 1]
              }, {
                3: 10,
                4: 2,
                5: 3,
                6: 5,
                12: $V0,
                16: 4,
                21: $V1,
                22: $V2,
                24: $V3
              }, o($V4, $V5, {
                17: 11
              }), {
                7: 12,
                13: [1, 13]
              }, {
                16: 14,
                21: $V1,
                22: $V2,
                24: $V3
              }, {
                16: 15,
                21: $V1,
                22: $V2,
                24: $V3
              }, {
                25: [1, 16],
                26: [1, 17]
              }, {
                13: [2, 5]
              }, {
                1: [2, 2]
              }, {
                1: [2, 9],
                18: 18,
                19: 19,
                20: $V6,
                21: $V7,
                22: $V8,
                23: $V9,
                32: 24,
                33: 25,
                34: 26,
                35: 27,
                36: 28,
                37: 29,
                38: $Va,
                44: 31,
                45: 37,
                46: $Vb,
                48: 38,
                75: $Vc,
                76: $Vd,
                77: $Ve,
                78: $Vf,
                79: $Vg,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, {
                8: 55,
                10: [1, 56],
                15: $Vv
              }, o([10, 15], [2, 6]), o($V4, [2, 17]), o($V4, [2, 18]), o($V4, [2, 19]), {
                20: [1, 59],
                21: [1, 60],
                22: $Vw,
                27: 58,
                30: 61
              }, o($Vx, [2, 11]), o($Vx, [2, 12]), o($Vx, [2, 13]), o($Vx, [2, 14]), o($Vx, [2, 15]), o($Vx, [2, 16]), {
                9: 63,
                20: $Vy,
                21: $Vz,
                23: $VA,
                43: 64,
                66: 68,
                69: [1, 69],
                70: [1, 70]
              }, {
                9: 71,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, {
                9: 72,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, {
                9: 73,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, {
                9: 74,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, {
                9: 75,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, {
                9: 77,
                20: $Vy,
                21: $Vz,
                22: [1, 76],
                23: $VA
              }, o($VB, [2, 50], {
                30: 78,
                22: $Vw
              }), {
                22: [1, 79]
              }, {
                22: [1, 80]
              }, {
                22: [1, 81]
              }, {
                22: [1, 82]
              }, {
                26: $VC,
                46: $VD,
                73: [1, 86],
                80: $VE,
                86: 85,
                87: [1, 83],
                89: [1, 84],
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VS, [2, 51], {
                47: [1, 105]
              }), o($VT, [2, 68], {
                107: 116,
                40: [1, 106],
                46: $Vb,
                49: [1, 107],
                51: [1, 108],
                53: [1, 109],
                55: [1, 110],
                57: [1, 111],
                59: [1, 112],
                61: [1, 113],
                62: [1, 114],
                64: [1, 115],
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }), o($VU, [2, 144]), o($VU, [2, 165]), o($VU, [2, 166]), o($VU, [2, 167]), o($VU, [2, 168]), o($VU, [2, 169]), o($VU, [2, 170]), o($VU, [2, 171]), o($VU, [2, 172]), o($VU, [2, 173]), o($VU, [2, 174]), o($VU, [2, 175]), o($VU, [2, 176]), o($VU, [2, 177]), o($VU, [2, 178]), o($VU, [2, 179]), {
                9: 117,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, {
                11: 118,
                14: [1, 119]
              }, o($VV, [2, 8]), o($V4, [2, 20]), o($V4, [2, 26]), o($V4, [2, 27]), {
                21: [1, 120]
              }, o($VW, [2, 34], {
                30: 121,
                22: $Vw
              }), o($Vx, [2, 35]), {
                44: 122,
                45: 37,
                46: $Vb,
                48: 38,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, o($VX, [2, 44]), o($VX, [2, 45]), o($VX, [2, 46]), o($VY, [2, 72], {
                67: 123,
                68: [1, 124],
                71: [1, 125]
              }), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 126,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o([46, 68, 71, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114], [2, 74]), o($Vx, [2, 36]), o($Vx, [2, 37]), o($Vx, [2, 38]), o($Vx, [2, 39]), o($Vx, [2, 40]), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 150,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($Vg1, $V5, {
                17: 151
              }), o($VB, [2, 49], {
                46: $Vh1
              }), {
                26: $VC,
                46: $VD,
                80: $VE,
                86: 153,
                91: [1, 154],
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                84: [1, 155],
                92: 156,
                94: [1, 157]
              }, {
                26: $VC,
                46: $VD,
                80: $VE,
                84: [1, 158],
                86: 159,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                26: $VC,
                46: $VD,
                80: $VE,
                86: 160,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VV, [2, 95], {
                22: [1, 161],
                88: [1, 162]
              }), o($VV, [2, 99], {
                22: [1, 163]
              }), o($VV, [2, 103], {
                106: 89,
                108: 165,
                22: [1, 164],
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }), o($VV, [2, 105], {
                22: [1, 166]
              }), o($Vi1, [2, 146]), o($Vi1, [2, 148]), o($Vi1, [2, 149]), o($Vi1, [2, 150]), o($Vi1, [2, 151]), o($Vj1, [2, 152]), o($Vj1, [2, 153]), o($Vj1, [2, 154]), o($Vj1, [2, 155]), o($Vj1, [2, 156]), o($Vj1, [2, 157]), o($Vj1, [2, 158]), o($Vj1, [2, 159]), o($Vj1, [2, 160]), o($Vj1, [2, 161]), o($Vj1, [2, 162]), o($Vj1, [2, 163]), o($Vj1, [2, 164]), {
                46: $Vb,
                48: 167,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 168,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 170,
                42: $V11,
                46: $VD,
                49: [1, 169],
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 171,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 172,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 173,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 174,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 175,
                42: $V11,
                46: $VD,
                59: [1, 176],
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 177,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 178,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 179,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VU, [2, 145]), o($Vk1, [2, 3]), {
                8: 180,
                15: $Vv
              }, {
                15: [2, 7]
              }, o($V4, [2, 28]), o($VW, [2, 33]), o($VB, [2, 47], {
                30: 181,
                22: $Vw
              }), o($VY, [2, 69], {
                22: [1, 182]
              }), {
                22: [1, 183]
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 184,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                70: [1, 185],
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($Vj1, [2, 76]), o($Vj1, [2, 78]), o($Vj1, [2, 134]), o($Vj1, [2, 135]), o($Vj1, [2, 136]), o($Vj1, [2, 137]), o($Vj1, [2, 138]), o($Vj1, [2, 139]), o($Vj1, [2, 140]), o($Vj1, [2, 141]), o($Vj1, [2, 142]), o($Vj1, [2, 143]), o($Vj1, [2, 79]), o($Vj1, [2, 80]), o($Vj1, [2, 81]), o($Vj1, [2, 82]), o($Vj1, [2, 83]), o($Vj1, [2, 84]), o($Vj1, [2, 85]), o($Vj1, [2, 86]), o($Vj1, [2, 87]), o($Vj1, [2, 88]), o($Vj1, [2, 89]), {
                9: 188,
                20: $Vy,
                21: $Vz,
                22: $VZ,
                23: $VA,
                24: $V_,
                26: $V$,
                38: $V01,
                40: [1, 187],
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                18: 18,
                19: 19,
                20: $V6,
                21: $V7,
                22: $V8,
                23: $V9,
                32: 24,
                33: 25,
                34: 26,
                35: 27,
                36: 28,
                37: 29,
                38: $Va,
                42: [1, 189],
                44: 31,
                45: 37,
                46: $Vb,
                48: 38,
                75: $Vc,
                76: $Vd,
                77: $Ve,
                78: $Vf,
                79: $Vg,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, {
                22: $Vw,
                30: 190
              }, {
                22: [1, 191],
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 165,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: [1, 192]
              }, {
                22: [1, 193]
              }, {
                22: [1, 194],
                95: [1, 195]
              }, o($Vl1, [2, 117]), {
                22: [1, 196]
              }, {
                22: [1, 197],
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 165,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: [1, 198],
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 165,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                73: [1, 199]
              }, o($VV, [2, 97], {
                22: [1, 200]
              }), {
                73: [1, 201],
                90: [1, 202]
              }, {
                73: [1, 203]
              }, o($Vi1, [2, 147]), {
                73: [1, 204],
                90: [1, 205]
              }, o($VS, [2, 53], {
                107: 116,
                46: $Vb,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                41: [1, 206],
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 207,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                50: [1, 208],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                52: [1, 209],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                54: [1, 210],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                56: [1, 211],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                58: [1, 212],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                60: [1, 213],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 214,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                41: [1, 215],
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                61: $V21,
                63: [1, 216],
                65: [1, 217],
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                61: $V21,
                63: [1, 219],
                65: [1, 218],
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                9: 220,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, o($VB, [2, 48], {
                46: $Vh1
              }), o($VY, [2, 71]), o($VY, [2, 70]), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                71: [1, 221],
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VY, [2, 73]), o($Vj1, [2, 77]), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                39: 222,
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 127,
                73: $V41,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($Vg1, $V5, {
                17: 223
              }), o($Vx, [2, 43]), {
                45: 224,
                46: $Vb,
                48: 38,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 225,
                91: $Vo1,
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 239,
                91: $Vo1,
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 240,
                91: $Vo1,
                93: [1, 241],
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 242,
                91: $Vo1,
                93: [1, 243],
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                94: [1, 244]
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 245,
                91: $Vo1,
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 246,
                91: $Vo1,
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                26: $VC,
                46: $VD,
                80: $VE,
                86: 247,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VV, [2, 96]), {
                73: [1, 248]
              }, o($VV, [2, 100], {
                22: [1, 249]
              }), o($VV, [2, 101]), o($VV, [2, 104]), o($VV, [2, 106], {
                22: [1, 250]
              }), o($VV, [2, 107]), o($VT, [2, 54]), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                50: [1, 251],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VT, [2, 60]), o($VT, [2, 56]), o($VT, [2, 57]), o($VT, [2, 58]), o($VT, [2, 59]), o($VT, [2, 61]), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                42: $V11,
                46: $VD,
                60: [1, 252],
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VT, [2, 63]), o($VT, [2, 64]), o($VT, [2, 66]), o($VT, [2, 65]), o($VT, [2, 67]), o($Vk1, [2, 4]), o([22, 46, 80, 94, 95, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114], [2, 75]), {
                22: $VZ,
                24: $V_,
                26: $V$,
                38: $V01,
                41: [1, 253],
                42: $V11,
                46: $VD,
                61: $V21,
                69: $V31,
                72: 186,
                74: 138,
                75: $V51,
                76: $V61,
                77: $V71,
                78: $V81,
                79: $V91,
                80: $Va1,
                81: $Vb1,
                83: 129,
                84: $Vc1,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $Vd1,
                102: $VK,
                103: $VL,
                104: $Ve1,
                105: $Vf1,
                106: 135,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                18: 18,
                19: 19,
                20: $V6,
                21: $V7,
                22: $V8,
                23: $V9,
                32: 24,
                33: 25,
                34: 26,
                35: 27,
                36: 28,
                37: 29,
                38: $Va,
                42: [1, 254],
                44: 31,
                45: 37,
                46: $Vb,
                48: 38,
                75: $Vc,
                76: $Vd,
                77: $Ve,
                78: $Vf,
                79: $Vg,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, o($VS, [2, 52]), o($VV, [2, 109], {
                95: $Vx1
              }), o($Vy1, [2, 119], {
                97: 256,
                22: $Vm1,
                75: $Vn1,
                91: $Vo1,
                94: $Vp1,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }), o($Vz1, [2, 121]), o($Vz1, [2, 123]), o($Vz1, [2, 124]), o($Vz1, [2, 125]), o($Vz1, [2, 126]), o($Vz1, [2, 127]), o($Vz1, [2, 128]), o($Vz1, [2, 129]), o($Vz1, [2, 130]), o($Vz1, [2, 131]), o($Vz1, [2, 132]), o($Vz1, [2, 133]), o($VV, [2, 110], {
                95: $Vx1
              }), o($VV, [2, 111], {
                95: $Vx1
              }), {
                22: [1, 257]
              }, o($VV, [2, 112], {
                95: $Vx1
              }), {
                22: [1, 258]
              }, o($Vl1, [2, 118]), o($VV, [2, 92], {
                95: $Vx1
              }), o($VV, [2, 93], {
                95: $Vx1
              }), o($VV, [2, 94], {
                106: 89,
                108: 165,
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }), o($VV, [2, 98]), {
                90: [1, 259]
              }, {
                90: [1, 260]
              }, {
                50: [1, 261]
              }, {
                60: [1, 262]
              }, {
                9: 263,
                20: $Vy,
                21: $Vz,
                23: $VA
              }, o($Vx, [2, 42]), {
                22: $Vm1,
                75: $Vn1,
                91: $Vo1,
                94: $Vp1,
                96: 264,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, o($Vz1, [2, 122]), {
                26: $VC,
                46: $VD,
                80: $VE,
                86: 265,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, {
                26: $VC,
                46: $VD,
                80: $VE,
                86: 266,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                106: 89,
                108: 87,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }, o($VV, [2, 102]), o($VV, [2, 108]), o($VT, [2, 55]), o($VT, [2, 62]), o($Vg1, $V5, {
                17: 267
              }), o($Vy1, [2, 120], {
                97: 256,
                22: $Vm1,
                75: $Vn1,
                91: $Vo1,
                94: $Vp1,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }), o($VV, [2, 115], {
                106: 89,
                108: 165,
                22: [1, 268],
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }), o($VV, [2, 116], {
                106: 89,
                108: 165,
                22: [1, 269],
                26: $VC,
                46: $VD,
                80: $VE,
                94: $VF,
                95: $VG,
                98: $VH,
                99: $VI,
                100: $VJ,
                102: $VK,
                103: $VL,
                109: $VM,
                110: $VN,
                111: $VO,
                112: $VP,
                113: $VQ,
                114: $VR
              }), {
                18: 18,
                19: 19,
                20: $V6,
                21: $V7,
                22: $V8,
                23: $V9,
                32: 24,
                33: 25,
                34: 26,
                35: 27,
                36: 28,
                37: 29,
                38: $Va,
                42: [1, 270],
                44: 31,
                45: 37,
                46: $Vb,
                48: 38,
                75: $Vc,
                76: $Vd,
                77: $Ve,
                78: $Vf,
                79: $Vg,
                80: $Vh,
                94: $Vi,
                95: $Vj,
                98: $Vk,
                99: $Vl,
                100: $Vm,
                102: $Vn,
                103: $Vo,
                107: 39,
                109: $Vp,
                110: $Vq,
                111: $Vr,
                112: $Vs,
                113: $Vt,
                114: $Vu
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 271,
                91: $Vo1,
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, {
                22: $Vm1,
                75: $Vn1,
                85: 272,
                91: $Vo1,
                94: $Vp1,
                96: 226,
                97: 227,
                98: $Vq1,
                99: $Vr1,
                100: $Vs1,
                101: $Vt1,
                102: $Vu1,
                103: $Vv1,
                104: $Vw1
              }, o($Vx, [2, 41]), o($VV, [2, 113], {
                95: $Vx1
              }), o($VV, [2, 114], {
                95: $Vx1
              })],
              defaultActions: {
                2: [2, 1],
                9: [2, 5],
                10: [2, 2],
                119: [2, 7]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {},
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 12;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 13;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 10;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 15;
                      break;

                    case 4:
                      return 14;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      break;

                    case 7:
                      this.begin("string");
                      break;

                    case 8:
                      this.popState();
                      break;

                    case 9:
                      return "STR";
                      break;

                    case 10:
                      return 75;
                      break;

                    case 11:
                      return 84;
                      break;

                    case 12:
                      return 76;
                      break;

                    case 13:
                      return 93;
                      break;

                    case 14:
                      return 77;
                      break;

                    case 15:
                      return 78;
                      break;

                    case 16:
                      this.begin("href");
                      break;

                    case 17:
                      this.popState();
                      break;

                    case 18:
                      return 89;
                      break;

                    case 19:
                      this.begin("callbackname");
                      break;

                    case 20:
                      this.popState();
                      break;

                    case 21:
                      this.popState();
                      this.begin("callbackargs");
                      break;

                    case 22:
                      return 87;
                      break;

                    case 23:
                      this.popState();
                      break;

                    case 24:
                      return 88;
                      break;

                    case 25:
                      this.begin("click");
                      break;

                    case 26:
                      this.popState();
                      break;

                    case 27:
                      return 79;
                      break;

                    case 28:
                      if (yy.lex.firstGraph()) {
                        this.begin("dir");
                      }

                      return 24;
                      break;

                    case 29:
                      if (yy.lex.firstGraph()) {
                        this.begin("dir");
                      }

                      return 24;
                      break;

                    case 30:
                      return 38;
                      break;

                    case 31:
                      return 42;
                      break;

                    case 32:
                      return 90;
                      break;

                    case 33:
                      return 90;
                      break;

                    case 34:
                      return 90;
                      break;

                    case 35:
                      return 90;
                      break;

                    case 36:
                      this.popState();
                      return 25;
                      break;

                    case 37:
                      this.popState();
                      return 26;
                      break;

                    case 38:
                      this.popState();
                      return 26;
                      break;

                    case 39:
                      this.popState();
                      return 26;
                      break;

                    case 40:
                      this.popState();
                      return 26;
                      break;

                    case 41:
                      this.popState();
                      return 26;
                      break;

                    case 42:
                      this.popState();
                      return 26;
                      break;

                    case 43:
                      this.popState();
                      return 26;
                      break;

                    case 44:
                      this.popState();
                      return 26;
                      break;

                    case 45:
                      this.popState();
                      return 26;
                      break;

                    case 46:
                      this.popState();
                      return 26;
                      break;

                    case 47:
                      return 94;
                      break;

                    case 48:
                      return 102;
                      break;

                    case 49:
                      return 47;
                      break;

                    case 50:
                      return 99;
                      break;

                    case 51:
                      return 46;
                      break;

                    case 52:
                      return 20;
                      break;

                    case 53:
                      return 95;
                      break;

                    case 54:
                      return 113;
                      break;

                    case 55:
                      return 70;
                      break;

                    case 56:
                      return 70;
                      break;

                    case 57:
                      return 70;
                      break;

                    case 58:
                      return 69;
                      break;

                    case 59:
                      return 69;
                      break;

                    case 60:
                      return 69;
                      break;

                    case 61:
                      return 51;
                      break;

                    case 62:
                      return 52;
                      break;

                    case 63:
                      return 53;
                      break;

                    case 64:
                      return 54;
                      break;

                    case 65:
                      return 55;
                      break;

                    case 66:
                      return 56;
                      break;

                    case 67:
                      return 57;
                      break;

                    case 68:
                      return 58;
                      break;

                    case 69:
                      return 100;
                      break;

                    case 70:
                      return 103;
                      break;

                    case 71:
                      return 114;
                      break;

                    case 72:
                      return 111;
                      break;

                    case 73:
                      return 104;
                      break;

                    case 74:
                      return 112;
                      break;

                    case 75:
                      return 112;
                      break;

                    case 76:
                      return 105;
                      break;

                    case 77:
                      return 61;
                      break;

                    case 78:
                      return 81;
                      break;

                    case 79:
                      return 'SEP';
                      break;

                    case 80:
                      return 80;
                      break;

                    case 81:
                      return 98;
                      break;

                    case 82:
                      return 63;
                      break;

                    case 83:
                      return 62;
                      break;

                    case 84:
                      return 65;
                      break;

                    case 85:
                      return 64;
                      break;

                    case 86:
                      return 109;
                      break;

                    case 87:
                      return 110;
                      break;

                    case 88:
                      return 71;
                      break;

                    case 89:
                      return 49;
                      break;

                    case 90:
                      return 50;
                      break;

                    case 91:
                      return 40;
                      break;

                    case 92:
                      return 41;
                      break;

                    case 93:
                      return 59;
                      break;

                    case 94:
                      return 60;
                      break;

                    case 95:
                      return 120;
                      break;

                    case 96:
                      return 21;
                      break;

                    case 97:
                      return 22;
                      break;

                    case 98:
                      return 23;
                      break;
                  }
                },
                rules: [/^(?:%%\{)/, /^(?:((?:(?!\}%%)[^:.])*))/, /^(?::)/, /^(?:\}%%)/, /^(?:((?:(?!\}%%).|\n)*))/, /^(?:%%(?!\{)[^\n]*)/, /^(?:[^\}]%%[^\n]*)/, /^(?:["])/, /^(?:["])/, /^(?:[^"]*)/, /^(?:style\b)/, /^(?:default\b)/, /^(?:linkStyle\b)/, /^(?:interpolate\b)/, /^(?:classDef\b)/, /^(?:class\b)/, /^(?:href[\s]+["])/, /^(?:["])/, /^(?:[^"]*)/, /^(?:call[\s]+)/, /^(?:\([\s]*\))/, /^(?:\()/, /^(?:[^(]*)/, /^(?:\))/, /^(?:[^)]*)/, /^(?:click[\s]+)/, /^(?:[\s\n])/, /^(?:[^\s\n]*)/, /^(?:graph\b)/, /^(?:flowchart\b)/, /^(?:subgraph\b)/, /^(?:end\b\s*)/, /^(?:_self\b)/, /^(?:_blank\b)/, /^(?:_parent\b)/, /^(?:_top\b)/, /^(?:(\r?\n)*\s*\n)/, /^(?:\s*LR\b)/, /^(?:\s*RL\b)/, /^(?:\s*TB\b)/, /^(?:\s*BT\b)/, /^(?:\s*TD\b)/, /^(?:\s*BR\b)/, /^(?:\s*<)/, /^(?:\s*>)/, /^(?:\s*\^)/, /^(?:\s*v\b)/, /^(?:[0-9]+)/, /^(?:#)/, /^(?::::)/, /^(?::)/, /^(?:&)/, /^(?:;)/, /^(?:,)/, /^(?:\*)/, /^(?:\s*[xo<]?--+[-xo>]\s*)/, /^(?:\s*[xo<]?==+[=xo>]\s*)/, /^(?:\s*[xo<]?-?\.+-[xo>]?\s*)/, /^(?:\s*[xo<]?--\s*)/, /^(?:\s*[xo<]?==\s*)/, /^(?:\s*[xo<]?-\.\s*)/, /^(?:\(-)/, /^(?:-\))/, /^(?:\(\[)/, /^(?:\]\))/, /^(?:\[\[)/, /^(?:\]\])/, /^(?:\[\()/, /^(?:\)\])/, /^(?:-)/, /^(?:\.)/, /^(?:[\_])/, /^(?:\+)/, /^(?:%)/, /^(?:=)/, /^(?:=)/, /^(?:<)/, /^(?:>)/, /^(?:\^)/, /^(?:\\\|)/, /^(?:v\b)/, /^(?:[A-Za-z]+)/, /^(?:\\\])/, /^(?:\[\/)/, /^(?:\/\])/, /^(?:\[\\)/, /^(?:[!"#$%&'*+,-.`?\\_/])/, /^(?:[\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6]|[\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377]|[\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5]|[\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA]|[\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE]|[\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA]|[\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0]|[\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977]|[\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2]|[\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A]|[\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39]|[\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8]|[\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C]|[\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C]|[\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99]|[\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0]|[\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D]|[\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3]|[\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10]|[\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1]|[\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81]|[\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3]|[\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6]|[\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A]|[\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081]|[\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D]|[\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0]|[\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310]|[\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C]|[\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711]|[\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7]|[\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C]|[\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16]|[\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF]|[\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC]|[\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D]|[\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D]|[\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3]|[\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F]|[\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128]|[\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184]|[\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3]|[\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6]|[\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE]|[\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C]|[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D]|[\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC]|[\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B]|[\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788]|[\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805]|[\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB]|[\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28]|[\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5]|[\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4]|[\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E]|[\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D]|[\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36]|[\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D]|[\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC]|[\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF]|[\uFFD2-\uFFD7\uFFDA-\uFFDC])/, /^(?:\|)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\{)/, /^(?:\})/, /^(?:")/, /^(?:(\r?\n)+)/, /^(?:\s)/, /^(?:$)/],
                conditions: {
                  "close_directive": {
                    "rules": [],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3],
                    "inclusive": false
                  },
                  "open_directive": {
                    "rules": [1],
                    "inclusive": false
                  },
                  "callbackargs": {
                    "rules": [23, 24],
                    "inclusive": false
                  },
                  "callbackname": {
                    "rules": [20, 21, 22],
                    "inclusive": false
                  },
                  "href": {
                    "rules": [17, 18],
                    "inclusive": false
                  },
                  "click": {
                    "rules": [26, 27],
                    "inclusive": false
                  },
                  "vertex": {
                    "rules": [],
                    "inclusive": false
                  },
                  "dir": {
                    "rules": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46],
                    "inclusive": false
                  },
                  "string": {
                    "rules": [8, 9],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/flowchart/styles.js":
      /*!******************************************!*\
        !*** ./src/diagrams/flowchart/styles.js ***!
        \******************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return ".label {\n    font-family: ".concat(options.fontFamily, ";\n    color: ").concat(options.nodeTextColor || options.textColor, ";\n  }\n  .cluster-label text {\n    fill: ").concat(options.titleColor, ";\n  }\n  .cluster-label span {\n    color: ").concat(options.titleColor, ";\n  }\n\n  .label text,span {\n    fill: ").concat(options.nodeTextColor || options.textColor, ";\n    color: ").concat(options.nodeTextColor || options.textColor, ";\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ").concat(options.mainBkg, ";\n    stroke: ").concat(options.nodeBorder, ";\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ").concat(options.arrowheadColor, ";\n  }\n\n  .edgePath .path {\n    stroke: ").concat(options.lineColor, ";\n    stroke-width: 1.5px;\n  }\n\n  .flowchart-link {\n    stroke: ").concat(options.lineColor, ";\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ").concat(options.edgeLabelBackground, ";\n    rect {\n      opacity: 0.5;\n      background-color: ").concat(options.edgeLabelBackground, ";\n      fill: ").concat(options.edgeLabelBackground, ";\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ").concat(options.clusterBkg, ";\n    stroke: ").concat(options.clusterBorder, ";\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ").concat(options.titleColor, ";\n  }\n\n  .cluster span {\n    color: ").concat(options.titleColor, ";\n  }\n  // .cluster div {\n  //   color: ").concat(options.titleColor, ";\n  // }\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ").concat(options.fontFamily, ";\n    font-size: 12px;\n    background: ").concat(options.tertiaryColor, ";\n    border: 1px solid ").concat(options.border2, ";\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/gantt/ganttDb.js":
      /*!***************************************!*\
        !*** ./src/diagrams/gantt/ganttDb.js ***!
        \***************************************/

      /*! exports provided: parseDirective, clear, setAxisFormat, getAxisFormat, setTodayMarker, getTodayMarker, setDateFormat, enableInclusiveEndDates, endDatesAreInclusive, getDateFormat, setExcludes, getExcludes, setTitle, getTitle, addSection, getSections, getTasks, addTask, findTaskById, addTaskOrg, setLink, setClass, setClickEvent, bindFunctions, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setAxisFormat", function () {
          return setAxisFormat;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getAxisFormat", function () {
          return getAxisFormat;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setTodayMarker", function () {
          return setTodayMarker;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTodayMarker", function () {
          return getTodayMarker;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setDateFormat", function () {
          return setDateFormat;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "enableInclusiveEndDates", function () {
          return enableInclusiveEndDates;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "endDatesAreInclusive", function () {
          return endDatesAreInclusive;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getDateFormat", function () {
          return getDateFormat;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setExcludes", function () {
          return setExcludes;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getExcludes", function () {
          return getExcludes;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setTitle", function () {
          return setTitle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTitle", function () {
          return getTitle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addSection", function () {
          return addSection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getSections", function () {
          return getSections;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTasks", function () {
          return getTasks;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addTask", function () {
          return addTask;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "findTaskById", function () {
          return findTaskById;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addTaskOrg", function () {
          return addTaskOrg;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setLink", function () {
          return setLink;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setClass", function () {
          return setClass;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setClickEvent", function () {
          return setClickEvent;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "bindFunctions", function () {
          return bindFunctions;
        });
        /* harmony import */


        var moment_mini__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! moment-mini */
        "moment-mini");
        /* harmony import */


        var moment_mini__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment_mini__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! @braintree/sanitize-url */
        "@braintree/sanitize-url");
        /* harmony import */


        var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

        function _iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        }

        var dateFormat = '';
        var axisFormat = '';
        var todayMarker = '';
        var excludes = [];
        var title = '';
        var sections = [];
        var tasks = [];
        var currentSection = '';
        var tags = ['active', 'done', 'crit', 'milestone'];
        var funs = [];
        var inclusiveEndDates = false; // The serial order of the task in the script

        var lastOrder = 0;

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_5__["default"].parseDirective(this, statement, context, type);
        };

        var clear = function clear() {
          sections = [];
          tasks = [];
          currentSection = '';
          funs = [];
          title = '';
          taskCnt = 0;
          lastTask = undefined;
          lastTaskID = undefined;
          rawTasks = [];
          dateFormat = '';
          axisFormat = '';
          todayMarker = '';
          excludes = [];
          inclusiveEndDates = false;
          lastOrder = 0;
        };

        var setAxisFormat = function setAxisFormat(txt) {
          axisFormat = txt;
        };

        var getAxisFormat = function getAxisFormat() {
          return axisFormat;
        };

        var setTodayMarker = function setTodayMarker(txt) {
          todayMarker = txt;
        };

        var getTodayMarker = function getTodayMarker() {
          return todayMarker;
        };

        var setDateFormat = function setDateFormat(txt) {
          dateFormat = txt;
        };

        var enableInclusiveEndDates = function enableInclusiveEndDates() {
          inclusiveEndDates = true;
        };

        var endDatesAreInclusive = function endDatesAreInclusive() {
          return inclusiveEndDates;
        };

        var getDateFormat = function getDateFormat() {
          return dateFormat;
        };

        var setExcludes = function setExcludes(txt) {
          excludes = txt.toLowerCase().split(/[\s,]+/);
        };

        var getExcludes = function getExcludes() {
          return excludes;
        };

        var setTitle = function setTitle(txt) {
          title = txt;
        };

        var getTitle = function getTitle() {
          return title;
        };

        var addSection = function addSection(txt) {
          currentSection = txt;
          sections.push(txt);
        };

        var getSections = function getSections() {
          return sections;
        };

        var getTasks = function getTasks() {
          var allItemsPricessed = compileTasks();
          var maxDepth = 10;
          var iterationCount = 0;

          while (!allItemsPricessed && iterationCount < maxDepth) {
            allItemsPricessed = compileTasks();
            iterationCount++;
          }

          tasks = rawTasks;
          return tasks;
        };

        var isInvalidDate = function isInvalidDate(date, dateFormat, excludes) {
          if (date.isoWeekday() >= 6 && excludes.indexOf('weekends') >= 0) {
            return true;
          }

          if (excludes.indexOf(date.format('dddd').toLowerCase()) >= 0) {
            return true;
          }

          return excludes.indexOf(date.format(dateFormat.trim())) >= 0;
        };

        var checkTaskDates = function checkTaskDates(task, dateFormat, excludes) {
          if (!excludes.length || task.manualEndTime) return;
          var startTime = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(task.startTime, dateFormat, true);
          startTime.add(1, 'd');
          var endTime = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(task.endTime, dateFormat, true);
          var renderEndTime = fixTaskDates(startTime, endTime, dateFormat, excludes);
          task.endTime = endTime.toDate();
          task.renderEndTime = renderEndTime;
        };

        var fixTaskDates = function fixTaskDates(startTime, endTime, dateFormat, excludes) {
          var invalid = false;
          var renderEndTime = null;

          while (startTime <= endTime) {
            if (!invalid) {
              renderEndTime = endTime.toDate();
            }

            invalid = isInvalidDate(startTime, dateFormat, excludes);

            if (invalid) {
              endTime.add(1, 'd');
            }

            startTime.add(1, 'd');
          }

          return renderEndTime;
        };

        var getStartDate = function getStartDate(prevTime, dateFormat, str) {
          str = str.trim(); // Test for after

          var re = /^after\s+([\d\w- ]+)/;
          var afterStatement = re.exec(str.trim());

          if (afterStatement !== null) {
            // check all after ids and take the latest
            var latestEndingTask = null;
            afterStatement[1].split(' ').forEach(function (id) {
              var task = findTaskById(id);

              if (typeof task !== 'undefined') {
                if (!latestEndingTask) {
                  latestEndingTask = task;
                } else {
                  if (task.endTime > latestEndingTask.endTime) {
                    latestEndingTask = task;
                  }
                }
              }
            });

            if (!latestEndingTask) {
              var dt = new Date();
              dt.setHours(0, 0, 0, 0);
              return dt;
            } else {
              return latestEndingTask.endTime;
            }
          } // Check for actual date set


          var mDate = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(str, dateFormat.trim(), true);

          if (mDate.isValid()) {
            return mDate.toDate();
          } else {
            _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug('Invalid date:' + str);

            _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug('With date format:' + dateFormat.trim());
          } // Default date - now


          return new Date();
        };

        var durationToDate = function durationToDate(durationStatement, relativeTime) {
          if (durationStatement !== null) {
            switch (durationStatement[2]) {
              case 's':
                relativeTime.add(durationStatement[1], 'seconds');
                break;

              case 'm':
                relativeTime.add(durationStatement[1], 'minutes');
                break;

              case 'h':
                relativeTime.add(durationStatement[1], 'hours');
                break;

              case 'd':
                relativeTime.add(durationStatement[1], 'days');
                break;

              case 'w':
                relativeTime.add(durationStatement[1], 'weeks');
                break;
            }
          } // Default date - now


          return relativeTime.toDate();
        };

        var getEndDate = function getEndDate(prevTime, dateFormat, str, inclusive) {
          inclusive = inclusive || false;
          str = str.trim(); // Check for actual date

          var mDate = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(str, dateFormat.trim(), true);

          if (mDate.isValid()) {
            if (inclusive) {
              mDate.add(1, 'd');
            }

            return mDate.toDate();
          }

          return durationToDate(/^([\d]+)([wdhms])/.exec(str.trim()), moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(prevTime));
        };

        var taskCnt = 0;

        var parseId = function parseId(idStr) {
          if (typeof idStr === 'undefined') {
            taskCnt = taskCnt + 1;
            return 'task' + taskCnt;
          }

          return idStr;
        }; // id, startDate, endDate
        // id, startDate, length
        // id, after x, endDate
        // id, after x, length
        // startDate, endDate
        // startDate, length
        // after x, endDate
        // after x, length
        // endDate
        // length


        var compileData = function compileData(prevTask, dataStr) {
          var ds;

          if (dataStr.substr(0, 1) === ':') {
            ds = dataStr.substr(1, dataStr.length);
          } else {
            ds = dataStr;
          }

          var data = ds.split(',');
          var task = {}; // Get tags like active, done, crit and milestone

          getTaskTags(data, task, tags);

          for (var i = 0; i < data.length; i++) {
            data[i] = data[i].trim();
          }

          var endTimeData = '';

          switch (data.length) {
            case 1:
              task.id = parseId();
              task.startTime = prevTask.endTime;
              endTimeData = data[0];
              break;

            case 2:
              task.id = parseId();
              task.startTime = getStartDate(undefined, dateFormat, data[0]);
              endTimeData = data[1];
              break;

            case 3:
              task.id = parseId(data[0]);
              task.startTime = getStartDate(undefined, dateFormat, data[1]);
              endTimeData = data[2];
              break;

            default:
          }

          if (endTimeData) {
            task.endTime = getEndDate(task.startTime, dateFormat, endTimeData, inclusiveEndDates);
            task.manualEndTime = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(endTimeData, 'YYYY-MM-DD', true).isValid();
            checkTaskDates(task, dateFormat, excludes);
          }

          return task;
        };

        var parseData = function parseData(prevTaskId, dataStr) {
          var ds;

          if (dataStr.substr(0, 1) === ':') {
            ds = dataStr.substr(1, dataStr.length);
          } else {
            ds = dataStr;
          }

          var data = ds.split(',');
          var task = {}; // Get tags like active, done, crit and milestone

          getTaskTags(data, task, tags);

          for (var i = 0; i < data.length; i++) {
            data[i] = data[i].trim();
          }

          switch (data.length) {
            case 1:
              task.id = parseId();
              task.startTime = {
                type: 'prevTaskEnd',
                id: prevTaskId
              };
              task.endTime = {
                data: data[0]
              };
              break;

            case 2:
              task.id = parseId();
              task.startTime = {
                type: 'getStartDate',
                startData: data[0]
              };
              task.endTime = {
                data: data[1]
              };
              break;

            case 3:
              task.id = parseId(data[0]);
              task.startTime = {
                type: 'getStartDate',
                startData: data[1]
              };
              task.endTime = {
                data: data[2]
              };
              break;

            default:
          }

          return task;
        };

        var lastTask;
        var lastTaskID;
        var rawTasks = [];
        var taskDb = {};

        var addTask = function addTask(descr, data) {
          var rawTask = {
            section: currentSection,
            type: currentSection,
            processed: false,
            manualEndTime: false,
            renderEndTime: null,
            raw: {
              data: data
            },
            task: descr,
            classes: []
          };
          var taskInfo = parseData(lastTaskID, data);
          rawTask.raw.startTime = taskInfo.startTime;
          rawTask.raw.endTime = taskInfo.endTime;
          rawTask.id = taskInfo.id;
          rawTask.prevTaskId = lastTaskID;
          rawTask.active = taskInfo.active;
          rawTask.done = taskInfo.done;
          rawTask.crit = taskInfo.crit;
          rawTask.milestone = taskInfo.milestone;
          rawTask.order = lastOrder;
          lastOrder++;
          var pos = rawTasks.push(rawTask);
          lastTaskID = rawTask.id; // Store cross ref

          taskDb[rawTask.id] = pos - 1;
        };

        var findTaskById = function findTaskById(id) {
          var pos = taskDb[id];
          return rawTasks[pos];
        };

        var addTaskOrg = function addTaskOrg(descr, data) {
          var newTask = {
            section: currentSection,
            type: currentSection,
            description: descr,
            task: descr,
            classes: []
          };
          var taskInfo = compileData(lastTask, data);
          newTask.startTime = taskInfo.startTime;
          newTask.endTime = taskInfo.endTime;
          newTask.id = taskInfo.id;
          newTask.active = taskInfo.active;
          newTask.done = taskInfo.done;
          newTask.crit = taskInfo.crit;
          newTask.milestone = taskInfo.milestone;
          lastTask = newTask;
          tasks.push(newTask);
        };

        var compileTasks = function compileTasks() {
          var compileTask = function compileTask(pos) {
            var task = rawTasks[pos];
            var startTime = '';

            switch (rawTasks[pos].raw.startTime.type) {
              case 'prevTaskEnd':
                {
                  var prevTask = findTaskById(task.prevTaskId);
                  task.startTime = prevTask.endTime;
                  break;
                }

              case 'getStartDate':
                startTime = getStartDate(undefined, dateFormat, rawTasks[pos].raw.startTime.startData);

                if (startTime) {
                  rawTasks[pos].startTime = startTime;
                }

                break;
            }

            if (rawTasks[pos].startTime) {
              rawTasks[pos].endTime = getEndDate(rawTasks[pos].startTime, dateFormat, rawTasks[pos].raw.endTime.data, inclusiveEndDates);

              if (rawTasks[pos].endTime) {
                rawTasks[pos].processed = true;
                rawTasks[pos].manualEndTime = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()(rawTasks[pos].raw.endTime.data, 'YYYY-MM-DD', true).isValid();
                checkTaskDates(rawTasks[pos], dateFormat, excludes);
              }
            }

            return rawTasks[pos].processed;
          };

          var allProcessed = true;

          for (var i = 0; i < rawTasks.length; i++) {
            compileTask(i);
            allProcessed = allProcessed && rawTasks[i].processed;
          }

          return allProcessed;
        };
        /**
         * Called by parser when a link is found. Adds the URL to the vertex data.
         * @param ids Comma separated list of ids
         * @param linkStr URL to create a link for
         */


        var setLink = function setLink(ids, _linkStr) {
          var linkStr = _linkStr;

          if (_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"]().securityLevel !== 'loose') {
            linkStr = Object(_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_1__["sanitizeUrl"])(_linkStr);
          }

          ids.split(',').forEach(function (id) {
            var rawTask = findTaskById(id);

            if (typeof rawTask !== 'undefined') {
              pushFun(id, function () {
                window.open(linkStr, '_self');
              });
            }
          });
          setClass(ids, 'clickable');
        };
        /**
         * Called by parser when a special node is found, e.g. a clickable element.
         * @param ids Comma separated list of ids
         * @param className Class to add
         */


        var setClass = function setClass(ids, className) {
          ids.split(',').forEach(function (id) {
            var rawTask = findTaskById(id);

            if (typeof rawTask !== 'undefined') {
              rawTask.classes.push(className);
            }
          });
        };

        var setClickFun = function setClickFun(id, functionName, functionArgs) {
          if (_config__WEBPACK_IMPORTED_MODULE_3__["getConfig"]().securityLevel !== 'loose') {
            return;
          }

          if (typeof functionName === 'undefined') {
            return;
          }

          var argList = [];

          if (typeof functionArgs === 'string') {
            /* Splits functionArgs by ',', ignoring all ',' in double quoted strings */
            argList = functionArgs.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);

            for (var i = 0; i < argList.length; i++) {
              var item = argList[i].trim();
              /* Removes all double quotes at the start and end of an argument */

              /* This preserves all starting and ending whitespace inside */

              if (item.charAt(0) === '"' && item.charAt(item.length - 1) === '"') {
                item = item.substr(1, item.length - 2);
              }

              argList[i] = item;
            }
          }
          /* if no arguments passed into callback, default to passing in id */


          if (argList.length === 0) {
            argList.push(id);
          }

          var rawTask = findTaskById(id);

          if (typeof rawTask !== 'undefined') {
            pushFun(id, function () {
              _utils__WEBPACK_IMPORTED_MODULE_4__["default"].runFunc.apply(_utils__WEBPACK_IMPORTED_MODULE_4__["default"], [functionName].concat(_toConsumableArray(argList)));
            });
          }
        };
        /**
         * The callbackFunction is executed in a click event bound to the task with the specified id or the task's assigned text
         * @param id The task's id
         * @param callbackFunction A function to be executed when clicked on the task or the task's text
         */


        var pushFun = function pushFun(id, callbackFunction) {
          funs.push(function () {
            // const elem = d3.select(element).select(`[id="${id}"]`)
            var elem = document.querySelector("[id=\"".concat(id, "\"]"));

            if (elem !== null) {
              elem.addEventListener('click', function () {
                callbackFunction();
              });
            }
          });
          funs.push(function () {
            // const elem = d3.select(element).select(`[id="${id}-text"]`)
            var elem = document.querySelector("[id=\"".concat(id, "-text\"]"));

            if (elem !== null) {
              elem.addEventListener('click', function () {
                callbackFunction();
              });
            }
          });
        };
        /**
         * Called by parser when a click definition is found. Registers an event handler.
         * @param ids Comma separated list of ids
         * @param functionName Function to be called on click
         * @param functionArgs Function args the function should be called with
         */


        var setClickEvent = function setClickEvent(ids, functionName, functionArgs) {
          ids.split(',').forEach(function (id) {
            setClickFun(id, functionName, functionArgs);
          });
          setClass(ids, 'clickable');
        };
        /**
         * Binds all functions previously added to fun (specified through click) to the element
         * @param element
         */


        var bindFunctions = function bindFunctions(element) {
          funs.forEach(function (fun) {
            fun(element);
          });
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_3__["getConfig"]().gantt;
          },
          clear: clear,
          setDateFormat: setDateFormat,
          getDateFormat: getDateFormat,
          enableInclusiveEndDates: enableInclusiveEndDates,
          endDatesAreInclusive: endDatesAreInclusive,
          setAxisFormat: setAxisFormat,
          getAxisFormat: getAxisFormat,
          setTodayMarker: setTodayMarker,
          getTodayMarker: getTodayMarker,
          setTitle: setTitle,
          getTitle: getTitle,
          addSection: addSection,
          getSections: getSections,
          getTasks: getTasks,
          addTask: addTask,
          findTaskById: findTaskById,
          addTaskOrg: addTaskOrg,
          setExcludes: setExcludes,
          getExcludes: getExcludes,
          setClickEvent: setClickEvent,
          setLink: setLink,
          bindFunctions: bindFunctions,
          durationToDate: durationToDate
        };

        function getTaskTags(data, task, tags) {
          var matchFound = true;

          while (matchFound) {
            matchFound = false;
            tags.forEach(function (t) {
              var pattern = '^\\s*' + t + '\\s*$';
              var regex = new RegExp(pattern);

              if (data[0].match(regex)) {
                task[t] = true;
                data.shift(1);
                matchFound = true;
              }
            });
          }
        }
        /***/

      },

      /***/
      "./src/diagrams/gantt/ganttRenderer.js":
      /*!*********************************************!*\
        !*** ./src/diagrams/gantt/ganttRenderer.js ***!
        \*********************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _parser_gantt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./parser/gantt */
        "./src/diagrams/gantt/parser/gantt.jison");
        /* harmony import */


        var _parser_gantt__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_parser_gantt__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _ganttDb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./ganttDb */
        "./src/diagrams/gantt/ganttDb.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        _parser_gantt__WEBPACK_IMPORTED_MODULE_1__["parser"].yy = _ganttDb__WEBPACK_IMPORTED_MODULE_3__["default"];
        var conf = {
          titleTopMargin: 25,
          barHeight: 20,
          barGap: 4,
          topPadding: 50,
          rightPadding: 75,
          leftPadding: 75,
          gridLineStartPadding: 35,
          fontSize: 11,
          fontFamily: '"Open-Sans", "sans-serif"'
        };

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };

        var w;

        var draw = function draw(text, id) {
          _parser_gantt__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.clear();

          _parser_gantt__WEBPACK_IMPORTED_MODULE_1__["parser"].parse(text);

          var elem = document.getElementById(id);
          w = elem.parentElement.offsetWidth;

          if (typeof w === 'undefined') {
            w = 1200;
          }

          if (typeof conf.useWidth !== 'undefined') {
            w = conf.useWidth;
          }

          var taskArray = _parser_gantt__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.getTasks(); // Set height based on number of tasks


          var h = taskArray.length * (conf.barHeight + conf.barGap) + 2 * conf.topPadding; // Set viewBox

          elem.setAttribute('viewBox', '0 0 ' + w + ' ' + h);
          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id=\"".concat(id, "\"]")); // Set timescale

          var timeScale = Object(d3__WEBPACK_IMPORTED_MODULE_0__["scaleTime"])().domain([Object(d3__WEBPACK_IMPORTED_MODULE_0__["min"])(taskArray, function (d) {
            return d.startTime;
          }), Object(d3__WEBPACK_IMPORTED_MODULE_0__["max"])(taskArray, function (d) {
            return d.endTime;
          })]).rangeRound([0, w - conf.leftPadding - conf.rightPadding]);
          var categories = [];

          for (var i = 0; i < taskArray.length; i++) {
            categories.push(taskArray[i].type);
          }

          var catsUnfiltered = categories; // for vert labels

          categories = checkUnique(categories);

          function taskCompare(a, b) {
            var taskA = a.startTime;
            var taskB = b.startTime;
            var result = 0;

            if (taskA > taskB) {
              result = 1;
            } else if (taskA < taskB) {
              result = -1;
            }

            return result;
          } // Sort the task array using the above taskCompare() so that
          // tasks are created based on their order of startTime


          taskArray.sort(taskCompare);
          makeGant(taskArray, w, h);
          Object(_utils__WEBPACK_IMPORTED_MODULE_4__["configureSvgSize"])(svg, h, w, conf.useMaxWidth);
          svg.append('text').text(_parser_gantt__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.getTitle()).attr('x', w / 2).attr('y', conf.titleTopMargin).attr('class', 'titleText');

          function makeGant(tasks, pageWidth, pageHeight) {
            var barHeight = conf.barHeight;
            var gap = barHeight + conf.barGap;
            var topPadding = conf.topPadding;
            var leftPadding = conf.leftPadding;
            var colorScale = Object(d3__WEBPACK_IMPORTED_MODULE_0__["scaleLinear"])().domain([0, categories.length]).range(['#00B9FA', '#F95002']).interpolate(d3__WEBPACK_IMPORTED_MODULE_0__["interpolateHcl"]);
            makeGrid(leftPadding, topPadding, pageWidth, pageHeight);
            drawRects(tasks, gap, topPadding, leftPadding, barHeight, colorScale, pageWidth, pageHeight);
            vertLabels(gap, topPadding, leftPadding, barHeight, colorScale);
            drawToday(leftPadding, topPadding, pageWidth, pageHeight);
          }

          function drawRects(theArray, theGap, theTopPad, theSidePad, theBarHeight, theColorScale, w) {
            // Draw background rects covering the entire width of the graph, these form the section rows.
            svg.append('g').selectAll('rect').data(theArray).enter().append('rect').attr('x', 0).attr('y', function (d, i) {
              // Ignore the incoming i value and use our order instead
              i = d.order;
              return i * theGap + theTopPad - 2;
            }).attr('width', function () {
              return w - conf.rightPadding / 2;
            }).attr('height', theGap).attr('class', function (d) {
              for (var _i = 0; _i < categories.length; _i++) {
                if (d.type === categories[_i]) {
                  return 'section section' + _i % conf.numberSectionStyles;
                }
              }

              return 'section section0';
            }); // Draw the rects representing the tasks

            var rectangles = svg.append('g').selectAll('rect').data(theArray).enter();
            rectangles.append('rect').attr('id', function (d) {
              return d.id;
            }).attr('rx', 3).attr('ry', 3).attr('x', function (d) {
              if (d.milestone) {
                return timeScale(d.startTime) + theSidePad + 0.5 * (timeScale(d.endTime) - timeScale(d.startTime)) - 0.5 * theBarHeight;
              }

              return timeScale(d.startTime) + theSidePad;
            }).attr('y', function (d, i) {
              // Ignore the incoming i value and use our order instead
              i = d.order;
              return i * theGap + theTopPad;
            }).attr('width', function (d) {
              if (d.milestone) {
                return theBarHeight;
              }

              return timeScale(d.renderEndTime || d.endTime) - timeScale(d.startTime);
            }).attr('height', theBarHeight).attr('transform-origin', function (d, i) {
              return (timeScale(d.startTime) + theSidePad + 0.5 * (timeScale(d.endTime) - timeScale(d.startTime))).toString() + 'px ' + (i * theGap + theTopPad + 0.5 * theBarHeight).toString() + 'px';
            }).attr('class', function (d) {
              var res = 'task';
              var classStr = '';

              if (d.classes.length > 0) {
                classStr = d.classes.join(' ');
              }

              var secNum = 0;

              for (var _i2 = 0; _i2 < categories.length; _i2++) {
                if (d.type === categories[_i2]) {
                  secNum = _i2 % conf.numberSectionStyles;
                }
              }

              var taskClass = '';

              if (d.active) {
                if (d.crit) {
                  taskClass += ' activeCrit';
                } else {
                  taskClass = ' active';
                }
              } else if (d.done) {
                if (d.crit) {
                  taskClass = ' doneCrit';
                } else {
                  taskClass = ' done';
                }
              } else {
                if (d.crit) {
                  taskClass += ' crit';
                }
              }

              if (taskClass.length === 0) {
                taskClass = ' task';
              }

              if (d.milestone) {
                taskClass = ' milestone ' + taskClass;
              }

              taskClass += secNum;
              taskClass += ' ' + classStr;
              return res + taskClass;
            }); // Append task labels

            rectangles.append('text').attr('id', function (d) {
              return d.id + '-text';
            }).text(function (d) {
              return d.task;
            }).attr('font-size', conf.fontSize).attr('x', function (d) {
              var startX = timeScale(d.startTime);
              var endX = timeScale(d.renderEndTime || d.endTime);

              if (d.milestone) {
                startX += 0.5 * (timeScale(d.endTime) - timeScale(d.startTime)) - 0.5 * theBarHeight;
              }

              if (d.milestone) {
                endX = startX + theBarHeight;
              }

              var textWidth = this.getBBox().width; // Check id text width > width of rectangle

              if (textWidth > endX - startX) {
                if (endX + textWidth + 1.5 * conf.leftPadding > w) {
                  return startX + theSidePad - 5;
                } else {
                  return endX + theSidePad + 5;
                }
              } else {
                return (endX - startX) / 2 + startX + theSidePad;
              }
            }).attr('y', function (d, i) {
              // Ignore the incoming i value and use our order instead
              i = d.order;
              return i * theGap + conf.barHeight / 2 + (conf.fontSize / 2 - 2) + theTopPad;
            }).attr('text-height', theBarHeight).attr('class', function (d) {
              var startX = timeScale(d.startTime);
              var endX = timeScale(d.endTime);

              if (d.milestone) {
                endX = startX + theBarHeight;
              }

              var textWidth = this.getBBox().width;
              var classStr = '';

              if (d.classes.length > 0) {
                classStr = d.classes.join(' ');
              }

              var secNum = 0;

              for (var _i3 = 0; _i3 < categories.length; _i3++) {
                if (d.type === categories[_i3]) {
                  secNum = _i3 % conf.numberSectionStyles;
                }
              }

              var taskType = '';

              if (d.active) {
                if (d.crit) {
                  taskType = 'activeCritText' + secNum;
                } else {
                  taskType = 'activeText' + secNum;
                }
              }

              if (d.done) {
                if (d.crit) {
                  taskType = taskType + ' doneCritText' + secNum;
                } else {
                  taskType = taskType + ' doneText' + secNum;
                }
              } else {
                if (d.crit) {
                  taskType = taskType + ' critText' + secNum;
                }
              }

              if (d.milestone) {
                taskType += ' milestoneText';
              } // Check id text width > width of rectangle


              if (textWidth > endX - startX) {
                if (endX + textWidth + 1.5 * conf.leftPadding > w) {
                  return classStr + ' taskTextOutsideLeft taskTextOutside' + secNum + ' ' + taskType;
                } else {
                  return classStr + ' taskTextOutsideRight taskTextOutside' + secNum + ' ' + taskType + ' width-' + textWidth;
                }
              } else {
                return classStr + ' taskText taskText' + secNum + ' ' + taskType + ' width-' + textWidth;
              }
            });
          }

          function makeGrid(theSidePad, theTopPad, w, h) {
            var xAxis = Object(d3__WEBPACK_IMPORTED_MODULE_0__["axisBottom"])(timeScale).tickSize(-h + theTopPad + conf.gridLineStartPadding).tickFormat(Object(d3__WEBPACK_IMPORTED_MODULE_0__["timeFormat"])(_parser_gantt__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.getAxisFormat() || conf.axisFormat || '%Y-%m-%d'));
            svg.append('g').attr('class', 'grid').attr('transform', 'translate(' + theSidePad + ', ' + (h - 50) + ')').call(xAxis).selectAll('text').style('text-anchor', 'middle').attr('fill', '#000').attr('stroke', 'none').attr('font-size', 10).attr('dy', '1em');
          }

          function vertLabels(theGap, theTopPad) {
            var numOccurances = [];
            var prevGap = 0;

            for (var _i4 = 0; _i4 < categories.length; _i4++) {
              numOccurances[_i4] = [categories[_i4], getCount(categories[_i4], catsUnfiltered)];
            }

            svg.append('g') // without doing this, impossible to put grid lines behind text
            .selectAll('text').data(numOccurances).enter().append(function (d) {
              var rows = d[0].split(_common_common__WEBPACK_IMPORTED_MODULE_2__["default"].lineBreakRegex);
              var dy = -(rows.length - 1) / 2;
              var svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
              svgLabel.setAttribute('dy', dy + 'em');

              for (var j = 0; j < rows.length; j++) {
                var tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
                tspan.setAttribute('alignment-baseline', 'central');
                tspan.setAttribute('x', '10');
                if (j > 0) tspan.setAttribute('dy', '1em');
                tspan.textContent = rows[j];
                svgLabel.appendChild(tspan);
              }

              return svgLabel;
            }).attr('x', 10).attr('y', function (d, i) {
              if (i > 0) {
                for (var j = 0; j < i; j++) {
                  prevGap += numOccurances[i - 1][1];
                  return d[1] * theGap / 2 + prevGap * theGap + theTopPad;
                }
              } else {
                return d[1] * theGap / 2 + theTopPad;
              }
            }).attr('class', function (d) {
              for (var _i5 = 0; _i5 < categories.length; _i5++) {
                if (d[0] === categories[_i5]) {
                  return 'sectionTitle sectionTitle' + _i5 % conf.numberSectionStyles;
                }
              }

              return 'sectionTitle';
            });
          }

          function drawToday(theSidePad, theTopPad, w, h) {
            var todayMarker = _ganttDb__WEBPACK_IMPORTED_MODULE_3__["default"].getTodayMarker();

            if (todayMarker === 'off') {
              return;
            }

            var todayG = svg.append('g').attr('class', 'today');
            var today = new Date();
            var todayLine = todayG.append('line');
            todayLine.attr('x1', timeScale(today) + theSidePad).attr('x2', timeScale(today) + theSidePad).attr('y1', conf.titleTopMargin).attr('y2', h - conf.titleTopMargin).attr('class', 'today');

            if (todayMarker !== '') {
              todayLine.attr('style', todayMarker.replace(/,/g, ';'));
            }
          } // from this stackexchange question: http://stackoverflow.com/questions/1890203/unique-for-arrays-in-javascript


          function checkUnique(arr) {
            var hash = {};
            var result = [];

            for (var _i6 = 0, l = arr.length; _i6 < l; ++_i6) {
              if (!hash.hasOwnProperty(arr[_i6])) {
                // eslint-disable-line
                // it works with objects! in FF, at least
                hash[arr[_i6]] = true;
                result.push(arr[_i6]);
              }
            }

            return result;
          } // from this stackexchange question: http://stackoverflow.com/questions/14227981/count-how-many-strings-in-an-array-have-duplicates-in-the-same-array


          function getCounts(arr) {
            var i = arr.length; // const to loop over

            var obj = {}; // obj to store results

            while (i) {
              obj[arr[--i]] = (obj[arr[i]] || 0) + 1; // count occurrences
            }

            return obj;
          } // get specific from everything


          function getCount(word, arr) {
            return getCounts(arr)[word] || 0;
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/gantt/parser/gantt.jison":
      /*!***********************************************!*\
        !*** ./src/diagrams/gantt/parser/gantt.jison ***!
        \***********************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 3],
                $V1 = [1, 5],
                $V2 = [7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 27, 32],
                $V3 = [1, 15],
                $V4 = [1, 16],
                $V5 = [1, 17],
                $V6 = [1, 18],
                $V7 = [1, 19],
                $V8 = [1, 20],
                $V9 = [1, 21],
                $Va = [1, 23],
                $Vb = [1, 25],
                $Vc = [1, 28],
                $Vd = [5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 27, 32];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "directive": 4,
                "gantt": 5,
                "document": 6,
                "EOF": 7,
                "line": 8,
                "SPACE": 9,
                "statement": 10,
                "NL": 11,
                "dateFormat": 12,
                "inclusiveEndDates": 13,
                "axisFormat": 14,
                "excludes": 15,
                "todayMarker": 16,
                "title": 17,
                "section": 18,
                "clickStatement": 19,
                "taskTxt": 20,
                "taskData": 21,
                "openDirective": 22,
                "typeDirective": 23,
                "closeDirective": 24,
                ":": 25,
                "argDirective": 26,
                "click": 27,
                "callbackname": 28,
                "callbackargs": 29,
                "href": 30,
                "clickStatementDebug": 31,
                "open_directive": 32,
                "type_directive": 33,
                "arg_directive": 34,
                "close_directive": 35,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                5: "gantt",
                7: "EOF",
                9: "SPACE",
                11: "NL",
                12: "dateFormat",
                13: "inclusiveEndDates",
                14: "axisFormat",
                15: "excludes",
                16: "todayMarker",
                17: "title",
                18: "section",
                20: "taskTxt",
                21: "taskData",
                25: ":",
                27: "click",
                28: "callbackname",
                29: "callbackargs",
                30: "href",
                32: "open_directive",
                33: "type_directive",
                34: "arg_directive",
                35: "close_directive"
              },
              productions_: [0, [3, 2], [3, 3], [6, 0], [6, 2], [8, 2], [8, 1], [8, 1], [8, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 2], [10, 1], [4, 4], [4, 6], [19, 2], [19, 3], [19, 3], [19, 4], [19, 3], [19, 4], [19, 2], [31, 2], [31, 3], [31, 3], [31, 4], [31, 3], [31, 4], [31, 2], [22, 1], [23, 1], [26, 1], [24, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 2:
                    return $$[$0 - 1];
                    break;

                  case 3:
                    this.$ = [];
                    break;

                  case 4:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 5:
                  case 6:
                    this.$ = $$[$0];
                    break;

                  case 7:
                  case 8:
                    this.$ = [];
                    break;

                  case 9:
                    yy.setDateFormat($$[$0].substr(11));
                    this.$ = $$[$0].substr(11);
                    break;

                  case 10:
                    yy.enableInclusiveEndDates();
                    this.$ = $$[$0].substr(18);
                    break;

                  case 11:
                    yy.setAxisFormat($$[$0].substr(11));
                    this.$ = $$[$0].substr(11);
                    break;

                  case 12:
                    yy.setExcludes($$[$0].substr(9));
                    this.$ = $$[$0].substr(9);
                    break;

                  case 13:
                    yy.setTodayMarker($$[$0].substr(12));
                    this.$ = $$[$0].substr(12);
                    break;

                  case 14:
                    yy.setTitle($$[$0].substr(6));
                    this.$ = $$[$0].substr(6);
                    break;

                  case 15:
                    yy.addSection($$[$0].substr(8));
                    this.$ = $$[$0].substr(8);
                    break;

                  case 17:
                    yy.addTask($$[$0 - 1], $$[$0]);
                    this.$ = 'task';
                    break;

                  case 21:
                    this.$ = $$[$0 - 1];
                    yy.setClickEvent($$[$0 - 1], $$[$0], null);
                    break;

                  case 22:
                    this.$ = $$[$0 - 2];
                    yy.setClickEvent($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;

                  case 23:
                    this.$ = $$[$0 - 2];
                    yy.setClickEvent($$[$0 - 2], $$[$0 - 1], null);
                    yy.setLink($$[$0 - 2], $$[$0]);
                    break;

                  case 24:
                    this.$ = $$[$0 - 3];
                    yy.setClickEvent($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);
                    yy.setLink($$[$0 - 3], $$[$0]);
                    break;

                  case 25:
                    this.$ = $$[$0 - 2];
                    yy.setClickEvent($$[$0 - 2], $$[$0], null);
                    yy.setLink($$[$0 - 2], $$[$0 - 1]);
                    break;

                  case 26:
                    this.$ = $$[$0 - 3];
                    yy.setClickEvent($$[$0 - 3], $$[$0 - 1], $$[$0]);
                    yy.setLink($$[$0 - 3], $$[$0 - 2]);
                    break;

                  case 27:
                    this.$ = $$[$0 - 1];
                    yy.setLink($$[$0 - 1], $$[$0]);
                    break;

                  case 28:
                  case 34:
                    this.$ = $$[$0 - 1] + ' ' + $$[$0];
                    break;

                  case 29:
                  case 30:
                  case 32:
                    this.$ = $$[$0 - 2] + ' ' + $$[$0 - 1] + ' ' + $$[$0];
                    break;

                  case 31:
                  case 33:
                    this.$ = $$[$0 - 3] + ' ' + $$[$0 - 2] + ' ' + $$[$0 - 1] + ' ' + $$[$0];
                    break;

                  case 35:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 36:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 37:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 38:
                    yy.parseDirective('}%%', 'close_directive', 'gantt');
                    break;
                }
              },
              table: [{
                3: 1,
                4: 2,
                5: $V0,
                22: 4,
                32: $V1
              }, {
                1: [3]
              }, {
                3: 6,
                4: 2,
                5: $V0,
                22: 4,
                32: $V1
              }, o($V2, [2, 3], {
                6: 7
              }), {
                23: 8,
                33: [1, 9]
              }, {
                33: [2, 35]
              }, {
                1: [2, 1]
              }, {
                4: 24,
                7: [1, 10],
                8: 11,
                9: [1, 12],
                10: 13,
                11: [1, 14],
                12: $V3,
                13: $V4,
                14: $V5,
                15: $V6,
                16: $V7,
                17: $V8,
                18: $V9,
                19: 22,
                20: $Va,
                22: 4,
                27: $Vb,
                32: $V1
              }, {
                24: 26,
                25: [1, 27],
                35: $Vc
              }, o([25, 35], [2, 36]), o($V2, [2, 8], {
                1: [2, 2]
              }), o($V2, [2, 4]), {
                4: 24,
                10: 29,
                12: $V3,
                13: $V4,
                14: $V5,
                15: $V6,
                16: $V7,
                17: $V8,
                18: $V9,
                19: 22,
                20: $Va,
                22: 4,
                27: $Vb,
                32: $V1
              }, o($V2, [2, 6]), o($V2, [2, 7]), o($V2, [2, 9]), o($V2, [2, 10]), o($V2, [2, 11]), o($V2, [2, 12]), o($V2, [2, 13]), o($V2, [2, 14]), o($V2, [2, 15]), o($V2, [2, 16]), {
                21: [1, 30]
              }, o($V2, [2, 18]), {
                28: [1, 31],
                30: [1, 32]
              }, {
                11: [1, 33]
              }, {
                26: 34,
                34: [1, 35]
              }, {
                11: [2, 38]
              }, o($V2, [2, 5]), o($V2, [2, 17]), o($V2, [2, 21], {
                29: [1, 36],
                30: [1, 37]
              }), o($V2, [2, 27], {
                28: [1, 38]
              }), o($Vd, [2, 19]), {
                24: 39,
                35: $Vc
              }, {
                35: [2, 37]
              }, o($V2, [2, 22], {
                30: [1, 40]
              }), o($V2, [2, 23]), o($V2, [2, 25], {
                29: [1, 41]
              }), {
                11: [1, 42]
              }, o($V2, [2, 24]), o($V2, [2, 26]), o($Vd, [2, 20])],
              defaultActions: {
                5: [2, 35],
                6: [2, 1],
                28: [2, 38],
                35: [2, 37]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 32;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 33;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 25;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 35;
                      break;

                    case 4:
                      return 34;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      break;

                    case 7:
                      /* do nothing */
                      break;

                    case 8:
                      return 11;
                      break;

                    case 9:
                      /* skip whitespace */
                      break;

                    case 10:
                      /* skip comments */
                      break;

                    case 11:
                      /* skip comments */
                      break;

                    case 12:
                      this.begin("href");
                      break;

                    case 13:
                      this.popState();
                      break;

                    case 14:
                      return 30;
                      break;

                    case 15:
                      this.begin("callbackname");
                      break;

                    case 16:
                      this.popState();
                      break;

                    case 17:
                      this.popState();
                      this.begin("callbackargs");
                      break;

                    case 18:
                      return 28;
                      break;

                    case 19:
                      this.popState();
                      break;

                    case 20:
                      return 29;
                      break;

                    case 21:
                      this.begin("click");
                      break;

                    case 22:
                      this.popState();
                      break;

                    case 23:
                      return 27;
                      break;

                    case 24:
                      return 5;
                      break;

                    case 25:
                      return 12;
                      break;

                    case 26:
                      return 13;
                      break;

                    case 27:
                      return 14;
                      break;

                    case 28:
                      return 15;
                      break;

                    case 29:
                      return 16;
                      break;

                    case 30:
                      return 'date';
                      break;

                    case 31:
                      return 17;
                      break;

                    case 32:
                      return 18;
                      break;

                    case 33:
                      return 20;
                      break;

                    case 34:
                      return 21;
                      break;

                    case 35:
                      return 25;
                      break;

                    case 36:
                      return 7;
                      break;

                    case 37:
                      return 'INVALID';
                      break;
                  }
                },
                rules: [/^(?:%%\{)/i, /^(?:((?:(?!\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\}%%)/i, /^(?:((?:(?!\}%%).|\n)*))/i, /^(?:%%(?!\{)*[^\n]*)/i, /^(?:[^\}]%%*[^\n]*)/i, /^(?:%%*[^\n]*[\n]*)/i, /^(?:[\n]+)/i, /^(?:\s+)/i, /^(?:#[^\n]*)/i, /^(?:%[^\n]*)/i, /^(?:href[\s]+["])/i, /^(?:["])/i, /^(?:[^"]*)/i, /^(?:call[\s]+)/i, /^(?:\([\s]*\))/i, /^(?:\()/i, /^(?:[^(]*)/i, /^(?:\))/i, /^(?:[^)]*)/i, /^(?:click[\s]+)/i, /^(?:[\s\n])/i, /^(?:[^\s\n]*)/i, /^(?:gantt\b)/i, /^(?:dateFormat\s[^#\n;]+)/i, /^(?:inclusiveEndDates\b)/i, /^(?:axisFormat\s[^#\n;]+)/i, /^(?:excludes\s[^#\n;]+)/i, /^(?:todayMarker\s[^\n;]+)/i, /^(?:\d\d\d\d-\d\d-\d\d\b)/i, /^(?:title\s[^#\n;]+)/i, /^(?:section\s[^#:\n;]+)/i, /^(?:[^#:\n;]+)/i, /^(?::[^#\n;]+)/i, /^(?::)/i, /^(?:$)/i, /^(?:.)/i],
                conditions: {
                  "close_directive": {
                    "rules": [],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3],
                    "inclusive": false
                  },
                  "open_directive": {
                    "rules": [1],
                    "inclusive": false
                  },
                  "callbackargs": {
                    "rules": [19, 20],
                    "inclusive": false
                  },
                  "callbackname": {
                    "rules": [16, 17, 18],
                    "inclusive": false
                  },
                  "href": {
                    "rules": [13, 14],
                    "inclusive": false
                  },
                  "click": {
                    "rules": [22, 23],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 8, 9, 10, 11, 12, 15, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/gantt/styles.js":
      /*!**************************************!*\
        !*** ./src/diagrams/gantt/styles.js ***!
        \**************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return "\n  .mermaid-main-font {\n    font-family: \"trebuchet ms\", verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n\n  .section {\n    stroke: none;\n    opacity: 0.2;\n  }\n\n  .section0 {\n    fill: ".concat(options.sectionBkgColor, ";\n  }\n\n  .section2 {\n    fill: ").concat(options.sectionBkgColor2, ";\n  }\n\n  .section1,\n  .section3 {\n    fill: ").concat(options.altSectionBkgColor, ";\n    opacity: 0.2;\n  }\n\n  .sectionTitle0 {\n    fill: ").concat(options.titleColor, ";\n  }\n\n  .sectionTitle1 {\n    fill: ").concat(options.titleColor, ";\n  }\n\n  .sectionTitle2 {\n    fill: ").concat(options.titleColor, ";\n  }\n\n  .sectionTitle3 {\n    fill: ").concat(options.titleColor, ";\n  }\n\n  .sectionTitle {\n    text-anchor: start;\n    font-size: 11px;\n    text-height: 14px;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n\n  }\n\n\n  /* Grid and axis */\n\n  .grid .tick {\n    stroke: ").concat(options.gridColor, ";\n    opacity: 0.8;\n    shape-rendering: crispEdges;\n    text {\n      font-family: ").concat(options.fontFamily, ";\n      fill: ").concat(options.textColor, ";\n    }\n  }\n\n  .grid path {\n    stroke-width: 0;\n  }\n\n\n  /* Today line */\n\n  .today {\n    fill: none;\n    stroke: ").concat(options.todayLineColor, ";\n    stroke-width: 2px;\n  }\n\n\n  /* Task styling */\n\n  /* Default task */\n\n  .task {\n    stroke-width: 2;\n  }\n\n  .taskText {\n    text-anchor: middle;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n\n  .taskText:not([font-size]) {\n    font-size: 11px;\n  }\n\n  .taskTextOutsideRight {\n    fill: ").concat(options.taskTextDarkColor, ";\n    text-anchor: start;\n    font-size: 11px;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n\n  }\n\n  .taskTextOutsideLeft {\n    fill: ").concat(options.taskTextDarkColor, ";\n    text-anchor: end;\n    font-size: 11px;\n  }\n\n  /* Special case clickable */\n  .task.clickable {\n    cursor: pointer;\n  }\n  .taskText.clickable {\n    cursor: pointer;\n    fill: ").concat(options.taskTextClickableColor, " !important;\n    font-weight: bold;\n  }\n\n  .taskTextOutsideLeft.clickable {\n    cursor: pointer;\n    fill: ").concat(options.taskTextClickableColor, " !important;\n    font-weight: bold;\n  }\n\n  .taskTextOutsideRight.clickable {\n    cursor: pointer;\n    fill: ").concat(options.taskTextClickableColor, " !important;\n    font-weight: bold;\n  }\n\n  /* Specific task settings for the sections*/\n\n  .taskText0,\n  .taskText1,\n  .taskText2,\n  .taskText3 {\n    fill: ").concat(options.taskTextColor, ";\n  }\n\n  .task0,\n  .task1,\n  .task2,\n  .task3 {\n    fill: ").concat(options.taskBkgColor, ";\n    stroke: ").concat(options.taskBorderColor, ";\n  }\n\n  .taskTextOutside0,\n  .taskTextOutside2\n  {\n    fill: ").concat(options.taskTextOutsideColor, ";\n  }\n\n  .taskTextOutside1,\n  .taskTextOutside3 {\n    fill: ").concat(options.taskTextOutsideColor, ";\n  }\n\n\n  /* Active task */\n\n  .active0,\n  .active1,\n  .active2,\n  .active3 {\n    fill: ").concat(options.activeTaskBkgColor, ";\n    stroke: ").concat(options.activeTaskBorderColor, ";\n  }\n\n  .activeText0,\n  .activeText1,\n  .activeText2,\n  .activeText3 {\n    fill: ").concat(options.taskTextDarkColor, " !important;\n  }\n\n\n  /* Completed task */\n\n  .done0,\n  .done1,\n  .done2,\n  .done3 {\n    stroke: ").concat(options.doneTaskBorderColor, ";\n    fill: ").concat(options.doneTaskBkgColor, ";\n    stroke-width: 2;\n  }\n\n  .doneText0,\n  .doneText1,\n  .doneText2,\n  .doneText3 {\n    fill: ").concat(options.taskTextDarkColor, " !important;\n  }\n\n\n  /* Tasks on the critical line */\n\n  .crit0,\n  .crit1,\n  .crit2,\n  .crit3 {\n    stroke: ").concat(options.critBorderColor, ";\n    fill: ").concat(options.critBkgColor, ";\n    stroke-width: 2;\n  }\n\n  .activeCrit0,\n  .activeCrit1,\n  .activeCrit2,\n  .activeCrit3 {\n    stroke: ").concat(options.critBorderColor, ";\n    fill: ").concat(options.activeTaskBkgColor, ";\n    stroke-width: 2;\n  }\n\n  .doneCrit0,\n  .doneCrit1,\n  .doneCrit2,\n  .doneCrit3 {\n    stroke: ").concat(options.critBorderColor, ";\n    fill: ").concat(options.doneTaskBkgColor, ";\n    stroke-width: 2;\n    cursor: pointer;\n    shape-rendering: crispEdges;\n  }\n\n  .milestone {\n    transform: rotate(45deg) scale(0.8,0.8);\n  }\n\n  .milestoneText {\n    font-style: italic;\n  }\n  .doneCritText0,\n  .doneCritText1,\n  .doneCritText2,\n  .doneCritText3 {\n    fill: ").concat(options.taskTextDarkColor, " !important;\n  }\n\n  .activeCritText0,\n  .activeCritText1,\n  .activeCritText2,\n  .activeCritText3 {\n    fill: ").concat(options.taskTextDarkColor, " !important;\n  }\n\n  .titleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ").concat(options.textColor, "    ;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/git/gitGraphAst.js":
      /*!*****************************************!*\
        !*** ./src/diagrams/git/gitGraphAst.js ***!
        \*****************************************/

      /*! exports provided: setDirection, setOptions, getOptions, commit, branch, merge, checkout, reset, prettyPrint, clear, getBranchesAsObjArray, getBranches, getCommits, getCommitsArray, getCurrentBranch, getDirection, getHead, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setDirection", function () {
          return setDirection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setOptions", function () {
          return setOptions;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getOptions", function () {
          return getOptions;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "commit", function () {
          return commit;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "branch", function () {
          return branch;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "merge", function () {
          return merge;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "checkout", function () {
          return checkout;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "reset", function () {
          return reset;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "prettyPrint", function () {
          return prettyPrint;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getBranchesAsObjArray", function () {
          return getBranchesAsObjArray;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getBranches", function () {
          return getBranches;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getCommits", function () {
          return getCommits;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getCommitsArray", function () {
          return getCommitsArray;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getCurrentBranch", function () {
          return getCurrentBranch;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getDirection", function () {
          return getDirection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getHead", function () {
          return getHead;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        var commits = {};
        var head = null;
        var branches = {
          master: head
        };
        var curBranch = 'master';
        var direction = 'LR';
        var seq = 0;

        function getId() {
          return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["random"])({
            length: 7
          });
        }

        function isfastforwardable(currentCommit, otherCommit) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Entering isfastforwardable:', currentCommit.id, otherCommit.id);

          while (currentCommit.seq <= otherCommit.seq && currentCommit !== otherCommit) {
            // only if other branch has more commits
            if (otherCommit.parent == null) break;

            if (Array.isArray(otherCommit.parent)) {
              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('In merge commit:', otherCommit.parent);

              return isfastforwardable(currentCommit, commits[otherCommit.parent[0]]) || isfastforwardable(currentCommit, commits[otherCommit.parent[1]]);
            } else {
              otherCommit = commits[otherCommit.parent];
            }
          }

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(currentCommit.id, otherCommit.id);

          return currentCommit.id === otherCommit.id;
        }

        function isReachableFrom(currentCommit, otherCommit) {
          var currentSeq = currentCommit.seq;
          var otherSeq = otherCommit.seq;
          if (currentSeq > otherSeq) return isfastforwardable(otherCommit, currentCommit);
          return false;
        }

        function uniqBy(list, fn) {
          var recordMap = Object.create(null);
          return list.reduce(function (out, item) {
            var key = fn(item);

            if (!recordMap[key]) {
              recordMap[key] = true;
              out.push(item);
            }

            return out;
          }, []);
        }

        var setDirection = function setDirection(dir) {
          direction = dir;
        };

        var options = {};

        var setOptions = function setOptions(rawOptString) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('options str', rawOptString);

          rawOptString = rawOptString && rawOptString.trim();
          rawOptString = rawOptString || '{}';

          try {
            options = JSON.parse(rawOptString);
          } catch (e) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].error('error while parsing gitGraph options', e.message);
          }
        };

        var getOptions = function getOptions() {
          return options;
        };

        var commit = function commit(msg) {
          var commit = {
            id: getId(),
            message: msg,
            seq: seq++,
            parent: head == null ? null : head.id
          };
          head = commit;
          commits[commit.id] = commit;
          branches[curBranch] = commit.id;

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('in pushCommit ' + commit.id);
        };

        var branch = function branch(name) {
          branches[name] = head != null ? head.id : null;

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('in createBranch');
        };

        var merge = function merge(otherBranch) {
          var currentCommit = commits[branches[curBranch]];
          var otherCommit = commits[branches[otherBranch]];

          if (isReachableFrom(currentCommit, otherCommit)) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Already merged');

            return;
          }

          if (isfastforwardable(currentCommit, otherCommit)) {
            branches[curBranch] = branches[otherBranch];
            head = commits[branches[curBranch]];
          } else {
            // create merge commit
            var _commit = {
              id: getId(),
              message: 'merged branch ' + otherBranch + ' into ' + curBranch,
              seq: seq++,
              parent: [head == null ? null : head.id, branches[otherBranch]]
            };
            head = _commit;
            commits[_commit.id] = _commit;
            branches[curBranch] = _commit.id;
          }

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(branches);

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('in mergeBranch');
        };

        var checkout = function checkout(branch) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('in checkout');

          curBranch = branch;
          var id = branches[curBranch];
          head = commits[id];
        };

        var reset = function reset(commitRef) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('in reset', commitRef);

          var ref = commitRef.split(':')[0];
          var parentCount = parseInt(commitRef.split(':')[1]);
          var commit = ref === 'HEAD' ? head : commits[branches[ref]];

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(commit, parentCount);

          while (parentCount > 0) {
            commit = commits[commit.parent];
            parentCount--;

            if (!commit) {
              var err = 'Critical error - unique parent commit not found during reset';

              _logger__WEBPACK_IMPORTED_MODULE_0__["log"].error(err);

              throw err;
            }
          }

          head = commit;
          branches[curBranch] = commit.id;
        };

        function upsert(arr, key, newval) {
          var index = arr.indexOf(key);

          if (index === -1) {
            arr.push(newval);
          } else {
            arr.splice(index, 1, newval);
          }
        }

        function prettyPrintCommitHistory(commitArr) {
          var commit = commitArr.reduce(function (out, commit) {
            if (out.seq > commit.seq) return out;
            return commit;
          }, commitArr[0]);
          var line = '';
          commitArr.forEach(function (c) {
            if (c === commit) {
              line += '\t*';
            } else {
              line += '\t|';
            }
          });
          var label = [line, commit.id, commit.seq];

          for (var _branch in branches) {
            if (branches[_branch] === commit.id) label.push(_branch);
          }

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(label.join(' '));

          if (Array.isArray(commit.parent)) {
            var newCommit = commits[commit.parent[0]];
            upsert(commitArr, commit, newCommit);
            commitArr.push(commits[commit.parent[1]]);
          } else if (commit.parent == null) {
            return;
          } else {
            var nextCommit = commits[commit.parent];
            upsert(commitArr, commit, nextCommit);
          }

          commitArr = uniqBy(commitArr, function (c) {
            return c.id;
          });
          prettyPrintCommitHistory(commitArr);
        }

        var prettyPrint = function prettyPrint() {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(commits);

          var node = getCommitsArray()[0];
          prettyPrintCommitHistory([node]);
        };

        var clear = function clear() {
          commits = {};
          head = null;
          branches = {
            master: head
          };
          curBranch = 'master';
          seq = 0;
        };

        var getBranchesAsObjArray = function getBranchesAsObjArray() {
          var branchArr = [];

          for (var _branch2 in branches) {
            branchArr.push({
              name: _branch2,
              commit: commits[branches[_branch2]]
            });
          }

          return branchArr;
        };

        var getBranches = function getBranches() {
          return branches;
        };

        var getCommits = function getCommits() {
          return commits;
        };

        var getCommitsArray = function getCommitsArray() {
          var commitArr = Object.keys(commits).map(function (key) {
            return commits[key];
          });
          commitArr.forEach(function (o) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug(o.id);
          });
          commitArr.sort(function (a, b) {
            return b.seq - a.seq;
          });
          return commitArr;
        };

        var getCurrentBranch = function getCurrentBranch() {
          return curBranch;
        };

        var getDirection = function getDirection() {
          return direction;
        };

        var getHead = function getHead() {
          return head;
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setDirection: setDirection,
          setOptions: setOptions,
          getOptions: getOptions,
          commit: commit,
          branch: branch,
          merge: merge,
          checkout: checkout,
          reset: reset,
          prettyPrint: prettyPrint,
          clear: clear,
          getBranchesAsObjArray: getBranchesAsObjArray,
          getBranches: getBranches,
          getCommits: getCommits,
          getCommitsArray: getCommitsArray,
          getCurrentBranch: getCurrentBranch,
          getDirection: getDirection,
          getHead: getHead
        };
        /***/
      },

      /***/
      "./src/diagrams/git/gitGraphRenderer.js":
      /*!**********************************************!*\
        !*** ./src/diagrams/git/gitGraphRenderer.js ***!
        \**********************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _gitGraphAst__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./gitGraphAst */
        "./src/diagrams/git/gitGraphAst.js");
        /* harmony import */


        var _parser_gitGraph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./parser/gitGraph */
        "./src/diagrams/git/parser/gitGraph.jison");
        /* harmony import */


        var _parser_gitGraph__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_parser_gitGraph__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        var allCommitsDict = {};
        var branchNum;
        var config = {
          nodeSpacing: 150,
          nodeFillColor: 'yellow',
          nodeStrokeWidth: 2,
          nodeStrokeColor: 'grey',
          lineStrokeWidth: 4,
          branchOffset: 50,
          lineColor: 'grey',
          leftMargin: 50,
          branchColors: ['#442f74', '#983351', '#609732', '#AA9A39'],
          nodeRadius: 10,
          nodeLabel: {
            width: 75,
            height: 100,
            x: -25,
            y: 0
          }
        };
        var apiConfig = {};

        var setConf = function setConf(c) {
          apiConfig = c;
        };

        function svgCreateDefs(svg) {
          svg.append('defs').append('g').attr('id', 'def-commit').append('circle').attr('r', config.nodeRadius).attr('cx', 0).attr('cy', 0);
          svg.select('#def-commit').append('foreignObject').attr('width', config.nodeLabel.width).attr('height', config.nodeLabel.height).attr('x', config.nodeLabel.x).attr('y', config.nodeLabel.y).attr('class', 'node-label').attr('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility').append('p').html('');
        }

        function svgDrawLine(svg, points, colorIdx, interpolate) {
          var curve = Object(_utils__WEBPACK_IMPORTED_MODULE_4__["interpolateToCurve"])(interpolate, d3__WEBPACK_IMPORTED_MODULE_0__["curveBasis"]);
          var color = config.branchColors[colorIdx % config.branchColors.length];
          var lineGen = Object(d3__WEBPACK_IMPORTED_MODULE_0__["line"])().x(function (d) {
            return Math.round(d.x);
          }).y(function (d) {
            return Math.round(d.y);
          }).curve(curve);
          svg.append('svg:path').attr('d', lineGen(points)).style('stroke', color).style('stroke-width', config.lineStrokeWidth).style('fill', 'none');
        } // Pass in the element and its pre-transform coords


        function getElementCoords(element, coords) {
          coords = coords || element.node().getBBox();
          var ctm = element.node().getCTM();
          var xn = ctm.e + coords.x * ctm.a;
          var yn = ctm.f + coords.y * ctm.d;
          return {
            left: xn,
            top: yn,
            width: coords.width,
            height: coords.height
          };
        }

        function svgDrawLineForCommits(svg, fromId, toId, direction, color) {
          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('svgDrawLineForCommits: ', fromId, toId);

          var fromBbox = getElementCoords(svg.select('#node-' + fromId + ' circle'));
          var toBbox = getElementCoords(svg.select('#node-' + toId + ' circle'));

          switch (direction) {
            case 'LR':
              // (toBbox)
              //  +--------
              //          + (fromBbox)
              if (fromBbox.left - toBbox.left > config.nodeSpacing) {
                var lineStart = {
                  x: fromBbox.left - config.nodeSpacing,
                  y: toBbox.top + toBbox.height / 2
                };
                var lineEnd = {
                  x: toBbox.left + toBbox.width,
                  y: toBbox.top + toBbox.height / 2
                };
                svgDrawLine(svg, [lineStart, lineEnd], color, 'linear');
                svgDrawLine(svg, [{
                  x: fromBbox.left,
                  y: fromBbox.top + fromBbox.height / 2
                }, {
                  x: fromBbox.left - config.nodeSpacing / 2,
                  y: fromBbox.top + fromBbox.height / 2
                }, {
                  x: fromBbox.left - config.nodeSpacing / 2,
                  y: lineStart.y
                }, lineStart], color);
              } else {
                svgDrawLine(svg, [{
                  x: fromBbox.left,
                  y: fromBbox.top + fromBbox.height / 2
                }, {
                  x: fromBbox.left - config.nodeSpacing / 2,
                  y: fromBbox.top + fromBbox.height / 2
                }, {
                  x: fromBbox.left - config.nodeSpacing / 2,
                  y: toBbox.top + toBbox.height / 2
                }, {
                  x: toBbox.left + toBbox.width,
                  y: toBbox.top + toBbox.height / 2
                }], color);
              }

              break;

            case 'BT':
              //      +           (fromBbox)
              //      |
              //      |
              //              +   (toBbox)
              if (toBbox.top - fromBbox.top > config.nodeSpacing) {
                var _lineStart = {
                  x: toBbox.left + toBbox.width / 2,
                  y: fromBbox.top + fromBbox.height + config.nodeSpacing
                };
                var _lineEnd = {
                  x: toBbox.left + toBbox.width / 2,
                  y: toBbox.top
                };
                svgDrawLine(svg, [_lineStart, _lineEnd], color, 'linear');
                svgDrawLine(svg, [{
                  x: fromBbox.left + fromBbox.width / 2,
                  y: fromBbox.top + fromBbox.height
                }, {
                  x: fromBbox.left + fromBbox.width / 2,
                  y: fromBbox.top + fromBbox.height + config.nodeSpacing / 2
                }, {
                  x: toBbox.left + toBbox.width / 2,
                  y: _lineStart.y - config.nodeSpacing / 2
                }, _lineStart], color);
              } else {
                svgDrawLine(svg, [{
                  x: fromBbox.left + fromBbox.width / 2,
                  y: fromBbox.top + fromBbox.height
                }, {
                  x: fromBbox.left + fromBbox.width / 2,
                  y: fromBbox.top + config.nodeSpacing / 2
                }, {
                  x: toBbox.left + toBbox.width / 2,
                  y: toBbox.top - config.nodeSpacing / 2
                }, {
                  x: toBbox.left + toBbox.width / 2,
                  y: toBbox.top
                }], color);
              }

              break;
          }
        }

        function cloneNode(svg, selector) {
          return svg.select(selector).node().cloneNode(true);
        }

        function renderCommitHistory(svg, commitid, branches, direction) {
          var commit;
          var numCommits = Object.keys(allCommitsDict).length;

          if (typeof commitid === 'string') {
            do {
              commit = allCommitsDict[commitid];

              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('in renderCommitHistory', commit.id, commit.seq);

              if (svg.select('#node-' + commitid).size() > 0) {
                return;
              }

              svg.append(function () {
                return cloneNode(svg, '#def-commit');
              }).attr('class', 'commit').attr('id', function () {
                return 'node-' + commit.id;
              }).attr('transform', function () {
                switch (direction) {
                  case 'LR':
                    return 'translate(' + (commit.seq * config.nodeSpacing + config.leftMargin) + ', ' + branchNum * config.branchOffset + ')';

                  case 'BT':
                    return 'translate(' + (branchNum * config.branchOffset + config.leftMargin) + ', ' + (numCommits - commit.seq) * config.nodeSpacing + ')';
                }
              }).attr('fill', config.nodeFillColor).attr('stroke', config.nodeStrokeColor).attr('stroke-width', config.nodeStrokeWidth);
              var branch = void 0;

              for (var branchName in branches) {
                if (branches[branchName].commit === commit) {
                  branch = branches[branchName];
                  break;
                }
              }

              if (branch) {
                _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('found branch ', branch.name);

                svg.select('#node-' + commit.id + ' p').append('xhtml:span').attr('class', 'branch-label').text(branch.name + ', ');
              }

              svg.select('#node-' + commit.id + ' p').append('xhtml:span').attr('class', 'commit-id').text(commit.id);

              if (commit.message !== '' && direction === 'BT') {
                svg.select('#node-' + commit.id + ' p').append('xhtml:span').attr('class', 'commit-msg').text(', ' + commit.message);
              }

              commitid = commit.parent;
            } while (commitid && allCommitsDict[commitid]);
          }

          if (Array.isArray(commitid)) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('found merge commmit', commitid);

            renderCommitHistory(svg, commitid[0], branches, direction);
            branchNum++;
            renderCommitHistory(svg, commitid[1], branches, direction);
            branchNum--;
          }
        }

        function renderLines(svg, commit, direction, branchColor) {
          branchColor = branchColor || 0;

          while (commit.seq > 0 && !commit.lineDrawn) {
            if (typeof commit.parent === 'string') {
              svgDrawLineForCommits(svg, commit.id, commit.parent, direction, branchColor);
              commit.lineDrawn = true;
              commit = allCommitsDict[commit.parent];
            } else if (Array.isArray(commit.parent)) {
              svgDrawLineForCommits(svg, commit.id, commit.parent[0], direction, branchColor);
              svgDrawLineForCommits(svg, commit.id, commit.parent[1], direction, branchColor + 1);
              renderLines(svg, allCommitsDict[commit.parent[1]], direction, branchColor + 1);
              commit.lineDrawn = true;
              commit = allCommitsDict[commit.parent[0]];
            }
          }
        }

        var draw = function draw(txt, id, ver) {
          try {
            var parser = _parser_gitGraph__WEBPACK_IMPORTED_MODULE_2___default.a.parser;
            parser.yy = _gitGraphAst__WEBPACK_IMPORTED_MODULE_1__["default"];
            parser.yy.clear();

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('in gitgraph renderer', txt + '\n', 'id:', id, ver); // Parse the graph definition


            parser.parse(txt + '\n');
            config = Object.assign(config, apiConfig, _gitGraphAst__WEBPACK_IMPORTED_MODULE_1__["default"].getOptions());

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('effective options', config);

            var direction = _gitGraphAst__WEBPACK_IMPORTED_MODULE_1__["default"].getDirection();

            allCommitsDict = _gitGraphAst__WEBPACK_IMPORTED_MODULE_1__["default"].getCommits();

            var branches = _gitGraphAst__WEBPACK_IMPORTED_MODULE_1__["default"].getBranchesAsObjArray();

            if (direction === 'BT') {
              config.nodeLabel.x = branches.length * config.branchOffset;
              config.nodeLabel.width = '100%';
              config.nodeLabel.y = -1 * 2 * config.nodeRadius;
            }

            var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id=\"".concat(id, "\"]"));
            svgCreateDefs(svg);
            branchNum = 1;

            for (var branch in branches) {
              var v = branches[branch];
              renderCommitHistory(svg, v.commit.id, branches, direction);
              renderLines(svg, v.commit, direction);
              branchNum++;
            }

            svg.attr('height', function () {
              if (direction === 'BT') return Object.keys(allCommitsDict).length * config.nodeSpacing;
              return (branches.length + 1) * config.branchOffset;
            });
          } catch (e) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error('Error while rendering gitgraph');

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error(e.message);
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/git/parser/gitGraph.jison":
      /*!************************************************!*\
        !*** ./src/diagrams/git/parser/gitGraph.jison ***!
        \************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [2, 3],
                $V1 = [1, 7],
                $V2 = [7, 12, 15, 17, 19, 20, 21],
                $V3 = [7, 11, 12, 15, 17, 19, 20, 21],
                $V4 = [2, 20],
                $V5 = [1, 32];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "GG": 4,
                ":": 5,
                "document": 6,
                "EOF": 7,
                "DIR": 8,
                "options": 9,
                "body": 10,
                "OPT": 11,
                "NL": 12,
                "line": 13,
                "statement": 14,
                "COMMIT": 15,
                "commit_arg": 16,
                "BRANCH": 17,
                "ID": 18,
                "CHECKOUT": 19,
                "MERGE": 20,
                "RESET": 21,
                "reset_arg": 22,
                "STR": 23,
                "HEAD": 24,
                "reset_parents": 25,
                "CARET": 26,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                4: "GG",
                5: ":",
                7: "EOF",
                8: "DIR",
                11: "OPT",
                12: "NL",
                15: "COMMIT",
                17: "BRANCH",
                18: "ID",
                19: "CHECKOUT",
                20: "MERGE",
                21: "RESET",
                23: "STR",
                24: "HEAD",
                26: "CARET"
              },
              productions_: [0, [3, 4], [3, 5], [6, 0], [6, 2], [9, 2], [9, 1], [10, 0], [10, 2], [13, 2], [13, 1], [14, 2], [14, 2], [14, 2], [14, 2], [14, 2], [16, 0], [16, 1], [22, 2], [22, 2], [25, 0], [25, 2]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 1:
                    return $$[$0 - 1];
                    break;

                  case 2:
                    yy.setDirection($$[$0 - 3]);
                    return $$[$0 - 1];
                    break;

                  case 4:
                    yy.setOptions($$[$0 - 1]);
                    this.$ = $$[$0];
                    break;

                  case 5:
                    $$[$0 - 1] += $$[$0];
                    this.$ = $$[$0 - 1];
                    break;

                  case 7:
                    this.$ = [];
                    break;

                  case 8:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 9:
                    this.$ = $$[$0 - 1];
                    break;

                  case 11:
                    yy.commit($$[$0]);
                    break;

                  case 12:
                    yy.branch($$[$0]);
                    break;

                  case 13:
                    yy.checkout($$[$0]);
                    break;

                  case 14:
                    yy.merge($$[$0]);
                    break;

                  case 15:
                    yy.reset($$[$0]);
                    break;

                  case 16:
                    this.$ = "";
                    break;

                  case 17:
                    this.$ = $$[$0];
                    break;

                  case 18:
                    this.$ = $$[$0 - 1] + ":" + $$[$0];
                    break;

                  case 19:
                    this.$ = $$[$0 - 1] + ":" + yy.count;
                    yy.count = 0;
                    break;

                  case 20:
                    yy.count = 0;
                    break;

                  case 21:
                    yy.count += 1;
                    break;
                }
              },
              table: [{
                3: 1,
                4: [1, 2]
              }, {
                1: [3]
              }, {
                5: [1, 3],
                8: [1, 4]
              }, {
                6: 5,
                7: $V0,
                9: 6,
                12: $V1
              }, {
                5: [1, 8]
              }, {
                7: [1, 9]
              }, o($V2, [2, 7], {
                10: 10,
                11: [1, 11]
              }), o($V3, [2, 6]), {
                6: 12,
                7: $V0,
                9: 6,
                12: $V1
              }, {
                1: [2, 1]
              }, {
                7: [2, 4],
                12: [1, 15],
                13: 13,
                14: 14,
                15: [1, 16],
                17: [1, 17],
                19: [1, 18],
                20: [1, 19],
                21: [1, 20]
              }, o($V3, [2, 5]), {
                7: [1, 21]
              }, o($V2, [2, 8]), {
                12: [1, 22]
              }, o($V2, [2, 10]), {
                12: [2, 16],
                16: 23,
                23: [1, 24]
              }, {
                18: [1, 25]
              }, {
                18: [1, 26]
              }, {
                18: [1, 27]
              }, {
                18: [1, 30],
                22: 28,
                24: [1, 29]
              }, {
                1: [2, 2]
              }, o($V2, [2, 9]), {
                12: [2, 11]
              }, {
                12: [2, 17]
              }, {
                12: [2, 12]
              }, {
                12: [2, 13]
              }, {
                12: [2, 14]
              }, {
                12: [2, 15]
              }, {
                12: $V4,
                25: 31,
                26: $V5
              }, {
                12: $V4,
                25: 33,
                26: $V5
              }, {
                12: [2, 18]
              }, {
                12: $V4,
                25: 34,
                26: $V5
              }, {
                12: [2, 19]
              }, {
                12: [2, 21]
              }],
              defaultActions: {
                9: [2, 1],
                21: [2, 2],
                23: [2, 11],
                24: [2, 17],
                25: [2, 12],
                26: [2, 13],
                27: [2, 14],
                28: [2, 15],
                31: [2, 18],
                33: [2, 19],
                34: [2, 21]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      return 12;
                      break;

                    case 1:
                      /* skip all whitespace */
                      break;

                    case 2:
                      /* skip comments */
                      break;

                    case 3:
                      /* skip comments */
                      break;

                    case 4:
                      return 4;
                      break;

                    case 5:
                      return 15;
                      break;

                    case 6:
                      return 17;
                      break;

                    case 7:
                      return 20;
                      break;

                    case 8:
                      return 21;
                      break;

                    case 9:
                      return 19;
                      break;

                    case 10:
                      return 8;
                      break;

                    case 11:
                      return 8;
                      break;

                    case 12:
                      return 5;
                      break;

                    case 13:
                      return 26;
                      break;

                    case 14:
                      this.begin("options");
                      break;

                    case 15:
                      this.popState();
                      break;

                    case 16:
                      return 11;
                      break;

                    case 17:
                      this.begin("string");
                      break;

                    case 18:
                      this.popState();
                      break;

                    case 19:
                      return 23;
                      break;

                    case 20:
                      return 18;
                      break;

                    case 21:
                      return 7;
                      break;
                  }
                },
                rules: [/^(?:(\r?\n)+)/i, /^(?:\s+)/i, /^(?:#[^\n]*)/i, /^(?:%[^\n]*)/i, /^(?:gitGraph\b)/i, /^(?:commit\b)/i, /^(?:branch\b)/i, /^(?:merge\b)/i, /^(?:reset\b)/i, /^(?:checkout\b)/i, /^(?:LR\b)/i, /^(?:BT\b)/i, /^(?::)/i, /^(?:\^)/i, /^(?:options\r?\n)/i, /^(?:end\r?\n)/i, /^(?:[^\n]+\r?\n)/i, /^(?:["])/i, /^(?:["])/i, /^(?:[^"]*)/i, /^(?:[a-zA-Z][-_\.a-zA-Z0-9]*[-_a-zA-Z0-9])/i, /^(?:$)/i],
                conditions: {
                  "options": {
                    "rules": [15, 16],
                    "inclusive": false
                  },
                  "string": {
                    "rules": [18, 19],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 20, 21],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/git/styles.js":
      /*!************************************!*\
        !*** ./src/diagrams/git/styles.js ***!
        \************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles() {
          return "\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n";
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/info/infoDb.js":
      /*!*************************************!*\
        !*** ./src/diagrams/info/infoDb.js ***!
        \*************************************/

      /*! exports provided: setMessage, getMessage, setInfo, getInfo, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setMessage", function () {
          return setMessage;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getMessage", function () {
          return getMessage;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setInfo", function () {
          return setInfo;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getInfo", function () {
          return getInfo;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /**
         * Created by knut on 15-01-14.
         */


        var message = '';
        var info = false;

        var setMessage = function setMessage(txt) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Setting message to: ' + txt);

          message = txt;
        };

        var getMessage = function getMessage() {
          return message;
        };

        var setInfo = function setInfo(inf) {
          info = inf;
        };

        var getInfo = function getInfo() {
          return info;
        }; // export const parseError = (err, hash) => {
        //   global.mermaidAPI.parseError(err, hash)
        // }

        /* harmony default export */


        __webpack_exports__["default"] = {
          setMessage: setMessage,
          getMessage: getMessage,
          setInfo: setInfo,
          getInfo: getInfo // parseError

        };
        /***/
      },

      /***/
      "./src/diagrams/info/infoRenderer.js":
      /*!*******************************************!*\
        !*** ./src/diagrams/info/infoRenderer.js ***!
        \*******************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _infoDb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./infoDb */
        "./src/diagrams/info/infoDb.js");
        /* harmony import */


        var _parser_info__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./parser/info */
        "./src/diagrams/info/parser/info.jison");
        /* harmony import */


        var _parser_info__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_parser_info__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /**
         * Created by knut on 14-12-11.
         */


        var conf = {};

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };
        /**
         * Draws a an info picture in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(txt, id, ver) {
          try {
            var parser = _parser_info__WEBPACK_IMPORTED_MODULE_2___default.a.parser;
            parser.yy = _infoDb__WEBPACK_IMPORTED_MODULE_1__["default"];

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Renering info diagram\n' + txt); // Parse the graph definition


            parser.parse(txt);

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Parsed info diagram'); // Fetch the default direction, use TD if none was found


            var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + id);
            var g = svg.append('g');
            g.append('text') // text label for the x axis
            .attr('x', 100).attr('y', 40).attr('class', 'version').attr('font-size', '32px').style('text-anchor', 'middle').text('v ' + ver);
            svg.attr('height', 100);
            svg.attr('width', 400); // svg.attr('viewBox', '0 0 300 150');
          } catch (e) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error('Error while rendering info diagram');

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error(e.message);
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/info/parser/info.jison":
      /*!*********************************************!*\
        !*** ./src/diagrams/info/parser/info.jison ***!
        \*********************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [6, 9, 10];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "info": 4,
                "document": 5,
                "EOF": 6,
                "line": 7,
                "statement": 8,
                "NL": 9,
                "showInfo": 10,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                4: "info",
                6: "EOF",
                9: "NL",
                10: "showInfo"
              },
              productions_: [0, [3, 3], [5, 0], [5, 2], [7, 1], [7, 1], [8, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 1:
                    return yy;
                    break;

                  case 4:
                    break;

                  case 6:
                    yy.setInfo(true);
                    break;
                }
              },
              table: [{
                3: 1,
                4: [1, 2]
              }, {
                1: [3]
              }, o($V0, [2, 2], {
                5: 3
              }), {
                6: [1, 4],
                7: 5,
                8: 6,
                9: [1, 7],
                10: [1, 8]
              }, {
                1: [2, 1]
              }, o($V0, [2, 3]), o($V0, [2, 4]), o($V0, [2, 5]), o($V0, [2, 6])],
              defaultActions: {
                4: [2, 1]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  // Pre-lexer code can go here
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      return 4;
                      break;

                    case 1:
                      return 9;
                      break;

                    case 2:
                      return 'space';
                      break;

                    case 3:
                      return 10;
                      break;

                    case 4:
                      return 6;
                      break;

                    case 5:
                      return 'TXT';
                      break;
                  }
                },
                rules: [/^(?:info\b)/i, /^(?:[\s\n\r]+)/i, /^(?:[\s]+)/i, /^(?:showInfo\b)/i, /^(?:$)/i, /^(?:.)/i],
                conditions: {
                  "INITIAL": {
                    "rules": [0, 1, 2, 3, 4, 5],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/info/styles.js":
      /*!*************************************!*\
        !*** ./src/diagrams/info/styles.js ***!
        \*************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles() {
          return "";
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/pie/parser/pie.jison":
      /*!*******************************************!*\
        !*** ./src/diagrams/pie/parser/pie.jison ***!
        \*******************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 4],
                $V1 = [1, 5],
                $V2 = [1, 6],
                $V3 = [1, 7],
                $V4 = [1, 9],
                $V5 = [1, 10, 12, 19, 20, 21, 22],
                $V6 = [1, 6, 10, 12, 19, 20, 21, 22],
                $V7 = [19, 20, 21],
                $V8 = [1, 22],
                $V9 = [6, 19, 20, 21, 22];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "eol": 4,
                "directive": 5,
                "PIE": 6,
                "document": 7,
                "line": 8,
                "statement": 9,
                "txt": 10,
                "value": 11,
                "title": 12,
                "title_value": 13,
                "openDirective": 14,
                "typeDirective": 15,
                "closeDirective": 16,
                ":": 17,
                "argDirective": 18,
                "NEWLINE": 19,
                ";": 20,
                "EOF": 21,
                "open_directive": 22,
                "type_directive": 23,
                "arg_directive": 24,
                "close_directive": 25,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                6: "PIE",
                10: "txt",
                11: "value",
                12: "title",
                13: "title_value",
                17: ":",
                19: "NEWLINE",
                20: ";",
                21: "EOF",
                22: "open_directive",
                23: "type_directive",
                24: "arg_directive",
                25: "close_directive"
              },
              productions_: [0, [3, 2], [3, 2], [3, 2], [7, 0], [7, 2], [8, 2], [9, 0], [9, 2], [9, 2], [9, 1], [5, 3], [5, 5], [4, 1], [4, 1], [4, 1], [14, 1], [15, 1], [18, 1], [16, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 6:
                    this.$ = $$[$0 - 1];
                    break;

                  case 8:
                    yy.addSection($$[$0 - 1], yy.cleanupValue($$[$0]));
                    break;

                  case 9:
                    this.$ = $$[$0].trim();
                    yy.setTitle(this.$);
                    break;

                  case 16:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 17:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 18:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 19:
                    yy.parseDirective('}%%', 'close_directive', 'pie');
                    break;
                }
              },
              table: [{
                3: 1,
                4: 2,
                5: 3,
                6: $V0,
                14: 8,
                19: $V1,
                20: $V2,
                21: $V3,
                22: $V4
              }, {
                1: [3]
              }, {
                3: 10,
                4: 2,
                5: 3,
                6: $V0,
                14: 8,
                19: $V1,
                20: $V2,
                21: $V3,
                22: $V4
              }, {
                3: 11,
                4: 2,
                5: 3,
                6: $V0,
                14: 8,
                19: $V1,
                20: $V2,
                21: $V3,
                22: $V4
              }, o($V5, [2, 4], {
                7: 12
              }), o($V6, [2, 13]), o($V6, [2, 14]), o($V6, [2, 15]), {
                15: 13,
                23: [1, 14]
              }, {
                23: [2, 16]
              }, {
                1: [2, 1]
              }, {
                1: [2, 2]
              }, o($V7, [2, 7], {
                14: 8,
                8: 15,
                9: 16,
                5: 19,
                1: [2, 3],
                10: [1, 17],
                12: [1, 18],
                22: $V4
              }), {
                16: 20,
                17: [1, 21],
                25: $V8
              }, o([17, 25], [2, 17]), o($V5, [2, 5]), {
                4: 23,
                19: $V1,
                20: $V2,
                21: $V3
              }, {
                11: [1, 24]
              }, {
                13: [1, 25]
              }, o($V7, [2, 10]), o($V9, [2, 11]), {
                18: 26,
                24: [1, 27]
              }, o($V9, [2, 19]), o($V5, [2, 6]), o($V7, [2, 8]), o($V7, [2, 9]), {
                16: 28,
                25: $V8
              }, {
                25: [2, 18]
              }, o($V9, [2, 12])],
              defaultActions: {
                9: [2, 16],
                10: [2, 1],
                11: [2, 2],
                27: [2, 18]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 22;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 23;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 17;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 25;
                      break;

                    case 4:
                      return 24;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      {
                        /*console.log('');*/
                      }
                      break;

                    case 7:
                      return 19;
                      break;

                    case 8:
                      /* do nothing */
                      break;

                    case 9:
                      /* ignore */
                      break;

                    case 10:
                      this.begin("title");
                      return 12;
                      break;

                    case 11:
                      this.popState();
                      return "title_value";
                      break;

                    case 12:
                      this.begin("string");
                      break;

                    case 13:
                      this.popState();
                      break;

                    case 14:
                      return "txt";
                      break;

                    case 15:
                      return 6;
                      break;

                    case 16:
                      return "value";
                      break;

                    case 17:
                      return 21;
                      break;
                  }
                },
                rules: [/^(?:%%\{)/i, /^(?:((?:(?!\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\}%%)/i, /^(?:((?:(?!\}%%).|\n)*))/i, /^(?:%%(?!\{)[^\n]*)/i, /^(?:[^\}]%%[^\n]*)/i, /^(?:[\n\r]+)/i, /^(?:%%[^\n]*)/i, /^(?:[\s]+)/i, /^(?:title\b)/i, /^(?:(?!\n||)*[^\n]*)/i, /^(?:["])/i, /^(?:["])/i, /^(?:[^"]*)/i, /^(?:pie\b)/i, /^(?::[\s]*[\d]+(?:\.[\d]+)?)/i, /^(?:$)/i],
                conditions: {
                  "close_directive": {
                    "rules": [],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3],
                    "inclusive": false
                  },
                  "open_directive": {
                    "rules": [1],
                    "inclusive": false
                  },
                  "title": {
                    "rules": [11],
                    "inclusive": false
                  },
                  "string": {
                    "rules": [13, 14],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 8, 9, 10, 12, 15, 16, 17],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/pie/pieDb.js":
      /*!***********************************!*\
        !*** ./src/diagrams/pie/pieDb.js ***!
        \***********************************/

      /*! exports provided: parseDirective, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /**
         *
         */


        var sections = {};
        var title = '';

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_1__["default"].parseDirective(this, statement, context, type);
        };

        var addSection = function addSection(id, value) {
          if (typeof sections[id] === 'undefined') {
            sections[id] = value;

            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].debug('Added new section :', id);
          }
        };

        var getSections = function getSections() {
          return sections;
        };

        var setTitle = function setTitle(txt) {
          title = txt;
        };

        var getTitle = function getTitle() {
          return title;
        };

        var cleanupValue = function cleanupValue(value) {
          if (value.substring(0, 1) === ':') {
            value = value.substring(1).trim();
            return Number(value.trim());
          } else {
            return Number(value.trim());
          }
        };

        var clear = function clear() {
          sections = {};
          title = '';
        }; // export const parseError = (err, hash) => {
        //   global.mermaidAPI.parseError(err, hash)
        // }

        /* harmony default export */


        __webpack_exports__["default"] = {
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_2__["getConfig"]().pie;
          },
          addSection: addSection,
          getSections: getSections,
          cleanupValue: cleanupValue,
          clear: clear,
          setTitle: setTitle,
          getTitle: getTitle // parseError

        };
        /***/
      },

      /***/
      "./src/diagrams/pie/pieRenderer.js":
      /*!*****************************************!*\
        !*** ./src/diagrams/pie/pieRenderer.js ***!
        \*****************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _pieDb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./pieDb */
        "./src/diagrams/pie/pieDb.js");
        /* harmony import */


        var _parser_pie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./parser/pie */
        "./src/diagrams/pie/parser/pie.jison");
        /* harmony import */


        var _parser_pie__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_parser_pie__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /**
         * Created by AshishJ on 11-09-2019.
         */


        var conf = {};

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };
        /**
         * Draws a Pie Chart with the data given in text.
         * @param text
         * @param id
         */


        var width;
        var height = 450;

        var draw = function draw(txt, id) {
          try {
            var parser = _parser_pie__WEBPACK_IMPORTED_MODULE_2___default.a.parser;
            parser.yy = _pieDb__WEBPACK_IMPORTED_MODULE_1__["default"];

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Rendering info diagram\n' + txt); // Parse the Pie Chart definition


            parser.yy.clear();
            parser.parse(txt);

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Parsed info diagram');

            var elem = document.getElementById(id);
            width = elem.parentElement.offsetWidth;

            if (typeof width === 'undefined') {
              width = 1200;
            }

            if (typeof conf.useWidth !== 'undefined') {
              width = conf.useWidth;
            }

            var diagram = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + id);
            Object(_utils__WEBPACK_IMPORTED_MODULE_4__["configureSvgSize"])(diagram, height, width, conf.useMaxWidth); // Set viewBox

            elem.setAttribute('viewBox', '0 0 ' + width + ' ' + height); // Fetch the default direction, use TD if none was found

            var margin = 40;
            var legendRectSize = 18;
            var legendSpacing = 4;
            var radius = Math.min(width, height) / 2 - margin;
            var svg = diagram.append('g').attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

            var data = _pieDb__WEBPACK_IMPORTED_MODULE_1__["default"].getSections();

            var sum = 0;
            Object.keys(data).forEach(function (key) {
              sum += data[key];
            }); // Set the color scale

            var color = Object(d3__WEBPACK_IMPORTED_MODULE_0__["scaleOrdinal"])().domain(data).range(d3__WEBPACK_IMPORTED_MODULE_0__["schemeSet2"]); // Compute the position of each group on the pie:

            var pie = Object(d3__WEBPACK_IMPORTED_MODULE_0__["pie"])().value(function (d) {
              return d.value;
            });
            var dataReady = pie(Object(d3__WEBPACK_IMPORTED_MODULE_0__["entries"])(data)); // Shape helper to build arcs:

            var arcGenerator = Object(d3__WEBPACK_IMPORTED_MODULE_0__["arc"])().innerRadius(0).outerRadius(radius); // Build the pie chart: each part of the pie is a path that we build using the arc function.

            svg.selectAll('mySlices').data(dataReady).enter().append('path').attr('d', arcGenerator).attr('fill', function (d) {
              return color(d.data.key);
            }).attr('stroke', 'black').style('stroke-width', '2px').style('opacity', 0.7); // Now add the percentage.
            // Use the centroid method to get the best coordinates.

            svg.selectAll('mySlices').data(dataReady.filter(function (value) {
              return value.data.value !== 0;
            })).enter().append('text').text(function (d) {
              return (d.data.value / sum * 100).toFixed(0) + '%';
            }).attr('transform', function (d) {
              return 'translate(' + arcGenerator.centroid(d) + ')';
            }).style('text-anchor', 'middle').attr('class', 'slice').style('font-size', 17);
            svg.append('text').text(parser.yy.getTitle()).attr('x', 0).attr('y', -(height - 50) / 2).attr('class', 'pieTitleText'); // Add the legends/annotations for each section

            var legend = svg.selectAll('.legend').data(color.domain()).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
              var height = legendRectSize + legendSpacing;
              var offset = height * color.domain().length / 2;
              var horz = 12 * legendRectSize;
              var vert = i * height - offset;
              return 'translate(' + horz + ',' + vert + ')';
            });
            legend.append('rect').attr('width', legendRectSize).attr('height', legendRectSize).style('fill', color).style('stroke', color);
            legend.append('text').attr('x', legendRectSize + legendSpacing).attr('y', legendRectSize - legendSpacing).text(function (d) {
              return d;
            });
          } catch (e) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error('Error while rendering info diagram');

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error(e);
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/pie/styles.js":
      /*!************************************!*\
        !*** ./src/diagrams/pie/styles.js ***!
        \************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return ".pieTitleText {\n    text-anchor: middle;\n    font-size: 25px;\n    fill: ".concat(options.taskTextDarkColor, ";\n    font-family: ").concat(options.fontFamily, ";\n  }\n  .slice {\n    font-family: ").concat(options.fontFamily, ";\n    fill: ").concat(options.textColor, ";\n    // fill: white;\n  }\n  .legend text {\n    fill: ").concat(options.taskTextDarkColor, ";\n    font-family: ").concat(options.fontFamily, ";\n    font-size: 17px;\n  }\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/sequence/parser/sequenceDiagram.jison":
      /*!************************************************************!*\
        !*** ./src/diagrams/sequence/parser/sequenceDiagram.jison ***!
        \************************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 2],
                $V1 = [1, 3],
                $V2 = [1, 5],
                $V3 = [1, 7],
                $V4 = [2, 5],
                $V5 = [1, 15],
                $V6 = [1, 17],
                $V7 = [1, 18],
                $V8 = [1, 20],
                $V9 = [1, 21],
                $Va = [1, 22],
                $Vb = [1, 24],
                $Vc = [1, 25],
                $Vd = [1, 26],
                $Ve = [1, 27],
                $Vf = [1, 28],
                $Vg = [1, 29],
                $Vh = [1, 32],
                $Vi = [1, 33],
                $Vj = [1, 36],
                $Vk = [1, 4, 5, 16, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 48, 58],
                $Vl = [1, 44],
                $Vm = [4, 5, 16, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 37, 48, 58],
                $Vn = [4, 5, 16, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 36, 37, 48, 58],
                $Vo = [4, 5, 16, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 35, 37, 48, 58],
                $Vp = [46, 47, 48],
                $Vq = [1, 4, 5, 7, 16, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 48, 58];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "SPACE": 4,
                "NEWLINE": 5,
                "directive": 6,
                "SD": 7,
                "document": 8,
                "line": 9,
                "statement": 10,
                "openDirective": 11,
                "typeDirective": 12,
                "closeDirective": 13,
                ":": 14,
                "argDirective": 15,
                "participant": 16,
                "actor": 17,
                "AS": 18,
                "restOfLine": 19,
                "signal": 20,
                "autonumber": 21,
                "activate": 22,
                "deactivate": 23,
                "note_statement": 24,
                "title": 25,
                "text2": 26,
                "loop": 27,
                "end": 28,
                "rect": 29,
                "opt": 30,
                "alt": 31,
                "else_sections": 32,
                "par": 33,
                "par_sections": 34,
                "and": 35,
                "else": 36,
                "note": 37,
                "placement": 38,
                "over": 39,
                "actor_pair": 40,
                "spaceList": 41,
                ",": 42,
                "left_of": 43,
                "right_of": 44,
                "signaltype": 45,
                "+": 46,
                "-": 47,
                "ACTOR": 48,
                "SOLID_OPEN_ARROW": 49,
                "DOTTED_OPEN_ARROW": 50,
                "SOLID_ARROW": 51,
                "DOTTED_ARROW": 52,
                "SOLID_CROSS": 53,
                "DOTTED_CROSS": 54,
                "SOLID_POINT": 55,
                "DOTTED_POINT": 56,
                "TXT": 57,
                "open_directive": 58,
                "type_directive": 59,
                "arg_directive": 60,
                "close_directive": 61,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                4: "SPACE",
                5: "NEWLINE",
                7: "SD",
                14: ":",
                16: "participant",
                18: "AS",
                19: "restOfLine",
                21: "autonumber",
                22: "activate",
                23: "deactivate",
                25: "title",
                27: "loop",
                28: "end",
                29: "rect",
                30: "opt",
                31: "alt",
                33: "par",
                35: "and",
                36: "else",
                37: "note",
                39: "over",
                42: ",",
                43: "left_of",
                44: "right_of",
                46: "+",
                47: "-",
                48: "ACTOR",
                49: "SOLID_OPEN_ARROW",
                50: "DOTTED_OPEN_ARROW",
                51: "SOLID_ARROW",
                52: "DOTTED_ARROW",
                53: "SOLID_CROSS",
                54: "DOTTED_CROSS",
                55: "SOLID_POINT",
                56: "DOTTED_POINT",
                57: "TXT",
                58: "open_directive",
                59: "type_directive",
                60: "arg_directive",
                61: "close_directive"
              },
              productions_: [0, [3, 2], [3, 2], [3, 2], [3, 2], [8, 0], [8, 2], [9, 2], [9, 1], [9, 1], [6, 4], [6, 6], [10, 5], [10, 3], [10, 2], [10, 1], [10, 3], [10, 3], [10, 2], [10, 3], [10, 4], [10, 4], [10, 4], [10, 4], [10, 4], [10, 1], [34, 1], [34, 4], [32, 1], [32, 4], [24, 4], [24, 4], [41, 2], [41, 1], [40, 3], [40, 1], [38, 1], [38, 1], [20, 5], [20, 5], [20, 4], [17, 1], [45, 1], [45, 1], [45, 1], [45, 1], [45, 1], [45, 1], [45, 1], [45, 1], [26, 1], [11, 1], [12, 1], [15, 1], [13, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 4:
                    yy.apply($$[$0]);
                    return $$[$0];
                    break;

                  case 5:
                    this.$ = [];
                    break;

                  case 6:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 7:
                  case 8:
                    this.$ = $$[$0];
                    break;

                  case 9:
                    this.$ = [];
                    break;

                  case 12:
                    $$[$0 - 3].description = yy.parseMessage($$[$0 - 1]);
                    this.$ = $$[$0 - 3];
                    break;

                  case 13:
                    this.$ = $$[$0 - 1];
                    break;

                  case 15:
                    yy.enableSequenceNumbers();
                    break;

                  case 16:
                    this.$ = {
                      type: 'activeStart',
                      signalType: yy.LINETYPE.ACTIVE_START,
                      actor: $$[$0 - 1]
                    };
                    break;

                  case 17:
                    this.$ = {
                      type: 'activeEnd',
                      signalType: yy.LINETYPE.ACTIVE_END,
                      actor: $$[$0 - 1]
                    };
                    break;

                  case 19:
                    this.$ = [{
                      type: 'setTitle',
                      text: $$[$0 - 1]
                    }];
                    break;

                  case 20:
                    $$[$0 - 1].unshift({
                      type: 'loopStart',
                      loopText: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.LOOP_START
                    });
                    $$[$0 - 1].push({
                      type: 'loopEnd',
                      loopText: $$[$0 - 2],
                      signalType: yy.LINETYPE.LOOP_END
                    });
                    this.$ = $$[$0 - 1];
                    break;

                  case 21:
                    $$[$0 - 1].unshift({
                      type: 'rectStart',
                      color: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.RECT_START
                    });
                    $$[$0 - 1].push({
                      type: 'rectEnd',
                      color: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.RECT_END
                    });
                    this.$ = $$[$0 - 1];
                    break;

                  case 22:
                    $$[$0 - 1].unshift({
                      type: 'optStart',
                      optText: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.OPT_START
                    });
                    $$[$0 - 1].push({
                      type: 'optEnd',
                      optText: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.OPT_END
                    });
                    this.$ = $$[$0 - 1];
                    break;

                  case 23:
                    // Alt start
                    $$[$0 - 1].unshift({
                      type: 'altStart',
                      altText: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.ALT_START
                    }); // Content in alt is already in $$[$0-1]
                    // End

                    $$[$0 - 1].push({
                      type: 'altEnd',
                      signalType: yy.LINETYPE.ALT_END
                    });
                    this.$ = $$[$0 - 1];
                    break;

                  case 24:
                    // Parallel start
                    $$[$0 - 1].unshift({
                      type: 'parStart',
                      parText: yy.parseMessage($$[$0 - 2]),
                      signalType: yy.LINETYPE.PAR_START
                    }); // Content in par is already in $$[$0-1]
                    // End

                    $$[$0 - 1].push({
                      type: 'parEnd',
                      signalType: yy.LINETYPE.PAR_END
                    });
                    this.$ = $$[$0 - 1];
                    break;

                  case 27:
                    this.$ = $$[$0 - 3].concat([{
                      type: 'and',
                      parText: yy.parseMessage($$[$0 - 1]),
                      signalType: yy.LINETYPE.PAR_AND
                    }, $$[$0]]);
                    break;

                  case 29:
                    this.$ = $$[$0 - 3].concat([{
                      type: 'else',
                      altText: yy.parseMessage($$[$0 - 1]),
                      signalType: yy.LINETYPE.ALT_ELSE
                    }, $$[$0]]);
                    break;

                  case 30:
                    this.$ = [$$[$0 - 1], {
                      type: 'addNote',
                      placement: $$[$0 - 2],
                      actor: $$[$0 - 1].actor,
                      text: $$[$0]
                    }];
                    break;

                  case 31:
                    // Coerce actor_pair into a [to, from, ...] array
                    $$[$0 - 2] = [].concat($$[$0 - 1], $$[$0 - 1]).slice(0, 2);
                    $$[$0 - 2][0] = $$[$0 - 2][0].actor;
                    $$[$0 - 2][1] = $$[$0 - 2][1].actor;
                    this.$ = [$$[$0 - 1], {
                      type: 'addNote',
                      placement: yy.PLACEMENT.OVER,
                      actor: $$[$0 - 2].slice(0, 2),
                      text: $$[$0]
                    }];
                    break;

                  case 34:
                    this.$ = [$$[$0 - 2], $$[$0]];
                    break;

                  case 35:
                    this.$ = $$[$0];
                    break;

                  case 36:
                    this.$ = yy.PLACEMENT.LEFTOF;
                    break;

                  case 37:
                    this.$ = yy.PLACEMENT.RIGHTOF;
                    break;

                  case 38:
                    this.$ = [$$[$0 - 4], $$[$0 - 1], {
                      type: 'addMessage',
                      from: $$[$0 - 4].actor,
                      to: $$[$0 - 1].actor,
                      signalType: $$[$0 - 3],
                      msg: $$[$0]
                    }, {
                      type: 'activeStart',
                      signalType: yy.LINETYPE.ACTIVE_START,
                      actor: $$[$0 - 1]
                    }];
                    break;

                  case 39:
                    this.$ = [$$[$0 - 4], $$[$0 - 1], {
                      type: 'addMessage',
                      from: $$[$0 - 4].actor,
                      to: $$[$0 - 1].actor,
                      signalType: $$[$0 - 3],
                      msg: $$[$0]
                    }, {
                      type: 'activeEnd',
                      signalType: yy.LINETYPE.ACTIVE_END,
                      actor: $$[$0 - 4]
                    }];
                    break;

                  case 40:
                    this.$ = [$$[$0 - 3], $$[$0 - 1], {
                      type: 'addMessage',
                      from: $$[$0 - 3].actor,
                      to: $$[$0 - 1].actor,
                      signalType: $$[$0 - 2],
                      msg: $$[$0]
                    }];
                    break;

                  case 41:
                    this.$ = {
                      type: 'addActor',
                      actor: $$[$0]
                    };
                    break;

                  case 42:
                    this.$ = yy.LINETYPE.SOLID_OPEN;
                    break;

                  case 43:
                    this.$ = yy.LINETYPE.DOTTED_OPEN;
                    break;

                  case 44:
                    this.$ = yy.LINETYPE.SOLID;
                    break;

                  case 45:
                    this.$ = yy.LINETYPE.DOTTED;
                    break;

                  case 46:
                    this.$ = yy.LINETYPE.SOLID_CROSS;
                    break;

                  case 47:
                    this.$ = yy.LINETYPE.DOTTED_CROSS;
                    break;

                  case 48:
                    this.$ = yy.LINETYPE.SOLID_POINT;
                    break;

                  case 49:
                    this.$ = yy.LINETYPE.DOTTED_POINT;
                    break;

                  case 50:
                    this.$ = yy.parseMessage($$[$0].trim().substring(1));
                    break;

                  case 51:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 52:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 53:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 54:
                    yy.parseDirective('}%%', 'close_directive', 'sequence');
                    break;
                }
              },
              table: [{
                3: 1,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                11: 6,
                58: $V3
              }, {
                1: [3]
              }, {
                3: 8,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                11: 6,
                58: $V3
              }, {
                3: 9,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                11: 6,
                58: $V3
              }, {
                3: 10,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                11: 6,
                58: $V3
              }, o([1, 4, 5, 16, 21, 22, 23, 25, 27, 29, 30, 31, 33, 37, 48, 58], $V4, {
                8: 11
              }), {
                12: 12,
                59: [1, 13]
              }, {
                59: [2, 51]
              }, {
                1: [2, 1]
              }, {
                1: [2, 2]
              }, {
                1: [2, 3]
              }, {
                1: [2, 4],
                4: $V5,
                5: $V6,
                6: 30,
                9: 14,
                10: 16,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                37: $Vh,
                48: $Vi,
                58: $V3
              }, {
                13: 34,
                14: [1, 35],
                61: $Vj
              }, o([14, 61], [2, 52]), o($Vk, [2, 6]), {
                6: 30,
                10: 37,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                37: $Vh,
                48: $Vi,
                58: $V3
              }, o($Vk, [2, 8]), o($Vk, [2, 9]), {
                17: 38,
                48: $Vi
              }, {
                5: [1, 39]
              }, o($Vk, [2, 15]), {
                17: 40,
                48: $Vi
              }, {
                17: 41,
                48: $Vi
              }, {
                5: [1, 42]
              }, {
                26: 43,
                57: $Vl
              }, {
                19: [1, 45]
              }, {
                19: [1, 46]
              }, {
                19: [1, 47]
              }, {
                19: [1, 48]
              }, {
                19: [1, 49]
              }, o($Vk, [2, 25]), {
                45: 50,
                49: [1, 51],
                50: [1, 52],
                51: [1, 53],
                52: [1, 54],
                53: [1, 55],
                54: [1, 56],
                55: [1, 57],
                56: [1, 58]
              }, {
                38: 59,
                39: [1, 60],
                43: [1, 61],
                44: [1, 62]
              }, o([5, 18, 42, 49, 50, 51, 52, 53, 54, 55, 56, 57], [2, 41]), {
                5: [1, 63]
              }, {
                15: 64,
                60: [1, 65]
              }, {
                5: [2, 54]
              }, o($Vk, [2, 7]), {
                5: [1, 67],
                18: [1, 66]
              }, o($Vk, [2, 14]), {
                5: [1, 68]
              }, {
                5: [1, 69]
              }, o($Vk, [2, 18]), {
                5: [1, 70]
              }, {
                5: [2, 50]
              }, o($Vm, $V4, {
                8: 71
              }), o($Vm, $V4, {
                8: 72
              }), o($Vm, $V4, {
                8: 73
              }), o($Vn, $V4, {
                32: 74,
                8: 75
              }), o($Vo, $V4, {
                34: 76,
                8: 77
              }), {
                17: 80,
                46: [1, 78],
                47: [1, 79],
                48: $Vi
              }, o($Vp, [2, 42]), o($Vp, [2, 43]), o($Vp, [2, 44]), o($Vp, [2, 45]), o($Vp, [2, 46]), o($Vp, [2, 47]), o($Vp, [2, 48]), o($Vp, [2, 49]), {
                17: 81,
                48: $Vi
              }, {
                17: 83,
                40: 82,
                48: $Vi
              }, {
                48: [2, 36]
              }, {
                48: [2, 37]
              }, o($Vq, [2, 10]), {
                13: 84,
                61: $Vj
              }, {
                61: [2, 53]
              }, {
                19: [1, 85]
              }, o($Vk, [2, 13]), o($Vk, [2, 16]), o($Vk, [2, 17]), o($Vk, [2, 19]), {
                4: $V5,
                5: $V6,
                6: 30,
                9: 14,
                10: 16,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                28: [1, 86],
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                37: $Vh,
                48: $Vi,
                58: $V3
              }, {
                4: $V5,
                5: $V6,
                6: 30,
                9: 14,
                10: 16,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                28: [1, 87],
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                37: $Vh,
                48: $Vi,
                58: $V3
              }, {
                4: $V5,
                5: $V6,
                6: 30,
                9: 14,
                10: 16,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                28: [1, 88],
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                37: $Vh,
                48: $Vi,
                58: $V3
              }, {
                28: [1, 89]
              }, {
                4: $V5,
                5: $V6,
                6: 30,
                9: 14,
                10: 16,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                28: [2, 28],
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                36: [1, 90],
                37: $Vh,
                48: $Vi,
                58: $V3
              }, {
                28: [1, 91]
              }, {
                4: $V5,
                5: $V6,
                6: 30,
                9: 14,
                10: 16,
                11: 6,
                16: $V7,
                17: 31,
                20: 19,
                21: $V8,
                22: $V9,
                23: $Va,
                24: 23,
                25: $Vb,
                27: $Vc,
                28: [2, 26],
                29: $Vd,
                30: $Ve,
                31: $Vf,
                33: $Vg,
                35: [1, 92],
                37: $Vh,
                48: $Vi,
                58: $V3
              }, {
                17: 93,
                48: $Vi
              }, {
                17: 94,
                48: $Vi
              }, {
                26: 95,
                57: $Vl
              }, {
                26: 96,
                57: $Vl
              }, {
                26: 97,
                57: $Vl
              }, {
                42: [1, 98],
                57: [2, 35]
              }, {
                5: [1, 99]
              }, {
                5: [1, 100]
              }, o($Vk, [2, 20]), o($Vk, [2, 21]), o($Vk, [2, 22]), o($Vk, [2, 23]), {
                19: [1, 101]
              }, o($Vk, [2, 24]), {
                19: [1, 102]
              }, {
                26: 103,
                57: $Vl
              }, {
                26: 104,
                57: $Vl
              }, {
                5: [2, 40]
              }, {
                5: [2, 30]
              }, {
                5: [2, 31]
              }, {
                17: 105,
                48: $Vi
              }, o($Vq, [2, 11]), o($Vk, [2, 12]), o($Vn, $V4, {
                8: 75,
                32: 106
              }), o($Vo, $V4, {
                8: 77,
                34: 107
              }), {
                5: [2, 38]
              }, {
                5: [2, 39]
              }, {
                57: [2, 34]
              }, {
                28: [2, 29]
              }, {
                28: [2, 27]
              }],
              defaultActions: {
                7: [2, 51],
                8: [2, 1],
                9: [2, 2],
                10: [2, 3],
                36: [2, 54],
                44: [2, 50],
                61: [2, 36],
                62: [2, 37],
                65: [2, 53],
                95: [2, 40],
                96: [2, 30],
                97: [2, 31],
                103: [2, 38],
                104: [2, 39],
                105: [2, 34],
                106: [2, 29],
                107: [2, 27]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 58;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 59;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 14;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 61;
                      break;

                    case 4:
                      return 60;
                      break;

                    case 5:
                      return 5;
                      break;

                    case 6:
                      /* skip all whitespace */
                      break;

                    case 7:
                      /* skip same-line whitespace */
                      break;

                    case 8:
                      /* skip comments */
                      break;

                    case 9:
                      /* skip comments */
                      break;

                    case 10:
                      /* skip comments */
                      break;

                    case 11:
                      this.begin('ID');
                      return 16;
                      break;

                    case 12:
                      yy_.yytext = yy_.yytext.trim();
                      this.begin('ALIAS');
                      return 48;
                      break;

                    case 13:
                      this.popState();
                      this.popState();
                      this.begin('LINE');
                      return 18;
                      break;

                    case 14:
                      this.popState();
                      this.popState();
                      return 5;
                      break;

                    case 15:
                      this.begin('LINE');
                      return 27;
                      break;

                    case 16:
                      this.begin('LINE');
                      return 29;
                      break;

                    case 17:
                      this.begin('LINE');
                      return 30;
                      break;

                    case 18:
                      this.begin('LINE');
                      return 31;
                      break;

                    case 19:
                      this.begin('LINE');
                      return 36;
                      break;

                    case 20:
                      this.begin('LINE');
                      return 33;
                      break;

                    case 21:
                      this.begin('LINE');
                      return 35;
                      break;

                    case 22:
                      this.popState();
                      return 19;
                      break;

                    case 23:
                      return 28;
                      break;

                    case 24:
                      return 43;
                      break;

                    case 25:
                      return 44;
                      break;

                    case 26:
                      return 39;
                      break;

                    case 27:
                      return 37;
                      break;

                    case 28:
                      this.begin('ID');
                      return 22;
                      break;

                    case 29:
                      this.begin('ID');
                      return 23;
                      break;

                    case 30:
                      return 25;
                      break;

                    case 31:
                      return 7;
                      break;

                    case 32:
                      return 21;
                      break;

                    case 33:
                      return 42;
                      break;

                    case 34:
                      return 5;
                      break;

                    case 35:
                      yy_.yytext = yy_.yytext.trim();
                      return 48;
                      break;

                    case 36:
                      return 51;
                      break;

                    case 37:
                      return 52;
                      break;

                    case 38:
                      return 49;
                      break;

                    case 39:
                      return 50;
                      break;

                    case 40:
                      return 53;
                      break;

                    case 41:
                      return 54;
                      break;

                    case 42:
                      return 55;
                      break;

                    case 43:
                      return 56;
                      break;

                    case 44:
                      return 57;
                      break;

                    case 45:
                      return 46;
                      break;

                    case 46:
                      return 47;
                      break;

                    case 47:
                      return 5;
                      break;

                    case 48:
                      return 'INVALID';
                      break;
                  }
                },
                rules: [/^(?:%%\{)/i, /^(?:((?:(?!\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\}%%)/i, /^(?:((?:(?!\}%%).|\n)*))/i, /^(?:[\n]+)/i, /^(?:\s+)/i, /^(?:((?!\n)\s)+)/i, /^(?:#[^\n]*)/i, /^(?:%(?!\{)[^\n]*)/i, /^(?:[^\}]%%[^\n]*)/i, /^(?:participant\b)/i, /^(?:[^\->:\n,;]+?(?=((?!\n)\s)+as(?!\n)\s|[#\n;]|$))/i, /^(?:as\b)/i, /^(?:(?:))/i, /^(?:loop\b)/i, /^(?:rect\b)/i, /^(?:opt\b)/i, /^(?:alt\b)/i, /^(?:else\b)/i, /^(?:par\b)/i, /^(?:and\b)/i, /^(?:(?:[:]?(?:no)?wrap)?[^#\n;]*)/i, /^(?:end\b)/i, /^(?:left of\b)/i, /^(?:right of\b)/i, /^(?:over\b)/i, /^(?:note\b)/i, /^(?:activate\b)/i, /^(?:deactivate\b)/i, /^(?:title\b)/i, /^(?:sequenceDiagram\b)/i, /^(?:autonumber\b)/i, /^(?:,)/i, /^(?:;)/i, /^(?:[^\+\->:\n,;]+((?!(-x|--x|-\)|--\)))[\-]*[^\+\->:\n,;]+)*)/i, /^(?:->>)/i, /^(?:-->>)/i, /^(?:->)/i, /^(?:-->)/i, /^(?:-[x])/i, /^(?:--[x])/i, /^(?:-[\)])/i, /^(?:--[\)])/i, /^(?::(?:(?:no)?wrap)?[^#\n;]+)/i, /^(?:\+)/i, /^(?:-)/i, /^(?:$)/i, /^(?:.)/i],
                conditions: {
                  "open_directive": {
                    "rules": [1, 8],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3, 8],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4, 8],
                    "inclusive": false
                  },
                  "ID": {
                    "rules": [7, 8, 12],
                    "inclusive": false
                  },
                  "ALIAS": {
                    "rules": [7, 8, 13, 14],
                    "inclusive": false
                  },
                  "LINE": {
                    "rules": [7, 8, 22],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/sequence/sequenceDb.js":
      /*!*********************************************!*\
        !*** ./src/diagrams/sequence/sequenceDb.js ***!
        \*********************************************/

      /*! exports provided: parseDirective, addActor, addMessage, addSignal, getMessages, getActors, getActor, getActorKeys, getTitle, getTitleWrapped, enableSequenceNumbers, showSequenceNumbers, setWrap, autoWrap, clear, parseMessage, LINETYPE, ARROWTYPE, PLACEMENT, addNote, setTitle, apply, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addActor", function () {
          return addActor;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addMessage", function () {
          return addMessage;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addSignal", function () {
          return addSignal;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getMessages", function () {
          return getMessages;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getActors", function () {
          return getActors;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getActor", function () {
          return getActor;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getActorKeys", function () {
          return getActorKeys;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTitle", function () {
          return getTitle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTitleWrapped", function () {
          return getTitleWrapped;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "enableSequenceNumbers", function () {
          return enableSequenceNumbers;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "showSequenceNumbers", function () {
          return showSequenceNumbers;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setWrap", function () {
          return setWrap;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "autoWrap", function () {
          return autoWrap;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseMessage", function () {
          return parseMessage;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "LINETYPE", function () {
          return LINETYPE;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "ARROWTYPE", function () {
          return ARROWTYPE;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "PLACEMENT", function () {
          return PLACEMENT;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addNote", function () {
          return addNote;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setTitle", function () {
          return setTitle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "apply", function () {
          return apply;
        });
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");

        var prevActor = undefined;
        var actors = {};
        var messages = [];
        var notes = [];
        var title = '';
        var titleWrapped = false;
        var sequenceNumbersEnabled = false;
        var wrapEnabled = false;

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_0__["default"].parseDirective(this, statement, context, type);
        };

        var addActor = function addActor(id, name, description) {
          // Don't allow description nulling
          var old = actors[id];
          if (old && name === old.name && description == null) return; // Don't allow null descriptions, either

          if (description == null || description.text == null) {
            description = {
              text: name,
              wrap: null
            };
          }

          actors[id] = {
            name: name,
            description: description.text,
            wrap: description.wrap === undefined && autoWrap() || !!description.wrap,
            prevActor: prevActor
          };

          if (prevActor && actors[prevActor]) {
            actors[prevActor].nextActor = id;
          }

          prevActor = id;
        };

        var activationCount = function activationCount(part) {
          var i;
          var count = 0;

          for (i = 0; i < messages.length; i++) {
            if (messages[i].type === LINETYPE.ACTIVE_START) {
              if (messages[i].from.actor === part) {
                count++;
              }
            }

            if (messages[i].type === LINETYPE.ACTIVE_END) {
              if (messages[i].from.actor === part) {
                count--;
              }
            }
          }

          return count;
        };

        var addMessage = function addMessage(idFrom, idTo, message, answer) {
          messages.push({
            from: idFrom,
            to: idTo,
            message: message.text,
            wrap: message.wrap === undefined && autoWrap() || !!message.wrap,
            answer: answer
          });
        };

        var addSignal = function addSignal(idFrom, idTo) {
          var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
            text: undefined,
            wrap: undefined
          };
          var messageType = arguments.length > 3 ? arguments[3] : undefined;

          if (messageType === LINETYPE.ACTIVE_END) {
            var cnt = activationCount(idFrom.actor);

            if (cnt < 1) {
              // Bail out as there is an activation signal from an inactive participant
              var error = new Error('Trying to inactivate an inactive participant (' + idFrom.actor + ')');
              error.hash = {
                text: '->>-',
                token: '->>-',
                line: '1',
                loc: {
                  first_line: 1,
                  last_line: 1,
                  first_column: 1,
                  last_column: 1
                },
                expected: ["'ACTIVE_PARTICIPANT'"]
              };
              throw error;
            }
          }

          messages.push({
            from: idFrom,
            to: idTo,
            message: message.text,
            wrap: message.wrap === undefined && autoWrap() || !!message.wrap,
            type: messageType
          });
          return true;
        };

        var getMessages = function getMessages() {
          return messages;
        };

        var getActors = function getActors() {
          return actors;
        };

        var getActor = function getActor(id) {
          return actors[id];
        };

        var getActorKeys = function getActorKeys() {
          return Object.keys(actors);
        };

        var getTitle = function getTitle() {
          return title;
        };

        var getTitleWrapped = function getTitleWrapped() {
          return titleWrapped;
        };

        var enableSequenceNumbers = function enableSequenceNumbers() {
          sequenceNumbersEnabled = true;
        };

        var showSequenceNumbers = function showSequenceNumbers() {
          return sequenceNumbersEnabled;
        };

        var setWrap = function setWrap(wrapSetting) {
          wrapEnabled = wrapSetting;
        };

        var autoWrap = function autoWrap() {
          return wrapEnabled;
        };

        var clear = function clear() {
          actors = {};
          messages = [];
        };

        var parseMessage = function parseMessage(str) {
          var _str = str.trim();

          var message = {
            text: _str.replace(/^[:]?(?:no)?wrap:/, '').trim(),
            wrap: _str.match(/^[:]?wrap:/) !== null ? true : _str.match(/^[:]?nowrap:/) !== null ? false : undefined
          };

          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug('parseMessage:', message);

          return message;
        };

        var LINETYPE = {
          SOLID: 0,
          DOTTED: 1,
          NOTE: 2,
          SOLID_CROSS: 3,
          DOTTED_CROSS: 4,
          SOLID_OPEN: 5,
          DOTTED_OPEN: 6,
          LOOP_START: 10,
          LOOP_END: 11,
          ALT_START: 12,
          ALT_ELSE: 13,
          ALT_END: 14,
          OPT_START: 15,
          OPT_END: 16,
          ACTIVE_START: 17,
          ACTIVE_END: 18,
          PAR_START: 19,
          PAR_AND: 20,
          PAR_END: 21,
          RECT_START: 22,
          RECT_END: 23,
          SOLID_POINT: 24,
          DOTTED_POINT: 25
        };
        var ARROWTYPE = {
          FILLED: 0,
          OPEN: 1
        };
        var PLACEMENT = {
          LEFTOF: 0,
          RIGHTOF: 1,
          OVER: 2
        };

        var addNote = function addNote(actor, placement, message) {
          var note = {
            actor: actor,
            placement: placement,
            message: message.text,
            wrap: message.wrap === undefined && autoWrap() || !!message.wrap
          }; // Coerce actor into a [to, from, ...] array

          var actors = [].concat(actor, actor);
          notes.push(note);
          messages.push({
            from: actors[0],
            to: actors[1],
            message: message.text,
            wrap: message.wrap === undefined && autoWrap() || !!message.wrap,
            type: LINETYPE.NOTE,
            placement: placement
          });
        };

        var setTitle = function setTitle(titleWrap) {
          title = titleWrap.text;
          titleWrapped = titleWrap.wrap === undefined && autoWrap() || !!titleWrap.wrap;
        };

        var apply = function apply(param) {
          if (param instanceof Array) {
            param.forEach(function (item) {
              apply(item);
            });
          } else {
            switch (param.type) {
              case 'addActor':
                addActor(param.actor, param.actor, param.description);
                break;

              case 'activeStart':
                addSignal(param.actor, undefined, undefined, param.signalType);
                break;

              case 'activeEnd':
                addSignal(param.actor, undefined, undefined, param.signalType);
                break;

              case 'addNote':
                addNote(param.actor, param.placement, param.text);
                break;

              case 'addMessage':
                addSignal(param.from, param.to, param.msg, param.signalType);
                break;

              case 'loopStart':
                addSignal(undefined, undefined, param.loopText, param.signalType);
                break;

              case 'loopEnd':
                addSignal(undefined, undefined, undefined, param.signalType);
                break;

              case 'rectStart':
                addSignal(undefined, undefined, param.color, param.signalType);
                break;

              case 'rectEnd':
                addSignal(undefined, undefined, undefined, param.signalType);
                break;

              case 'optStart':
                addSignal(undefined, undefined, param.optText, param.signalType);
                break;

              case 'optEnd':
                addSignal(undefined, undefined, undefined, param.signalType);
                break;

              case 'altStart':
                addSignal(undefined, undefined, param.altText, param.signalType);
                break;

              case 'else':
                addSignal(undefined, undefined, param.altText, param.signalType);
                break;

              case 'altEnd':
                addSignal(undefined, undefined, undefined, param.signalType);
                break;

              case 'setTitle':
                setTitle(param.text);
                break;

              case 'parStart':
                addSignal(undefined, undefined, param.parText, param.signalType);
                break;

              case 'and':
                addSignal(undefined, undefined, param.parText, param.signalType);
                break;

              case 'parEnd':
                addSignal(undefined, undefined, undefined, param.signalType);
                break;
            }
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          addActor: addActor,
          addMessage: addMessage,
          addSignal: addSignal,
          autoWrap: autoWrap,
          setWrap: setWrap,
          enableSequenceNumbers: enableSequenceNumbers,
          showSequenceNumbers: showSequenceNumbers,
          getMessages: getMessages,
          getActors: getActors,
          getActor: getActor,
          getActorKeys: getActorKeys,
          getTitle: getTitle,
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_1__["getConfig"]().sequence;
          },
          getTitleWrapped: getTitleWrapped,
          clear: clear,
          parseMessage: parseMessage,
          LINETYPE: LINETYPE,
          ARROWTYPE: ARROWTYPE,
          PLACEMENT: PLACEMENT,
          addNote: addNote,
          setTitle: setTitle,
          apply: apply
        };
        /***/
      },

      /***/
      "./src/diagrams/sequence/sequenceRenderer.js":
      /*!***************************************************!*\
        !*** ./src/diagrams/sequence/sequenceRenderer.js ***!
        \***************************************************/

      /*! exports provided: bounds, drawActors, setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "bounds", function () {
          return bounds;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawActors", function () {
          return drawActors;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _svgDraw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./svgDraw */
        "./src/diagrams/sequence/svgDraw.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./parser/sequenceDiagram */
        "./src/diagrams/sequence/parser/sequenceDiagram.jison");
        /* harmony import */


        var _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__);
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _sequenceDb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./sequenceDb */
        "./src/diagrams/sequence/sequenceDb.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy = _sequenceDb__WEBPACK_IMPORTED_MODULE_5__["default"];
        var conf = {};
        var bounds = {
          data: {
            startx: undefined,
            stopx: undefined,
            starty: undefined,
            stopy: undefined
          },
          verticalPos: 0,
          sequenceItems: [],
          activations: [],
          models: {
            getHeight: function getHeight() {
              return Math.max.apply(null, this.actors.length === 0 ? [0] : this.actors.map(function (actor) {
                return actor.height || 0;
              })) + (this.loops.length === 0 ? 0 : this.loops.map(function (it) {
                return it.height || 0;
              }).reduce(function (acc, h) {
                return acc + h;
              })) + (this.messages.length === 0 ? 0 : this.messages.map(function (it) {
                return it.height || 0;
              }).reduce(function (acc, h) {
                return acc + h;
              })) + (this.notes.length === 0 ? 0 : this.notes.map(function (it) {
                return it.height || 0;
              }).reduce(function (acc, h) {
                return acc + h;
              }));
            },
            clear: function clear() {
              this.actors = [];
              this.loops = [];
              this.messages = [];
              this.notes = [];
            },
            addActor: function addActor(actorModel) {
              this.actors.push(actorModel);
            },
            addLoop: function addLoop(loopModel) {
              this.loops.push(loopModel);
            },
            addMessage: function addMessage(msgModel) {
              this.messages.push(msgModel);
            },
            addNote: function addNote(noteModel) {
              this.notes.push(noteModel);
            },
            lastActor: function lastActor() {
              return this.actors[this.actors.length - 1];
            },
            lastLoop: function lastLoop() {
              return this.loops[this.loops.length - 1];
            },
            lastMessage: function lastMessage() {
              return this.messages[this.messages.length - 1];
            },
            lastNote: function lastNote() {
              return this.notes[this.notes.length - 1];
            },
            actors: [],
            loops: [],
            messages: [],
            notes: []
          },
          init: function init() {
            this.sequenceItems = [];
            this.activations = [];
            this.models.clear();
            this.data = {
              startx: undefined,
              stopx: undefined,
              starty: undefined,
              stopy: undefined
            };
            this.verticalPos = 0;
            setConf(_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.getConfig());
          },
          updateVal: function updateVal(obj, key, val, fun) {
            if (typeof obj[key] === 'undefined') {
              obj[key] = val;
            } else {
              obj[key] = fun(val, obj[key]);
            }
          },
          updateBounds: function updateBounds(startx, starty, stopx, stopy) {
            var _self = this;

            var cnt = 0;

            function updateFn(type) {
              return function updateItemBounds(item) {
                cnt++; // The loop sequenceItems is a stack so the biggest margins in the beginning of the sequenceItems

                var n = _self.sequenceItems.length - cnt + 1;

                _self.updateVal(item, 'starty', starty - n * conf.boxMargin, Math.min);

                _self.updateVal(item, 'stopy', stopy + n * conf.boxMargin, Math.max);

                _self.updateVal(bounds.data, 'startx', startx - n * conf.boxMargin, Math.min);

                _self.updateVal(bounds.data, 'stopx', stopx + n * conf.boxMargin, Math.max);

                if (!(type === 'activation')) {
                  _self.updateVal(item, 'startx', startx - n * conf.boxMargin, Math.min);

                  _self.updateVal(item, 'stopx', stopx + n * conf.boxMargin, Math.max);

                  _self.updateVal(bounds.data, 'starty', starty - n * conf.boxMargin, Math.min);

                  _self.updateVal(bounds.data, 'stopy', stopy + n * conf.boxMargin, Math.max);
                }
              };
            }

            this.sequenceItems.forEach(updateFn());
            this.activations.forEach(updateFn('activation'));
          },
          insert: function insert(startx, starty, stopx, stopy) {
            var _startx = Math.min(startx, stopx);

            var _stopx = Math.max(startx, stopx);

            var _starty = Math.min(starty, stopy);

            var _stopy = Math.max(starty, stopy);

            this.updateVal(bounds.data, 'startx', _startx, Math.min);
            this.updateVal(bounds.data, 'starty', _starty, Math.min);
            this.updateVal(bounds.data, 'stopx', _stopx, Math.max);
            this.updateVal(bounds.data, 'stopy', _stopy, Math.max);
            this.updateBounds(_startx, _starty, _stopx, _stopy);
          },
          newActivation: function newActivation(message, diagram, actors) {
            var actorRect = actors[message.from.actor];
            var stackedSize = actorActivations(message.from.actor).length || 0;
            var x = actorRect.x + actorRect.width / 2 + (stackedSize - 1) * conf.activationWidth / 2;
            this.activations.push({
              startx: x,
              starty: this.verticalPos + 2,
              stopx: x + conf.activationWidth,
              stopy: undefined,
              actor: message.from.actor,
              anchored: _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].anchorElement(diagram)
            });
          },
          endActivation: function endActivation(message) {
            // find most recent activation for given actor
            var lastActorActivationIdx = this.activations.map(function (activation) {
              return activation.actor;
            }).lastIndexOf(message.from.actor);
            return this.activations.splice(lastActorActivationIdx, 1)[0];
          },
          createLoop: function createLoop() {
            var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              message: undefined,
              wrap: false,
              width: undefined
            };
            var fill = arguments.length > 1 ? arguments[1] : undefined;
            return {
              startx: undefined,
              starty: this.verticalPos,
              stopx: undefined,
              stopy: undefined,
              title: title.message,
              wrap: title.wrap,
              width: title.width,
              height: 0,
              fill: fill
            };
          },
          newLoop: function newLoop() {
            var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              message: undefined,
              wrap: false,
              width: undefined
            };
            var fill = arguments.length > 1 ? arguments[1] : undefined;
            this.sequenceItems.push(this.createLoop(title, fill));
          },
          endLoop: function endLoop() {
            return this.sequenceItems.pop();
          },
          addSectionToLoop: function addSectionToLoop(message) {
            var loop = this.sequenceItems.pop();
            loop.sections = loop.sections || [];
            loop.sectionTitles = loop.sectionTitles || [];
            loop.sections.push({
              y: bounds.getVerticalPos(),
              height: 0
            });
            loop.sectionTitles.push(message);
            this.sequenceItems.push(loop);
          },
          bumpVerticalPos: function bumpVerticalPos(bump) {
            this.verticalPos = this.verticalPos + bump;
            this.data.stopy = this.verticalPos;
          },
          getVerticalPos: function getVerticalPos() {
            return this.verticalPos;
          },
          getBounds: function getBounds() {
            return {
              bounds: this.data,
              models: this.models
            };
          }
        };
        /**
         * Draws an note in the diagram with the attached line
         * @param elem - The diagram to draw to.
         * @param noteModel:{x: number, y: number, message: string, width: number} - startx: x axis start position, verticalPos: y axis position, messsage: the message to be shown, width: Set this with a custom width to override the default configured width.
         */

        var drawNote = function drawNote(elem, noteModel) {
          bounds.bumpVerticalPos(conf.boxMargin);
          noteModel.height = conf.boxMargin;
          noteModel.starty = bounds.getVerticalPos();

          var rect = _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].getNoteRect();

          rect.x = noteModel.startx;
          rect.y = noteModel.starty;
          rect.width = noteModel.width || conf.width;
          rect.class = 'note';
          var g = elem.append('g');

          var rectElem = _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawRect(g, rect);

          var textObj = _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].getTextObj();

          textObj.x = noteModel.startx;
          textObj.y = noteModel.starty;
          textObj.width = rect.width;
          textObj.dy = '1em';
          textObj.text = noteModel.message;
          textObj.class = 'noteText';
          textObj.fontFamily = conf.noteFontFamily;
          textObj.fontSize = conf.noteFontSize;
          textObj.fontWeight = conf.noteFontWeight;
          textObj.anchor = conf.noteAlign;
          textObj.textMargin = conf.noteMargin;
          textObj.valign = conf.noteAlign;
          var textElem = Object(_svgDraw__WEBPACK_IMPORTED_MODULE_1__["drawText"])(g, textObj);
          var textHeight = Math.round(textElem.map(function (te) {
            return (te._groups || te)[0][0].getBBox().height;
          }).reduce(function (acc, curr) {
            return acc + curr;
          }));
          rectElem.attr('height', textHeight + 2 * conf.noteMargin);
          noteModel.height += textHeight + 2 * conf.noteMargin;
          bounds.bumpVerticalPos(textHeight + 2 * conf.noteMargin);
          noteModel.stopy = noteModel.starty + textHeight + 2 * conf.noteMargin;
          noteModel.stopx = noteModel.startx + rect.width;
          bounds.insert(noteModel.startx, noteModel.starty, noteModel.stopx, noteModel.stopy);
          bounds.models.addNote(noteModel);
        };

        var messageFont = function messageFont(cnf) {
          return {
            fontFamily: cnf.messageFontFamily,
            fontSize: cnf.messageFontSize,
            fontWeight: cnf.messageFontWeight
          };
        };

        var noteFont = function noteFont(cnf) {
          return {
            fontFamily: cnf.noteFontFamily,
            fontSize: cnf.noteFontSize,
            fontWeight: cnf.noteFontWeight
          };
        };

        var actorFont = function actorFont(cnf) {
          return {
            fontFamily: cnf.actorFontFamily,
            fontSize: cnf.actorFontSize,
            fontWeight: cnf.actorFontWeight
          };
        };
        /**
         * Draws a message
         * @param g - the parent of the message element
         * @param msgModel - the model containing fields describing a message
         */


        var drawMessage = function drawMessage(g, msgModel) {
          bounds.bumpVerticalPos(10);
          var startx = msgModel.startx,
              stopx = msgModel.stopx,
              starty = msgModel.starty,
              message = msgModel.message,
              type = msgModel.type,
              sequenceIndex = msgModel.sequenceIndex;

          var lines = _common_common__WEBPACK_IMPORTED_MODULE_4__["default"].splitBreaks(message).length;

          var textDims = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(message, messageFont(conf));

          var lineHeight = textDims.height / lines;
          msgModel.height += lineHeight;
          bounds.bumpVerticalPos(lineHeight);

          var textObj = _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].getTextObj();

          textObj.x = startx;
          textObj.y = starty + 10;
          textObj.width = stopx - startx;
          textObj.class = 'messageText';
          textObj.dy = '1em';
          textObj.text = message;
          textObj.fontFamily = conf.messageFontFamily;
          textObj.fontSize = conf.messageFontSize;
          textObj.fontWeight = conf.messageFontWeight;
          textObj.anchor = conf.messageAlign;
          textObj.valign = conf.messageAlign;
          textObj.textMargin = conf.wrapPadding;
          textObj.tspan = false;
          Object(_svgDraw__WEBPACK_IMPORTED_MODULE_1__["drawText"])(g, textObj);
          var totalOffset = textDims.height - 10;
          var textWidth = textDims.width;
          var line, lineStarty;

          if (startx === stopx) {
            lineStarty = bounds.getVerticalPos() + totalOffset;

            if (conf.rightAngles) {
              line = g.append('path').attr('d', "M  ".concat(startx, ",").concat(lineStarty, " H ").concat(startx + Math.max(conf.width / 2, textWidth / 2), " V ").concat(lineStarty + 25, " H ").concat(startx));
            } else {
              totalOffset += conf.boxMargin;
              lineStarty = bounds.getVerticalPos() + totalOffset;
              line = g.append('path').attr('d', 'M ' + startx + ',' + lineStarty + ' C ' + (startx + 60) + ',' + (lineStarty - 10) + ' ' + (startx + 60) + ',' + (lineStarty + 30) + ' ' + startx + ',' + (lineStarty + 20));
            }

            totalOffset += 30;
            var dx = Math.max(textWidth / 2, conf.width / 2);
            bounds.insert(startx - dx, bounds.getVerticalPos() - 10 + totalOffset, stopx + dx, bounds.getVerticalPos() + 30 + totalOffset);
          } else {
            totalOffset += conf.boxMargin;
            lineStarty = bounds.getVerticalPos() + totalOffset;
            line = g.append('line');
            line.attr('x1', startx);
            line.attr('y1', lineStarty);
            line.attr('x2', stopx);
            line.attr('y2', lineStarty);
            bounds.insert(startx, lineStarty - 10, stopx, lineStarty);
          } // Make an SVG Container
          // Draw the line


          if (type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED || type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_CROSS || type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_POINT || type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_OPEN) {
            line.style('stroke-dasharray', '3, 3');
            line.attr('class', 'messageLine1');
          } else {
            line.attr('class', 'messageLine0');
          }

          var url = '';

          if (conf.arrowMarkerAbsolute) {
            url = window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;
            url = url.replace(/\(/g, '\\(');
            url = url.replace(/\)/g, '\\)');
          }

          line.attr('stroke-width', 2);
          line.attr('stroke', 'none'); // handled by theme/css anyway

          line.style('fill', 'none'); // remove any fill colour

          if (type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID || type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED) {
            line.attr('marker-end', 'url(' + url + '#arrowhead)');
          }

          if (type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_POINT || type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_POINT) {
            line.attr('marker-end', 'url(' + url + '#filled-head)');
          }

          if (type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_CROSS || type === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_CROSS) {
            line.attr('marker-end', 'url(' + url + '#crosshead)');
          } // add node number


          if (_sequenceDb__WEBPACK_IMPORTED_MODULE_5__["default"].showSequenceNumbers() || conf.showSequenceNumbers) {
            line.attr('marker-start', 'url(' + url + '#sequencenumber)');
            g.append('text').attr('x', startx).attr('y', lineStarty + 4).attr('font-family', 'sans-serif').attr('font-size', '12px').attr('text-anchor', 'middle').attr('textLength', '16px').attr('class', 'sequenceNumber').text(sequenceIndex);
          }

          bounds.bumpVerticalPos(totalOffset);
          msgModel.height += totalOffset;
          msgModel.stopy = msgModel.starty + msgModel.height;
          bounds.insert(msgModel.fromBounds, msgModel.starty, msgModel.toBounds, msgModel.stopy);
        };

        var drawActors = function drawActors(diagram, actors, actorKeys, verticalPos) {
          // Draw the actors
          var prevWidth = 0;
          var prevMargin = 0;

          for (var i = 0; i < actorKeys.length; i++) {
            var actor = actors[actorKeys[i]]; // Add some rendering data to the object

            actor.width = actor.width || conf.width;
            actor.height = Math.max(actor.height || conf.height, conf.height);
            actor.margin = actor.margin || conf.actorMargin;
            actor.x = prevWidth + prevMargin;
            actor.y = verticalPos; // Draw the box with the attached line

            _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawActor(diagram, actor, conf);

            bounds.insert(actor.x, verticalPos, actor.x + actor.width, actor.height);
            prevWidth += actor.width;
            prevMargin += actor.margin;
            bounds.models.addActor(actor);
          } // Add a margin between the actor boxes and the first arrow


          bounds.bumpVerticalPos(conf.height);
        };

        var setConf = function setConf(cnf) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["assignWithDepth"])(conf, cnf);

          if (cnf.fontFamily) {
            conf.actorFontFamily = conf.noteFontFamily = conf.messageFontFamily = cnf.fontFamily;
          }

          if (cnf.fontSize) {
            conf.actorFontSize = conf.noteFontSize = conf.messageFontSize = cnf.fontSize;
          }

          if (cnf.fontWeight) {
            conf.actorFontWeight = conf.noteFontWeight = conf.messageFontWeight = cnf.fontWeight;
          }
        };

        var actorActivations = function actorActivations(actor) {
          return bounds.activations.filter(function (activation) {
            return activation.actor === actor;
          });
        };

        var activationBounds = function activationBounds(actor, actors) {
          // handle multiple stacked activations for same actor
          var actorObj = actors[actor];
          var activations = actorActivations(actor);
          var left = activations.reduce(function (acc, activation) {
            return Math.min(acc, activation.startx);
          }, actorObj.x + actorObj.width / 2);
          var right = activations.reduce(function (acc, activation) {
            return Math.max(acc, activation.stopx);
          }, actorObj.x + actorObj.width / 2);
          return [left, right];
        };

        function adjustLoopHeightForWrap(loopWidths, msg, preMargin, postMargin, addLoopFn) {
          bounds.bumpVerticalPos(preMargin);
          var heightAdjust = postMargin;

          if (msg.id && msg.message && loopWidths[msg.id]) {
            var loopWidth = loopWidths[msg.id].width;
            var textConf = messageFont(conf);
            msg.message = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel("[".concat(msg.message, "]"), loopWidth - 2 * conf.wrapPadding, textConf);
            msg.width = loopWidth;
            msg.wrap = true; // const lines = common.splitBreaks(msg.message).length;

            var textDims = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(msg.message, textConf);

            var totalOffset = Math.max(textDims.height, conf.labelBoxHeight);
            heightAdjust = postMargin + totalOffset;

            _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug("".concat(totalOffset, " - ").concat(msg.message));
          }

          addLoopFn(msg);
          bounds.bumpVerticalPos(heightAdjust);
        }
        /**
         * Draws a sequenceDiagram in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(text, id) {
          conf = _config__WEBPACK_IMPORTED_MODULE_6__["getConfig"]().sequence;

          _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.clear();

          _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.setWrap(conf.wrap);

          _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].parse(text + '\n');

          bounds.init();

          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug("C:".concat(JSON.stringify(conf, null, 2)));

          var diagram = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id=\"".concat(id, "\"]")); // Fetch data from the parsing

          var actors = _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.getActors();

          var actorKeys = _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.getActorKeys();

          var messages = _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.getMessages();

          var title = _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.getTitle();

          var maxMessageWidthPerActor = getMaxMessageWidthPerActor(actors, messages);
          conf.height = calculateActorMargins(actors, maxMessageWidthPerActor);
          drawActors(diagram, actors, actorKeys, 0);
          var loopWidths = calculateLoopBounds(messages, actors, maxMessageWidthPerActor); // The arrow head definition is attached to the svg once

          _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].insertArrowHead(diagram);

          _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].insertArrowCrossHead(diagram);

          _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].insertArrowFilledHead(diagram);

          _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].insertSequenceNumber(diagram);

          function activeEnd(msg, verticalPos) {
            var activationData = bounds.endActivation(msg);

            if (activationData.starty + 18 > verticalPos) {
              activationData.starty = verticalPos - 6;
              verticalPos += 12;
            }

            _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawActivation(diagram, activationData, verticalPos, conf, actorActivations(msg.from.actor).length);

            bounds.insert(activationData.startx, verticalPos - 10, activationData.stopx, verticalPos);
          } // Draw the messages/signals


          var sequenceIndex = 1;
          messages.forEach(function (msg) {
            var loopModel, noteModel, msgModel;

            switch (msg.type) {
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.NOTE:
                noteModel = msg.noteModel;
                drawNote(diagram, noteModel);
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ACTIVE_START:
                bounds.newActivation(msg, diagram, actors);
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ACTIVE_END:
                activeEnd(msg, bounds.getVerticalPos());
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.LOOP_START:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, function (message) {
                  return bounds.newLoop(message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.LOOP_END:
                loopModel = bounds.endLoop();

                _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawLoop(diagram, loopModel, 'loop', conf);

                bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());
                bounds.models.addLoop(loopModel);
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.RECT_START:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin, function (message) {
                  return bounds.newLoop(undefined, message.message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.RECT_END:
                loopModel = bounds.endLoop();

                _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawBackgroundRect(diagram, loopModel);

                bounds.models.addLoop(loopModel);
                bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.OPT_START:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, function (message) {
                  return bounds.newLoop(message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.OPT_END:
                loopModel = bounds.endLoop();

                _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawLoop(diagram, loopModel, 'opt', conf);

                bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());
                bounds.models.addLoop(loopModel);
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ALT_START:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, function (message) {
                  return bounds.newLoop(message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ALT_ELSE:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin + conf.boxTextMargin, conf.boxMargin, function (message) {
                  return bounds.addSectionToLoop(message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ALT_END:
                loopModel = bounds.endLoop();

                _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawLoop(diagram, loopModel, 'alt', conf);

                bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());
                bounds.models.addLoop(loopModel);
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.PAR_START:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin, conf.boxMargin + conf.boxTextMargin, function (message) {
                  return bounds.newLoop(message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.PAR_AND:
                adjustLoopHeightForWrap(loopWidths, msg, conf.boxMargin + conf.boxTextMargin, conf.boxMargin, function (message) {
                  return bounds.addSectionToLoop(message);
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.PAR_END:
                loopModel = bounds.endLoop();

                _svgDraw__WEBPACK_IMPORTED_MODULE_1__["default"].drawLoop(diagram, loopModel, 'par', conf);

                bounds.bumpVerticalPos(loopModel.stopy - bounds.getVerticalPos());
                bounds.models.addLoop(loopModel);
                break;

              default:
                try {
                  // lastMsg = msg
                  msgModel = msg.msgModel;
                  msgModel.starty = bounds.getVerticalPos();
                  msgModel.sequenceIndex = sequenceIndex;
                  drawMessage(diagram, msgModel);
                  bounds.models.addMessage(msgModel);
                } catch (e) {
                  _logger__WEBPACK_IMPORTED_MODULE_2__["log"].error('error while drawing message', e);
                }

            } // Increment sequence counter if msg.type is a line (and not another event like activation or note, etc)


            if ([_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_OPEN, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_OPEN, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_CROSS, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_CROSS, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_POINT, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_POINT].includes(msg.type)) {
              sequenceIndex++;
            }
          });

          if (conf.mirrorActors) {
            // Draw actors below diagram
            bounds.bumpVerticalPos(conf.boxMargin * 2);
            drawActors(diagram, actors, actorKeys, bounds.getVerticalPos());
          }

          var _bounds$getBounds = bounds.getBounds(),
              box = _bounds$getBounds.bounds; // Adjust line height of actor lines now that the height of the diagram is known


          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug('For line height fix Querying: #' + id + ' .actor-line');

          var actorLines = Object(d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('#' + id + ' .actor-line');
          actorLines.attr('y2', box.stopy);
          var height = box.stopy - box.starty + 2 * conf.diagramMarginY;

          if (conf.mirrorActors) {
            height = height - conf.boxMargin + conf.bottomMarginAdj;
          }

          var width = box.stopx - box.startx + 2 * conf.diagramMarginX;

          if (title) {
            diagram.append('text').text(title).attr('x', (box.stopx - box.startx) / 2 - 2 * conf.diagramMarginX).attr('y', -25);
          }

          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["configureSvgSize"])(diagram, height, width, conf.useMaxWidth);
          var extraVertForTitle = title ? 40 : 0;
          diagram.attr('viewBox', box.startx - conf.diagramMarginX + ' -' + (conf.diagramMarginY + extraVertForTitle) + ' ' + width + ' ' + (height + extraVertForTitle));

          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug("models:", bounds.models);
        };
        /**
         * Retrieves the max message width of each actor, supports signals (messages, loops)
         * and notes.
         *
         * It will enumerate each given message, and will determine its text width, in relation
         * to the actor it originates from, and destined to.
         *
         * @param actors - The actors map
         * @param messages - A list of message objects to iterate
         */


        var getMaxMessageWidthPerActor = function getMaxMessageWidthPerActor(actors, messages) {
          var maxMessageWidthPerActor = {};
          messages.forEach(function (msg) {
            if (actors[msg.to] && actors[msg.from]) {
              var actor = actors[msg.to]; // If this is the first actor, and the message is left of it, no need to calculate the margin

              if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.LEFTOF && !actor.prevActor) {
                return;
              } // If this is the last actor, and the message is right of it, no need to calculate the margin


              if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.RIGHTOF && !actor.nextActor) {
                return;
              }

              var isNote = msg.placement !== undefined;
              var isMessage = !isNote;
              var textFont = isNote ? noteFont(conf) : messageFont(conf);
              var wrappedMessage = msg.wrap ? _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel(msg.message, conf.width - 2 * conf.wrapPadding, textFont) : msg.message;

              var messageDimensions = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(wrappedMessage, textFont);

              var messageWidth = messageDimensions.width + 2 * conf.wrapPadding;
              /*
               * The following scenarios should be supported:
               *
               * - There's a message (non-note) between fromActor and toActor
               *   - If fromActor is on the right and toActor is on the left, we should
               *     define the toActor's margin
               *   - If fromActor is on the left and toActor is on the right, we should
               *     define the fromActor's margin
               * - There's a note, in which case fromActor == toActor
               *   - If the note is to the left of the actor, we should define the previous actor
               *     margin
               *   - If the note is on the actor, we should define both the previous and next actor
               *     margins, each being the half of the note size
               *   - If the note is on the right of the actor, we should define the current actor
               *     margin
               */

              if (isMessage && msg.from === actor.nextActor) {
                maxMessageWidthPerActor[msg.to] = Math.max(maxMessageWidthPerActor[msg.to] || 0, messageWidth);
              } else if (isMessage && msg.from === actor.prevActor) {
                maxMessageWidthPerActor[msg.from] = Math.max(maxMessageWidthPerActor[msg.from] || 0, messageWidth);
              } else if (isMessage && msg.from === msg.to) {
                maxMessageWidthPerActor[msg.from] = Math.max(maxMessageWidthPerActor[msg.from] || 0, messageWidth / 2);
                maxMessageWidthPerActor[msg.to] = Math.max(maxMessageWidthPerActor[msg.to] || 0, messageWidth / 2);
              } else if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.RIGHTOF) {
                maxMessageWidthPerActor[msg.from] = Math.max(maxMessageWidthPerActor[msg.from] || 0, messageWidth);
              } else if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.LEFTOF) {
                maxMessageWidthPerActor[actor.prevActor] = Math.max(maxMessageWidthPerActor[actor.prevActor] || 0, messageWidth);
              } else if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.OVER) {
                if (actor.prevActor) {
                  maxMessageWidthPerActor[actor.prevActor] = Math.max(maxMessageWidthPerActor[actor.prevActor] || 0, messageWidth / 2);
                }

                if (actor.nextActor) {
                  maxMessageWidthPerActor[msg.from] = Math.max(maxMessageWidthPerActor[msg.from] || 0, messageWidth / 2);
                }
              }
            }
          });

          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug('maxMessageWidthPerActor:', maxMessageWidthPerActor);

          return maxMessageWidthPerActor;
        };
        /**
         * This will calculate the optimal margin for each given actor, for a given
         * actor->messageWidth map.
         *
         * An actor's margin is determined by the width of the actor, the width of the
         * largest message that originates from it, and the configured conf.actorMargin.
         *
         * @param actors - The actors map to calculate margins for
         * @param actorToMessageWidth - A map of actor key -> max message width it holds
         */


        var calculateActorMargins = function calculateActorMargins(actors, actorToMessageWidth) {
          var maxHeight = 0;
          Object.keys(actors).forEach(function (prop) {
            var actor = actors[prop];

            if (actor.wrap) {
              actor.description = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel(actor.description, conf.width - 2 * conf.wrapPadding, actorFont(conf));
            }

            var actDims = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(actor.description, actorFont(conf));

            actor.width = actor.wrap ? conf.width : Math.max(conf.width, actDims.width + 2 * conf.wrapPadding);
            actor.height = actor.wrap ? Math.max(actDims.height, conf.height) : conf.height;
            maxHeight = Math.max(maxHeight, actor.height);
          });

          for (var actorKey in actorToMessageWidth) {
            var actor = actors[actorKey];

            if (!actor) {
              continue;
            }

            var nextActor = actors[actor.nextActor]; // No need to space out an actor that doesn't have a next link

            if (!nextActor) {
              continue;
            }

            var messageWidth = actorToMessageWidth[actorKey];
            var actorWidth = messageWidth + conf.actorMargin - actor.width / 2 - nextActor.width / 2;
            actor.margin = Math.max(actorWidth, conf.actorMargin);
          }

          return Math.max(maxHeight, conf.height);
        };

        var buildNoteModel = function buildNoteModel(msg, actors) {
          var startx = actors[msg.from].x;
          var stopx = actors[msg.to].x;
          var shouldWrap = msg.wrap && msg.message;

          var textDimensions = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(shouldWrap ? _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel(msg.message, conf.width, noteFont(conf)) : msg.message, noteFont(conf));

          var noteModel = {
            width: shouldWrap ? conf.width : Math.max(conf.width, textDimensions.width + 2 * conf.noteMargin),
            height: 0,
            startx: actors[msg.from].x,
            stopx: 0,
            starty: 0,
            stopy: 0,
            message: msg.message
          };

          if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.RIGHTOF) {
            noteModel.width = shouldWrap ? Math.max(conf.width, textDimensions.width) : Math.max(actors[msg.from].width / 2 + actors[msg.to].width / 2, textDimensions.width + 2 * conf.noteMargin);
            noteModel.startx = startx + (actors[msg.from].width + conf.actorMargin) / 2;
          } else if (msg.placement === _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.PLACEMENT.LEFTOF) {
            noteModel.width = shouldWrap ? Math.max(conf.width, textDimensions.width + 2 * conf.noteMargin) : Math.max(actors[msg.from].width / 2 + actors[msg.to].width / 2, textDimensions.width + 2 * conf.noteMargin);
            noteModel.startx = startx - noteModel.width + (actors[msg.from].width - conf.actorMargin) / 2;
          } else if (msg.to === msg.from) {
            textDimensions = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(shouldWrap ? _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel(msg.message, Math.max(conf.width, actors[msg.from].width), noteFont(conf)) : msg.message, noteFont(conf));
            noteModel.width = shouldWrap ? Math.max(conf.width, actors[msg.from].width) : Math.max(actors[msg.from].width, conf.width, textDimensions.width + 2 * conf.noteMargin);
            noteModel.startx = startx + (actors[msg.from].width - noteModel.width) / 2;
          } else {
            noteModel.width = Math.abs(startx + actors[msg.from].width / 2 - (stopx + actors[msg.to].width / 2)) + conf.actorMargin;
            noteModel.startx = startx < stopx ? startx + actors[msg.from].width / 2 - conf.actorMargin / 2 : stopx + actors[msg.to].width / 2 - conf.actorMargin / 2;
          }

          if (shouldWrap) {
            noteModel.message = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel(msg.message, noteModel.width - 2 * conf.wrapPadding, noteFont(conf));
          }

          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug("NM:[".concat(noteModel.startx, ",").concat(noteModel.stopx, ",").concat(noteModel.starty, ",").concat(noteModel.stopy, ":").concat(noteModel.width, ",").concat(noteModel.height, "=").concat(msg.message, "]"));

          return noteModel;
        };

        var buildMessageModel = function buildMessageModel(msg, actors) {
          var process = false;

          if ([_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_OPEN, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_OPEN, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_CROSS, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_CROSS, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.SOLID_POINT, _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.DOTTED_POINT].includes(msg.type)) {
            process = true;
          }

          if (!process) {
            return {};
          }

          var fromBounds = activationBounds(msg.from, actors);
          var toBounds = activationBounds(msg.to, actors);
          var fromIdx = fromBounds[0] <= toBounds[0] ? 1 : 0;
          var toIdx = fromBounds[0] < toBounds[0] ? 0 : 1;
          var allBounds = fromBounds.concat(toBounds);
          var boundedWidth = Math.abs(toBounds[toIdx] - fromBounds[fromIdx]);

          if (msg.wrap && msg.message) {
            msg.message = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].wrapLabel(msg.message, Math.max(boundedWidth + 2 * conf.wrapPadding, conf.width), messageFont(conf));
          }

          var msgDims = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].calculateTextDimensions(msg.message, messageFont(conf));

          return {
            width: Math.max(msg.wrap ? 0 : msgDims.width + 2 * conf.wrapPadding, boundedWidth + 2 * conf.wrapPadding, conf.width),
            height: 0,
            startx: fromBounds[fromIdx],
            stopx: toBounds[toIdx],
            starty: 0,
            stopy: 0,
            message: msg.message,
            type: msg.type,
            wrap: msg.wrap,
            fromBounds: Math.min.apply(null, allBounds),
            toBounds: Math.max.apply(null, allBounds)
          };
        };

        var calculateLoopBounds = function calculateLoopBounds(messages, actors) {
          var loops = {};
          var stack = [];
          var current, noteModel, msgModel;
          messages.forEach(function (msg) {
            msg.id = _utils__WEBPACK_IMPORTED_MODULE_7__["default"].random({
              length: 10
            });

            switch (msg.type) {
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.LOOP_START:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ALT_START:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.OPT_START:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.PAR_START:
                stack.push({
                  id: msg.id,
                  msg: msg.message,
                  from: Number.MAX_SAFE_INTEGER,
                  to: Number.MIN_SAFE_INTEGER,
                  width: 0
                });
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ALT_ELSE:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.PAR_AND:
                if (msg.message) {
                  current = stack.pop();
                  loops[current.id] = current;
                  loops[msg.id] = current;
                  stack.push(current);
                }

                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.LOOP_END:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ALT_END:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.OPT_END:
              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.PAR_END:
                current = stack.pop();
                loops[current.id] = current;
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ACTIVE_START:
                {
                  var actorRect = actors[msg.from ? msg.from.actor : msg.to.actor];
                  var stackedSize = actorActivations(msg.from ? msg.from.actor : msg.to.actor).length;
                  var x = actorRect.x + actorRect.width / 2 + (stackedSize - 1) * conf.activationWidth / 2;
                  var toAdd = {
                    startx: x,
                    stopx: x + conf.activationWidth,
                    actor: msg.from.actor,
                    enabled: true
                  };
                  bounds.activations.push(toAdd);
                }
                break;

              case _parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_3__["parser"].yy.LINETYPE.ACTIVE_END:
                {
                  var lastActorActivationIdx = bounds.activations.map(function (a) {
                    return a.actor;
                  }).lastIndexOf(msg.from.actor);
                  delete bounds.activations.splice(lastActorActivationIdx, 1)[0];
                }
                break;
            }

            var isNote = msg.placement !== undefined;

            if (isNote) {
              noteModel = buildNoteModel(msg, actors);
              msg.noteModel = noteModel;
              stack.forEach(function (stk) {
                current = stk;
                current.from = Math.min(current.from, noteModel.startx);
                current.to = Math.max(current.to, noteModel.startx + noteModel.width);
                current.width = Math.max(current.width, Math.abs(current.from - current.to)) - conf.labelBoxWidth;
              });
            } else {
              msgModel = buildMessageModel(msg, actors);
              msg.msgModel = msgModel;

              if (msgModel.startx && msgModel.stopx && stack.length > 0) {
                stack.forEach(function (stk) {
                  current = stk;

                  if (msgModel.startx === msgModel.stopx) {
                    var from = actors[msg.from];
                    var to = actors[msg.to];
                    current.from = Math.min(from.x - msgModel.width / 2, from.x - from.width / 2, current.from);
                    current.to = Math.max(to.x + msgModel.width / 2, to.x + from.width / 2, current.to);
                    current.width = Math.max(current.width, Math.abs(current.to - current.from)) - conf.labelBoxWidth;
                  } else {
                    current.from = Math.min(msgModel.startx, current.from);
                    current.to = Math.max(msgModel.stopx, current.to);
                    current.width = Math.max(current.width, msgModel.width) - conf.labelBoxWidth;
                  }
                });
              }
            }
          });
          bounds.activations = [];

          _logger__WEBPACK_IMPORTED_MODULE_2__["log"].debug('Loop type widths:', loops);

          return loops;
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          bounds: bounds,
          drawActors: drawActors,
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/sequence/styles.js":
      /*!*****************************************!*\
        !*** ./src/diagrams/sequence/styles.js ***!
        \*****************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return ".actor {\n    stroke: ".concat(options.actorBorder, ";\n    fill: ").concat(options.actorBkg, ";\n  }\n\n  text.actor > tspan {\n    fill: ").concat(options.actorTextColor, ";\n    stroke: none;\n  }\n\n  .actor-line {\n    stroke: ").concat(options.actorLineColor, ";\n  }\n\n  .messageLine0 {\n    stroke-width: 1.5;\n    stroke-dasharray: none;\n    stroke: ").concat(options.signalColor, ";\n  }\n\n  .messageLine1 {\n    stroke-width: 1.5;\n    stroke-dasharray: 2, 2;\n    stroke: ").concat(options.signalColor, ";\n  }\n\n  #arrowhead path {\n    fill: ").concat(options.signalColor, ";\n    stroke: ").concat(options.signalColor, ";\n  }\n\n  .sequenceNumber {\n    fill: ").concat(options.sequenceNumberColor, ";\n  }\n\n  #sequencenumber {\n    fill: ").concat(options.signalColor, ";\n  }\n\n  #crosshead path {\n    fill: ").concat(options.signalColor, ";\n    stroke: ").concat(options.signalColor, ";\n  }\n\n  .messageText {\n    fill: ").concat(options.signalTextColor, ";\n    stroke: ").concat(options.signalTextColor, ";\n  }\n\n  .labelBox {\n    stroke: ").concat(options.labelBoxBorderColor, ";\n    fill: ").concat(options.labelBoxBkgColor, ";\n  }\n\n  .labelText, .labelText > tspan {\n    fill: ").concat(options.labelTextColor, ";\n    stroke: none;\n  }\n\n  .loopText, .loopText > tspan {\n    fill: ").concat(options.loopTextColor, ";\n    stroke: none;\n  }\n\n  .loopLine {\n    stroke-width: 2px;\n    stroke-dasharray: 2, 2;\n    stroke: ").concat(options.labelBoxBorderColor, ";\n    fill: ").concat(options.labelBoxBorderColor, ";\n  }\n\n  .note {\n    //stroke: #decc93;\n    stroke: ").concat(options.noteBorderColor, ";\n    fill: ").concat(options.noteBkgColor, ";\n  }\n\n  .noteText, .noteText > tspan {\n    fill: ").concat(options.noteTextColor, ";\n    stroke: none;\n  }\n\n  .activation0 {\n    fill: ").concat(options.activationBkgColor, ";\n    stroke: ").concat(options.activationBorderColor, ";\n  }\n\n  .activation1 {\n    fill: ").concat(options.activationBkgColor, ";\n    stroke: ").concat(options.activationBorderColor, ";\n  }\n\n  .activation2 {\n    fill: ").concat(options.activationBkgColor, ";\n    stroke: ").concat(options.activationBorderColor, ";\n  }\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/sequence/svgDraw.js":
      /*!******************************************!*\
        !*** ./src/diagrams/sequence/svgDraw.js ***!
        \******************************************/

      /*! exports provided: drawRect, drawText, drawLabel, drawActor, anchorElement, drawActivation, drawLoop, drawBackgroundRect, insertArrowHead, insertArrowFilledHead, insertSequenceNumber, insertArrowCrossHead, getTextObj, getNoteRect, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawRect", function () {
          return drawRect;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawText", function () {
          return drawText;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawLabel", function () {
          return drawLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawActor", function () {
          return drawActor;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "anchorElement", function () {
          return anchorElement;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawActivation", function () {
          return drawActivation;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawLoop", function () {
          return drawLoop;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawBackgroundRect", function () {
          return drawBackgroundRect;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertArrowHead", function () {
          return insertArrowHead;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertArrowFilledHead", function () {
          return insertArrowFilledHead;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertSequenceNumber", function () {
          return insertSequenceNumber;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "insertArrowCrossHead", function () {
          return insertArrowCrossHead;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTextObj", function () {
          return getTextObj;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getNoteRect", function () {
          return getNoteRect;
        });
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");

        var drawRect = function drawRect(elem, rectData) {
          var rectElem = elem.append('rect');
          rectElem.attr('x', rectData.x);
          rectElem.attr('y', rectData.y);
          rectElem.attr('fill', rectData.fill);
          rectElem.attr('stroke', rectData.stroke);
          rectElem.attr('width', rectData.width);
          rectElem.attr('height', rectData.height);
          rectElem.attr('rx', rectData.rx);
          rectElem.attr('ry', rectData.ry);

          if (typeof rectData.class !== 'undefined') {
            rectElem.attr('class', rectData.class);
          }

          return rectElem;
        };

        var drawText = function drawText(elem, textData) {
          var prevTextHeight = 0,
              textHeight = 0;
          var lines = textData.text.split(_common_common__WEBPACK_IMPORTED_MODULE_0__["default"].lineBreakRegex);
          var textElems = [];
          var dy = 0;

          var yfunc = function yfunc() {
            return textData.y;
          };

          if (typeof textData.valign !== 'undefined' && typeof textData.textMargin !== 'undefined' && textData.textMargin > 0) {
            switch (textData.valign) {
              case 'top':
              case 'start':
                yfunc = function yfunc() {
                  return Math.round(textData.y + textData.textMargin);
                };

                break;

              case 'middle':
              case 'center':
                yfunc = function yfunc() {
                  return Math.round(textData.y + (prevTextHeight + textHeight + textData.textMargin) / 2);
                };

                break;

              case 'bottom':
              case 'end':
                yfunc = function yfunc() {
                  return Math.round(textData.y + (prevTextHeight + textHeight + 2 * textData.textMargin) - textData.textMargin);
                };

                break;
            }
          }

          if (typeof textData.anchor !== 'undefined' && typeof textData.textMargin !== 'undefined' && typeof textData.width !== 'undefined') {
            switch (textData.anchor) {
              case 'left':
              case 'start':
                textData.x = Math.round(textData.x + textData.textMargin);
                textData.anchor = 'start';
                textData.dominantBaseline = 'text-after-edge';
                textData.alignmentBaseline = 'middle';
                break;

              case 'middle':
              case 'center':
                textData.x = Math.round(textData.x + textData.width / 2);
                textData.anchor = 'middle';
                textData.dominantBaseline = 'middle';
                textData.alignmentBaseline = 'middle';
                break;

              case 'right':
              case 'end':
                textData.x = Math.round(textData.x + textData.width - textData.textMargin);
                textData.anchor = 'end';
                textData.dominantBaseline = 'text-before-edge';
                textData.alignmentBaseline = 'middle';
                break;
            }
          }

          for (var i = 0; i < lines.length; i++) {
            var line = lines[i];

            if (typeof textData.textMargin !== 'undefined' && textData.textMargin === 0 && typeof textData.fontSize !== 'undefined') {
              dy = i * textData.fontSize;
            }

            var textElem = elem.append('text');
            textElem.attr('x', textData.x);
            textElem.attr('y', yfunc());

            if (typeof textData.anchor !== 'undefined') {
              textElem.attr('text-anchor', textData.anchor).attr('dominant-baseline', textData.dominantBaseline).attr('alignment-baseline', textData.alignmentBaseline);
            }

            if (typeof textData.fontFamily !== 'undefined') {
              textElem.style('font-family', textData.fontFamily);
            }

            if (typeof textData.fontSize !== 'undefined') {
              textElem.style('font-size', textData.fontSize);
            }

            if (typeof textData.fontWeight !== 'undefined') {
              textElem.style('font-weight', textData.fontWeight);
            }

            if (typeof textData.fill !== 'undefined') {
              textElem.attr('fill', textData.fill);
            }

            if (typeof textData.class !== 'undefined') {
              textElem.attr('class', textData.class);
            }

            if (typeof textData.dy !== 'undefined') {
              textElem.attr('dy', textData.dy);
            } else if (dy !== 0) {
              textElem.attr('dy', dy);
            }

            if (textData.tspan) {
              var span = textElem.append('tspan');
              span.attr('x', textData.x);

              if (typeof textData.fill !== 'undefined') {
                span.attr('fill', textData.fill);
              }

              span.text(line);
            } else {
              textElem.text(line);
            }

            if (typeof textData.valign !== 'undefined' && typeof textData.textMargin !== 'undefined' && textData.textMargin > 0) {
              textHeight += (textElem._groups || textElem)[0][0].getBBox().height;
              prevTextHeight = textHeight;
            }

            textElems.push(textElem);
          }

          return textElems;
        };

        var drawLabel = function drawLabel(elem, txtObject) {
          function genPoints(x, y, width, height, cut) {
            return x + ',' + y + ' ' + (x + width) + ',' + y + ' ' + (x + width) + ',' + (y + height - cut) + ' ' + (x + width - cut * 1.2) + ',' + (y + height) + ' ' + x + ',' + (y + height);
          }

          var polygon = elem.append('polygon');
          polygon.attr('points', genPoints(txtObject.x, txtObject.y, txtObject.width, txtObject.height, 7));
          polygon.attr('class', 'labelBox');
          txtObject.y = txtObject.y + txtObject.height / 2;
          drawText(elem, txtObject);
          return polygon;
        };

        var actorCnt = -1;
        /**
         * Draws an actor in the diagram with the attached line
         * @param elem - The diagram we'll draw to.
         * @param actor - The actor to draw.
         * @param conf - drawText implementation discriminator object
         */

        var drawActor = function drawActor(elem, actor, conf) {
          var center = actor.x + actor.width / 2;
          var g = elem.append('g');

          if (actor.y === 0) {
            actorCnt++;
            g.append('line').attr('id', 'actor' + actorCnt).attr('x1', center).attr('y1', 5).attr('x2', center).attr('y2', 2000).attr('class', 'actor-line').attr('stroke-width', '0.5px').attr('stroke', '#999');
          }

          var rect = getNoteRect();
          rect.x = actor.x;
          rect.y = actor.y;
          rect.fill = '#eaeaea';
          rect.width = actor.width;
          rect.height = actor.height;
          rect.class = 'actor';
          rect.rx = 3;
          rect.ry = 3;
          drawRect(g, rect);

          _drawTextCandidateFunc(conf)(actor.description, g, rect.x, rect.y, rect.width, rect.height, {
            class: 'actor'
          }, conf);
        };

        var anchorElement = function anchorElement(elem) {
          return elem.append('g');
        };
        /**
         * Draws an activation in the diagram
         * @param elem - element to append activation rect.
         * @param bounds - activation box bounds.
         * @param verticalPos - precise y cooridnate of bottom activation box edge.
         * @param conf - sequence diagram config object.
         * @param actorActivations - number of activations on the actor.
         */


        var drawActivation = function drawActivation(elem, bounds, verticalPos, conf, actorActivations) {
          var rect = getNoteRect();
          var g = bounds.anchored;
          rect.x = bounds.startx;
          rect.y = bounds.starty;
          rect.class = 'activation' + actorActivations % 3; // Will evaluate to 0, 1 or 2

          rect.width = bounds.stopx - bounds.startx;
          rect.height = verticalPos - bounds.starty;
          drawRect(g, rect);
        };
        /**
         * Draws a loop in the diagram
         * @param elem - elemenet to append the loop to.
         * @param loopModel - loopModel of the given loop.
         * @param labelText - Text within the loop.
         * @param conf - diagrom configuration
         */


        var drawLoop = function drawLoop(elem, loopModel, labelText, conf) {
          var boxMargin = conf.boxMargin,
              boxTextMargin = conf.boxTextMargin,
              labelBoxHeight = conf.labelBoxHeight,
              labelBoxWidth = conf.labelBoxWidth,
              fontFamily = conf.messageFontFamily,
              fontSize = conf.messageFontSize,
              fontWeight = conf.messageFontWeight;
          var g = elem.append('g');

          var drawLoopLine = function drawLoopLine(startx, starty, stopx, stopy) {
            return g.append('line').attr('x1', startx).attr('y1', starty).attr('x2', stopx).attr('y2', stopy).attr('class', 'loopLine');
          };

          drawLoopLine(loopModel.startx, loopModel.starty, loopModel.stopx, loopModel.starty);
          drawLoopLine(loopModel.stopx, loopModel.starty, loopModel.stopx, loopModel.stopy);
          drawLoopLine(loopModel.startx, loopModel.stopy, loopModel.stopx, loopModel.stopy);
          drawLoopLine(loopModel.startx, loopModel.starty, loopModel.startx, loopModel.stopy);

          if (typeof loopModel.sections !== 'undefined') {
            loopModel.sections.forEach(function (item) {
              drawLoopLine(loopModel.startx, item.y, loopModel.stopx, item.y).style('stroke-dasharray', '3, 3');
            });
          }

          var txt = getTextObj();
          txt.text = labelText;
          txt.x = loopModel.startx;
          txt.y = loopModel.starty;
          txt.fontFamily = fontFamily;
          txt.fontSize = fontSize;
          txt.fontWeight = fontWeight;
          txt.anchor = 'middle';
          txt.valign = 'middle';
          txt.tspan = false;
          txt.width = labelBoxWidth || 50;
          txt.height = labelBoxHeight || 20;
          txt.textMargin = boxTextMargin;
          txt.class = 'labelText';
          drawLabel(g, txt);
          txt = getTextObj();
          txt.text = loopModel.title;
          txt.x = loopModel.startx + labelBoxWidth / 2 + (loopModel.stopx - loopModel.startx) / 2;
          txt.y = loopModel.starty + boxMargin + boxTextMargin;
          txt.anchor = 'middle';
          txt.valign = 'middle';
          txt.textMargin = boxTextMargin;
          txt.class = 'loopText';
          txt.fontFamily = fontFamily;
          txt.fontSize = fontSize;
          txt.fontWeight = fontWeight;
          txt.wrap = true;
          var textElem = drawText(g, txt);

          if (typeof loopModel.sectionTitles !== 'undefined') {
            loopModel.sectionTitles.forEach(function (item, idx) {
              if (item.message) {
                txt.text = item.message;
                txt.x = loopModel.startx + (loopModel.stopx - loopModel.startx) / 2;
                txt.y = loopModel.sections[idx].y + boxMargin + boxTextMargin;
                txt.class = 'loopText';
                txt.anchor = 'middle';
                txt.valign = 'middle';
                txt.tspan = false;
                txt.fontFamily = fontFamily;
                txt.fontSize = fontSize;
                txt.fontWeight = fontWeight;
                txt.wrap = loopModel.wrap;
                textElem = drawText(g, txt);
                var sectionHeight = Math.round(textElem.map(function (te) {
                  return (te._groups || te)[0][0].getBBox().height;
                }).reduce(function (acc, curr) {
                  return acc + curr;
                }));
                loopModel.sections[idx].height += sectionHeight - (boxMargin + boxTextMargin);
              }
            });
          }

          loopModel.height = Math.round(loopModel.stopy - loopModel.starty);
          return g;
        };
        /**
         * Draws a background rectangle
         * @param elem diagram (reference for bounds)
         * @param bounds shape of the rectangle
         */


        var drawBackgroundRect = function drawBackgroundRect(elem, bounds) {
          var rectElem = drawRect(elem, {
            x: bounds.startx,
            y: bounds.starty,
            width: bounds.stopx - bounds.startx,
            height: bounds.stopy - bounds.starty,
            fill: bounds.fill,
            class: 'rect'
          });
          rectElem.lower();
        };
        /**
         * Setup arrow head and define the marker. The result is appended to the svg.
         */


        var insertArrowHead = function insertArrowHead(elem) {
          elem.append('defs').append('marker').attr('id', 'arrowhead').attr('refX', 9).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 12).attr('markerHeight', 12).attr('orient', 'auto').append('path').attr('d', 'M 0 0 L 10 5 L 0 10 z'); // this is actual shape for arrowhead
        };
        /**
         * Setup arrow head and define the marker. The result is appended to the svg.
         */


        var insertArrowFilledHead = function insertArrowFilledHead(elem) {
          elem.append('defs').append('marker').attr('id', 'filled-head').attr('refX', 18).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');
        };
        /**
         * Setup node number. The result is appended to the svg.
         */


        var insertSequenceNumber = function insertSequenceNumber(elem) {
          elem.append('defs').append('marker').attr('id', 'sequencenumber').attr('refX', 15).attr('refY', 15).attr('markerWidth', 60).attr('markerHeight', 40).attr('orient', 'auto').append('circle').attr('cx', 15).attr('cy', 15).attr('r', 6); // .style("fill", '#f00');
        };
        /**
         * Setup arrow head and define the marker. The result is appended to the svg.
         */


        var insertArrowCrossHead = function insertArrowCrossHead(elem) {
          var defs = elem.append('defs');
          var marker = defs.append('marker').attr('id', 'crosshead').attr('markerWidth', 15).attr('markerHeight', 8).attr('orient', 'auto').attr('refX', 16).attr('refY', 4); // The arrow

          marker.append('path').attr('fill', 'black').attr('stroke', '#000000').style('stroke-dasharray', '0, 0').attr('stroke-width', '1px').attr('d', 'M 9,2 V 6 L16,4 Z'); // The cross

          marker.append('path').attr('fill', 'none').attr('stroke', '#000000').style('stroke-dasharray', '0, 0').attr('stroke-width', '1px').attr('d', 'M 0,1 L 6,7 M 6,1 L 0,7'); // this is actual shape for arrowhead
        };

        var getTextObj = function getTextObj() {
          return {
            x: 0,
            y: 0,
            fill: undefined,
            anchor: undefined,
            style: '#666',
            width: undefined,
            height: undefined,
            textMargin: 0,
            rx: 0,
            ry: 0,
            tspan: true,
            valign: undefined
          };
        };

        var getNoteRect = function getNoteRect() {
          return {
            x: 0,
            y: 0,
            fill: '#EDF2AE',
            stroke: '#666',
            width: 100,
            anchor: 'start',
            height: 100,
            rx: 0,
            ry: 0
          };
        };

        var _drawTextCandidateFunc = function () {
          function byText(content, g, x, y, width, height, textAttrs) {
            var text = g.append('text').attr('x', x + width / 2).attr('y', y + height / 2 + 5).style('text-anchor', 'middle').text(content);

            _setTextAttrs(text, textAttrs);
          }

          function byTspan(content, g, x, y, width, height, textAttrs, conf) {
            var actorFontSize = conf.actorFontSize,
                actorFontFamily = conf.actorFontFamily,
                actorFontWeight = conf.actorFontWeight;
            var lines = content.split(_common_common__WEBPACK_IMPORTED_MODULE_0__["default"].lineBreakRegex);

            for (var i = 0; i < lines.length; i++) {
              var dy = i * actorFontSize - actorFontSize * (lines.length - 1) / 2;
              var text = g.append('text').attr('x', x + width / 2).attr('y', y).style('text-anchor', 'middle').style('font-size', actorFontSize).style('font-weight', actorFontWeight).style('font-family', actorFontFamily);
              text.append('tspan').attr('x', x + width / 2).attr('dy', dy).text(lines[i]);
              text.attr('y', y + height / 2.0).attr('dominant-baseline', 'central').attr('alignment-baseline', 'central');

              _setTextAttrs(text, textAttrs);
            }
          }

          function byFo(content, g, x, y, width, height, textAttrs, conf) {
            var s = g.append('switch');
            var f = s.append('foreignObject').attr('x', x).attr('y', y).attr('width', width).attr('height', height);
            var text = f.append('div').style('display', 'table').style('height', '100%').style('width', '100%');
            text.append('div').style('display', 'table-cell').style('text-align', 'center').style('vertical-align', 'middle').text(content);
            byTspan(content, s, x, y, width, height, textAttrs, conf);

            _setTextAttrs(text, textAttrs);
          }

          function _setTextAttrs(toText, fromTextAttrsDict) {
            for (var key in fromTextAttrsDict) {
              if (fromTextAttrsDict.hasOwnProperty(key)) {
                // eslint-disable-line
                toText.attr(key, fromTextAttrsDict[key]);
              }
            }
          }

          return function (conf) {
            return conf.textPlacement === 'fo' ? byFo : conf.textPlacement === 'old' ? byText : byTspan;
          };
        }();
        /* harmony default export */


        __webpack_exports__["default"] = {
          drawRect: drawRect,
          drawText: drawText,
          drawLabel: drawLabel,
          drawActor: drawActor,
          anchorElement: anchorElement,
          drawActivation: drawActivation,
          drawLoop: drawLoop,
          drawBackgroundRect: drawBackgroundRect,
          insertArrowHead: insertArrowHead,
          insertArrowFilledHead: insertArrowFilledHead,
          insertSequenceNumber: insertSequenceNumber,
          insertArrowCrossHead: insertArrowCrossHead,
          getTextObj: getTextObj,
          getNoteRect: getNoteRect
        };
        /***/
      },

      /***/
      "./src/diagrams/state/id-cache.js":
      /*!****************************************!*\
        !*** ./src/diagrams/state/id-cache.js ***!
        \****************************************/

      /*! exports provided: set, get, keys, size, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "set", function () {
          return set;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "get", function () {
          return get;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "keys", function () {
          return keys;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "size", function () {
          return size;
        });

        var idCache = {};

        var set = function set(key, val) {
          idCache[key] = val;
        };

        var get = function get(k) {
          return idCache[k];
        };

        var keys = function keys() {
          return Object.keys(idCache);
        };

        var size = function size() {
          return keys().length;
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          get: get,
          set: set,
          keys: keys,
          size: size
        };
        /***/
      },

      /***/
      "./src/diagrams/state/parser/stateDiagram.jison":
      /*!******************************************************!*\
        !*** ./src/diagrams/state/parser/stateDiagram.jison ***!
        \******************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 2],
                $V1 = [1, 3],
                $V2 = [1, 5],
                $V3 = [1, 7],
                $V4 = [2, 5],
                $V5 = [1, 15],
                $V6 = [1, 17],
                $V7 = [1, 19],
                $V8 = [1, 20],
                $V9 = [1, 21],
                $Va = [1, 22],
                $Vb = [1, 28],
                $Vc = [1, 23],
                $Vd = [1, 24],
                $Ve = [1, 25],
                $Vf = [1, 26],
                $Vg = [1, 29],
                $Vh = [1, 32],
                $Vi = [1, 4, 5, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 36, 39],
                $Vj = [1, 4, 5, 12, 13, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 36, 39],
                $Vk = [1, 4, 5, 7, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 36, 39],
                $Vl = [4, 5, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 36, 39];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "SPACE": 4,
                "NL": 5,
                "directive": 6,
                "SD": 7,
                "document": 8,
                "line": 9,
                "statement": 10,
                "idStatement": 11,
                "DESCR": 12,
                "-->": 13,
                "HIDE_EMPTY": 14,
                "scale": 15,
                "WIDTH": 16,
                "COMPOSIT_STATE": 17,
                "STRUCT_START": 18,
                "STRUCT_STOP": 19,
                "STATE_DESCR": 20,
                "AS": 21,
                "ID": 22,
                "FORK": 23,
                "JOIN": 24,
                "CONCURRENT": 25,
                "note": 26,
                "notePosition": 27,
                "NOTE_TEXT": 28,
                "openDirective": 29,
                "typeDirective": 30,
                "closeDirective": 31,
                ":": 32,
                "argDirective": 33,
                "eol": 34,
                ";": 35,
                "EDGE_STATE": 36,
                "left_of": 37,
                "right_of": 38,
                "open_directive": 39,
                "type_directive": 40,
                "arg_directive": 41,
                "close_directive": 42,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                4: "SPACE",
                5: "NL",
                7: "SD",
                12: "DESCR",
                13: "-->",
                14: "HIDE_EMPTY",
                15: "scale",
                16: "WIDTH",
                17: "COMPOSIT_STATE",
                18: "STRUCT_START",
                19: "STRUCT_STOP",
                20: "STATE_DESCR",
                21: "AS",
                22: "ID",
                23: "FORK",
                24: "JOIN",
                25: "CONCURRENT",
                26: "note",
                28: "NOTE_TEXT",
                32: ":",
                35: ";",
                36: "EDGE_STATE",
                37: "left_of",
                38: "right_of",
                39: "open_directive",
                40: "type_directive",
                41: "arg_directive",
                42: "close_directive"
              },
              productions_: [0, [3, 2], [3, 2], [3, 2], [3, 2], [8, 0], [8, 2], [9, 2], [9, 1], [9, 1], [10, 1], [10, 2], [10, 3], [10, 4], [10, 1], [10, 2], [10, 1], [10, 4], [10, 3], [10, 6], [10, 1], [10, 1], [10, 1], [10, 4], [10, 4], [10, 1], [6, 3], [6, 5], [34, 1], [34, 1], [11, 1], [11, 1], [27, 1], [27, 1], [29, 1], [30, 1], [33, 1], [31, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 4:
                    /*console.warn('Root document', $$[$0]);*/
                    yy.setRootDoc($$[$0]);
                    return $$[$0];
                    break;

                  case 5:
                    this.$ = [];
                    break;

                  case 6:
                    if ($$[$0] != 'nl') {
                      $$[$0 - 1].push($$[$0]);
                      this.$ = $$[$0 - 1];
                    } // console.warn('Got document',$$[$0-1], $$[$0]);


                    break;

                  case 7:
                  case 8:
                    this.$ = $$[$0];
                    break;

                  case 9:
                    this.$ = 'nl';
                    break;

                  case 10:
                    /*console.warn('got id and descr', $$[$0]);*/
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0],
                      type: 'default',
                      description: ''
                    };
                    break;

                  case 11:
                    /*console.warn('got id and descr', $$[$0-1], $$[$0].trim());*/
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0 - 1],
                      type: 'default',
                      description: yy.trimColon($$[$0])
                    };
                    break;

                  case 12:
                    /*console.warn('got id', $$[$0-2]);yy.addRelation($$[$0-2], $$[$0]);*/
                    this.$ = {
                      stmt: 'relation',
                      state1: {
                        stmt: 'state',
                        id: $$[$0 - 2],
                        type: 'default',
                        description: ''
                      },
                      state2: {
                        stmt: 'state',
                        id: $$[$0],
                        type: 'default',
                        description: ''
                      }
                    };
                    break;

                  case 13:
                    /*yy.addRelation($$[$0-3], $$[$0-1], $$[$0].substr(1).trim());*/
                    this.$ = {
                      stmt: 'relation',
                      state1: {
                        stmt: 'state',
                        id: $$[$0 - 3],
                        type: 'default',
                        description: ''
                      },
                      state2: {
                        stmt: 'state',
                        id: $$[$0 - 1],
                        type: 'default',
                        description: ''
                      },
                      description: $$[$0].substr(1).trim()
                    };
                    break;

                  case 17:
                    /* console.warn('Adding document for state without id ', $$[$0-3]);*/
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0 - 3],
                      type: 'default',
                      description: '',
                      doc: $$[$0 - 1]
                    };
                    break;

                  case 18:
                    var id = $$[$0];
                    var description = $$[$0 - 2].trim();

                    if ($$[$0].match(':')) {
                      var parts = $$[$0].split(':');
                      id = parts[0];
                      description = [description, parts[1]];
                    }

                    this.$ = {
                      stmt: 'state',
                      id: id,
                      type: 'default',
                      description: description
                    };
                    break;

                  case 19:
                    //console.warn('Adding document for state with id ', $$[$0-3], $$[$0-2]); yy.addDocument($$[$0-3]);
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0 - 3],
                      type: 'default',
                      description: $$[$0 - 5],
                      doc: $$[$0 - 1]
                    };
                    break;

                  case 20:
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0],
                      type: 'fork'
                    };
                    break;

                  case 21:
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0],
                      type: 'join'
                    };
                    break;

                  case 22:
                    this.$ = {
                      stmt: 'state',
                      id: yy.getDividerId(),
                      type: 'divider'
                    };
                    break;

                  case 23:
                    /*console.warn('got NOTE, position: ', $$[$0-2].trim(), 'id = ', $$[$0-1].trim(), 'note: ', $$[$0]);*/
                    this.$ = {
                      stmt: 'state',
                      id: $$[$0 - 1].trim(),
                      note: {
                        position: $$[$0 - 2].trim(),
                        text: $$[$0].trim()
                      }
                    };
                    break;

                  case 30:
                  case 31:
                    this.$ = $$[$0];
                    break;

                  case 34:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 35:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 36:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 37:
                    yy.parseDirective('}%%', 'close_directive', 'state');
                    break;
                }
              },
              table: [{
                3: 1,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                29: 6,
                39: $V3
              }, {
                1: [3]
              }, {
                3: 8,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                29: 6,
                39: $V3
              }, {
                3: 9,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                29: 6,
                39: $V3
              }, {
                3: 10,
                4: $V0,
                5: $V1,
                6: 4,
                7: $V2,
                29: 6,
                39: $V3
              }, o([1, 4, 5, 14, 15, 17, 20, 22, 23, 24, 25, 26, 36, 39], $V4, {
                8: 11
              }), {
                30: 12,
                40: [1, 13]
              }, {
                40: [2, 34]
              }, {
                1: [2, 1]
              }, {
                1: [2, 2]
              }, {
                1: [2, 3]
              }, {
                1: [2, 4],
                4: $V5,
                5: $V6,
                6: 27,
                9: 14,
                10: 16,
                11: 18,
                14: $V7,
                15: $V8,
                17: $V9,
                20: $Va,
                22: $Vb,
                23: $Vc,
                24: $Vd,
                25: $Ve,
                26: $Vf,
                29: 6,
                36: $Vg,
                39: $V3
              }, {
                31: 30,
                32: [1, 31],
                42: $Vh
              }, o([32, 42], [2, 35]), o($Vi, [2, 6]), {
                6: 27,
                10: 33,
                11: 18,
                14: $V7,
                15: $V8,
                17: $V9,
                20: $Va,
                22: $Vb,
                23: $Vc,
                24: $Vd,
                25: $Ve,
                26: $Vf,
                29: 6,
                36: $Vg,
                39: $V3
              }, o($Vi, [2, 8]), o($Vi, [2, 9]), o($Vi, [2, 10], {
                12: [1, 34],
                13: [1, 35]
              }), o($Vi, [2, 14]), {
                16: [1, 36]
              }, o($Vi, [2, 16], {
                18: [1, 37]
              }), {
                21: [1, 38]
              }, o($Vi, [2, 20]), o($Vi, [2, 21]), o($Vi, [2, 22]), {
                27: 39,
                28: [1, 40],
                37: [1, 41],
                38: [1, 42]
              }, o($Vi, [2, 25]), o($Vj, [2, 30]), o($Vj, [2, 31]), o($Vk, [2, 26]), {
                33: 43,
                41: [1, 44]
              }, o($Vk, [2, 37]), o($Vi, [2, 7]), o($Vi, [2, 11]), {
                11: 45,
                22: $Vb,
                36: $Vg
              }, o($Vi, [2, 15]), o($Vl, $V4, {
                8: 46
              }), {
                22: [1, 47]
              }, {
                22: [1, 48]
              }, {
                21: [1, 49]
              }, {
                22: [2, 32]
              }, {
                22: [2, 33]
              }, {
                31: 50,
                42: $Vh
              }, {
                42: [2, 36]
              }, o($Vi, [2, 12], {
                12: [1, 51]
              }), {
                4: $V5,
                5: $V6,
                6: 27,
                9: 14,
                10: 16,
                11: 18,
                14: $V7,
                15: $V8,
                17: $V9,
                19: [1, 52],
                20: $Va,
                22: $Vb,
                23: $Vc,
                24: $Vd,
                25: $Ve,
                26: $Vf,
                29: 6,
                36: $Vg,
                39: $V3
              }, o($Vi, [2, 18], {
                18: [1, 53]
              }), {
                28: [1, 54]
              }, {
                22: [1, 55]
              }, o($Vk, [2, 27]), o($Vi, [2, 13]), o($Vi, [2, 17]), o($Vl, $V4, {
                8: 56
              }), o($Vi, [2, 23]), o($Vi, [2, 24]), {
                4: $V5,
                5: $V6,
                6: 27,
                9: 14,
                10: 16,
                11: 18,
                14: $V7,
                15: $V8,
                17: $V9,
                19: [1, 57],
                20: $Va,
                22: $Vb,
                23: $Vc,
                24: $Vd,
                25: $Ve,
                26: $Vf,
                29: 6,
                36: $Vg,
                39: $V3
              }, o($Vi, [2, 19])],
              defaultActions: {
                7: [2, 34],
                8: [2, 1],
                9: [2, 2],
                10: [2, 3],
                41: [2, 32],
                42: [2, 33],
                44: [2, 36]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 39;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 40;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 32;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 42;
                      break;

                    case 4:
                      return 41;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      {
                        console.log('Crap after close');
                      }
                      break;

                    case 7:
                      return 5;
                      break;

                    case 8:
                      /* skip all whitespace */
                      break;

                    case 9:
                      /* skip same-line whitespace */
                      break;

                    case 10:
                      /* skip comments */
                      break;

                    case 11:
                      /* skip comments */
                      break;

                    case 12:
                      this.pushState('SCALE');
                      /* console.log('Got scale', yy_.yytext);*/

                      return 15;
                      break;

                    case 13:
                      return 16;
                      break;

                    case 14:
                      this.popState();
                      break;

                    case 15:
                      this.pushState('STATE');
                      break;

                    case 16:
                      this.popState();
                      yy_.yytext = yy_.yytext.slice(0, -8).trim();
                      /*console.warn('Fork Fork: ',yy_.yytext);*/

                      return 23;
                      break;

                    case 17:
                      this.popState();
                      yy_.yytext = yy_.yytext.slice(0, -8).trim();
                      /*console.warn('Fork Join: ',yy_.yytext);*/

                      return 24;
                      break;

                    case 18:
                      this.popState();
                      yy_.yytext = yy_.yytext.slice(0, -8).trim();
                      /*console.warn('Fork Fork: ',yy_.yytext);*/

                      return 23;
                      break;

                    case 19:
                      this.popState();
                      yy_.yytext = yy_.yytext.slice(0, -8).trim();
                      /*console.warn('Fork Join: ',yy_.yytext);*/

                      return 24;
                      break;

                    case 20:
                      this.begin("STATE_STRING");
                      break;

                    case 21:
                      this.popState();
                      this.pushState('STATE_ID');
                      return "AS";
                      break;

                    case 22:
                      this.popState();
                      /* console.log('STATE_ID', yy_.yytext);*/

                      return "ID";
                      break;

                    case 23:
                      this.popState();
                      break;

                    case 24:
                      /*console.log('Long description:', yy_.yytext);*/
                      return "STATE_DESCR";
                      break;

                    case 25:
                      /*console.log('COMPOSIT_STATE', yy_.yytext);*/
                      return 17;
                      break;

                    case 26:
                      this.popState();
                      break;

                    case 27:
                      this.popState();
                      this.pushState('struct');
                      /*console.log('begin struct', yy_.yytext);*/

                      return 18;
                      break;

                    case 28:
                      /*console.log('Ending struct');*/
                      this.popState();
                      return 19;
                      break;

                    case 29:
                      /* nothing */
                      break;

                    case 30:
                      this.begin('NOTE');
                      return 26;
                      break;

                    case 31:
                      this.popState();
                      this.pushState('NOTE_ID');
                      return 37;
                      break;

                    case 32:
                      this.popState();
                      this.pushState('NOTE_ID');
                      return 38;
                      break;

                    case 33:
                      this.popState();
                      this.pushState('FLOATING_NOTE');
                      break;

                    case 34:
                      this.popState();
                      this.pushState('FLOATING_NOTE_ID');
                      return "AS";
                      break;

                    case 35:
                      /**/
                      break;

                    case 36:
                      /*console.log('Floating note text: ', yy_.yytext);*/
                      return "NOTE_TEXT";
                      break;

                    case 37:
                      this.popState();
                      /*console.log('Floating note ID', yy_.yytext);*/

                      return "ID";
                      break;

                    case 38:
                      this.popState();
                      this.pushState('NOTE_TEXT');
                      /*console.log('Got ID for note', yy_.yytext);*/

                      return 22;
                      break;

                    case 39:
                      this.popState();
                      /*console.log('Got NOTE_TEXT for note',yy_.yytext);*/

                      yy_.yytext = yy_.yytext.substr(2).trim();
                      return 28;
                      break;

                    case 40:
                      this.popState();
                      /*console.log('Got NOTE_TEXT for note',yy_.yytext);*/

                      yy_.yytext = yy_.yytext.slice(0, -8).trim();
                      return 28;
                      break;

                    case 41:
                      /*console.log('Got state diagram', yy_.yytext,'#');*/
                      return 7;
                      break;

                    case 42:
                      /*console.log('Got state diagram', yy_.yytext,'#');*/
                      return 7;
                      break;

                    case 43:
                      /*console.log('HIDE_EMPTY', yy_.yytext,'#');*/
                      return 14;
                      break;

                    case 44:
                      /*console.log('EDGE_STATE=',yy_.yytext);*/
                      return 36;
                      break;

                    case 45:
                      /*console.log('=>ID=',yy_.yytext);*/
                      return 22;
                      break;

                    case 46:
                      yy_.yytext = yy_.yytext.trim();
                      /*console.log('Descr = ', yy_.yytext);*/

                      return 12;
                      break;

                    case 47:
                      return 13;
                      break;

                    case 48:
                      return 25;
                      break;

                    case 49:
                      return 5;
                      break;

                    case 50:
                      return 'INVALID';
                      break;
                  }
                },
                rules: [/^(?:%%\{)/i, /^(?:((?:(?!\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\}%%)/i, /^(?:((?:(?!\}%%).|\n)*))/i, /^(?:%%(?!\{)[^\n]*)/i, /^(?:[^\}]%%[^\n]*)/i, /^(?:[\n]+)/i, /^(?:[\s]+)/i, /^(?:((?!\n)\s)+)/i, /^(?:#[^\n]*)/i, /^(?:%[^\n]*)/i, /^(?:scale\s+)/i, /^(?:\d+)/i, /^(?:\s+width\b)/i, /^(?:state\s+)/i, /^(?:.*<<fork>>)/i, /^(?:.*<<join>>)/i, /^(?:.*\[\[fork\]\])/i, /^(?:.*\[\[join\]\])/i, /^(?:["])/i, /^(?:\s*as\s+)/i, /^(?:[^\n\{]*)/i, /^(?:["])/i, /^(?:[^"]*)/i, /^(?:[^\n\s\{]+)/i, /^(?:\n)/i, /^(?:\{)/i, /^(?:\})/i, /^(?:[\n])/i, /^(?:note\s+)/i, /^(?:left of\b)/i, /^(?:right of\b)/i, /^(?:")/i, /^(?:\s*as\s*)/i, /^(?:["])/i, /^(?:[^"]*)/i, /^(?:[^\n]*)/i, /^(?:\s*[^:\n\s\-]+)/i, /^(?:\s*:[^:\n;]+)/i, /^(?:[\s\S]*?end note\b)/i, /^(?:stateDiagram\s+)/i, /^(?:stateDiagram-v2\s+)/i, /^(?:hide empty description\b)/i, /^(?:\[\*\])/i, /^(?:[^:\n\s\-\{]+)/i, /^(?:\s*:[^:\n;]+)/i, /^(?:-->)/i, /^(?:--)/i, /^(?:$)/i, /^(?:.)/i],
                conditions: {
                  "LINE": {
                    "rules": [9, 10],
                    "inclusive": false
                  },
                  "close_directive": {
                    "rules": [9, 10],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4, 9, 10],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3, 9, 10],
                    "inclusive": false
                  },
                  "open_directive": {
                    "rules": [1, 9, 10],
                    "inclusive": false
                  },
                  "struct": {
                    "rules": [9, 10, 15, 28, 29, 30, 44, 45, 46, 47, 48],
                    "inclusive": false
                  },
                  "FLOATING_NOTE_ID": {
                    "rules": [37],
                    "inclusive": false
                  },
                  "FLOATING_NOTE": {
                    "rules": [34, 35, 36],
                    "inclusive": false
                  },
                  "NOTE_TEXT": {
                    "rules": [39, 40],
                    "inclusive": false
                  },
                  "NOTE_ID": {
                    "rules": [38],
                    "inclusive": false
                  },
                  "NOTE": {
                    "rules": [31, 32, 33],
                    "inclusive": false
                  },
                  "SCALE": {
                    "rules": [13, 14],
                    "inclusive": false
                  },
                  "ALIAS": {
                    "rules": [],
                    "inclusive": false
                  },
                  "STATE_ID": {
                    "rules": [22],
                    "inclusive": false
                  },
                  "STATE_STRING": {
                    "rules": [23, 24],
                    "inclusive": false
                  },
                  "FORK_STATE": {
                    "rules": [],
                    "inclusive": false
                  },
                  "STATE": {
                    "rules": [9, 10, 16, 17, 18, 19, 20, 21, 25, 26, 27],
                    "inclusive": false
                  },
                  "ID": {
                    "rules": [9, 10],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 8, 10, 11, 12, 15, 27, 30, 41, 42, 43, 44, 45, 46, 47, 49, 50],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/state/shapes.js":
      /*!**************************************!*\
        !*** ./src/diagrams/state/shapes.js ***!
        \**************************************/

      /*! exports provided: drawStartState, drawDivider, drawSimpleState, drawDescrState, addTitleAndBox, drawText, drawNote, drawState, drawEdge */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawStartState", function () {
          return drawStartState;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawDivider", function () {
          return drawDivider;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawSimpleState", function () {
          return drawSimpleState;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawDescrState", function () {
          return drawDescrState;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addTitleAndBox", function () {
          return addTitleAndBox;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawText", function () {
          return drawText;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawNote", function () {
          return drawNote;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawState", function () {
          return drawState;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawEdge", function () {
          return drawEdge;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _id_cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./id-cache.js */
        "./src/diagrams/state/id-cache.js");
        /* harmony import */


        var _stateDb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./stateDb */
        "./src/diagrams/state/stateDb.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js"); // let conf;

        /**
         * Draws a start state as a black circle
         */


        var drawStartState = function drawStartState(g) {
          return g.append('circle') // .style('stroke', 'black')
          // .style('fill', 'black')
          .attr('class', 'start-state').attr('r', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit).attr('cx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit).attr('cy', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit);
        };
        /**
         * Draws a start state as a black circle
         */


        var drawDivider = function drawDivider(g) {
          return g.append('line').style('stroke', 'grey').style('stroke-dasharray', '3').attr('x1', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight).attr('class', 'divider').attr('x2', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight * 2).attr('y1', 0).attr('y2', 0);
        };
        /**
         * Draws a an end state as a black circle
         */


        var drawSimpleState = function drawSimpleState(g, stateDef) {
          var state = g.append('text').attr('x', 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('font-size', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.fontSize).attr('class', 'state-title').text(stateDef.id);
          var classBox = state.node().getBBox();
          g.insert('rect', ':first-child').attr('x', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('width', classBox.width + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('height', classBox.height + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('rx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.radius);
          return state;
        };
        /**
         * Draws a state with descriptions
         * @param {*} g
         * @param {*} stateDef
         */


        var drawDescrState = function drawDescrState(g, stateDef) {
          var addTspan = function addTspan(textEl, txt, isFirst) {
            var tSpan = textEl.append('tspan').attr('x', 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).text(txt);

            if (!isFirst) {
              tSpan.attr('dy', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight);
            }
          };

          var title = g.append('text').attr('x', 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight + 1.3 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('font-size', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.fontSize).attr('class', 'state-title').text(stateDef.descriptions[0]);
          var titleBox = title.node().getBBox();
          var titleHeight = titleBox.height;
          var description = g.append('text') // text label for the x axis
          .attr('x', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y', titleHeight + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding * 0.4 + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.dividerMargin + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight).attr('class', 'state-description');
          var isFirst = true;
          var isSecond = true;
          stateDef.descriptions.forEach(function (descr) {
            if (!isFirst) {
              addTspan(description, descr, isSecond);
              isSecond = false;
            }

            isFirst = false;
          });
          var descrLine = g.append('line') // text label for the x axis
          .attr('x1', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y1', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + titleHeight + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.dividerMargin / 2).attr('y2', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + titleHeight + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.dividerMargin / 2).attr('class', 'descr-divider');
          var descrBox = description.node().getBBox();
          var width = Math.max(descrBox.width, titleBox.width);
          descrLine.attr('x2', width + 3 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding); // const classBox = title.node().getBBox();

          g.insert('rect', ':first-child').attr('x', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('width', width + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('height', descrBox.height + titleHeight + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('rx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.radius);
          return g;
        };
        /**
         * Adds the creates a box around the existing content and adds a
         * panel for the id on top of the content.
         */

        /**
         * Function that creates an title row and a frame around a substate for a composit state diagram.
         * The function returns a new d3 svg object with updated width and height properties;
         * @param {*} g The d3 svg object for the substate to framed
         * @param {*} stateDef The info about the
         */


        var addTitleAndBox = function addTitleAndBox(g, stateDef, altBkg) {
          var pad = Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding;
          var dblPad = 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding;
          var orgBox = g.node().getBBox();
          var orgWidth = orgBox.width;
          var orgX = orgBox.x;
          var title = g.append('text').attr('x', 0).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.titleShift).attr('font-size', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.fontSize).attr('class', 'state-title').text(stateDef.id);
          var titleBox = title.node().getBBox();
          var titleWidth = titleBox.width + dblPad;
          var width = Math.max(titleWidth, orgWidth); // + dblPad;

          if (width === orgWidth) {
            width = width + dblPad;
          }

          var startX; // const lineY = 1 - getConfig().state.textHeight;
          // const descrLine = g
          //   .append('line') // text label for the x axis
          //   .attr('x1', 0)
          //   .attr('y1', lineY)
          //   .attr('y2', lineY)
          //   .attr('class', 'descr-divider');

          var graphBox = g.node().getBBox(); // descrLine.attr('x2', graphBox.width + getConfig().state.padding);

          if (stateDef.doc) {// cnsole.warn(
            //   stateDef.id,
            //   'orgX: ',
            //   orgX,
            //   'width: ',
            //   width,
            //   'titleWidth: ',
            //   titleWidth,
            //   'orgWidth: ',
            //   orgWidth,
            //   'width',
            //   width
            // );
          }

          startX = orgX - pad;

          if (titleWidth > orgWidth) {
            startX = (orgWidth - width) / 2 + pad;
          }

          if (Math.abs(orgX - graphBox.x) < pad) {
            if (titleWidth > orgWidth) {
              startX = orgX - (titleWidth - orgWidth) / 2;
            }
          }

          var lineY = 1 - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight; // White color

          g.insert('rect', ':first-child').attr('x', startX).attr('y', lineY).attr('class', altBkg ? 'alt-composit' : 'composit').attr('width', width).attr('height', graphBox.height + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.titleShift + 1).attr('rx', '0');
          title.attr('x', startX + pad);
          if (titleWidth <= orgWidth) title.attr('x', orgX + (width - dblPad) / 2 - titleWidth / 2 + pad); // Title background

          g.insert('rect', ':first-child').attr('x', startX).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.titleShift - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('width', width) // Just needs to be higher then the descr line, will be clipped by the white color box
          .attr('height', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight * 3).attr('rx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.radius); // Full background

          g.insert('rect', ':first-child').attr('x', startX).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.titleShift - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('width', width).attr('height', graphBox.height + 3 + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.textHeight).attr('rx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.radius);
          return g;
        };

        var drawEndState = function drawEndState(g) {
          g.append('circle') // .style('stroke', 'black')
          // .style('fill', 'white')
          .attr('class', 'end-state-outer').attr('r', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.miniPadding).attr('cx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.miniPadding).attr('cy', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.miniPadding);
          return g.append('circle') // .style('stroke', 'black')
          // .style('fill', 'black')
          .attr('class', 'end-state-inner').attr('r', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit).attr('cx', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit + 2).attr('cy', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.sizeUnit + 2);
        };

        var drawForkJoinState = function drawForkJoinState(g, stateDef) {
          var width = Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.forkWidth;
          var height = Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.forkHeight;

          if (stateDef.parentId) {
            var tmp = width;
            width = height;
            height = tmp;
          }

          return g.append('rect').style('stroke', 'black').style('fill', 'black').attr('width', width).attr('height', height).attr('x', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding);
        };

        var drawText = function drawText(elem, textData) {
          // Remove and ignore br:s
          var nText = textData.text.replace(_common_common__WEBPACK_IMPORTED_MODULE_4__["default"].lineBreakRegex, ' ');
          var textElem = elem.append('text');
          textElem.attr('x', textData.x);
          textElem.attr('y', textData.y);
          textElem.style('text-anchor', textData.anchor);
          textElem.attr('fill', textData.fill);

          if (typeof textData.class !== 'undefined') {
            textElem.attr('class', textData.class);
          }

          var span = textElem.append('tspan');
          span.attr('x', textData.x + textData.textMargin * 2);
          span.attr('fill', textData.fill);
          span.text(nText);
          return textElem;
        };

        var _drawLongText = function _drawLongText(_text, x, y, g) {
          var textHeight = 0;
          var textElem = g.append('text');
          textElem.style('text-anchor', 'start');
          textElem.attr('class', 'noteText');

          var text = _text.replace(/\r\n/g, '<br/>');

          text = text.replace(/\n/g, '<br/>');
          var lines = text.split(_common_common__WEBPACK_IMPORTED_MODULE_4__["default"].lineBreakRegex);
          var tHeight = 1.25 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.noteMargin;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _line = _step.value;

              var txt = _line.trim();

              if (txt.length > 0) {
                var span = textElem.append('tspan');
                span.text(txt);

                if (tHeight === 0) {
                  var textBounds = span.node().getBBox();
                  tHeight += textBounds.height;
                }

                textHeight += tHeight;
                span.attr('x', x + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.noteMargin);
                span.attr('y', y + textHeight + 1.25 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.noteMargin);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return {
            textWidth: textElem.node().getBBox().width,
            textHeight: textHeight
          };
        };
        /**
         * Draws a note to the diagram
         * @param text - The text of the given note.
         * @param g - The element the note is attached to.
         */


        var drawNote = function drawNote(text, g) {
          g.attr('class', 'state-note');
          var note = g.append('rect').attr('x', 0).attr('y', Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding);
          var rectElem = g.append('g');

          var _drawLongText2 = _drawLongText(text, 0, 0, rectElem),
              textWidth = _drawLongText2.textWidth,
              textHeight = _drawLongText2.textHeight;

          note.attr('height', textHeight + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.noteMargin);
          note.attr('width', textWidth + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.noteMargin * 2);
          return note;
        };
        /**
         * Starting point for drawing a state. The function finds out the specifics
         * about the state and renders with approprtiate function.
         * @param {*} elem
         * @param {*} stateDef
         */


        var drawState = function drawState(elem, stateDef) {
          var id = stateDef.id;
          var stateInfo = {
            id: id,
            label: stateDef.id,
            width: 0,
            height: 0
          };
          var g = elem.append('g').attr('id', id).attr('class', 'stateGroup');
          if (stateDef.type === 'start') drawStartState(g);
          if (stateDef.type === 'end') drawEndState(g);
          if (stateDef.type === 'fork' || stateDef.type === 'join') drawForkJoinState(g, stateDef);
          if (stateDef.type === 'note') drawNote(stateDef.note.text, g);
          if (stateDef.type === 'divider') drawDivider(g);
          if (stateDef.type === 'default' && stateDef.descriptions.length === 0) drawSimpleState(g, stateDef);
          if (stateDef.type === 'default' && stateDef.descriptions.length > 0) drawDescrState(g, stateDef);
          var stateBox = g.node().getBBox();
          stateInfo.width = stateBox.width + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding;
          stateInfo.height = stateBox.height + 2 * Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding;

          _id_cache_js__WEBPACK_IMPORTED_MODULE_1__["default"].set(id, stateInfo); // stateCnt++;


          return stateInfo;
        };

        var edgeCount = 0;

        var drawEdge = function drawEdge(elem, path, relation) {
          var getRelationType = function getRelationType(type) {
            switch (type) {
              case _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].relationType.AGGREGATION:
                return 'aggregation';

              case _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].relationType.EXTENSION:
                return 'extension';

              case _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].relationType.COMPOSITION:
                return 'composition';

              case _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].relationType.DEPENDENCY:
                return 'dependency';
            }
          };

          path.points = path.points.filter(function (p) {
            return !Number.isNaN(p.y);
          }); // The data for our line

          var lineData = path.points; // This is the accessor function we talked about above

          var lineFunction = Object(d3__WEBPACK_IMPORTED_MODULE_0__["line"])().x(function (d) {
            return d.x;
          }).y(function (d) {
            return d.y;
          }).curve(d3__WEBPACK_IMPORTED_MODULE_0__["curveBasis"]);
          var svgPath = elem.append('path').attr('d', lineFunction(lineData)).attr('id', 'edge' + edgeCount).attr('class', 'transition');
          var url = '';

          if (Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.arrowMarkerAbsolute) {
            url = window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;
            url = url.replace(/\(/g, '\\(');
            url = url.replace(/\)/g, '\\)');
          }

          svgPath.attr('marker-end', 'url(' + url + '#' + getRelationType(_stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].relationType.DEPENDENCY) + 'End' + ')');

          if (typeof relation.title !== 'undefined') {
            var label = elem.append('g').attr('class', 'stateLabel');

            var _utils$calcLabelPosit = _utils__WEBPACK_IMPORTED_MODULE_3__["default"].calcLabelPosition(path.points),
                x = _utils$calcLabelPosit.x,
                y = _utils$calcLabelPosit.y;

            var rows = _common_common__WEBPACK_IMPORTED_MODULE_4__["default"].getRows(relation.title);

            var titleHeight = 0;
            var titleRows = [];
            var maxWidth = 0;
            var minX = 0;

            for (var i = 0; i <= rows.length; i++) {
              var title = label.append('text').attr('text-anchor', 'middle').text(rows[i]).attr('x', x).attr('y', y + titleHeight);
              var boundstmp = title.node().getBBox();
              maxWidth = Math.max(maxWidth, boundstmp.width);
              minX = Math.min(minX, boundstmp.x);

              _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info(boundstmp.x, x, y + titleHeight);

              if (titleHeight === 0) {
                var titleBox = title.node().getBBox();
                titleHeight = titleBox.height;

                _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info('Title height', titleHeight, y);
              }

              titleRows.push(title);
            }

            var boxHeight = titleHeight * rows.length;

            if (rows.length > 1) {
              var heightAdj = (rows.length - 1) * titleHeight * 0.5;
              titleRows.forEach(function (title, i) {
                return title.attr('y', y + i * titleHeight - heightAdj);
              });
              boxHeight = titleHeight * rows.length;
            }

            var bounds = label.node().getBBox();
            label.insert('rect', ':first-child').attr('class', 'box').attr('x', x - maxWidth / 2 - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding / 2).attr('y', y - boxHeight / 2 - Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding / 2 - 3.5).attr('width', maxWidth + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding).attr('height', boxHeight + Object(_config__WEBPACK_IMPORTED_MODULE_5__["getConfig"])().state.padding);

            _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info(bounds); //label.attr('transform', '0 -' + (bounds.y / 2));
            // Debug points
            // path.points.forEach(point => {
            //   g.append('circle')
            //     .style('stroke', 'red')
            //     .style('fill', 'red')
            //     .attr('r', 1)
            //     .attr('cx', point.x)
            //     .attr('cy', point.y);
            // });
            // g.append('circle')
            //   .style('stroke', 'blue')
            //   .style('fill', 'blue')
            //   .attr('r', 1)
            //   .attr('cx', x)
            //   .attr('cy', y);

          }

          edgeCount++;
        };
        /***/

      },

      /***/
      "./src/diagrams/state/stateDb.js":
      /*!***************************************!*\
        !*** ./src/diagrams/state/stateDb.js ***!
        \***************************************/

      /*! exports provided: parseDirective, addState, clear, getState, getStates, logDocuments, getRelations, addRelation, cleanupLabel, lineType, relationType, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addState", function () {
          return addState;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getState", function () {
          return getState;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getStates", function () {
          return getStates;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "logDocuments", function () {
          return logDocuments;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getRelations", function () {
          return getRelations;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addRelation", function () {
          return addRelation;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "cleanupLabel", function () {
          return cleanupLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "lineType", function () {
          return lineType;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "relationType", function () {
          return relationType;
        });
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var clone = function clone(o) {
          return JSON.parse(JSON.stringify(o));
        };

        var rootDoc = [];

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].parseDirective(this, statement, context, type);
        };

        var setRootDoc = function setRootDoc(o) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Setting root doc', o); // rootDoc = { id: 'root', doc: o };


          rootDoc = o;
        };

        var getRootDoc = function getRootDoc() {
          return rootDoc;
        };

        var docTranslator = function docTranslator(parent, node, first) {
          if (node.stmt === 'relation') {
            docTranslator(parent, node.state1, true);
            docTranslator(parent, node.state2, false);
          } else {
            if (node.stmt === 'state') {
              if (node.id === '[*]') {
                node.id = first ? parent.id + '_start' : parent.id + '_end';
                node.start = first;
              }
            }

            if (node.doc) {
              var doc = []; // Check for concurrency

              var i = 0;
              var currentDoc = [];

              for (i = 0; i < node.doc.length; i++) {
                if (node.doc[i].type === 'divider') {
                  // debugger;
                  var newNode = clone(node.doc[i]);
                  newNode.doc = clone(currentDoc);
                  doc.push(newNode);
                  currentDoc = [];
                } else {
                  currentDoc.push(node.doc[i]);
                }
              } // If any divider was encountered


              if (doc.length > 0 && currentDoc.length > 0) {
                var _newNode = {
                  stmt: 'state',
                  id: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["generateId"])(),
                  type: 'divider',
                  doc: clone(currentDoc)
                };
                doc.push(clone(_newNode));
                node.doc = doc;
              }

              node.doc.forEach(function (docNode) {
                return docTranslator(node, docNode, true);
              });
            }
          }
        };

        var getRootDocV2 = function getRootDocV2() {
          docTranslator({
            id: 'root'
          }, {
            id: 'root',
            doc: rootDoc
          }, true);
          return {
            id: 'root',
            doc: rootDoc
          };
        };

        var extract = function extract(_doc) {
          // const res = { states: [], relations: [] };
          var doc;

          if (_doc.doc) {
            doc = _doc.doc;
          } else {
            doc = _doc;
          } // let doc = root.doc;
          // if (!doc) {
          //   doc = root;
          // }


          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info(doc);

          clear();

          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Extract', doc);

          doc.forEach(function (item) {
            if (item.stmt === 'state') {
              addState(item.id, item.type, item.doc, item.description, item.note);
            }

            if (item.stmt === 'relation') {
              addRelation(item.state1.id, item.state2.id, item.description);
            }
          });
        };

        var newDoc = function newDoc() {
          return {
            relations: [],
            states: {},
            documents: {}
          };
        };

        var documents = {
          root: newDoc()
        };
        var currentDocument = documents.root;
        var startCnt = 0;
        var endCnt = 0; // eslint-disable-line
        // let stateCnt = 0;

        /**
         * Function called by parser when a node definition has been found.
         * @param id
         * @param text
         * @param type
         * @param style
         */

        var addState = function addState(id, type, doc, descr, note) {
          if (typeof currentDocument.states[id] === 'undefined') {
            currentDocument.states[id] = {
              id: id,
              descriptions: [],
              type: type,
              doc: doc,
              note: note
            };
          } else {
            if (!currentDocument.states[id].doc) {
              currentDocument.states[id].doc = doc;
            }

            if (!currentDocument.states[id].type) {
              currentDocument.states[id].type = type;
            }
          }

          if (descr) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Adding state ', id, descr);

            if (typeof descr === 'string') addDescription(id, descr.trim());

            if (_typeof(descr) === 'object') {
              descr.forEach(function (des) {
                return addDescription(id, des.trim());
              });
            }
          }

          if (note) currentDocument.states[id].note = note;
        };

        var clear = function clear() {
          documents = {
            root: newDoc()
          };
          currentDocument = documents.root;
          currentDocument = documents.root;
          startCnt = 0;
          endCnt = 0; // eslint-disable-line

          classes = [];
        };

        var getState = function getState(id) {
          return currentDocument.states[id];
        };

        var getStates = function getStates() {
          return currentDocument.states;
        };

        var logDocuments = function logDocuments() {
          _logger__WEBPACK_IMPORTED_MODULE_0__["log"].info('Documents = ', documents);
        };

        var getRelations = function getRelations() {
          return currentDocument.relations;
        };

        var addRelation = function addRelation(_id1, _id2, title) {
          var id1 = _id1;
          var id2 = _id2;
          var type1 = 'default';
          var type2 = 'default';

          if (_id1 === '[*]') {
            startCnt++;
            id1 = 'start' + startCnt;
            type1 = 'start';
          }

          if (_id2 === '[*]') {
            endCnt++;
            id2 = 'end' + startCnt;
            type2 = 'end';
          }

          addState(id1, type1);
          addState(id2, type2);
          currentDocument.relations.push({
            id1: id1,
            id2: id2,
            title: title
          });
        };

        var addDescription = function addDescription(id, _descr) {
          var theState = currentDocument.states[id];
          var descr = _descr;

          if (descr[0] === ':') {
            descr = descr.substr(1).trim();
          }

          theState.descriptions.push(descr);
        };

        var cleanupLabel = function cleanupLabel(label) {
          if (label.substring(0, 1) === ':') {
            return label.substr(2).trim();
          } else {
            return label.trim();
          }
        };

        var lineType = {
          LINE: 0,
          DOTTED_LINE: 1
        };
        var dividerCnt = 0;

        var getDividerId = function getDividerId() {
          dividerCnt++;
          return 'divider-id-' + dividerCnt;
        };

        var classes = [];

        var getClasses = function getClasses() {
          return classes;
        };

        var getDirection = function getDirection() {
          return 'TB';
        };

        var relationType = {
          AGGREGATION: 0,
          EXTENSION: 1,
          COMPOSITION: 2,
          DEPENDENCY: 3
        };

        var trimColon = function trimColon(str) {
          return str && str[0] === ':' ? str.substr(1).trim() : str.trim();
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_3__["getConfig"]().state;
          },
          addState: addState,
          clear: clear,
          getState: getState,
          getStates: getStates,
          getRelations: getRelations,
          getClasses: getClasses,
          getDirection: getDirection,
          addRelation: addRelation,
          getDividerId: getDividerId,
          // addDescription,
          cleanupLabel: cleanupLabel,
          lineType: lineType,
          relationType: relationType,
          logDocuments: logDocuments,
          getRootDoc: getRootDoc,
          setRootDoc: setRootDoc,
          getRootDocV2: getRootDocV2,
          extract: extract,
          trimColon: trimColon
        };
        /***/
      },

      /***/
      "./src/diagrams/state/stateRenderer-v2.js":
      /*!************************************************!*\
        !*** ./src/diagrams/state/stateRenderer-v2.js ***!
        \************************************************/

      /*! exports provided: setConf, getClasses, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getClasses", function () {
          return getClasses;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _stateDb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./stateDb */
        "./src/diagrams/state/stateDb.js");
        /* harmony import */


        var _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./parser/stateDiagram */
        "./src/diagrams/state/parser/stateDiagram.jison");
        /* harmony import */


        var _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_3__);
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _dagre_wrapper_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../../dagre-wrapper/index.js */
        "./src/dagre-wrapper/index.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        var conf = {};

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);

          for (var i = 0; i < keys.length; i++) {
            conf[keys[i]] = cnf[keys[i]];
          }
        };

        var nodeDb = {};
        /**
         * Returns the all the styles from classDef statements in the graph definition.
         * @returns {object} classDef styles
         */

        var getClasses = function getClasses(text) {
          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].trace('Extracting classes');

          _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          var parser = _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
          parser.yy = _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"]; // Parse the graph definition

          parser.parse(text);
          return _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].getClasses();
        };

        var setupNode = function setupNode(g, parent, node, altFlag) {
          // Add the node
          if (node.id !== 'root') {
            var shape = 'rect';

            if (node.start === true) {
              shape = 'start';
            }

            if (node.start === false) {
              shape = 'end';
            }

            if (node.type !== 'default') {
              shape = node.type;
            }

            if (!nodeDb[node.id]) {
              nodeDb[node.id] = {
                id: node.id,
                shape: shape,
                description: node.id,
                classes: 'statediagram-state'
              };
            } // Build of the array of description strings accordinging


            if (node.description) {
              if (Array.isArray(nodeDb[node.id].description)) {
                // There already is an array of strings,add to it
                nodeDb[node.id].shape = 'rectWithTitle';
                nodeDb[node.id].description.push(node.description);
              } else {
                if (nodeDb[node.id].description.length > 0) {
                  // if there is a description already transformit to an array
                  nodeDb[node.id].shape = 'rectWithTitle';

                  if (nodeDb[node.id].description === node.id) {
                    // If the previous description was the is, remove it
                    nodeDb[node.id].description = [node.description];
                  } else {
                    nodeDb[node.id].description = [nodeDb[node.id].description, node.description];
                  }
                } else {
                  nodeDb[node.id].shape = 'rect';
                  nodeDb[node.id].description = node.description;
                }
              }
            } // Save data for description and group so that for instance a statement without description overwrites
            // one with description
            // group


            if (!nodeDb[node.id].type && node.doc) {
              _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info('Setting cluser for ', node.id);

              nodeDb[node.id].type = 'group';
              nodeDb[node.id].shape = node.type === 'divider' ? 'divider' : 'roundedWithTitle';
              nodeDb[node.id].classes = nodeDb[node.id].classes + ' ' + (altFlag ? 'statediagram-cluster statediagram-cluster-alt' : 'statediagram-cluster');
            }

            var nodeData = {
              labelStyle: '',
              shape: nodeDb[node.id].shape,
              labelText: nodeDb[node.id].description,
              classes: nodeDb[node.id].classes,
              //classStr,
              style: '',
              //styles.style,
              id: node.id,
              domId: 'state-' + node.id + '-' + cnt,
              type: nodeDb[node.id].type,
              padding: 15 //getConfig().flowchart.padding

            };

            if (node.note) {
              // Todo: set random id
              var noteData = {
                labelStyle: '',
                shape: 'note',
                labelText: node.note.text,
                classes: 'statediagram-note',
                //classStr,
                style: '',
                //styles.style,
                id: node.id + '----note',
                domId: 'state-' + node.id + '----note-' + cnt,
                type: nodeDb[node.id].type,
                padding: 15 //getConfig().flowchart.padding

              };
              var groupData = {
                labelStyle: '',
                shape: 'noteGroup',
                labelText: node.note.text,
                classes: nodeDb[node.id].classes,
                //classStr,
                style: '',
                //styles.style,
                id: node.id + '----parent',
                domId: 'state-' + node.id + '----parent-' + cnt,
                type: 'group',
                padding: 0 //getConfig().flowchart.padding

              };
              cnt++;
              g.setNode(node.id + '----parent', groupData);
              g.setNode(noteData.id, noteData);
              g.setNode(node.id, nodeData);
              g.setParent(node.id, node.id + '----parent');
              g.setParent(noteData.id, node.id + '----parent');
              var from = node.id;
              var to = noteData.id;

              if (node.note.position === 'left of') {
                from = noteData.id;
                to = node.id;
              }

              g.setEdge(from, to, {
                arrowhead: 'none',
                arrowType: '',
                style: 'fill:none',
                labelStyle: '',
                classes: 'transition note-edge',
                arrowheadStyle: 'fill: #333',
                labelpos: 'c',
                labelType: 'text',
                thickness: 'normal'
              });
            } else {
              g.setNode(node.id, nodeData);
            }
          }

          if (parent) {
            if (parent.id !== 'root') {
              _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info('Setting node ', node.id, ' to be child of its parent ', parent.id);

              g.setParent(node.id, parent.id);
            }
          }

          if (node.doc) {
            _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info('Adding nodes children ');

            setupDoc(g, node, node.doc, !altFlag);
          }
        };

        var cnt = 0;

        var setupDoc = function setupDoc(g, parent, doc, altFlag) {
          cnt = 0;

          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].trace('items', doc);

          doc.forEach(function (item) {
            if (item.stmt === 'state' || item.stmt === 'default') {
              setupNode(g, parent, item, altFlag);
            } else if (item.stmt === 'relation') {
              setupNode(g, parent, item.state1, altFlag);
              setupNode(g, parent, item.state2, altFlag);
              var edgeData = {
                id: 'edge' + cnt,
                arrowhead: 'normal',
                arrowTypeEnd: 'arrow_barb',
                style: 'fill:none',
                labelStyle: '',
                label: item.description,
                arrowheadStyle: 'fill: #333',
                labelpos: 'c',
                labelType: 'text',
                thickness: 'normal',
                classes: 'transition'
              };
              var startId = item.state1.id;
              var endId = item.state2.id;
              g.setEdge(startId, endId, edgeData, cnt);
              cnt++;
            }
          });
        };
        /**
         * Draws a flowchart in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(text, id) {
          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info('Drawing state diagram (v2)', id);

          _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].clear();

          nodeDb = {};
          var parser = _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_3___default.a.parser;
          parser.yy = _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"]; // Parse the graph definition

          parser.parse(text); // Fetch the default direction, use TD if none was found

          var dir = _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].getDirection();

          if (typeof dir === 'undefined') {
            dir = 'LR';
          }

          var conf = Object(_config__WEBPACK_IMPORTED_MODULE_4__["getConfig"])().state;
          var nodeSpacing = conf.nodeSpacing || 50;
          var rankSpacing = conf.rankSpacing || 50; // Create the input mermaid.graph

          var g = new graphlib__WEBPACK_IMPORTED_MODULE_0___default.a.Graph({
            multigraph: true,
            compound: true
          }).setGraph({
            rankdir: 'TB',
            nodesep: nodeSpacing,
            ranksep: rankSpacing,
            marginx: 8,
            marginy: 8
          }).setDefaultEdgeLabel(function () {
            return {};
          });

          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info(_stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].getRootDocV2());

          _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].extract(_stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].getRootDocV2());

          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].info(_stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].getRootDocV2());

          setupNode(g, undefined, _stateDb__WEBPACK_IMPORTED_MODULE_2__["default"].getRootDocV2(), true); // Set up an SVG group so that we can translate the final graph.

          var svg = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id=\"".concat(id, "\"]")); // Run the renderer. This is what draws the final graph.

          var element = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#' + id + ' g');
          Object(_dagre_wrapper_index_js__WEBPACK_IMPORTED_MODULE_5__["render"])(element, g, ['barb'], 'statediagram', id);
          var padding = 8;
          var bounds = svg.node().getBBox();
          var width = bounds.width + padding * 2;
          var height = bounds.height + padding * 2; // Zoom in a bit

          svg.attr('class', 'statediagram');
          var svgBounds = svg.node().getBBox();
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["configureSvgSize"])(svg, height, width * 1.75, conf.useMaxWidth); // Ensure the viewBox includes the whole svgBounds area with extra space for padding

          var vBox = "".concat(svgBounds.x - padding, " ").concat(svgBounds.y - padding, " ").concat(width, " ").concat(height);

          _logger__WEBPACK_IMPORTED_MODULE_6__["log"].debug("viewBox ".concat(vBox));

          svg.attr('viewBox', vBox); // Add label rects for non html labels

          if (!conf.htmlLabels) {
            var labels = document.querySelectorAll('[id="' + id + '"] .edgeLabel .label');

            for (var k = 0; k < labels.length; k++) {
              var label = labels[k]; // Get dimensions of label

              var dim = label.getBBox();
              var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
              rect.setAttribute('rx', 0);
              rect.setAttribute('ry', 0);
              rect.setAttribute('width', dim.width);
              rect.setAttribute('height', dim.height);
              label.insertBefore(rect, label.firstChild);
            }
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          getClasses: getClasses,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/state/stateRenderer.js":
      /*!*********************************************!*\
        !*** ./src/diagrams/state/stateRenderer.js ***!
        \*********************************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! dagre */
        "dagre");
        /* harmony import */


        var dagre__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dagre__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! graphlib */
        "graphlib");
        /* harmony import */


        var graphlib__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(graphlib__WEBPACK_IMPORTED_MODULE_2__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ../../logger */
        "./src/logger.js");
        /* harmony import */


        var _stateDb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./stateDb */
        "./src/diagrams/state/stateDb.js");
        /* harmony import */


        var _common_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ../common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./parser/stateDiagram */
        "./src/diagrams/state/parser/stateDiagram.jison");
        /* harmony import */


        var _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_6__);
        /* harmony import */


        var _shapes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ./shapes */
        "./src/diagrams/state/shapes.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js"); // import idCache from './id-cache';


        _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_6__["parser"].yy = _stateDb__WEBPACK_IMPORTED_MODULE_4__["default"]; // TODO Move conf object to main conf in mermaidAPI

        var conf;
        var transformationLog = {};

        var setConf = function setConf() {}; // Todo optimize

        /**
         * Setup arrow head and define the marker. The result is appended to the svg.
         */


        var insertMarkers = function insertMarkers(elem) {
          elem.append('defs').append('marker').attr('id', 'dependencyEnd').attr('refX', 19).attr('refY', 7).attr('markerWidth', 20).attr('markerHeight', 28).attr('orient', 'auto').append('path').attr('d', 'M 19,7 L9,13 L14,7 L9,1 Z');
        };
        /**
         * Draws a flowchart in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(text, id) {
          conf = Object(_config__WEBPACK_IMPORTED_MODULE_8__["getConfig"])().state;

          _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_6__["parser"].yy.clear();

          _parser_stateDiagram__WEBPACK_IMPORTED_MODULE_6__["parser"].parse(text);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Rendering diagram ' + text); // Fetch the default direction, use TD if none was found


          var diagram = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])("[id='".concat(id, "']"));
          insertMarkers(diagram); // Layout graph, Create a new directed graph

          var graph = new graphlib__WEBPACK_IMPORTED_MODULE_2___default.a.Graph({
            multigraph: true,
            compound: true,
            // acyclicer: 'greedy',
            rankdir: 'RL' // ranksep: '20'

          }); // Default to assigning a new object as a label for each new edge.

          graph.setDefaultEdgeLabel(function () {
            return {};
          });

          var rootDoc = _stateDb__WEBPACK_IMPORTED_MODULE_4__["default"].getRootDoc();

          renderDoc(rootDoc, diagram, undefined, false);
          var padding = conf.padding;
          var bounds = diagram.node().getBBox();
          var width = bounds.width + padding * 2;
          var height = bounds.height + padding * 2; // zoom in a bit

          var svgWidth = width * 1.75;
          Object(_utils__WEBPACK_IMPORTED_MODULE_9__["configureSvgSize"])(diagram, height, svgWidth, conf.useMaxWidth);
          diagram.attr('viewBox', "".concat(bounds.x - conf.padding, "  ").concat(bounds.y - conf.padding, " ") + width + ' ' + height);
        };

        var getLabelWidth = function getLabelWidth(text) {
          return text ? text.length * conf.fontSizeFactor : 1;
        };

        var renderDoc = function renderDoc(doc, diagram, parentId, altBkg) {
          // // Layout graph, Create a new directed graph
          var graph = new graphlib__WEBPACK_IMPORTED_MODULE_2___default.a.Graph({
            compound: true,
            multigraph: true
          });
          var i;
          var edgeFreeDoc = true;

          for (i = 0; i < doc.length; i++) {
            if (doc[i].stmt === 'relation') {
              edgeFreeDoc = false;
              break;
            }
          } // Set an object for the graph label


          if (parentId) graph.setGraph({
            rankdir: 'LR',
            multigraph: true,
            compound: true,
            // acyclicer: 'greedy',
            ranker: 'tight-tree',
            ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,
            nodeSep: edgeFreeDoc ? 1 : 50,
            isMultiGraph: true // ranksep: 5,
            // nodesep: 1

          });else {
            graph.setGraph({
              rankdir: 'TB',
              multigraph: true,
              compound: true,
              // isCompound: true,
              // acyclicer: 'greedy',
              // ranker: 'longest-path'
              ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,
              nodeSep: edgeFreeDoc ? 1 : 50,
              ranker: 'tight-tree',
              // ranker: 'network-simplex'
              isMultiGraph: true
            });
          } // Default to assigning a new object as a label for each new edge.

          graph.setDefaultEdgeLabel(function () {
            return {};
          });

          _stateDb__WEBPACK_IMPORTED_MODULE_4__["default"].extract(doc);

          var states = _stateDb__WEBPACK_IMPORTED_MODULE_4__["default"].getStates();

          var relations = _stateDb__WEBPACK_IMPORTED_MODULE_4__["default"].getRelations();

          var keys = Object.keys(states);
          var first = true;

          for (var _i = 0; _i < keys.length; _i++) {
            var stateDef = states[keys[_i]];

            if (parentId) {
              stateDef.parentId = parentId;
            }

            var node = void 0;

            if (stateDef.doc) {
              var sub = diagram.append('g').attr('id', stateDef.id).attr('class', 'stateGroup');
              node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg);

              if (first) {
                // first = false;
                sub = Object(_shapes__WEBPACK_IMPORTED_MODULE_7__["addTitleAndBox"])(sub, stateDef, altBkg);
                var boxBounds = sub.node().getBBox();
                node.width = boxBounds.width;
                node.height = boxBounds.height + conf.padding / 2;
                transformationLog[stateDef.id] = {
                  y: conf.compositTitleSize
                };
              } else {
                // sub = addIdAndBox(sub, stateDef);
                var _boxBounds = sub.node().getBBox();

                node.width = _boxBounds.width;
                node.height = _boxBounds.height; // transformationLog[stateDef.id] = { y: conf.compositTitleSize };
              }
            } else {
              node = Object(_shapes__WEBPACK_IMPORTED_MODULE_7__["drawState"])(diagram, stateDef, graph);
            }

            if (stateDef.note) {
              // Draw note note
              var noteDef = {
                descriptions: [],
                id: stateDef.id + '-note',
                note: stateDef.note,
                type: 'note'
              };
              var note = Object(_shapes__WEBPACK_IMPORTED_MODULE_7__["drawState"])(diagram, noteDef, graph); // graph.setNode(node.id, node);

              if (stateDef.note.position === 'left of') {
                graph.setNode(node.id + '-note', note);
                graph.setNode(node.id, node);
              } else {
                graph.setNode(node.id, node);
                graph.setNode(node.id + '-note', note);
              } // graph.setNode(node.id);


              graph.setParent(node.id, node.id + '-group');
              graph.setParent(node.id + '-note', node.id + '-group');
            } else {
              // Add nodes to the graph. The first argument is the node id. The second is
              // metadata about the node. In this case we're going to add labels to each of
              // our nodes.
              graph.setNode(node.id, node);
            }
          }

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Count=', graph.nodeCount(), graph);

          var cnt = 0;
          relations.forEach(function (relation) {
            cnt++;

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Setting edge', relation);

            graph.setEdge(relation.id1, relation.id2, {
              relation: relation,
              width: getLabelWidth(relation.title),
              height: conf.labelHeight * _common_common__WEBPACK_IMPORTED_MODULE_5__["default"].getRows(relation.title).length,
              labelpos: 'c'
            }, 'id' + cnt);
          });
          dagre__WEBPACK_IMPORTED_MODULE_1___default.a.layout(graph);

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Graph after layout', graph.nodes());

          var svgElem = diagram.node();
          graph.nodes().forEach(function (v) {
            if (typeof v !== 'undefined' && typeof graph.node(v) !== 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].warn('Node ' + v + ': ' + JSON.stringify(graph.node(v)));

              Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + svgElem.id + ' #' + v).attr('transform', 'translate(' + (graph.node(v).x - graph.node(v).width / 2) + ',' + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + ' )');
              Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + svgElem.id + ' #' + v).attr('data-x-shift', graph.node(v).x - graph.node(v).width / 2);
              var dividers = document.querySelectorAll('#' + svgElem.id + ' #' + v + ' .divider');
              dividers.forEach(function (divider) {
                var parent = divider.parentElement;
                var pWidth = 0;
                var pShift = 0;

                if (parent) {
                  if (parent.parentElement) pWidth = parent.parentElement.getBBox().width;
                  pShift = parseInt(parent.getAttribute('data-x-shift'), 10);

                  if (Number.isNaN(pShift)) {
                    pShift = 0;
                  }
                }

                divider.setAttribute('x1', 0 - pShift + 8);
                divider.setAttribute('x2', pWidth - pShift - 8);
              });
            } else {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('No Node ' + v + ': ' + JSON.stringify(graph.node(v)));
            }
          });
          var stateBox = svgElem.getBBox();
          graph.edges().forEach(function (e) {
            if (typeof e !== 'undefined' && typeof graph.edge(e) !== 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));

              Object(_shapes__WEBPACK_IMPORTED_MODULE_7__["drawEdge"])(diagram, graph.edge(e), graph.edge(e).relation);
            }
          });
          stateBox = svgElem.getBBox();
          var stateInfo = {
            id: parentId ? parentId : 'root',
            label: parentId ? parentId : 'root',
            width: 0,
            height: 0
          };
          stateInfo.width = stateBox.width + 2 * conf.padding;
          stateInfo.height = stateBox.height + 2 * conf.padding;

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Doc rendered', stateInfo, graph);

          return stateInfo;
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/state/styles.js":
      /*!**************************************!*\
        !*** ./src/diagrams/state/styles.js ***!
        \**************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return "g.stateGroup text {\n  fill: ".concat(options.nodeBorder, ";\n  stroke: none;\n  font-size: 10px;\n}\ng.stateGroup text {\n  fill: ").concat(options.textColor, ";\n  stroke: none;\n  font-size: 10px;\n\n}\ng.stateGroup .state-title {\n  font-weight: bolder;\n  fill: ").concat(options.labelColor, ";\n}\n\ng.stateGroup rect {\n  fill: ").concat(options.mainBkg, ";\n  stroke: ").concat(options.nodeBorder, ";\n}\n\ng.stateGroup line {\n  stroke: ").concat(options.lineColor, ";\n  stroke-width: 1;\n}\n\n.transition {\n  stroke: ").concat(options.lineColor, ";\n  stroke-width: 1;\n  fill: none;\n}\n\n.stateGroup .composit {\n  fill: ").concat(options.background, ";\n  border-bottom: 1px\n}\n\n.stateGroup .alt-composit {\n  fill: #e0e0e0;\n  border-bottom: 1px\n}\n\n.state-note {\n  stroke: ").concat(options.noteBorderColor, ";\n  fill: ").concat(options.noteBkgColor, ";\n\n  text {\n    fill: black;\n    stroke: none;\n    font-size: 10px;\n  }\n}\n\n.stateLabel .box {\n  stroke: none;\n  stroke-width: 0;\n  fill: ").concat(options.mainBkg, ";\n  opacity: 0.5;\n}\n\n.edgeLabel .label rect {\n  fill: ").concat(options.tertiaryColor, ";\n  opacity: 0.5;\n}\n.edgeLabel .label text {\n  fill: ").concat(options.tertiaryTextColor, ";\n}\n.label div .edgeLabel {\n  color: ").concat(options.tertiaryTextColor, ";\n}\n\n.stateLabel text {\n  fill: ").concat(options.labelColor, ";\n  font-size: 10px;\n  font-weight: bold;\n}\n\n.node circle.state-start {\n  fill: ").concat(options.lineColor, ";\n  stroke: black;\n}\n.node circle.state-end {\n  fill: ").concat(options.primaryBorderColor, ";\n  stroke: ").concat(options.background, ";\n  stroke-width: 1.5\n}\n.end-state-inner {\n  fill: ").concat(options.background, ";\n  // stroke: ").concat(options.background, ";\n  stroke-width: 1.5\n}\n\n.node rect {\n  fill: ").concat(options.mainBkg, ";\n  stroke: ").concat(options.nodeBorder, ";\n  stroke-width: 1px;\n}\n#statediagram-barbEnd {\n  fill: ").concat(options.lineColor, ";\n}\n\n.statediagram-cluster rect {\n  fill: ").concat(options.mainBkg, ";\n  stroke: ").concat(options.nodeBorder, ";\n  stroke-width: 1px;\n}\n\n.cluster-label, .nodeLabel {\n  color: ").concat(options.textColor, ";\n}\n\n.statediagram-cluster rect.outer {\n  rx: 5px;\n  ry: 5px;\n}\n.statediagram-state .divider {\n  stroke: ").concat(options.nodeBorder, ";\n}\n\n.statediagram-state .title-state {\n  rx: 5px;\n  ry: 5px;\n}\n.statediagram-cluster.statediagram-cluster .inner {\n  fill: ").concat(options.background, ";\n}\n.statediagram-cluster.statediagram-cluster-alt .inner {\n  fill: #e0e0e0;\n}\n\n.statediagram-cluster .inner {\n  rx:0;\n  ry:0;\n}\n\n.statediagram-state rect.basic {\n  rx: 5px;\n  ry: 5px;\n}\n.statediagram-state rect.divider {\n  stroke-dasharray: 10,10;\n  fill: ").concat(options.altBackground ? options.altBackground : '#efefef', ";\n}\n\n.note-edge {\n  stroke-dasharray: 5;\n}\n\n.statediagram-note rect {\n  fill: ").concat(options.noteBkgColor, ";\n  stroke: ").concat(options.noteBorderColor, ";\n  stroke-width: 1px;\n  rx: 0;\n  ry: 0;\n}\n.statediagram-note rect {\n  fill: ").concat(options.noteBkgColor, ";\n  stroke: ").concat(options.noteBorderColor, ";\n  stroke-width: 1px;\n  rx: 0;\n  ry: 0;\n}\n\n.statediagram-note text {\n  fill: ").concat(options.noteTextColor, ";\n}\n\n.statediagram-note .nodeLabel {\n  color: ").concat(options.noteTextColor, ";\n}\n\n#dependencyStart, #dependencyEnd {\n  fill: ").concat(options.lineColor, ";\n  stroke: ").concat(options.lineColor, ";\n  stroke-width: 1;\n}\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/user-journey/journeyDb.js":
      /*!************************************************!*\
        !*** ./src/diagrams/user-journey/journeyDb.js ***!
        \************************************************/

      /*! exports provided: parseDirective, clear, setTitle, getTitle, addSection, getSections, getTasks, addTask, addTaskOrg, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "parseDirective", function () {
          return parseDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "clear", function () {
          return clear;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setTitle", function () {
          return setTitle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTitle", function () {
          return getTitle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addSection", function () {
          return addSection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getSections", function () {
          return getSections;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTasks", function () {
          return getTasks;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addTask", function () {
          return addTask;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "addTaskOrg", function () {
          return addTaskOrg;
        });
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ../../mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ../../config */
        "./src/config.js");

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

        function _iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        }

        var title = '';
        var currentSection = '';
        var sections = [];
        var tasks = [];
        var rawTasks = [];

        var parseDirective = function parseDirective(statement, context, type) {
          _mermaidAPI__WEBPACK_IMPORTED_MODULE_0__["default"].parseDirective(this, statement, context, type);
        };

        var clear = function clear() {
          sections.length = 0;
          tasks.length = 0;
          currentSection = '';
          title = '';
          rawTasks.length = 0;
        };

        var setTitle = function setTitle(txt) {
          title = txt;
        };

        var getTitle = function getTitle() {
          return title;
        };

        var addSection = function addSection(txt) {
          currentSection = txt;
          sections.push(txt);
        };

        var getSections = function getSections() {
          return sections;
        };

        var getTasks = function getTasks() {
          var allItemsProcessed = compileTasks();
          var maxDepth = 100;
          var iterationCount = 0;

          while (!allItemsProcessed && iterationCount < maxDepth) {
            allItemsProcessed = compileTasks();
            iterationCount++;
          }

          tasks.push.apply(tasks, rawTasks);
          return tasks;
        };

        var updateActors = function updateActors() {
          var tempActors = [];
          tasks.forEach(function (task) {
            if (task.people) {
              tempActors.push.apply(tempActors, _toConsumableArray(task.people));
            }
          });
          var unique = new Set(tempActors);
          return _toConsumableArray(unique).sort();
        };

        var addTask = function addTask(descr, taskData) {
          var pieces = taskData.substr(1).split(':');
          var score = 0;
          var peeps = [];

          if (pieces.length === 1) {
            score = Number(pieces[0]);
            peeps = [];
          } else {
            score = Number(pieces[0]);
            peeps = pieces[1].split(',');
          }

          var peopleList = peeps.map(function (s) {
            return s.trim();
          });
          var rawTask = {
            section: currentSection,
            type: currentSection,
            people: peopleList,
            task: descr,
            score: score
          };
          rawTasks.push(rawTask);
        };

        var addTaskOrg = function addTaskOrg(descr) {
          var newTask = {
            section: currentSection,
            type: currentSection,
            description: descr,
            task: descr,
            classes: []
          };
          tasks.push(newTask);
        };

        var compileTasks = function compileTasks() {
          var compileTask = function compileTask(pos) {
            return rawTasks[pos].processed;
          };

          var allProcessed = true;

          for (var i = 0; i < rawTasks.length; i++) {
            compileTask(i);
            allProcessed = allProcessed && rawTasks[i].processed;
          }

          return allProcessed;
        };

        var getActors = function getActors() {
          return updateActors();
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          parseDirective: parseDirective,
          getConfig: function getConfig() {
            return _config__WEBPACK_IMPORTED_MODULE_1__["getConfig"]().journey;
          },
          clear: clear,
          setTitle: setTitle,
          getTitle: getTitle,
          addSection: addSection,
          getSections: getSections,
          getTasks: getTasks,
          addTask: addTask,
          addTaskOrg: addTaskOrg,
          getActors: getActors
        };
        /***/
      },

      /***/
      "./src/diagrams/user-journey/journeyRenderer.js":
      /*!******************************************************!*\
        !*** ./src/diagrams/user-journey/journeyRenderer.js ***!
        \******************************************************/

      /*! exports provided: setConf, draw, bounds, drawTasks, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "bounds", function () {
          return bounds;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawTasks", function () {
          return drawTasks;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _parser_journey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./parser/journey */
        "./src/diagrams/user-journey/parser/journey.jison");
        /* harmony import */


        var _parser_journey__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_parser_journey__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _journeyDb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./journeyDb */
        "./src/diagrams/user-journey/journeyDb.js");
        /* harmony import */


        var _svgDraw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./svgDraw */
        "./src/diagrams/user-journey/svgDraw.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ../../utils */
        "./src/utils.js");

        _parser_journey__WEBPACK_IMPORTED_MODULE_1__["parser"].yy = _journeyDb__WEBPACK_IMPORTED_MODULE_2__["default"];
        var conf = {
          leftMargin: 150,
          diagramMarginX: 50,
          diagramMarginY: 20,
          // Margin between tasks
          taskMargin: 50,
          // Width of task boxes
          width: 150,
          // Height of task boxes
          height: 50,
          taskFontSize: 14,
          taskFontFamily: '"Open-Sans", "sans-serif"',
          // Margin around loop boxes
          boxMargin: 10,
          boxTextMargin: 5,
          noteMargin: 10,
          // Space between messages
          messageMargin: 35,
          // Multiline message alignment
          messageAlign: 'center',
          // Depending on css styling this might need adjustment
          // Projects the edge of the diagram downwards
          bottomMarginAdj: 1,
          // width of activation box
          activationWidth: 10,
          // text placement as: tspan | fo | old only text as before
          textPlacement: 'fo',
          actorColours: ['#8FBC8F', '#7CFC00', '#00FFFF', '#20B2AA', '#B0E0E6', '#FFFFE0'],
          sectionFills: ['#191970', '#8B008B', '#4B0082', '#2F4F4F', '#800000', '#8B4513', '#00008B'],
          sectionColours: ['#fff']
        };

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };

        var actors = {};

        function drawActorLegend(diagram) {
          // Draw the actors
          var yPos = 60;
          Object.keys(actors).forEach(function (person) {
            var colour = actors[person];
            var circleData = {
              cx: 20,
              cy: yPos,
              r: 7,
              fill: colour,
              stroke: '#000'
            };

            _svgDraw__WEBPACK_IMPORTED_MODULE_3__["default"].drawCircle(diagram, circleData);

            var labelData = {
              x: 40,
              y: yPos + 7,
              fill: '#666',
              text: person,
              textMargin: conf.boxTextMargin | 5
            };

            _svgDraw__WEBPACK_IMPORTED_MODULE_3__["default"].drawText(diagram, labelData);

            yPos += 20;
          });
        }

        var LEFT_MARGIN = conf.leftMargin;

        var draw = function draw(text, id) {
          _parser_journey__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.clear();

          _parser_journey__WEBPACK_IMPORTED_MODULE_1__["parser"].parse(text + '\n');

          bounds.init();
          var diagram = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + id);
          diagram.attr('xmlns:xlink', 'http://www.w3.org/1999/xlink');

          _svgDraw__WEBPACK_IMPORTED_MODULE_3__["default"].initGraphics(diagram);

          var tasks = _parser_journey__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.getTasks();

          var title = _parser_journey__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.getTitle();

          var actorNames = _parser_journey__WEBPACK_IMPORTED_MODULE_1__["parser"].yy.getActors();

          for (var member in actors) {
            delete actors[member];
          }

          var actorPos = 0;
          actorNames.forEach(function (actorName) {
            actors[actorName] = conf.actorColours[actorPos % conf.actorColours.length];
            actorPos++;
          });
          drawActorLegend(diagram);
          bounds.insert(0, 0, LEFT_MARGIN, Object.keys(actors).length * 50);
          drawTasks(diagram, tasks, 0);
          var box = bounds.getBounds();

          if (title) {
            diagram.append('text').text(title).attr('x', LEFT_MARGIN).attr('font-size', '4ex').attr('font-weight', 'bold').attr('y', 25);
          }

          var height = box.stopy - box.starty + 2 * conf.diagramMarginY;
          var width = LEFT_MARGIN + box.stopx + 2 * conf.diagramMarginX;
          Object(_utils__WEBPACK_IMPORTED_MODULE_4__["configureSvgSize"])(diagram, height, width, conf.useMaxWidth); // Draw activity line

          diagram.append('line').attr('x1', LEFT_MARGIN).attr('y1', conf.height * 4) // One section head + one task + margins
          .attr('x2', width - LEFT_MARGIN - 4) // Subtract stroke width so arrow point is retained
          .attr('y2', conf.height * 4).attr('stroke-width', 4).attr('stroke', 'black').attr('marker-end', 'url(#arrowhead)');
          var extraVertForTitle = title ? 70 : 0;
          diagram.attr('viewBox', "".concat(box.startx, " -25 ").concat(width, " ").concat(height + extraVertForTitle));
          diagram.attr('preserveAspectRatio', 'xMinYMin meet');
        };

        var bounds = {
          data: {
            startx: undefined,
            stopx: undefined,
            starty: undefined,
            stopy: undefined
          },
          verticalPos: 0,
          sequenceItems: [],
          init: function init() {
            this.sequenceItems = [];
            this.data = {
              startx: undefined,
              stopx: undefined,
              starty: undefined,
              stopy: undefined
            };
            this.verticalPos = 0;
          },
          updateVal: function updateVal(obj, key, val, fun) {
            if (typeof obj[key] === 'undefined') {
              obj[key] = val;
            } else {
              obj[key] = fun(val, obj[key]);
            }
          },
          updateBounds: function updateBounds(startx, starty, stopx, stopy) {
            var _self = this;

            var cnt = 0;

            function updateFn(type) {
              return function updateItemBounds(item) {
                cnt++; // The loop sequenceItems is a stack so the biggest margins in the beginning of the sequenceItems

                var n = _self.sequenceItems.length - cnt + 1;

                _self.updateVal(item, 'starty', starty - n * conf.boxMargin, Math.min);

                _self.updateVal(item, 'stopy', stopy + n * conf.boxMargin, Math.max);

                _self.updateVal(bounds.data, 'startx', startx - n * conf.boxMargin, Math.min);

                _self.updateVal(bounds.data, 'stopx', stopx + n * conf.boxMargin, Math.max);

                if (!(type === 'activation')) {
                  _self.updateVal(item, 'startx', startx - n * conf.boxMargin, Math.min);

                  _self.updateVal(item, 'stopx', stopx + n * conf.boxMargin, Math.max);

                  _self.updateVal(bounds.data, 'starty', starty - n * conf.boxMargin, Math.min);

                  _self.updateVal(bounds.data, 'stopy', stopy + n * conf.boxMargin, Math.max);
                }
              };
            }

            this.sequenceItems.forEach(updateFn());
          },
          insert: function insert(startx, starty, stopx, stopy) {
            var _startx = Math.min(startx, stopx);

            var _stopx = Math.max(startx, stopx);

            var _starty = Math.min(starty, stopy);

            var _stopy = Math.max(starty, stopy);

            this.updateVal(bounds.data, 'startx', _startx, Math.min);
            this.updateVal(bounds.data, 'starty', _starty, Math.min);
            this.updateVal(bounds.data, 'stopx', _stopx, Math.max);
            this.updateVal(bounds.data, 'stopy', _stopy, Math.max);
            this.updateBounds(_startx, _starty, _stopx, _stopy);
          },
          bumpVerticalPos: function bumpVerticalPos(bump) {
            this.verticalPos = this.verticalPos + bump;
            this.data.stopy = this.verticalPos;
          },
          getVerticalPos: function getVerticalPos() {
            return this.verticalPos;
          },
          getBounds: function getBounds() {
            return this.data;
          }
        };
        var fills = conf.sectionFills;
        var textColours = conf.sectionColours;

        var drawTasks = function drawTasks(diagram, tasks, verticalPos) {
          var lastSection = '';
          var sectionVHeight = conf.height * 2 + conf.diagramMarginY;
          var taskPos = verticalPos + sectionVHeight;
          var sectionNumber = 0;
          var fill = '#CCC';
          var colour = 'black';
          var num = 0; // Draw the tasks

          for (var i = 0; i < tasks.length; i++) {
            var task = tasks[i];

            if (lastSection !== task.section) {
              fill = fills[sectionNumber % fills.length];
              num = sectionNumber % fills.length;
              colour = textColours[sectionNumber % textColours.length];
              var section = {
                x: i * conf.taskMargin + i * conf.width + LEFT_MARGIN,
                y: 50,
                text: task.section,
                fill: fill,
                num: num,
                colour: colour
              };

              _svgDraw__WEBPACK_IMPORTED_MODULE_3__["default"].drawSection(diagram, section, conf);

              lastSection = task.section;
              sectionNumber++;
            } // Collect the actors involved in the task


            var taskActors = task.people.reduce(function (acc, actorName) {
              if (actors[actorName]) {
                acc[actorName] = actors[actorName];
              }

              return acc;
            }, {}); // Add some rendering data to the object

            task.x = i * conf.taskMargin + i * conf.width + LEFT_MARGIN;
            task.y = taskPos;
            task.width = conf.diagramMarginX;
            task.height = conf.diagramMarginY;
            task.colour = colour;
            task.fill = fill;
            task.num = num;
            task.actors = taskActors; // Draw the box with the attached line

            _svgDraw__WEBPACK_IMPORTED_MODULE_3__["default"].drawTask(diagram, task, conf);

            bounds.insert(task.x, task.y, task.x + task.width + conf.taskMargin, 300 + 5 * 30); // stopy is the length of the descenders.
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/diagrams/user-journey/parser/journey.jison":
      /*!********************************************************!*\
        !*** ./src/diagrams/user-journey/parser/journey.jison ***!
        \********************************************************/

      /*! no static exports found */

      /***/
      function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (process, module) {
          /* parser generated by jison 0.4.18 */

          /*
            Returns a Parser object of the following structure:
          
            Parser: {
              yy: {}
            }
          
            Parser.prototype: {
              yy: {},
              trace: function(),
              symbols_: {associative list: name ==> number},
              terminals_: {associative list: number ==> name},
              productions_: [...],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
              table: [...],
              defaultActions: {...},
              parseError: function(str, hash),
              parse: function(input),
          
              lexer: {
                  EOF: 1,
                  parseError: function(str, hash),
                  setInput: function(input),
                  input: function(),
                  unput: function(str),
                  more: function(),
                  less: function(n),
                  pastInput: function(),
                  upcomingInput: function(),
                  showPosition: function(),
                  test_match: function(regex_match_array, rule_index),
                  next: function(),
                  lex: function(),
                  begin: function(condition),
                  popState: function(),
                  _currentRules: function(),
                  topState: function(),
                  pushState: function(condition),
          
                  options: {
                      ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                      flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                      backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                  },
          
                  performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                  rules: [...],
                  conditions: {associative list: name ==> set},
              }
            }
          
          
            token location info (@$, _$, etc.): {
              first_line: n,
              last_line: n,
              first_column: n,
              last_column: n,
              range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
            }
          
          
            the parseError function receives a 'hash' object with these members for lexer and parser errors: {
              text:        (matched text)
              token:       (the produced terminal token, if any)
              line:        (yylineno)
            }
            while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
              loc:         (yylloc)
              expected:    (string describing the set of expected tokens)
              recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
            }
          */
          var parser = function () {
            var o = function (k, v, o, l) {
              for (o = o || {}, l = k.length; l--; o[k[l]] = v);

              return o;
            },
                $V0 = [1, 2],
                $V1 = [1, 5],
                $V2 = [6, 9, 11, 17, 18, 19, 21],
                $V3 = [1, 15],
                $V4 = [1, 16],
                $V5 = [1, 17],
                $V6 = [1, 21],
                $V7 = [4, 6, 9, 11, 17, 18, 19, 21];

            var parser = {
              trace: function trace() {},
              yy: {},
              symbols_: {
                "error": 2,
                "start": 3,
                "journey": 4,
                "document": 5,
                "EOF": 6,
                "directive": 7,
                "line": 8,
                "SPACE": 9,
                "statement": 10,
                "NEWLINE": 11,
                "openDirective": 12,
                "typeDirective": 13,
                "closeDirective": 14,
                ":": 15,
                "argDirective": 16,
                "title": 17,
                "section": 18,
                "taskName": 19,
                "taskData": 20,
                "open_directive": 21,
                "type_directive": 22,
                "arg_directive": 23,
                "close_directive": 24,
                "$accept": 0,
                "$end": 1
              },
              terminals_: {
                2: "error",
                4: "journey",
                6: "EOF",
                9: "SPACE",
                11: "NEWLINE",
                15: ":",
                17: "title",
                18: "section",
                19: "taskName",
                20: "taskData",
                21: "open_directive",
                22: "type_directive",
                23: "arg_directive",
                24: "close_directive"
              },
              productions_: [0, [3, 3], [3, 2], [5, 0], [5, 2], [8, 2], [8, 1], [8, 1], [8, 1], [7, 4], [7, 6], [10, 1], [10, 1], [10, 2], [10, 1], [12, 1], [13, 1], [16, 1], [14, 1]],
              performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
              /* action[1] */
              , $$
              /* vstack */
              , _$
              /* lstack */
              ) {
                /* this == yyval */
                var $0 = $$.length - 1;

                switch (yystate) {
                  case 1:
                    return $$[$0 - 1];
                    break;

                  case 3:
                    this.$ = [];
                    break;

                  case 4:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 5:
                  case 6:
                    this.$ = $$[$0];
                    break;

                  case 7:
                  case 8:
                    this.$ = [];
                    break;

                  case 11:
                    yy.setTitle($$[$0].substr(6));
                    this.$ = $$[$0].substr(6);
                    break;

                  case 12:
                    yy.addSection($$[$0].substr(8));
                    this.$ = $$[$0].substr(8);
                    break;

                  case 13:
                    yy.addTask($$[$0 - 1], $$[$0]);
                    this.$ = 'task';
                    break;

                  case 15:
                    yy.parseDirective('%%{', 'open_directive');
                    break;

                  case 16:
                    yy.parseDirective($$[$0], 'type_directive');
                    break;

                  case 17:
                    $$[$0] = $$[$0].trim().replace(/'/g, '"');
                    yy.parseDirective($$[$0], 'arg_directive');
                    break;

                  case 18:
                    yy.parseDirective('}%%', 'close_directive', 'journey');
                    break;
                }
              },
              table: [{
                3: 1,
                4: $V0,
                7: 3,
                12: 4,
                21: $V1
              }, {
                1: [3]
              }, o($V2, [2, 3], {
                5: 6
              }), {
                3: 7,
                4: $V0,
                7: 3,
                12: 4,
                21: $V1
              }, {
                13: 8,
                22: [1, 9]
              }, {
                22: [2, 15]
              }, {
                6: [1, 10],
                7: 18,
                8: 11,
                9: [1, 12],
                10: 13,
                11: [1, 14],
                12: 4,
                17: $V3,
                18: $V4,
                19: $V5,
                21: $V1
              }, {
                1: [2, 2]
              }, {
                14: 19,
                15: [1, 20],
                24: $V6
              }, o([15, 24], [2, 16]), o($V2, [2, 8], {
                1: [2, 1]
              }), o($V2, [2, 4]), {
                7: 18,
                10: 22,
                12: 4,
                17: $V3,
                18: $V4,
                19: $V5,
                21: $V1
              }, o($V2, [2, 6]), o($V2, [2, 7]), o($V2, [2, 11]), o($V2, [2, 12]), {
                20: [1, 23]
              }, o($V2, [2, 14]), {
                11: [1, 24]
              }, {
                16: 25,
                23: [1, 26]
              }, {
                11: [2, 18]
              }, o($V2, [2, 5]), o($V2, [2, 13]), o($V7, [2, 9]), {
                14: 27,
                24: $V6
              }, {
                24: [2, 17]
              }, {
                11: [1, 28]
              }, o($V7, [2, 10])],
              defaultActions: {
                5: [2, 15],
                7: [2, 2],
                21: [2, 18],
                26: [2, 17]
              },
              parseError: function parseError(str, hash) {
                if (hash.recoverable) {
                  this.trace(str);
                } else {
                  var error = new Error(str);
                  error.hash = hash;
                  throw error;
                }
              },
              parse: function parse(input) {
                var self = this,
                    stack = [0],
                    tstack = [],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = '',
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                var args = lstack.slice.call(arguments, 1);
                var lexer = Object.create(this.lexer);
                var sharedState = {
                  yy: {}
                };

                for (var k in this.yy) {
                  if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                  }
                }

                lexer.setInput(input, sharedState.yy);
                sharedState.yy.lexer = lexer;
                sharedState.yy.parser = this;

                if (typeof lexer.yylloc == 'undefined') {
                  lexer.yylloc = {};
                }

                var yyloc = lexer.yylloc;
                lstack.push(yyloc);
                var ranges = lexer.options && lexer.options.ranges;

                if (typeof sharedState.yy.parseError === 'function') {
                  this.parseError = sharedState.yy.parseError;
                } else {
                  this.parseError = Object.getPrototypeOf(this).parseError;
                }

                function popStack(n) {
                  stack.length = stack.length - 2 * n;
                  vstack.length = vstack.length - n;
                  lstack.length = lstack.length - n;
                }

                function lex() {
                  var token;
                  token = tstack.pop() || lexer.lex() || EOF;

                  if (typeof token !== 'number') {
                    if (token instanceof Array) {
                      tstack = token;
                      token = tstack.pop();
                    }

                    token = self.symbols_[token] || token;
                  }

                  return token;
                }

                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;

                while (true) {
                  state = stack[stack.length - 1];

                  if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                  } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                      symbol = lex();
                    }

                    action = table[state] && table[state][symbol];
                  }

                  if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];

                    for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                      }
                    }

                    if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }

                    this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                    });
                  }

                  if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                  }

                  switch (action[0]) {
                    case 1:
                      stack.push(symbol);
                      vstack.push(lexer.yytext);
                      lstack.push(lexer.yylloc);
                      stack.push(action[1]);
                      symbol = null;

                      if (!preErrorSymbol) {
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;

                        if (recovering > 0) {
                          recovering--;
                        }
                      } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                      }

                      break;

                    case 2:
                      len = this.productions_[action[1]][1];
                      yyval.$ = vstack[vstack.length - len];
                      yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                      };

                      if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                      }

                      r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                      if (typeof r !== 'undefined') {
                        return r;
                      }

                      if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                      }

                      stack.push(this.productions_[action[1]][0]);
                      vstack.push(yyval.$);
                      lstack.push(yyval._$);
                      newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                      stack.push(newState);
                      break;

                    case 3:
                      return true;
                  }
                }

                return true;
              }
            };
            /* generated by jison-lex 0.3.4 */

            var lexer = function () {
              var lexer = {
                EOF: 1,
                parseError: function parseError(str, hash) {
                  if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                  } else {
                    throw new Error(str);
                  }
                },
                // resets the lexer, sets new input
                setInput: function (input, yy) {
                  this.yy = yy || this.yy || {};
                  this._input = input;
                  this._more = this._backtrack = this.done = false;
                  this.yylineno = this.yyleng = 0;
                  this.yytext = this.matched = this.match = '';
                  this.conditionStack = ['INITIAL'];
                  this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                  }

                  this.offset = 0;
                  return this;
                },
                // consumes and returns one char from the input
                input: function () {
                  var ch = this._input[0];
                  this.yytext += ch;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch;
                  this.matched += ch;
                  var lines = ch.match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                  } else {
                    this.yylloc.last_column++;
                  }

                  if (this.options.ranges) {
                    this.yylloc.range[1]++;
                  }

                  this._input = this._input.slice(1);
                  return ch;
                },
                // unshifts one char (or a string) into the input
                unput: function (ch) {
                  var len = ch.length;
                  var lines = ch.split(/(?:\r\n?|\n)/g);
                  this._input = ch + this._input;
                  this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

                  this.offset -= len;
                  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                  this.match = this.match.substr(0, this.match.length - 1);
                  this.matched = this.matched.substr(0, this.matched.length - 1);

                  if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                  }

                  var r = this.yylloc.range;
                  this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                  };

                  if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                  }

                  this.yyleng = this.yytext.length;
                  return this;
                },
                // When called from action, caches matched text and appends it on next action
                more: function () {
                  this._more = true;
                  return this;
                },
                // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                reject: function () {
                  if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }

                  return this;
                },
                // retain first n characters of the match
                less: function (n) {
                  this.unput(this.match.slice(n));
                },
                // displays already matched input, i.e. for error messages
                pastInput: function () {
                  var past = this.matched.substr(0, this.matched.length - this.match.length);
                  return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                // displays upcoming input, i.e. for error messages
                upcomingInput: function () {
                  var next = this.match;

                  if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                  }

                  return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                // displays the character position where the lexing error occurred, i.e. for error messages
                showPosition: function () {
                  var pre = this.pastInput();
                  var c = new Array(pre.length + 1).join("-");
                  return pre + this.upcomingInput() + "\n" + c + "^";
                },
                // test the lexed token: return FALSE when not a match, otherwise return token
                test_match: function (match, indexed_rule) {
                  var token, lines, backup;

                  if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                      yylineno: this.yylineno,
                      yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                      },
                      yytext: this.yytext,
                      match: this.match,
                      matches: this.matches,
                      matched: this.matched,
                      yyleng: this.yyleng,
                      offset: this.offset,
                      _more: this._more,
                      _input: this._input,
                      yy: this.yy,
                      conditionStack: this.conditionStack.slice(0),
                      done: this.done
                    };

                    if (this.options.ranges) {
                      backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                  }

                  lines = match[0].match(/(?:\r\n?|\n).*/g);

                  if (lines) {
                    this.yylineno += lines.length;
                  }

                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;

                  if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                  }

                  this._more = false;
                  this._backtrack = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

                  if (this.done && this._input) {
                    this.done = false;
                  }

                  if (token) {
                    return token;
                  } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                      this[k] = backup[k];
                    }

                    return false; // rule action called reject() implying the next rule should be tested instead.
                  }

                  return false;
                },
                // return next match in input
                next: function () {
                  if (this.done) {
                    return this.EOF;
                  }

                  if (!this._input) {
                    this.done = true;
                  }

                  var token, match, tempMatch, index;

                  if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                  }

                  var rules = this._currentRules();

                  for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);

                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                      match = tempMatch;
                      index = i;

                      if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);

                        if (token !== false) {
                          return token;
                        } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                        }
                      } else if (!this.options.flex) {
                        break;
                      }
                    }
                  }

                  if (match) {
                    token = this.test_match(match, rules[index]);

                    if (token !== false) {
                      return token;
                    } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


                    return false;
                  }

                  if (this._input === "") {
                    return this.EOF;
                  } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                      text: "",
                      token: null,
                      line: this.yylineno
                    });
                  }
                },
                // return next match that has a token
                lex: function lex() {
                  var r = this.next();

                  if (r) {
                    return r;
                  } else {
                    return this.lex();
                  }
                },
                // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                begin: function begin(condition) {
                  this.conditionStack.push(condition);
                },
                // pop the previously active lexer condition state off the condition stack
                popState: function popState() {
                  var n = this.conditionStack.length - 1;

                  if (n > 0) {
                    return this.conditionStack.pop();
                  } else {
                    return this.conditionStack[0];
                  }
                },
                // produce the lexer rule set which is active for the currently active lexer condition state
                _currentRules: function _currentRules() {
                  if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                  } else {
                    return this.conditions["INITIAL"].rules;
                  }
                },
                // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                topState: function topState(n) {
                  n = this.conditionStack.length - 1 - Math.abs(n || 0);

                  if (n >= 0) {
                    return this.conditionStack[n];
                  } else {
                    return "INITIAL";
                  }
                },
                // alias for begin(condition)
                pushState: function pushState(condition) {
                  this.begin(condition);
                },
                // return the number of states currently on the stack
                stateStackSize: function stateStackSize() {
                  return this.conditionStack.length;
                },
                options: {
                  "case-insensitive": true
                },
                performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                  var YYSTATE = YY_START;

                  switch ($avoiding_name_collisions) {
                    case 0:
                      this.begin('open_directive');
                      return 21;
                      break;

                    case 1:
                      this.begin('type_directive');
                      return 22;
                      break;

                    case 2:
                      this.popState();
                      this.begin('arg_directive');
                      return 15;
                      break;

                    case 3:
                      this.popState();
                      this.popState();
                      return 24;
                      break;

                    case 4:
                      return 23;
                      break;

                    case 5:
                      /* skip comments */
                      break;

                    case 6:
                      /* skip comments */
                      break;

                    case 7:
                      return 11;
                      break;

                    case 8:
                      /* skip whitespace */
                      break;

                    case 9:
                      /* skip comments */
                      break;

                    case 10:
                      return 4;
                      break;

                    case 11:
                      return 17;
                      break;

                    case 12:
                      return 18;
                      break;

                    case 13:
                      return 19;
                      break;

                    case 14:
                      return 20;
                      break;

                    case 15:
                      return 15;
                      break;

                    case 16:
                      return 6;
                      break;

                    case 17:
                      return 'INVALID';
                      break;
                  }
                },
                rules: [/^(?:%%\{)/i, /^(?:((?:(?!\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\}%%)/i, /^(?:((?:(?!\}%%).|\n)*))/i, /^(?:%(?!\{)[^\n]*)/i, /^(?:[^\}]%%[^\n]*)/i, /^(?:[\n]+)/i, /^(?:\s+)/i, /^(?:#[^\n]*)/i, /^(?:journey\b)/i, /^(?:title\s[^#\n;]+)/i, /^(?:section\s[^#:\n;]+)/i, /^(?:[^#:\n;]+)/i, /^(?::[^#\n;]+)/i, /^(?::)/i, /^(?:$)/i, /^(?:.)/i],
                conditions: {
                  "open_directive": {
                    "rules": [1],
                    "inclusive": false
                  },
                  "type_directive": {
                    "rules": [2, 3],
                    "inclusive": false
                  },
                  "arg_directive": {
                    "rules": [3, 4],
                    "inclusive": false
                  },
                  "INITIAL": {
                    "rules": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
                    "inclusive": true
                  }
                }
              };
              return lexer;
            }();

            parser.lexer = lexer;

            function Parser() {
              this.yy = {};
            }

            Parser.prototype = parser;
            parser.Parser = Parser;
            return new Parser();
          }();

          if (true) {
            exports.parser = parser;
            exports.Parser = parser.Parser;

            exports.parse = function () {
              return parser.parse.apply(parser, arguments);
            };

            exports.main = function commonjsMain(args) {
              if (!args[1]) {
                console.log('Usage: ' + args[0] + ' FILE');
                process.exit(1);
              }

              var source = __webpack_require__(
              /*! fs */
              "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(
              /*! path */
              "./node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

              return exports.parser.parse(source);
            };

            if (true && __webpack_require__.c[__webpack_require__.s] === module) {
              exports.main(process.argv.slice(1));
            }
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__(
        /*! ./../../../../node_modules/process/browser.js */
        "./node_modules/process/browser.js"), __webpack_require__(
        /*! ./../../../../node_modules/webpack/buildin/module.js */
        "./node_modules/webpack/buildin/module.js")(module));
        /***/
      },

      /***/
      "./src/diagrams/user-journey/styles.js":
      /*!*********************************************!*\
        !*** ./src/diagrams/user-journey/styles.js ***!
        \*********************************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);

        var getStyles = function getStyles(options) {
          return ".label {\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n    color: ".concat(options.textColor, ";\n  }\n  .mouth {\n    stroke: #666;\n  }\n\n  line {\n    stroke: ").concat(options.textColor, "\n  }\n\n  .legend {\n    fill: ").concat(options.textColor, ";\n  }\n\n  .label text {\n    fill: #333;\n  }\n  .label {\n    color: ").concat(options.textColor, "\n  }\n\n  .face {\n    fill: #FFF8DC;\n    stroke: #999;\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ").concat(options.mainBkg, ";\n    stroke: ").concat(options.nodeBorder, ";\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ").concat(options.arrowheadColor, ";\n  }\n\n  .edgePath .path {\n    stroke: ").concat(options.lineColor, ";\n    stroke-width: 1.5px;\n  }\n\n  .flowchart-link {\n    stroke: ").concat(options.lineColor, ";\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ").concat(options.edgeLabelBackground, ";\n    rect {\n      opacity: 0.5;\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n  }\n\n  .cluster text {\n    fill: ").concat(options.titleColor, ";\n  }\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n    font-size: 12px;\n    background: ").concat(options.tertiaryColor, ";\n    border: 1px solid ").concat(options.border2, ";\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .task-type-0, .section-type-0  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType0) : '', ";\n  }\n  .task-type-1, .section-type-1  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType1) : '', ";\n  }\n  .task-type-2, .section-type-2  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType2) : '', ";\n  }\n  .task-type-3, .section-type-3  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType3) : '', ";\n  }\n  .task-type-4, .section-type-4  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType4) : '', ";\n  }\n  .task-type-5, .section-type-5  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType5) : '', ";\n  }\n  .task-type-6, .section-type-6  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType6) : '', ";\n  }\n  .task-type-7, .section-type-7  {\n    ").concat(options.fillType0 ? "fill: ".concat(options.fillType7) : '', ";\n  }\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/diagrams/user-journey/svgDraw.js":
      /*!**********************************************!*\
        !*** ./src/diagrams/user-journey/svgDraw.js ***!
        \**********************************************/

      /*! exports provided: drawRect, drawFace, drawCircle, drawText, drawLabel, drawSection, drawTask, drawBackgroundRect, getTextObj, getNoteRect, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawRect", function () {
          return drawRect;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawFace", function () {
          return drawFace;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawCircle", function () {
          return drawCircle;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawText", function () {
          return drawText;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawLabel", function () {
          return drawLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawSection", function () {
          return drawSection;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawTask", function () {
          return drawTask;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawBackgroundRect", function () {
          return drawBackgroundRect;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTextObj", function () {
          return getTextObj;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getNoteRect", function () {
          return getNoteRect;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);

        var drawRect = function drawRect(elem, rectData) {
          var rectElem = elem.append('rect');
          rectElem.attr('x', rectData.x);
          rectElem.attr('y', rectData.y);
          rectElem.attr('fill', rectData.fill);
          rectElem.attr('stroke', rectData.stroke);
          rectElem.attr('width', rectData.width);
          rectElem.attr('height', rectData.height);
          rectElem.attr('rx', rectData.rx);
          rectElem.attr('ry', rectData.ry);

          if (typeof rectData.class !== 'undefined') {
            rectElem.attr('class', rectData.class);
          }

          return rectElem;
        };

        var drawFace = function drawFace(element, faceData) {
          var radius = 15;
          var circleElement = element.append('circle').attr('cx', faceData.cx).attr('cy', faceData.cy).attr('class', 'face').attr('r', radius).attr('stroke-width', 2).attr('overflow', 'visible');
          var face = element.append('g'); //left eye

          face.append('circle').attr('cx', faceData.cx - radius / 3).attr('cy', faceData.cy - radius / 3).attr('r', 1.5).attr('stroke-width', 2).attr('fill', '#666').attr('stroke', '#666'); //right eye

          face.append('circle').attr('cx', faceData.cx + radius / 3).attr('cy', faceData.cy - radius / 3).attr('r', 1.5).attr('stroke-width', 2).attr('fill', '#666').attr('stroke', '#666');

          function smile(face) {
            var arc = Object(d3__WEBPACK_IMPORTED_MODULE_0__["arc"])().startAngle(Math.PI / 2).endAngle(3 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2); //mouth

            face.append('path').attr('class', 'mouth').attr('d', arc).attr('transform', 'translate(' + faceData.cx + ',' + (faceData.cy + 2) + ')');
          }

          function sad(face) {
            var arc = Object(d3__WEBPACK_IMPORTED_MODULE_0__["arc"])().startAngle(3 * Math.PI / 2).endAngle(5 * (Math.PI / 2)).innerRadius(radius / 2).outerRadius(radius / 2.2); //mouth

            face.append('path').attr('class', 'mouth').attr('d', arc).attr('transform', 'translate(' + faceData.cx + ',' + (faceData.cy + 7) + ')');
          }

          function ambivalent(face) {
            face.append('line').attr('class', 'mouth').attr('stroke', 2).attr('x1', faceData.cx - 5).attr('y1', faceData.cy + 7).attr('x2', faceData.cx + 5).attr('y2', faceData.cy + 7).attr('class', 'mouth').attr('stroke-width', '1px').attr('stroke', '#666');
          }

          if (faceData.score > 3) {
            smile(face);
          } else if (faceData.score < 3) {
            sad(face);
          } else {
            ambivalent(face);
          }

          return circleElement;
        };

        var drawCircle = function drawCircle(element, circleData) {
          var circleElement = element.append('circle');
          circleElement.attr('cx', circleData.cx);
          circleElement.attr('cy', circleData.cy);
          circleElement.attr('fill', circleData.fill);
          circleElement.attr('stroke', circleData.stroke);
          circleElement.attr('r', circleData.r);

          if (typeof circleElement.class !== 'undefined') {
            circleElement.attr('class', circleElement.class);
          }

          if (typeof circleData.title !== 'undefined') {
            circleElement.append('title').text(circleData.title);
          }

          return circleElement;
        };

        var drawText = function drawText(elem, textData) {
          // Remove and ignore br:s
          var nText = textData.text.replace(/<br\s*\/?>/gi, ' ');
          var textElem = elem.append('text');
          textElem.attr('x', textData.x);
          textElem.attr('y', textData.y);
          textElem.attr('class', 'legend');
          textElem.style('text-anchor', textData.anchor);

          if (typeof textData.class !== 'undefined') {
            textElem.attr('class', textData.class);
          }

          var span = textElem.append('tspan');
          span.attr('x', textData.x + textData.textMargin * 2);
          span.text(nText);
          return textElem;
        };

        var drawLabel = function drawLabel(elem, txtObject) {
          function genPoints(x, y, width, height, cut) {
            return x + ',' + y + ' ' + (x + width) + ',' + y + ' ' + (x + width) + ',' + (y + height - cut) + ' ' + (x + width - cut * 1.2) + ',' + (y + height) + ' ' + x + ',' + (y + height);
          }

          var polygon = elem.append('polygon');
          polygon.attr('points', genPoints(txtObject.x, txtObject.y, 50, 20, 7));
          polygon.attr('class', 'labelBox');
          txtObject.y = txtObject.y + txtObject.labelMargin;
          txtObject.x = txtObject.x + 0.5 * txtObject.labelMargin;
          drawText(elem, txtObject);
        };

        var drawSection = function drawSection(elem, section, conf) {
          var g = elem.append('g');
          var rect = getNoteRect();
          rect.x = section.x;
          rect.y = section.y;
          rect.fill = section.fill;
          rect.width = conf.width;
          rect.height = conf.height;
          rect.class = 'journey-section section-type-' + section.num;
          rect.rx = 3;
          rect.ry = 3;
          drawRect(g, rect);

          _drawTextCandidateFunc(conf)(section.text, g, rect.x, rect.y, rect.width, rect.height, {
            class: 'journey-section section-type-' + section.num
          }, conf, section.colour);
        };

        var taskCount = -1;
        /**
         * Draws an actor in the diagram with the attaced line
         * @param elem The HTML element
         * @param task The task to render
         * @param conf The global configuration
         */

        var drawTask = function drawTask(elem, task, conf) {
          var center = task.x + conf.width / 2;
          var g = elem.append('g');
          taskCount++;
          var maxHeight = 300 + 5 * 30;
          g.append('line').attr('id', 'task' + taskCount).attr('x1', center).attr('y1', task.y).attr('x2', center).attr('y2', maxHeight).attr('class', 'task-line').attr('stroke-width', '1px').attr('stroke-dasharray', '4 2').attr('stroke', '#666');
          drawFace(g, {
            cx: center,
            cy: 300 + (5 - task.score) * 30,
            score: task.score
          });
          var rect = getNoteRect();
          rect.x = task.x;
          rect.y = task.y;
          rect.fill = task.fill;
          rect.width = conf.width;
          rect.height = conf.height;
          rect.class = 'task task-type-' + task.num;
          rect.rx = 3;
          rect.ry = 3;
          drawRect(g, rect);
          var xPos = task.x + 14;
          task.people.forEach(function (person) {
            var colour = task.actors[person];
            var circle = {
              cx: xPos,
              cy: task.y,
              r: 7,
              fill: colour,
              stroke: '#000',
              title: person
            };
            drawCircle(g, circle);
            xPos += 10;
          });

          _drawTextCandidateFunc(conf)(task.task, g, rect.x, rect.y, rect.width, rect.height, {
            class: 'task'
          }, conf, task.colour);
        };
        /**
         * Draws a background rectangle
         * @param elem The html element
         * @param bounds The bounds of the drawing
         */


        var drawBackgroundRect = function drawBackgroundRect(elem, bounds) {
          var rectElem = drawRect(elem, {
            x: bounds.startx,
            y: bounds.starty,
            width: bounds.stopx - bounds.startx,
            height: bounds.stopy - bounds.starty,
            fill: bounds.fill,
            class: 'rect'
          });
          rectElem.lower();
        };

        var getTextObj = function getTextObj() {
          return {
            x: 0,
            y: 0,
            fill: undefined,
            'text-anchor': 'start',
            width: 100,
            height: 100,
            textMargin: 0,
            rx: 0,
            ry: 0
          };
        };

        var getNoteRect = function getNoteRect() {
          return {
            x: 0,
            y: 0,
            width: 100,
            anchor: 'start',
            height: 100,
            rx: 0,
            ry: 0
          };
        };

        var _drawTextCandidateFunc = function () {
          function byText(content, g, x, y, width, height, textAttrs, colour) {
            var text = g.append('text').attr('x', x + width / 2).attr('y', y + height / 2 + 5).style('font-color', colour).style('text-anchor', 'middle').text(content);

            _setTextAttrs(text, textAttrs);
          }

          function byTspan(content, g, x, y, width, height, textAttrs, conf, colour) {
            var taskFontSize = conf.taskFontSize,
                taskFontFamily = conf.taskFontFamily;
            var lines = content.split(/<br\s*\/?>/gi);

            for (var i = 0; i < lines.length; i++) {
              var dy = i * taskFontSize - taskFontSize * (lines.length - 1) / 2;
              var text = g.append('text').attr('x', x + width / 2).attr('y', y).attr('fill', colour).style('text-anchor', 'middle').style('font-size', taskFontSize).style('font-family', taskFontFamily);
              text.append('tspan').attr('x', x + width / 2).attr('dy', dy).text(lines[i]);
              text.attr('y', y + height / 2.0).attr('dominant-baseline', 'central').attr('alignment-baseline', 'central');

              _setTextAttrs(text, textAttrs);
            }
          }

          function byFo(content, g, x, y, width, height, textAttrs, conf) {
            var body = g.append('switch');
            var f = body.append('foreignObject').attr('x', x).attr('y', y).attr('width', width).attr('height', height).attr('position', 'fixed');
            var text = f.append('div').style('display', 'table').style('height', '100%').style('width', '100%');
            text.append('div').attr('class', 'label').style('display', 'table-cell').style('text-align', 'center').style('vertical-align', 'middle') // .style('color', colour)
            .text(content);
            byTspan(content, body, x, y, width, height, textAttrs, conf);

            _setTextAttrs(text, textAttrs);
          }

          function _setTextAttrs(toText, fromTextAttrsDict) {
            for (var key in fromTextAttrsDict) {
              if (key in fromTextAttrsDict) {
                // eslint-disable-line
                // noinspection JSUnfilteredForInLoop
                toText.attr(key, fromTextAttrsDict[key]);
              }
            }
          }

          return function (conf) {
            return conf.textPlacement === 'fo' ? byFo : conf.textPlacement === 'old' ? byText : byTspan;
          };
        }();

        var initGraphics = function initGraphics(graphics) {
          graphics.append('defs').append('marker').attr('id', 'arrowhead').attr('refX', 5).attr('refY', 2).attr('markerWidth', 6).attr('markerHeight', 4).attr('orient', 'auto').append('path').attr('d', 'M 0,0 V 4 L6,2 Z'); // this is actual shape for arrowhead
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          drawRect: drawRect,
          drawCircle: drawCircle,
          drawSection: drawSection,
          drawText: drawText,
          drawLabel: drawLabel,
          drawTask: drawTask,
          drawBackgroundRect: drawBackgroundRect,
          getTextObj: getTextObj,
          getNoteRect: getNoteRect,
          initGraphics: initGraphics
        };
        /***/
      },

      /***/
      "./src/errorRenderer.js":
      /*!******************************!*\
        !*** ./src/errorRenderer.js ***!
        \******************************/

      /*! exports provided: setConf, draw, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setConf", function () {
          return setConf;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "draw", function () {
          return draw;
        });
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./logger */
        "./src/logger.js");
        /**
         * Created by knut on 14-12-11.
         */


        var conf = {};

        var setConf = function setConf(cnf) {
          var keys = Object.keys(cnf);
          keys.forEach(function (key) {
            conf[key] = cnf[key];
          });
        };
        /**
         * Draws a an info picture in the tag with id: id based on the graph definition in text.
         * @param text
         * @param id
         */


        var draw = function draw(id, ver) {
          try {
            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Renering svg for syntax error\n');

            var svg = Object(d3__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + id);
            var g = svg.append('g');
            g.append('path').attr('class', 'error-icon').attr('d', 'm411.313,123.313c6.25-6.25 6.25-16.375 0-22.625s-16.375-6.25-22.625,0l-32,32-9.375,9.375-20.688-20.688c-12.484-12.5-32.766-12.5-45.25,0l-16,16c-1.261,1.261-2.304,2.648-3.31,4.051-21.739-8.561-45.324-13.426-70.065-13.426-105.867,0-192,86.133-192,192s86.133,192 192,192 192-86.133 192-192c0-24.741-4.864-48.327-13.426-70.065 1.402-1.007 2.79-2.049 4.051-3.31l16-16c12.5-12.492 12.5-32.758 0-45.25l-20.688-20.688 9.375-9.375 32.001-31.999zm-219.313,100.687c-52.938,0-96,43.063-96,96 0,8.836-7.164,16-16,16s-16-7.164-16-16c0-70.578 57.422-128 128-128 8.836,0 16,7.164 16,16s-7.164,16-16,16z');
            g.append('path').attr('class', 'error-icon').attr('d', 'm459.02,148.98c-6.25-6.25-16.375-6.25-22.625,0s-6.25,16.375 0,22.625l16,16c3.125,3.125 7.219,4.688 11.313,4.688 4.094,0 8.188-1.563 11.313-4.688 6.25-6.25 6.25-16.375 0-22.625l-16.001-16z');
            g.append('path').attr('class', 'error-icon').attr('d', 'm340.395,75.605c3.125,3.125 7.219,4.688 11.313,4.688 4.094,0 8.188-1.563 11.313-4.688 6.25-6.25 6.25-16.375 0-22.625l-16-16c-6.25-6.25-16.375-6.25-22.625,0s-6.25,16.375 0,22.625l15.999,16z');
            g.append('path').attr('class', 'error-icon').attr('d', 'm400,64c8.844,0 16-7.164 16-16v-32c0-8.836-7.156-16-16-16-8.844,0-16,7.164-16,16v32c0,8.836 7.156,16 16,16z');
            g.append('path').attr('class', 'error-icon').attr('d', 'm496,96.586h-32c-8.844,0-16,7.164-16,16 0,8.836 7.156,16 16,16h32c8.844,0 16-7.164 16-16 0-8.836-7.156-16-16-16z');
            g.append('path').attr('class', 'error-icon').attr('d', 'm436.98,75.605c3.125,3.125 7.219,4.688 11.313,4.688 4.094,0 8.188-1.563 11.313-4.688l32-32c6.25-6.25 6.25-16.375 0-22.625s-16.375-6.25-22.625,0l-32,32c-6.251,6.25-6.251,16.375-0.001,22.625z');
            g.append('text') // text label for the x axis
            .attr('class', 'error-text').attr('x', 1240).attr('y', 250).attr('font-size', '150px').style('text-anchor', 'middle').text('Syntax error in graph');
            g.append('text') // text label for the x axis
            .attr('class', 'error-text').attr('x', 1050).attr('y', 400).attr('font-size', '100px').style('text-anchor', 'middle').text('mermaid version ' + ver);
            svg.attr('height', 100);
            svg.attr('width', 400);
            svg.attr('viewBox', '768 0 512 512');
          } catch (e) {
            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].error('Error while rendering info diagram');

            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].error(e.message);
          }
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          setConf: setConf,
          draw: draw
        };
        /***/
      },

      /***/
      "./src/logger.js":
      /*!***********************!*\
        !*** ./src/logger.js ***!
        \***********************/

      /*! exports provided: LEVELS, log, setLogLevel */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "LEVELS", function () {
          return LEVELS;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "log", function () {
          return log;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "setLogLevel", function () {
          return setLogLevel;
        });
        /* harmony import */


        var moment_mini__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! moment-mini */
        "moment-mini");
        /* harmony import */


        var moment_mini__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment_mini__WEBPACK_IMPORTED_MODULE_0__);

        var LEVELS = {
          debug: 1,
          info: 2,
          warn: 3,
          error: 4,
          fatal: 5
        };
        var log = {
          debug: function debug() {},
          info: function info() {},
          warn: function warn() {},
          error: function error() {},
          fatal: function fatal() {}
        };

        var setLogLevel = function setLogLevel() {
          var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'fatal';

          if (isNaN(level)) {
            level = level.toLowerCase();

            if (LEVELS[level] !== undefined) {
              level = LEVELS[level];
            }
          }

          log.trace = function () {};

          log.debug = function () {};

          log.info = function () {};

          log.warn = function () {};

          log.error = function () {};

          log.fatal = function () {};

          if (level <= LEVELS.fatal) {
            log.fatal = console.error ? console.error.bind(console, format('FATAL'), 'color: orange') : console.log.bind(console, '\x1b[35m', format('FATAL'));
          }

          if (level <= LEVELS.error) {
            log.error = console.error ? console.error.bind(console, format('ERROR'), 'color: orange') : console.log.bind(console, '\x1b[31m', format('ERROR'));
          }

          if (level <= LEVELS.warn) {
            log.warn = console.warn ? console.warn.bind(console, format('WARN'), 'color: orange') : console.log.bind(console, "\x1B[33m", format('WARN'));
          }

          if (level <= LEVELS.info) {
            log.info = console.info // ? console.info.bind(console, '\x1b[34m', format('INFO'), 'color: blue')
            ? console.info.bind(console, format('INFO'), 'color: lightblue') : console.log.bind(console, '\x1b[34m', format('INFO'));
          }

          if (level <= LEVELS.debug) {
            log.debug = console.debug ? console.debug.bind(console, format('DEBUG'), 'color: lightgreen') : console.log.bind(console, '\x1b[32m', format('DEBUG'));
          }
        };

        var format = function format(level) {
          var time = moment_mini__WEBPACK_IMPORTED_MODULE_0___default()().format('ss.SSS');
          return "%c".concat(time, " : ").concat(level, " : ");
        };
        /***/

      },

      /***/
      "./src/mermaid.js":
      /*!************************!*\
        !*** ./src/mermaid.js ***!
        \************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var entity_decode_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! entity-decode/browser */
        "entity-decode/browser");
        /* harmony import */


        var entity_decode_browser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(entity_decode_browser__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./logger */
        "./src/logger.js");
        /* harmony import */


        var _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./mermaidAPI */
        "./src/mermaidAPI.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./utils */
        "./src/utils.js");
        /**
         * Web page integration module for the mermaid framework. It uses the mermaidAPI for mermaid functionality and to render
         * the diagrams to svg code.
         */
        // import { decode } from 'he';

        /**
         * ## init
         * Function that goes through the document to find the chart definitions in there and render them.
         *
         * The function tags the processed attributes with the attribute data-processed and ignores found elements with the
         * attribute already set. This way the init function can be triggered several times.
         *
         * Optionally, `init` can accept in the second argument one of the following:
         * - a DOM Node
         * - an array of DOM nodes (as would come from a jQuery selector)
         * - a W3C selector, a la `.mermaid`
         *
         * ```mermaid
         * graph LR;
         *  a(Find elements)-->b{Processed}
         *  b-->|Yes|c(Leave element)
         *  b-->|No |d(Transform)
         * ```
         * Renders the mermaid diagrams
         * @param nodes a css selector or an array of nodes
         */


        var init = function init() {
          var _this = this;

          var conf = _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].getConfig(); // console.log('Starting rendering diagrams (init) - mermaid.init', conf);


          var nodes;

          if (arguments.length >= 2) {
            /*! sequence config was passed as #1 */
            if (typeof arguments[0] !== 'undefined') {
              mermaid.sequenceConfig = arguments[0];
            }

            nodes = arguments[1];
          } else {
            nodes = arguments[0];
          } // if last argument is a function this is the callback function


          var callback;

          if (typeof arguments[arguments.length - 1] === 'function') {
            callback = arguments[arguments.length - 1];

            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Callback function found');
          } else {
            if (typeof conf.mermaid !== 'undefined') {
              if (typeof conf.mermaid.callback === 'function') {
                callback = conf.mermaid.callback;

                _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Callback function found');
              } else {
                _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('No Callback function found');
              }
            }
          }

          nodes = nodes === undefined ? document.querySelectorAll('.mermaid') : typeof nodes === 'string' ? document.querySelectorAll(nodes) : nodes instanceof window.Node ? [nodes] : nodes; // Last case  - sequence config was passed pick next

          _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Start On Load before: ' + mermaid.startOnLoad);

          if (typeof mermaid.startOnLoad !== 'undefined') {
            _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Start On Load inner: ' + mermaid.startOnLoad);

            _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].updateSiteConfig({
              startOnLoad: mermaid.startOnLoad
            });
          }

          if (typeof mermaid.ganttConfig !== 'undefined') {
            _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].updateSiteConfig({
              gantt: mermaid.ganttConfig
            });
          }

          var nextId = _utils__WEBPACK_IMPORTED_MODULE_3__["default"].initIdGeneratior(conf.deterministicIds, conf.deterministicIDSeed).next;

          var txt;

          var _loop = function _loop(i) {
            var element = nodes[i];
            /*! Check if previously processed */

            if (!element.getAttribute('data-processed')) {
              element.setAttribute('data-processed', true);
            } else {
              return "continue";
            }

            var id = "mermaid-".concat(nextId()); // Fetch the graph definition including tags

            txt = element.innerHTML; // transforms the html to pure text

            txt = entity_decode_browser__WEBPACK_IMPORTED_MODULE_0___default()(txt).trim().replace(/<br\s*\/?>/gi, '<br/>');

            var init = _utils__WEBPACK_IMPORTED_MODULE_3__["default"].detectInit(txt);

            if (init) {
              _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('Detected early reinit: ', init);
            }

            try {
              _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].render(id, txt, function (svgCode, bindFunctions) {
                element.innerHTML = svgCode;

                if (typeof callback !== 'undefined') {
                  callback(id);
                }

                if (bindFunctions) bindFunctions(element);
              }, element);
            } catch (e) {
              _logger__WEBPACK_IMPORTED_MODULE_1__["log"].warn('Syntax Error rendering');

              _logger__WEBPACK_IMPORTED_MODULE_1__["log"].warn(e);

              if (_this.parseError) {
                _this.parseError(e);
              }
            }
          };

          for (var i = 0; i < nodes.length; i++) {
            var _ret = _loop(i);

            if (_ret === "continue") continue;
          }
        };

        var initialize = function initialize(config) {
          // mermaidAPI.reset();
          if (typeof config.mermaid !== 'undefined') {
            if (typeof config.mermaid.startOnLoad !== 'undefined') {
              mermaid.startOnLoad = config.mermaid.startOnLoad;
            }

            if (typeof config.mermaid.htmlLabels !== 'undefined') {
              mermaid.htmlLabels = config.mermaid.htmlLabels;
            }
          }

          _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].initialize(config); // mermaidAPI.reset();

        };
        /**
         * ##contentLoaded
         * Callback function that is called when page is loaded. This functions fetches configuration for mermaid rendering and
         * calls init for rendering the mermaid diagrams on the page.
         */


        var contentLoaded = function contentLoaded() {
          var config;

          if (mermaid.startOnLoad) {
            // No config found, do check API config
            config = _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].getConfig();

            if (config.startOnLoad) {
              mermaid.init();
            }
          } else {
            if (typeof mermaid.startOnLoad === 'undefined') {
              _logger__WEBPACK_IMPORTED_MODULE_1__["log"].debug('In start, no config');

              config = _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].getConfig();

              if (config.startOnLoad) {
                mermaid.init();
              }
            }
          }
        };

        if (typeof document !== 'undefined') {
          /*!
           * Wait for document loaded before starting the execution
           */
          window.addEventListener('load', function () {
            contentLoaded();
          }, false);
        }

        var mermaid = {
          startOnLoad: true,
          htmlLabels: true,
          mermaidAPI: _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"],
          parse: _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].parse,
          render: _mermaidAPI__WEBPACK_IMPORTED_MODULE_2__["default"].render,
          init: init,
          initialize: initialize,
          contentLoaded: contentLoaded
        };
        /* harmony default export */

        __webpack_exports__["default"] = mermaid;
        /***/
      },

      /***/
      "./src/mermaidAPI.js":
      /*!***************************!*\
        !*** ./src/mermaidAPI.js ***!
        \***************************/

      /*! exports provided: encodeEntities, decodeEntities, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "encodeEntities", function () {
          return encodeEntities;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "decodeEntities", function () {
          return decodeEntities;
        });
        /* harmony import */


        var stylis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! stylis */
        "stylis");
        /* harmony import */


        var stylis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stylis__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ../package.json */
        "./package.json");

        var _package_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(
        /*! ../package.json */
        "./package.json", 1);
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./logger */
        "./src/logger.js");
        /* harmony import */


        var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./utils */
        "./src/utils.js");
        /* harmony import */


        var _diagrams_flowchart_flowRenderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./diagrams/flowchart/flowRenderer */
        "./src/diagrams/flowchart/flowRenderer.js");
        /* harmony import */


        var _diagrams_flowchart_flowRenderer_v2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./diagrams/flowchart/flowRenderer-v2 */
        "./src/diagrams/flowchart/flowRenderer-v2.js");
        /* harmony import */


        var _diagrams_flowchart_parser_flow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ./diagrams/flowchart/parser/flow */
        "./src/diagrams/flowchart/parser/flow.jison");
        /* harmony import */


        var _diagrams_flowchart_parser_flow__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_diagrams_flowchart_parser_flow__WEBPACK_IMPORTED_MODULE_7__);
        /* harmony import */


        var _diagrams_flowchart_flowDb__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ./diagrams/flowchart/flowDb */
        "./src/diagrams/flowchart/flowDb.js");
        /* harmony import */


        var _diagrams_sequence_sequenceRenderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ./diagrams/sequence/sequenceRenderer */
        "./src/diagrams/sequence/sequenceRenderer.js");
        /* harmony import */


        var _diagrams_sequence_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
        /*! ./diagrams/sequence/parser/sequenceDiagram */
        "./src/diagrams/sequence/parser/sequenceDiagram.jison");
        /* harmony import */


        var _diagrams_sequence_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_diagrams_sequence_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_10__);
        /* harmony import */


        var _diagrams_sequence_sequenceDb__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
        /*! ./diagrams/sequence/sequenceDb */
        "./src/diagrams/sequence/sequenceDb.js");
        /* harmony import */


        var _diagrams_gantt_ganttRenderer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
        /*! ./diagrams/gantt/ganttRenderer */
        "./src/diagrams/gantt/ganttRenderer.js");
        /* harmony import */


        var _diagrams_gantt_parser_gantt__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
        /*! ./diagrams/gantt/parser/gantt */
        "./src/diagrams/gantt/parser/gantt.jison");
        /* harmony import */


        var _diagrams_gantt_parser_gantt__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_diagrams_gantt_parser_gantt__WEBPACK_IMPORTED_MODULE_13__);
        /* harmony import */


        var _diagrams_gantt_ganttDb__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
        /*! ./diagrams/gantt/ganttDb */
        "./src/diagrams/gantt/ganttDb.js");
        /* harmony import */


        var _diagrams_class_classRenderer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
        /*! ./diagrams/class/classRenderer */
        "./src/diagrams/class/classRenderer.js");
        /* harmony import */


        var _diagrams_class_classRenderer_v2__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
        /*! ./diagrams/class/classRenderer-v2 */
        "./src/diagrams/class/classRenderer-v2.js");
        /* harmony import */


        var _diagrams_class_parser_classDiagram__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
        /*! ./diagrams/class/parser/classDiagram */
        "./src/diagrams/class/parser/classDiagram.jison");
        /* harmony import */


        var _diagrams_class_parser_classDiagram__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_diagrams_class_parser_classDiagram__WEBPACK_IMPORTED_MODULE_17__);
        /* harmony import */


        var _diagrams_class_classDb__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
        /*! ./diagrams/class/classDb */
        "./src/diagrams/class/classDb.js");
        /* harmony import */


        var _diagrams_state_stateRenderer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
        /*! ./diagrams/state/stateRenderer */
        "./src/diagrams/state/stateRenderer.js");
        /* harmony import */


        var _diagrams_state_stateRenderer_v2__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
        /*! ./diagrams/state/stateRenderer-v2 */
        "./src/diagrams/state/stateRenderer-v2.js");
        /* harmony import */


        var _diagrams_state_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
        /*! ./diagrams/state/parser/stateDiagram */
        "./src/diagrams/state/parser/stateDiagram.jison");
        /* harmony import */


        var _diagrams_state_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_diagrams_state_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_21__);
        /* harmony import */


        var _diagrams_state_stateDb__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
        /*! ./diagrams/state/stateDb */
        "./src/diagrams/state/stateDb.js");
        /* harmony import */


        var _diagrams_git_gitGraphRenderer__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
        /*! ./diagrams/git/gitGraphRenderer */
        "./src/diagrams/git/gitGraphRenderer.js");
        /* harmony import */


        var _diagrams_git_parser_gitGraph__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
        /*! ./diagrams/git/parser/gitGraph */
        "./src/diagrams/git/parser/gitGraph.jison");
        /* harmony import */


        var _diagrams_git_parser_gitGraph__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_diagrams_git_parser_gitGraph__WEBPACK_IMPORTED_MODULE_24__);
        /* harmony import */


        var _diagrams_git_gitGraphAst__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
        /*! ./diagrams/git/gitGraphAst */
        "./src/diagrams/git/gitGraphAst.js");
        /* harmony import */


        var _diagrams_info_infoRenderer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
        /*! ./diagrams/info/infoRenderer */
        "./src/diagrams/info/infoRenderer.js");
        /* harmony import */


        var _errorRenderer__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
        /*! ./errorRenderer */
        "./src/errorRenderer.js");
        /* harmony import */


        var _diagrams_info_parser_info__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
        /*! ./diagrams/info/parser/info */
        "./src/diagrams/info/parser/info.jison");
        /* harmony import */


        var _diagrams_info_parser_info__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(_diagrams_info_parser_info__WEBPACK_IMPORTED_MODULE_28__);
        /* harmony import */


        var _diagrams_info_infoDb__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
        /*! ./diagrams/info/infoDb */
        "./src/diagrams/info/infoDb.js");
        /* harmony import */


        var _diagrams_pie_pieRenderer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
        /*! ./diagrams/pie/pieRenderer */
        "./src/diagrams/pie/pieRenderer.js");
        /* harmony import */


        var _diagrams_pie_parser_pie__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
        /*! ./diagrams/pie/parser/pie */
        "./src/diagrams/pie/parser/pie.jison");
        /* harmony import */


        var _diagrams_pie_parser_pie__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(_diagrams_pie_parser_pie__WEBPACK_IMPORTED_MODULE_31__);
        /* harmony import */


        var _diagrams_pie_pieDb__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
        /*! ./diagrams/pie/pieDb */
        "./src/diagrams/pie/pieDb.js");
        /* harmony import */


        var _diagrams_er_erDb__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
        /*! ./diagrams/er/erDb */
        "./src/diagrams/er/erDb.js");
        /* harmony import */


        var _diagrams_er_parser_erDiagram__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
        /*! ./diagrams/er/parser/erDiagram */
        "./src/diagrams/er/parser/erDiagram.jison");
        /* harmony import */


        var _diagrams_er_parser_erDiagram__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(_diagrams_er_parser_erDiagram__WEBPACK_IMPORTED_MODULE_34__);
        /* harmony import */


        var _diagrams_er_erRenderer__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
        /*! ./diagrams/er/erRenderer */
        "./src/diagrams/er/erRenderer.js");
        /* harmony import */


        var _diagrams_user_journey_parser_journey__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
        /*! ./diagrams/user-journey/parser/journey */
        "./src/diagrams/user-journey/parser/journey.jison");
        /* harmony import */


        var _diagrams_user_journey_parser_journey__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(_diagrams_user_journey_parser_journey__WEBPACK_IMPORTED_MODULE_36__);
        /* harmony import */


        var _diagrams_user_journey_journeyDb__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
        /*! ./diagrams/user-journey/journeyDb */
        "./src/diagrams/user-journey/journeyDb.js");
        /* harmony import */


        var _diagrams_user_journey_journeyRenderer__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
        /*! ./diagrams/user-journey/journeyRenderer */
        "./src/diagrams/user-journey/journeyRenderer.js");
        /* harmony import */


        var _config__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
        /*! ./config */
        "./src/config.js");
        /* harmony import */


        var _styles__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
        /*! ./styles */
        "./src/styles.js");
        /* harmony import */


        var _themes__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
        /*! ./themes */
        "./src/themes/index.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }
        /**
         *Edit this Page[![N|Solid](img/GitHub-Mark-32px.png)](https://github.com/mermaid-js/mermaid/blob/develop/src/mermaidAPI.js)
         *
         *This is the API to be used when optionally handling the integration with the web page, instead of using the default integration provided by mermaid.js.
         *
         *
         * The core of this api is the [**render**](Setup.md?id=render) function which, given a graph
         * definition as text, renders the graph/diagram and returns an svg element for the graph.
         *
         * It is is then up to the user of the API to make use of the svg, either insert it somewhere in the page or do something completely different.
         *
         * In addition to the render function, a number of behavioral configuration options are available.
         *
         * @name mermaidAPI
         */
        // import * as configApi from './config';
        // // , {
        // //   setConfig,
        // //   configApi.getConfig,
        // //   configApi.updateSiteConfig,
        // //   configApi.setSiteConfig,
        // //   configApi.getSiteConfig,
        // //   configApi.defaultConfig
        // // }


        function parse(text) {
          var graphInit = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].detectInit(text);

          if (graphInit) {
            reinitialize(graphInit);

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('reinit ', graphInit);
          }

          var graphType = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].detectType(text);

          var parser;

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Type ' + graphType);

          switch (graphType) {
            case 'git':
              parser = _diagrams_git_parser_gitGraph__WEBPACK_IMPORTED_MODULE_24___default.a;
              parser.parser.yy = _diagrams_git_gitGraphAst__WEBPACK_IMPORTED_MODULE_25__["default"];
              break;

            case 'flowchart':
              _diagrams_flowchart_flowDb__WEBPACK_IMPORTED_MODULE_8__["default"].clear();

              parser = _diagrams_flowchart_parser_flow__WEBPACK_IMPORTED_MODULE_7___default.a;
              parser.parser.yy = _diagrams_flowchart_flowDb__WEBPACK_IMPORTED_MODULE_8__["default"];
              break;

            case 'flowchart-v2':
              _diagrams_flowchart_flowDb__WEBPACK_IMPORTED_MODULE_8__["default"].clear();

              parser = _diagrams_flowchart_parser_flow__WEBPACK_IMPORTED_MODULE_7___default.a;
              parser.parser.yy = _diagrams_flowchart_flowDb__WEBPACK_IMPORTED_MODULE_8__["default"];
              break;

            case 'sequence':
              parser = _diagrams_sequence_parser_sequenceDiagram__WEBPACK_IMPORTED_MODULE_10___default.a;
              parser.parser.yy = _diagrams_sequence_sequenceDb__WEBPACK_IMPORTED_MODULE_11__["default"];
              break;

            case 'gantt':
              parser = _diagrams_gantt_parser_gantt__WEBPACK_IMPORTED_MODULE_13___default.a;
              parser.parser.yy = _diagrams_gantt_ganttDb__WEBPACK_IMPORTED_MODULE_14__["default"];
              break;

            case 'class':
              parser = _diagrams_class_parser_classDiagram__WEBPACK_IMPORTED_MODULE_17___default.a;
              parser.parser.yy = _diagrams_class_classDb__WEBPACK_IMPORTED_MODULE_18__["default"];
              break;

            case 'classDiagram':
              parser = _diagrams_class_parser_classDiagram__WEBPACK_IMPORTED_MODULE_17___default.a;
              parser.parser.yy = _diagrams_class_classDb__WEBPACK_IMPORTED_MODULE_18__["default"];
              break;

            case 'state':
              parser = _diagrams_state_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_21___default.a;
              parser.parser.yy = _diagrams_state_stateDb__WEBPACK_IMPORTED_MODULE_22__["default"];
              break;

            case 'stateDiagram':
              parser = _diagrams_state_parser_stateDiagram__WEBPACK_IMPORTED_MODULE_21___default.a;
              parser.parser.yy = _diagrams_state_stateDb__WEBPACK_IMPORTED_MODULE_22__["default"];
              break;

            case 'info':
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('info info info');

              parser = _diagrams_info_parser_info__WEBPACK_IMPORTED_MODULE_28___default.a;
              parser.parser.yy = _diagrams_info_infoDb__WEBPACK_IMPORTED_MODULE_29__["default"];
              break;

            case 'pie':
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('pie');

              parser = _diagrams_pie_parser_pie__WEBPACK_IMPORTED_MODULE_31___default.a;
              parser.parser.yy = _diagrams_pie_pieDb__WEBPACK_IMPORTED_MODULE_32__["default"];
              break;

            case 'er':
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('er');

              parser = _diagrams_er_parser_erDiagram__WEBPACK_IMPORTED_MODULE_34___default.a;
              parser.parser.yy = _diagrams_er_erDb__WEBPACK_IMPORTED_MODULE_33__["default"];
              break;

            case 'journey':
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Journey');

              parser = _diagrams_user_journey_parser_journey__WEBPACK_IMPORTED_MODULE_36___default.a;
              parser.parser.yy = _diagrams_user_journey_journeyDb__WEBPACK_IMPORTED_MODULE_37__["default"];
              break;
          }

          parser.parser.yy.graphType = graphType;

          parser.parser.yy.parseError = function (str, hash) {
            var error = {
              str: str,
              hash: hash
            };
            throw error;
          };

          parser.parse(text);
          return parser;
        }

        var encodeEntities = function encodeEntities(text) {
          var txt = text;
          txt = txt.replace(/style.*:\S*#.*;/g, function (s) {
            var innerTxt = s.substring(0, s.length - 1);
            return innerTxt;
          });
          txt = txt.replace(/classDef.*:\S*#.*;/g, function (s) {
            var innerTxt = s.substring(0, s.length - 1);
            return innerTxt;
          });
          txt = txt.replace(/#\w+;/g, function (s) {
            var innerTxt = s.substring(1, s.length - 1);
            var isInt = /^\+?\d+$/.test(innerTxt);

            if (isInt) {
              return 'ﬂ°°' + innerTxt + '¶ß';
            } else {
              return 'ﬂ°' + innerTxt + '¶ß';
            }
          });
          return txt;
        };

        var decodeEntities = function decodeEntities(text) {
          var txt = text;
          txt = txt.replace(/ﬂ°°/g, function () {
            return '&#';
          });
          txt = txt.replace(/ﬂ°/g, function () {
            return '&';
          });
          txt = txt.replace(/¶ß/g, function () {
            return ';';
          });
          return txt;
        };
        /**
         * Function that renders an svg with a graph from a chart definition. Usage example below.
         *
         * ```js
         * mermaidAPI.initialize({
         *      startOnLoad:true
         *  });
         *  $(function(){
         *      const graphDefinition = 'graph TB\na-->b';
         *      const cb = function(svgGraph){
         *          console.log(svgGraph);
         *      };
         *      mermaidAPI.render('id1',graphDefinition,cb);
         *  });
         *```
         * @param id the id of the element to be rendered
         * @param _txt the graph definition
         * @param cb callback which is called after rendering is finished with the svg code as inparam.
         * @param container selector to element in which a div with the graph temporarily will be inserted. In one is
         * provided a hidden div will be inserted in the body of the page instead. The element will be removed when rendering is
         * completed.
         */


        var render = function render(id, _txt, cb, container) {
          _config__WEBPACK_IMPORTED_MODULE_39__["reset"]();

          var txt = _txt;

          var graphInit = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].detectInit(txt);

          if (graphInit) {
            _config__WEBPACK_IMPORTED_MODULE_39__["addDirective"](graphInit);
          } // else {
          //   configApi.reset();
          //   const siteConfig = configApi.getSiteConfig();
          //   configApi.addDirective(siteConfig);
          // }
          // console.warn('Render fetching config');


          var cnf = _config__WEBPACK_IMPORTED_MODULE_39__["getConfig"](); // Check the maximum allowed text size


          if (_txt.length > cnf.maxTextSize) {
            txt = 'graph TB;a[Maximum text size in diagram exceeded];style a fill:#faa';
          }

          if (typeof container !== 'undefined') {
            container.innerHTML = '';
            Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])(container).append('div').attr('id', 'd' + id).attr('style', 'font-family: ' + cnf.fontFamily).append('svg').attr('id', id).attr('width', '100%').attr('xmlns', 'http://www.w3.org/2000/svg').append('g');
          } else {
            var existingSvg = document.getElementById(id);

            if (existingSvg) {
              existingSvg.remove();
            }

            var _element = document.querySelector('#' + 'd' + id);

            if (_element) {
              _element.remove();
            }

            Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('body').append('div').attr('id', 'd' + id).append('svg').attr('id', id).attr('width', '100%').attr('xmlns', 'http://www.w3.org/2000/svg').append('g');
          }

          window.txt = txt;
          txt = encodeEntities(txt);
          var element = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#d' + id).node();

          var graphType = _utils__WEBPACK_IMPORTED_MODULE_4__["default"].detectType(txt); // insert inline style into svg


          var svg = element.firstChild;
          var firstChild = svg.firstChild;
          var userStyles = ''; // user provided theme CSS

          if (cnf.themeCSS !== undefined) {
            userStyles += "\n".concat(cnf.themeCSS);
          } // user provided theme CSS


          if (cnf.fontFamily !== undefined) {
            userStyles += "\n:root { --mermaid-font-family: ".concat(cnf.fontFamily, "}");
          } // user provided theme CSS


          if (cnf.altFontFamily !== undefined) {
            userStyles += "\n:root { --mermaid-alt-font-family: ".concat(cnf.altFontFamily, "}");
          } // classDef


          if (graphType === 'flowchart' || graphType === 'flowchart-v2' || graphType === 'graph') {
            var classes = _diagrams_flowchart_flowRenderer__WEBPACK_IMPORTED_MODULE_5__["default"].getClasses(txt);

            for (var className in classes) {
              userStyles += "\n.".concat(className, " > * { ").concat(classes[className].styles.join(' !important; '), " !important; }");

              if (classes[className].textStyles) {
                userStyles += "\n.".concat(className, " tspan { ").concat(classes[className].textStyles.join(' !important; '), " !important; }");
              }
            }
          } // log.warn(cnf.themeVariables);


          var stylis = new stylis__WEBPACK_IMPORTED_MODULE_0___default.a();
          var rules = stylis("#".concat(id), Object(_styles__WEBPACK_IMPORTED_MODULE_40__["default"])(graphType, userStyles, cnf.themeVariables));
          var style1 = document.createElement('style');
          style1.innerHTML = rules;
          svg.insertBefore(style1, firstChild); // Verify that the generated svgs are ok before removing this
          // const style2 = document.createElement('style');
          // const cs = window.getComputedStyle(svg);
          // style2.innerHTML = `#d${id} * {
          //   color: ${cs.color};
          //   // font: ${cs.font};
          //   // font-family: Arial;
          //   // font-size: 24px;
          // }`;
          // svg.insertBefore(style2, firstChild);

          try {
            switch (graphType) {
              case 'git':
                cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_git_gitGraphRenderer__WEBPACK_IMPORTED_MODULE_23__["default"].setConf(cnf.git);

                _diagrams_git_gitGraphRenderer__WEBPACK_IMPORTED_MODULE_23__["default"].draw(txt, id, false);

                break;

              case 'flowchart':
                cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_flowchart_flowRenderer__WEBPACK_IMPORTED_MODULE_5__["default"].setConf(cnf.flowchart);

                _diagrams_flowchart_flowRenderer__WEBPACK_IMPORTED_MODULE_5__["default"].draw(txt, id, false);

                break;

              case 'flowchart-v2':
                cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_flowchart_flowRenderer_v2__WEBPACK_IMPORTED_MODULE_6__["default"].setConf(cnf.flowchart);

                _diagrams_flowchart_flowRenderer_v2__WEBPACK_IMPORTED_MODULE_6__["default"].draw(txt, id, false);

                break;

              case 'sequence':
                cnf.sequence.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                if (cnf.sequenceDiagram) {
                  // backwards compatibility
                  _diagrams_sequence_sequenceRenderer__WEBPACK_IMPORTED_MODULE_9__["default"].setConf(Object.assign(cnf.sequence, cnf.sequenceDiagram));

                  console.error('`mermaid config.sequenceDiagram` has been renamed to `config.sequence`. Please update your mermaid config.');
                } else {
                  _diagrams_sequence_sequenceRenderer__WEBPACK_IMPORTED_MODULE_9__["default"].setConf(cnf.sequence);
                }

                _diagrams_sequence_sequenceRenderer__WEBPACK_IMPORTED_MODULE_9__["default"].draw(txt, id);

                break;

              case 'gantt':
                cnf.gantt.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_gantt_ganttRenderer__WEBPACK_IMPORTED_MODULE_12__["default"].setConf(cnf.gantt);

                _diagrams_gantt_ganttRenderer__WEBPACK_IMPORTED_MODULE_12__["default"].draw(txt, id);

                break;

              case 'class':
                cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_class_classRenderer__WEBPACK_IMPORTED_MODULE_15__["default"].setConf(cnf.class);

                _diagrams_class_classRenderer__WEBPACK_IMPORTED_MODULE_15__["default"].draw(txt, id);

                break;

              case 'classDiagram':
                cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_class_classRenderer_v2__WEBPACK_IMPORTED_MODULE_16__["default"].setConf(cnf.class);

                _diagrams_class_classRenderer_v2__WEBPACK_IMPORTED_MODULE_16__["default"].draw(txt, id);

                break;

              case 'state':
                cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_state_stateRenderer__WEBPACK_IMPORTED_MODULE_19__["default"].setConf(cnf.state);

                _diagrams_state_stateRenderer__WEBPACK_IMPORTED_MODULE_19__["default"].draw(txt, id);

                break;

              case 'stateDiagram':
                cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_state_stateRenderer_v2__WEBPACK_IMPORTED_MODULE_20__["default"].setConf(cnf.state);

                _diagrams_state_stateRenderer_v2__WEBPACK_IMPORTED_MODULE_20__["default"].draw(txt, id);

                break;

              case 'info':
                cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_info_infoRenderer__WEBPACK_IMPORTED_MODULE_26__["default"].setConf(cnf.class);

                _diagrams_info_infoRenderer__WEBPACK_IMPORTED_MODULE_26__["default"].draw(txt, id, _package_json__WEBPACK_IMPORTED_MODULE_2__.version);

                break;

              case 'pie':
                cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;

                _diagrams_pie_pieRenderer__WEBPACK_IMPORTED_MODULE_30__["default"].setConf(cnf.pie);

                _diagrams_pie_pieRenderer__WEBPACK_IMPORTED_MODULE_30__["default"].draw(txt, id, _package_json__WEBPACK_IMPORTED_MODULE_2__.version);

                break;

              case 'er':
                _diagrams_er_erRenderer__WEBPACK_IMPORTED_MODULE_35__["default"].setConf(cnf.er);

                _diagrams_er_erRenderer__WEBPACK_IMPORTED_MODULE_35__["default"].draw(txt, id, _package_json__WEBPACK_IMPORTED_MODULE_2__.version);

                break;

              case 'journey':
                _diagrams_user_journey_journeyRenderer__WEBPACK_IMPORTED_MODULE_38__["default"].setConf(cnf.journey);

                _diagrams_user_journey_journeyRenderer__WEBPACK_IMPORTED_MODULE_38__["default"].draw(txt, id, _package_json__WEBPACK_IMPORTED_MODULE_2__.version);

                break;
            }
          } catch (e) {
            // errorRenderer.setConf(cnf.class);
            _errorRenderer__WEBPACK_IMPORTED_MODULE_27__["default"].draw(id, _package_json__WEBPACK_IMPORTED_MODULE_2__.version);

            throw e;
          }

          Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])("[id=\"".concat(id, "\"]")).selectAll('foreignobject > *').attr('xmlns', 'http://www.w3.org/1999/xhtml'); // if (cnf.arrowMarkerAbsolute) {
          //   url =
          //     window.location.protocol +
          //     '//' +
          //     window.location.host +
          //     window.location.pathname +
          //     window.location.search;
          //   url = url.replace(/\(/g, '\\(');
          //   url = url.replace(/\)/g, '\\)');
          // }
          // Fix for when the base tag is used

          var svgCode = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#d' + id).node().innerHTML;

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('cnf.arrowMarkerAbsolute', cnf.arrowMarkerAbsolute);

          if (!cnf.arrowMarkerAbsolute || cnf.arrowMarkerAbsolute === 'false') {
            svgCode = svgCode.replace(/marker-end="url\(.*?#/g, 'marker-end="url(#', 'g');
          }

          svgCode = decodeEntities(svgCode); // Fix for when the br tag is used

          svgCode = svgCode.replace(/<br>/g, '<br/>');

          if (typeof cb !== 'undefined') {
            switch (graphType) {
              case 'flowchart':
              case 'flowchart-v2':
                cb(svgCode, _diagrams_flowchart_flowDb__WEBPACK_IMPORTED_MODULE_8__["default"].bindFunctions);
                break;

              case 'gantt':
                cb(svgCode, _diagrams_gantt_ganttDb__WEBPACK_IMPORTED_MODULE_14__["default"].bindFunctions);
                break;

              case 'class':
              case 'classDiagram':
                cb(svgCode, _diagrams_class_classDb__WEBPACK_IMPORTED_MODULE_18__["default"].bindFunctions);
                break;

              default:
                cb(svgCode);
            }
          } else {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('CB = undefined!');
          }

          var node = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#d' + id).node();

          if (node !== null && typeof node.remove === 'function') {
            Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('#d' + id).node().remove();
          }

          return svgCode;
        };

        var currentDirective = {};

        var parseDirective = function parseDirective(p, statement, context, type) {
          try {
            if (statement !== undefined) {
              statement = statement.trim();

              switch (context) {
                case 'open_directive':
                  currentDirective = {};
                  break;

                case 'type_directive':
                  currentDirective.type = statement.toLowerCase();
                  break;

                case 'arg_directive':
                  currentDirective.args = JSON.parse(statement);
                  break;

                case 'close_directive':
                  handleDirective(p, currentDirective, type);
                  currentDirective = null;
                  break;
              }
            }
          } catch (error) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error("Error while rendering sequenceDiagram directive: ".concat(statement, " jison context: ").concat(context));

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error(error.message);
          }
        };

        var handleDirective = function handleDirective(p, directive, type) {
          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug("Directive type=".concat(directive.type, " with args:"), directive.args);

          switch (directive.type) {
            case 'init':
            case 'initialize':
              {
                ['config'].forEach(function (prop) {
                  if (typeof directive.args[prop] !== 'undefined') {
                    if (type === 'flowchart-v2') {
                      type = 'flowchart';
                    }

                    directive.args[type] = directive.args[prop];
                    delete directive.args[prop];
                  }
                });
                reinitialize(directive.args);

                _config__WEBPACK_IMPORTED_MODULE_39__["addDirective"](directive.args);

                break;
              }

            case 'wrap':
            case 'nowrap':
              if (p && p['setWrap']) {
                p.setWrap(directive.type === 'wrap');
              }

              break;

            default:
              _logger__WEBPACK_IMPORTED_MODULE_3__["log"].warn("Unhandled directive: source: '%%{".concat(directive.type, ": ").concat(JSON.stringify(directive.args ? directive.args : {}), "}%%"), directive);

              break;
          }
        };

        function updateRendererConfigs(conf) {
          _diagrams_git_gitGraphRenderer__WEBPACK_IMPORTED_MODULE_23__["default"].setConf(conf.git);

          _diagrams_flowchart_flowRenderer__WEBPACK_IMPORTED_MODULE_5__["default"].setConf(conf.flowchart);

          _diagrams_flowchart_flowRenderer_v2__WEBPACK_IMPORTED_MODULE_6__["default"].setConf(conf.flowchart);

          if (typeof conf['sequenceDiagram'] !== 'undefined') {
            _diagrams_sequence_sequenceRenderer__WEBPACK_IMPORTED_MODULE_9__["default"].setConf(Object(_utils__WEBPACK_IMPORTED_MODULE_4__["assignWithDepth"])(conf.sequence, conf['sequenceDiagram']));
          }

          _diagrams_sequence_sequenceRenderer__WEBPACK_IMPORTED_MODULE_9__["default"].setConf(conf.sequence);

          _diagrams_gantt_ganttRenderer__WEBPACK_IMPORTED_MODULE_12__["default"].setConf(conf.gantt);

          _diagrams_class_classRenderer__WEBPACK_IMPORTED_MODULE_15__["default"].setConf(conf.class);

          _diagrams_state_stateRenderer__WEBPACK_IMPORTED_MODULE_19__["default"].setConf(conf.state);

          _diagrams_state_stateRenderer_v2__WEBPACK_IMPORTED_MODULE_20__["default"].setConf(conf.state);

          _diagrams_info_infoRenderer__WEBPACK_IMPORTED_MODULE_26__["default"].setConf(conf.class);

          _diagrams_pie_pieRenderer__WEBPACK_IMPORTED_MODULE_30__["default"].setConf(conf.class);

          _diagrams_er_erRenderer__WEBPACK_IMPORTED_MODULE_35__["default"].setConf(conf.er);

          _diagrams_user_journey_journeyRenderer__WEBPACK_IMPORTED_MODULE_38__["default"].setConf(conf.journey);

          _errorRenderer__WEBPACK_IMPORTED_MODULE_27__["default"].setConf(conf.class);
        }

        function reinitialize() {// `mermaidAPI.reinitialize: v${pkg.version}`,
          //   JSON.stringify(options),
          //   options.themeVariables.primaryColor;
          // // if (options.theme && theme[options.theme]) {
          // //   options.themeVariables = theme[options.theme].getThemeVariables(options.themeVariables);
          // // }
          // // Set default options
          // const config =
          //   typeof options === 'object' ? configApi.setConfig(options) : configApi.getSiteConfig();
          // updateRendererConfigs(config);
          // setLogLevel(config.logLevel);
          // log.debug('mermaidAPI.reinitialize: ', config);
        }

        function initialize(options) {
          // console.warn(`mermaidAPI.initialize: v${pkg.version} `, options);
          // Handle legacy location of font-family configuration
          if (options && options.fontFamily) {
            if (!options.themeVariables) {
              options.themeVariables = {
                fontFamily: options.fontFamily
              };
            } else {
              if (!options.themeVariables.fontFamily) {
                options.themeVariables = {
                  fontFamily: options.fontFamily
                };
              }
            }
          } // Set default options


          _config__WEBPACK_IMPORTED_MODULE_39__["saveConfigFromInitilize"](options);

          if (options && options.theme && _themes__WEBPACK_IMPORTED_MODULE_41__["default"][options.theme]) {
            // Todo merge with user options
            options.themeVariables = _themes__WEBPACK_IMPORTED_MODULE_41__["default"][options.theme].getThemeVariables(options.themeVariables);
          } else {
            if (options) options.themeVariables = _themes__WEBPACK_IMPORTED_MODULE_41__["default"].default.getThemeVariables(options.themeVariables);
          }

          var config = _typeof(options) === 'object' ? _config__WEBPACK_IMPORTED_MODULE_39__["setSiteConfig"](options) : _config__WEBPACK_IMPORTED_MODULE_39__["getSiteConfig"]();
          updateRendererConfigs(config);
          Object(_logger__WEBPACK_IMPORTED_MODULE_3__["setLogLevel"])(config.logLevel); // log.debug('mermaidAPI.initialize: ', config);
        }

        var mermaidAPI = Object.freeze({
          render: render,
          parse: parse,
          parseDirective: parseDirective,
          initialize: initialize,
          reinitialize: reinitialize,
          getConfig: _config__WEBPACK_IMPORTED_MODULE_39__["getConfig"],
          setConfig: _config__WEBPACK_IMPORTED_MODULE_39__["setConfig"],
          getSiteConfig: _config__WEBPACK_IMPORTED_MODULE_39__["getSiteConfig"],
          updateSiteConfig: _config__WEBPACK_IMPORTED_MODULE_39__["updateSiteConfig"],
          reset: function reset() {
            // console.warn('reset');
            _config__WEBPACK_IMPORTED_MODULE_39__["reset"](); // const siteConfig = configApi.getSiteConfig();
            // updateRendererConfigs(siteConfig);

          },
          globalReset: function globalReset() {
            _config__WEBPACK_IMPORTED_MODULE_39__["reset"](_config__WEBPACK_IMPORTED_MODULE_39__["defaultConfig"]);

            updateRendererConfigs(_config__WEBPACK_IMPORTED_MODULE_39__["getConfig"]());
          },
          defaultConfig: _config__WEBPACK_IMPORTED_MODULE_39__["defaultConfig"]
        });
        Object(_logger__WEBPACK_IMPORTED_MODULE_3__["setLogLevel"])(_config__WEBPACK_IMPORTED_MODULE_39__["getConfig"]().logLevel);

        _config__WEBPACK_IMPORTED_MODULE_39__["reset"](_config__WEBPACK_IMPORTED_MODULE_39__["getConfig"]());
        /* harmony default export */


        __webpack_exports__["default"] = mermaidAPI;
        /**
         * ## mermaidAPI configuration defaults
         *
         * ```html
         * <script>
         *   var config = {
         *     theme:'default',
         *     logLevel:'fatal',
         *     securityLevel:'strict',
         *     startOnLoad:true,
         *     arrowMarkerAbsolute:false,
         *
         *     er:{
         *       diagramPadding:20,
         *       layoutDirection:'TB',
         *       minEntityWidth:100,
         *       minEntityHeight:75,
         *       entityPadding:15,
         *       stroke:'gray',
         *       fill:'honeydew',
         *       fontSize:12,
         *       useMaxWidth:true,
         *     },
         *     flowchart:{
         *       diagramPadding:8,
         *       htmlLabels:true,
         *       curve:'linear',
         *     },
         *     sequence:{
         *       diagramMarginX:50,
         *       diagramMarginY:10,
         *       actorMargin:50,
         *       width:150,
         *       height:65,
         *       boxMargin:10,
         *       boxTextMargin:5,
         *       noteMargin:10,
         *       messageMargin:35,
         *       messageAlign:'center',
         *       mirrorActors:true,
         *       bottomMarginAdj:1,
         *       useMaxWidth:true,
         *       rightAngles:false,
         *       showSequenceNumbers:false,
         *     },
         *     gantt:{
         *       titleTopMargin:25,
         *       barHeight:20,
         *       barGap:4,
         *       topPadding:50,
         *       leftPadding:75,
         *       gridLineStartPadding:35,
         *       fontSize:11,
         *       fontFamily:'"Open-Sans", "sans-serif"',
         *       numberSectionStyles:4,
         *       axisFormat:'%Y-%m-%d',
         *     }
         *   };
         *   mermaid.initialize(config);
         * </script>
         * ```
         */

        /***/
      },

      /***/
      "./src/styles.js":
      /*!***********************!*\
        !*** ./src/styles.js ***!
        \***********************/

      /*! exports provided: calcThemeVariables, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "calcThemeVariables", function () {
          return calcThemeVariables;
        });
        /* harmony import */


        var _diagrams_class_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./diagrams/class/styles */
        "./src/diagrams/class/styles.js");
        /* harmony import */


        var _diagrams_er_styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./diagrams/er/styles */
        "./src/diagrams/er/styles.js");
        /* harmony import */


        var _diagrams_flowchart_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./diagrams/flowchart/styles */
        "./src/diagrams/flowchart/styles.js");
        /* harmony import */


        var _diagrams_gantt_styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./diagrams/gantt/styles */
        "./src/diagrams/gantt/styles.js");
        /* harmony import */


        var _diagrams_git_styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./diagrams/git/styles */
        "./src/diagrams/git/styles.js");
        /* harmony import */


        var _diagrams_info_styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./diagrams/info/styles */
        "./src/diagrams/info/styles.js");
        /* harmony import */


        var _diagrams_pie_styles__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./diagrams/pie/styles */
        "./src/diagrams/pie/styles.js");
        /* harmony import */


        var _diagrams_sequence_styles__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ./diagrams/sequence/styles */
        "./src/diagrams/sequence/styles.js");
        /* harmony import */


        var _diagrams_state_styles__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ./diagrams/state/styles */
        "./src/diagrams/state/styles.js");
        /* harmony import */


        var _diagrams_user_journey_styles__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ./diagrams/user-journey/styles */
        "./src/diagrams/user-journey/styles.js");

        var themes = {
          flowchart: _diagrams_flowchart_styles__WEBPACK_IMPORTED_MODULE_2__["default"],
          'flowchart-v2': _diagrams_flowchart_styles__WEBPACK_IMPORTED_MODULE_2__["default"],
          sequence: _diagrams_sequence_styles__WEBPACK_IMPORTED_MODULE_7__["default"],
          gantt: _diagrams_gantt_styles__WEBPACK_IMPORTED_MODULE_3__["default"],
          classDiagram: _diagrams_class_styles__WEBPACK_IMPORTED_MODULE_0__["default"],
          'classDiagram-v2': _diagrams_class_styles__WEBPACK_IMPORTED_MODULE_0__["default"],
          class: _diagrams_class_styles__WEBPACK_IMPORTED_MODULE_0__["default"],
          stateDiagram: _diagrams_state_styles__WEBPACK_IMPORTED_MODULE_8__["default"],
          state: _diagrams_state_styles__WEBPACK_IMPORTED_MODULE_8__["default"],
          git: _diagrams_git_styles__WEBPACK_IMPORTED_MODULE_4__["default"],
          info: _diagrams_info_styles__WEBPACK_IMPORTED_MODULE_5__["default"],
          pie: _diagrams_pie_styles__WEBPACK_IMPORTED_MODULE_6__["default"],
          er: _diagrams_er_styles__WEBPACK_IMPORTED_MODULE_1__["default"],
          journey: _diagrams_user_journey_styles__WEBPACK_IMPORTED_MODULE_9__["default"]
        };

        var calcThemeVariables = function calcThemeVariables(theme, userOverRides) {
          return theme.calcColors(userOverRides);
        };

        var getStyles = function getStyles(type, userStyles, options) {
          //console.warn('options in styles: ', options);
          return " {\n    font-family: ".concat(options.fontFamily, ";\n    font-size: ").concat(options.fontSize, ";\n    fill: ").concat(options.textColor, "\n  }\n\n  /* Classes common for multiple diagrams */\n\n  .error-icon {\n    fill: ").concat(options.errorBkgColor, ";\n  }\n  .error-text {\n    fill: ").concat(options.errorTextColor, ";\n    stroke: ").concat(options.errorTextColor, ";\n  }\n\n  .edge-thickness-normal {\n    stroke-width: 2px;\n  }\n  .edge-thickness-thick {\n    stroke-width: 3.5px\n  }\n  .edge-pattern-solid {\n    stroke-dasharray: 0;\n  }\n\n  .edge-pattern-dashed{\n    stroke-dasharray: 3;\n  }\n  .edge-pattern-dotted {\n    stroke-dasharray: 2;\n  }\n\n  .marker {\n    fill: ").concat(options.lineColor, ";\n    stroke: ").concat(options.lineColor, ";\n  }\n  .marker.cross {\n    stroke: ").concat(options.lineColor, ";\n  }\n\n  svg {\n    font-family: ").concat(options.fontFamily, ";\n    font-size: ").concat(options.fontSize, ";\n  }\n\n  ").concat(themes[type](options), "\n\n  ").concat(userStyles, "\n\n  ").concat(type, " { fill: apa;}\n");
        };
        /* harmony default export */


        __webpack_exports__["default"] = getStyles;
        /***/
      },

      /***/
      "./src/themes/index.js":
      /*!*****************************!*\
        !*** ./src/themes/index.js ***!
        \*****************************/

      /*! exports provided: default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony import */


        var _theme_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./theme-base */
        "./src/themes/theme-base.js");
        /* harmony import */


        var _theme_dark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./theme-dark */
        "./src/themes/theme-dark.js");
        /* harmony import */


        var _theme_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./theme-default */
        "./src/themes/theme-default.js");
        /* harmony import */


        var _theme_forest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./theme-forest */
        "./src/themes/theme-forest.js");
        /* harmony import */


        var _theme_neutral__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./theme-neutral */
        "./src/themes/theme-neutral.js");
        /* harmony default export */


        __webpack_exports__["default"] = {
          base: {
            getThemeVariables: _theme_base__WEBPACK_IMPORTED_MODULE_0__["getThemeVariables"]
          },
          dark: {
            getThemeVariables: _theme_dark__WEBPACK_IMPORTED_MODULE_1__["getThemeVariables"]
          },
          default: {
            getThemeVariables: _theme_default__WEBPACK_IMPORTED_MODULE_2__["getThemeVariables"]
          },
          forest: {
            getThemeVariables: _theme_forest__WEBPACK_IMPORTED_MODULE_3__["getThemeVariables"]
          },
          neutral: {
            getThemeVariables: _theme_neutral__WEBPACK_IMPORTED_MODULE_4__["getThemeVariables"]
          }
        };
        /***/
      },

      /***/
      "./src/themes/theme-base.js":
      /*!**********************************!*\
        !*** ./src/themes/theme-base.js ***!
        \**********************************/

      /*! exports provided: getThemeVariables */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getThemeVariables", function () {
          return getThemeVariables;
        });
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! khroma */
        "khroma");
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(khroma__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _theme_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./theme-helpers */
        "./src/themes/theme-helpers.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        var Theme = /*#__PURE__*/function () {
          function Theme() {
            _classCallCheck(this, Theme);
            /** # Base variables */

            /** * background - used to know what the background color is of the diagram. This is used for deducing colors for istance line color. Defaulr value is #f4f4f4. */


            this.background = '#f4f4f4';
            this.darkMode = false; // this.background = '#0c0c0c';
            // this.darkMode = true;

            this.primaryColor = '#fff4dd'; // this.background = '#0c0c0c';
            // this.primaryColor = '#1f1f00';

            this.noteBkgColor = '#fff5ad';
            this.noteTextColor = '#333'; // dark
            // this.primaryColor = '#034694';
            // this.primaryColor = '#f2ee7e';
            // this.primaryColor = '#9f33be';
            // this.primaryColor = '#f0fff0';
            // this.primaryColor = '#fa255e';
            // this.primaryColor = '#ECECFF';
            // this.secondaryColor = '#c39ea0';
            // this.tertiaryColor = '#f8e5e5';
            // this.secondaryColor = '#dfdfde';
            // this.tertiaryColor = '#CCCCFF';

            this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
            this.fontSize = '16px'; // this.updateColors();
          }

          _createClass(Theme, [{
            key: "updateColors",
            value: function updateColors() {
              // The || is to make sure that if the variable has been defiend by a user override that value is to be used

              /* Main */
              this.primaryTextColor = this.primaryTextColor || (this.darkMode ? '#ddd' : '#333'); // invert(this.primaryColor);

              this.secondaryColor = this.secondaryColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: -120
              });
              this.tertiaryColor = this.tertiaryColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 180,
                l: 5
              });
              this.primaryBorderColor = this.primaryBorderColor || Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.primaryColor, this.darkMode);
              this.secondaryBorderColor = this.secondaryBorderColor || Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.secondaryColor, this.darkMode);
              this.tertiaryBorderColor = this.tertiaryBorderColor || Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.tertiaryColor, this.darkMode);
              this.noteBorderColor = this.noteBorderColor || Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.noteBkgColor, this.darkMode);
              this.secondaryTextColor = this.secondaryTextColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.secondaryColor);
              this.tertiaryTextColor = this.tertiaryTextColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.tertiaryColor);
              this.lineColor = this.lineColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
              this.textColor = this.textColor || this.primaryTextColor;
              /* Flowchart variables */

              this.nodeBkg = this.nodeBkg || this.primaryColor;
              this.mainBkg = this.mainBkg || this.primaryColor;
              this.nodeBorder = this.nodeBorder || this.primaryBorderColor;
              this.clusterBkg = this.clusterBkg || this.tertiaryColor;
              this.clusterBorder = this.clusterBorder || this.tertiaryBorderColor;
              this.defaultLinkColor = this.defaultLinkColor || this.lineColor;
              this.titleColor = this.titleColor || this.tertiaryTextColor;
              this.edgeLabelBackground = this.edgeLabelBackground || (this.darkMode ? Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])(this.secondaryColor, 30) : this.secondaryColor);
              this.nodeTextColor = this.nodeTextColor || this.primaryTextColor;
              /* Sequence Diagram variables */
              // this.actorBorder = lighten(this.border1, 0.5);

              this.actorBorder = this.actorBorder || this.primaryBorderColor;
              this.actorBkg = this.actorBkg || this.mainBkg;
              this.actorTextColor = this.actorTextColor || this.primaryTextColor;
              this.actorLineColor = this.actorLineColor || 'grey';
              this.labelBoxBkgColor = this.labelBoxBkgColor || this.actorBkg;
              this.signalColor = this.signalColor || this.textColor;
              this.signalTextColor = this.signalTextColor || this.textColor;
              this.labelBoxBorderColor = this.labelBoxBorderColor || this.actorBorder;
              this.labelTextColor = this.labelTextColor || this.actorTextColor;
              this.loopTextColor = this.loopTextColor || this.actorTextColor;
              this.activationBorderColor = this.activationBorderColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])(this.secondaryColor, 10);
              this.activationBkgColor = this.activationBkgColor || this.secondaryColor;
              this.sequenceNumberColor = this.sequenceNumberColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.lineColor);
              /* Gantt chart variables */

              this.sectionBkgColor = this.sectionBkgColor || this.tertiaryColor;
              this.altSectionBkgColor = this.altSectionBkgColor || 'white';
              this.sectionBkgColor = this.sectionBkgColor || this.secondaryColor;
              this.sectionBkgColor2 = this.sectionBkgColor2 || this.primaryColor;
              this.taskBorderColor = this.taskBorderColor || this.primaryBorderColor;
              this.taskBkgColor = this.taskBkgColor || this.primaryColor;
              this.activeTaskBorderColor = this.activeTaskBorderColor || this.primaryColor;
              this.activeTaskBkgColor = this.activeTaskBkgColor || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.primaryColor, 23);
              this.gridColor = this.gridColor || 'lightgrey';
              this.doneTaskBkgColor = this.doneTaskBkgColor || 'lightgrey';
              this.doneTaskBorderColor = this.doneTaskBorderColor || 'grey';
              this.critBorderColor = this.critBorderColor || '#ff8888';
              this.critBkgColor = this.critBkgColor || 'red';
              this.todayLineColor = this.todayLineColor || 'red';
              this.taskTextColor = this.taskTextColor || this.textColor;
              this.taskTextOutsideColor = this.taskTextOutsideColor || this.textColor;
              this.taskTextLightColor = this.taskTextLightColor || this.textColor;
              this.taskTextColor = this.taskTextColor || this.primaryTextColor;
              this.taskTextDarkColor = this.taskTextDarkColor || this.textColor;
              this.taskTextClickableColor = this.taskTextClickableColor || '#003163';
              /* state colors */

              this.labelColor = this.labelColor || this.primaryTextColor;
              this.altBackground = this.altBackground || this.tertiaryColor;
              this.errorBkgColor = this.errorBkgColor || this.tertiaryColor;
              this.errorTextColor = this.errorTextColor || this.tertiaryTextColor;
              /* class */

              this.classText = this.classText || this.textColor;
              /* user-journey */

              this.fillType0 = this.fillType0 || this.primaryColor;
              this.fillType1 = this.fillType1 || this.secondaryColor;
              this.fillType2 = this.fillType2 || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 64
              });
              this.fillType3 = this.fillType3 || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 64
              });
              this.fillType4 = this.fillType4 || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: -64
              });
              this.fillType5 = this.fillType5 || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: -64
              });
              this.fillType6 = this.fillType6 || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 128
              });
              this.fillType7 = this.fillType7 || Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 128
              });
            }
          }, {
            key: "calculate",
            value: function calculate(overrides) {
              var _this = this;

              if (_typeof(overrides) !== 'object') {
                // Calculate colors form base colors
                this.updateColors();
                return;
              }

              var keys = Object.keys(overrides); // Copy values from overrides, this is mainly for base colors

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              }); // Calculate colors form base colors

              this.updateColors(); // Copy values from overrides again in case of an override of derived value

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              });
            }
          }]);

          return Theme;
        }();

        var getThemeVariables = function getThemeVariables(userOverrides) {
          var theme = new Theme();
          theme.calculate(userOverrides);
          return theme;
        };
        /***/

      },

      /***/
      "./src/themes/theme-dark.js":
      /*!**********************************!*\
        !*** ./src/themes/theme-dark.js ***!
        \**********************************/

      /*! exports provided: getThemeVariables */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getThemeVariables", function () {
          return getThemeVariables;
        });
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! khroma */
        "khroma");
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(khroma__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _theme_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./theme-helpers */
        "./src/themes/theme-helpers.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        var Theme = /*#__PURE__*/function () {
          function Theme() {
            _classCallCheck(this, Theme);

            this.background = '#333';
            this.primaryColor = '#1f2020';
            this.secondaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.primaryColor, 16);
            this.tertiaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
              h: -160
            });
            this.primaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.primaryColor, this.darkMode);
            this.secondaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.secondaryColor, this.darkMode);
            this.tertiaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.tertiaryColor, this.darkMode);
            this.primaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.primaryColor);
            this.secondaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.secondaryColor);
            this.tertiaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.tertiaryColor);
            this.lineColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.textColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.mainBkg = '#1f2020';
            this.secondBkg = 'calculated';
            this.mainContrastColor = 'lightgrey';
            this.darkTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])('#323D47'), 10);
            this.lineColor = 'calculated';
            this.border1 = '#81B1DB';
            this.border2 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["rgba"])(255, 255, 255, 0.25);
            this.arrowheadColor = 'calculated';
            this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
            this.fontSize = '16px';
            this.labelBackground = '#181818';
            this.textColor = '#ccc';
            /* Flowchart variables */

            this.nodeBkg = 'calculated';
            this.nodeBorder = 'calculated';
            this.clusterBkg = 'calculated';
            this.clusterBorder = 'calculated';
            this.defaultLinkColor = 'calculated';
            this.titleColor = '#F9FFFE';
            this.edgeLabelBackground = 'calculated';
            /* Sequence Diagram variables */

            this.actorBorder = 'calculated';
            this.actorBkg = 'calculated';
            this.actorTextColor = 'calculated';
            this.actorLineColor = 'calculated';
            this.signalColor = 'calculated';
            this.signalTextColor = 'calculated';
            this.labelBoxBkgColor = 'calculated';
            this.labelBoxBorderColor = 'calculated';
            this.labelTextColor = 'calculated';
            this.loopTextColor = 'calculated';
            this.noteBorderColor = 'calculated';
            this.noteBkgColor = '#fff5ad';
            this.noteTextColor = 'calculated';
            this.activationBorderColor = 'calculated';
            this.activationBkgColor = 'calculated';
            this.sequenceNumberColor = 'black';
            /* Gantt chart variables */

            this.sectionBkgColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])('#EAE8D9', 30);
            this.altSectionBkgColor = 'calculated';
            this.sectionBkgColor2 = '#EAE8D9';
            this.taskBorderColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["rgba"])(255, 255, 255, 70);
            this.taskBkgColor = 'calculated';
            this.taskTextColor = 'calculated';
            this.taskTextLightColor = 'calculated';
            this.taskTextOutsideColor = 'calculated';
            this.taskTextClickableColor = '#003163';
            this.activeTaskBorderColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["rgba"])(255, 255, 255, 50);
            this.activeTaskBkgColor = '#81B1DB';
            this.gridColor = 'calculated';
            this.doneTaskBkgColor = 'calculated';
            this.doneTaskBorderColor = 'grey';
            this.critBorderColor = '#E83737';
            this.critBkgColor = '#E83737';
            this.taskTextDarkColor = 'calculated';
            this.todayLineColor = '#DB5757';
            /* state colors */

            this.labelColor = 'calculated';
            this.errorBkgColor = '#a44141';
            this.errorTextColor = '#ddd';
          }

          _createClass(Theme, [{
            key: "updateColors",
            value: function updateColors() {
              this.secondBkg = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.mainBkg, 16);
              this.lineColor = this.mainContrastColor;
              this.arrowheadColor = this.mainContrastColor;
              /* Flowchart variables */

              this.nodeBkg = this.mainBkg;
              this.nodeBorder = this.border1;
              this.clusterBkg = this.secondBkg;
              this.clusterBorder = this.border2;
              this.defaultLinkColor = this.lineColor;
              this.edgeLabelBackground = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.labelBackground, 25);
              /* Sequence Diagram variables */

              this.actorBorder = this.border1;
              this.actorBkg = this.mainBkg;
              this.actorTextColor = this.mainContrastColor;
              this.actorLineColor = this.mainContrastColor;
              this.signalColor = this.mainContrastColor;
              this.signalTextColor = this.mainContrastColor;
              this.labelBoxBkgColor = this.actorBkg;
              this.labelBoxBorderColor = this.actorBorder;
              this.labelTextColor = this.mainContrastColor;
              this.loopTextColor = this.mainContrastColor;
              this.noteBorderColor = this.border2;
              this.noteTextColor = this.mainBkg;
              this.activationBorderColor = this.border1;
              this.activationBkgColor = this.secondBkg;
              /* Gantt chart variables */

              this.altSectionBkgColor = this.background;
              this.taskBkgColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.mainBkg, 23);
              this.taskTextColor = this.darkTextColor;
              this.taskTextLightColor = this.mainContrastColor;
              this.taskTextOutsideColor = this.taskTextLightColor;
              this.gridColor = this.mainContrastColor;
              this.doneTaskBkgColor = this.mainContrastColor;
              this.taskTextDarkColor = this.darkTextColor;
              /* state colors */

              this.labelColor = this.textColor;
              this.altBackground = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.background, 20);
              this.fillType0 = this.primaryColor;
              this.fillType1 = this.secondaryColor;
              this.fillType2 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 64
              });
              this.fillType3 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 64
              });
              this.fillType4 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: -64
              });
              this.fillType5 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: -64
              });
              this.fillType6 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 128
              });
              this.fillType7 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 128
              });
              /* class */

              this.classText = this.primaryTextColor;
            }
          }, {
            key: "calculate",
            value: function calculate(overrides) {
              var _this = this;

              if (_typeof(overrides) !== 'object') {
                // Calculate colors form base colors
                this.updateColors();
                return;
              }

              var keys = Object.keys(overrides); // Copy values from overrides, this is mainly for base colors

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              }); // Calculate colors form base colors

              this.updateColors(); // Copy values from overrides again in case of an override of derived value

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              });
            }
          }]);

          return Theme;
        }();

        var getThemeVariables = function getThemeVariables(userOverrides) {
          var theme = new Theme();
          theme.calculate(userOverrides);
          return theme;
        };
        /***/

      },

      /***/
      "./src/themes/theme-default.js":
      /*!*************************************!*\
        !*** ./src/themes/theme-default.js ***!
        \*************************************/

      /*! exports provided: getThemeVariables */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getThemeVariables", function () {
          return getThemeVariables;
        });
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! khroma */
        "khroma");
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(khroma__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _theme_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./theme-helpers */
        "./src/themes/theme-helpers.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        var Theme = /*#__PURE__*/function () {
          function Theme() {
            _classCallCheck(this, Theme);
            /* Base variables */


            this.background = '#f4f4f4';
            this.primaryColor = '#ECECFF';
            this.secondaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
              h: 120
            });
            this.secondaryColor = '#ffffde';
            this.tertiaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
              h: -160
            });
            this.primaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.primaryColor, this.darkMode);
            this.secondaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.secondaryColor, this.darkMode);
            this.tertiaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.tertiaryColor, this.darkMode); // this.noteBorderColor = mkBorder(this.noteBkgColor, this.darkMode);

            this.primaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.primaryColor);
            this.secondaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.secondaryColor);
            this.tertiaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.tertiaryColor);
            this.lineColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.textColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.background = 'white';
            this.mainBkg = '#ECECFF';
            this.secondBkg = '#ffffde';
            this.lineColor = '#333333';
            this.border1 = '#9370DB';
            this.border2 = '#aaaa33';
            this.arrowheadColor = '#333333';
            this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
            this.fontSize = '16px';
            this.labelBackground = '#e8e8e8';
            this.textColor = '#333';
            /* Flowchart variables */

            this.nodeBkg = 'calculated';
            this.nodeBorder = 'calculated';
            this.clusterBkg = 'calculated';
            this.clusterBorder = 'calculated';
            this.defaultLinkColor = 'calculated';
            this.titleColor = 'calculated';
            this.edgeLabelBackground = 'calculated';
            /* Sequence Diagram variables */

            this.actorBorder = 'calculated';
            this.actorBkg = 'calculated';
            this.actorTextColor = 'black';
            this.actorLineColor = 'grey';
            this.signalColor = 'calculated';
            this.signalTextColor = 'calculated';
            this.labelBoxBkgColor = 'calculated';
            this.labelBoxBorderColor = 'calculated';
            this.labelTextColor = 'calculated';
            this.loopTextColor = 'calculated';
            this.noteBorderColor = 'calculated';
            this.noteBkgColor = '#fff5ad';
            this.noteTextColor = 'calculated';
            this.activationBorderColor = '#666';
            this.activationBkgColor = '#f4f4f4';
            this.sequenceNumberColor = 'white';
            /* Gantt chart variables */

            this.sectionBkgColor = 'calculated';
            this.altSectionBkgColor = 'calculated';
            this.sectionBkgColor2 = 'calculated';
            this.taskBorderColor = 'calculated';
            this.taskBkgColor = 'calculated';
            this.taskTextLightColor = 'calculated';
            this.taskTextColor = this.taskTextLightColor;
            this.taskTextDarkColor = 'calculated';
            this.taskTextOutsideColor = this.taskTextDarkColor;
            this.taskTextClickableColor = 'calculated';
            this.activeTaskBorderColor = 'calculated';
            this.activeTaskBkgColor = 'calculated';
            this.gridColor = 'calculated';
            this.doneTaskBkgColor = 'calculated';
            this.doneTaskBorderColor = 'calculated';
            this.critBorderColor = 'calculated';
            this.critBkgColor = 'calculated';
            this.todayLineColor = 'calculated';
            this.sectionBkgColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["rgba"])(102, 102, 255, 0.49);
            this.altSectionBkgColor = 'white';
            this.sectionBkgColor2 = '#fff400';
            this.taskBorderColor = '#534fbc';
            this.taskBkgColor = '#8a90dd';
            this.taskTextLightColor = 'white';
            this.taskTextColor = 'calculated';
            this.taskTextDarkColor = 'black';
            this.taskTextOutsideColor = 'calculated';
            this.taskTextClickableColor = '#003163';
            this.activeTaskBorderColor = '#534fbc';
            this.activeTaskBkgColor = '#bfc7ff';
            this.gridColor = 'lightgrey';
            this.doneTaskBkgColor = 'lightgrey';
            this.doneTaskBorderColor = 'grey';
            this.critBorderColor = '#ff8888';
            this.critBkgColor = 'red';
            this.todayLineColor = 'red';
            /* state colors */

            this.labelColor = 'black';
            this.errorBkgColor = '#552222';
            this.errorTextColor = '#552222';
            this.updateColors();
          }

          _createClass(Theme, [{
            key: "updateColors",
            value: function updateColors() {
              /* Flowchart variables */
              this.nodeBkg = this.mainBkg;
              this.nodeBorder = this.border1; // border 1

              this.clusterBkg = this.secondBkg;
              this.clusterBorder = this.border2;
              this.defaultLinkColor = this.lineColor;
              this.titleColor = this.textColor;
              this.edgeLabelBackground = this.labelBackground;
              /* Sequence Diagram variables */
              // this.actorBorder = lighten(this.border1, 0.5);

              this.actorBorder = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.border1, 23);
              this.actorBkg = this.mainBkg;
              this.labelBoxBkgColor = this.actorBkg;
              this.signalColor = this.textColor;
              this.signalTextColor = this.textColor;
              this.labelBoxBorderColor = this.actorBorder;
              this.labelTextColor = this.actorTextColor;
              this.loopTextColor = this.actorTextColor;
              this.noteBorderColor = this.border2;
              this.noteTextColor = this.actorTextColor;
              /* Gantt chart variables */

              this.taskTextColor = this.taskTextLightColor;
              this.taskTextOutsideColor = this.taskTextDarkColor;
              /* state colors */

              /* class */

              this.classText = this.primaryTextColor;
              /* journey */

              this.fillType0 = this.primaryColor;
              this.fillType1 = this.secondaryColor;
              this.fillType2 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 64
              });
              this.fillType3 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 64
              });
              this.fillType4 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: -64
              });
              this.fillType5 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: -64
              });
              this.fillType6 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 128
              });
              this.fillType7 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 128
              });
            }
          }, {
            key: "calculate",
            value: function calculate(overrides) {
              var _this = this;

              if (_typeof(overrides) !== 'object') {
                // Calculate colors form base colors
                this.updateColors();
                return;
              }

              var keys = Object.keys(overrides); // Copy values from overrides, this is mainly for base colors

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              }); // Calculate colors form base colors

              this.updateColors(); // Copy values from overrides again in case of an override of derived value

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              });
            }
          }]);

          return Theme;
        }();

        var getThemeVariables = function getThemeVariables(userOverrides) {
          var theme = new Theme();
          theme.calculate(userOverrides);
          return theme;
        };
        /***/

      },

      /***/
      "./src/themes/theme-forest.js":
      /*!************************************!*\
        !*** ./src/themes/theme-forest.js ***!
        \************************************/

      /*! exports provided: getThemeVariables */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getThemeVariables", function () {
          return getThemeVariables;
        });
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! khroma */
        "khroma");
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(khroma__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _theme_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./theme-helpers */
        "./src/themes/theme-helpers.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        var Theme = /*#__PURE__*/function () {
          function Theme() {
            _classCallCheck(this, Theme);
            /* Base vales */


            this.background = '#f4f4f4';
            this.primaryColor = '#cde498';
            this.secondaryColor = '#cdffb2';
            this.background = 'white';
            this.mainBkg = '#cde498';
            this.secondBkg = '#cdffb2';
            this.lineColor = 'green';
            this.border1 = '#13540c';
            this.border2 = '#6eaa49';
            this.arrowheadColor = 'green';
            this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
            this.fontSize = '16px';
            this.tertiaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])('#cde498', 10);
            this.primaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.primaryColor, this.darkMode);
            this.secondaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.secondaryColor, this.darkMode);
            this.tertiaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.tertiaryColor, this.darkMode);
            this.primaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.primaryColor);
            this.secondaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.secondaryColor);
            this.tertiaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.primaryColor);
            this.lineColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.textColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            /* Flowchart variables */

            this.nodeBkg = 'calculated';
            this.nodeBorder = 'calculated';
            this.clusterBkg = 'calculated';
            this.clusterBorder = 'calculated';
            this.defaultLinkColor = 'calculated';
            this.titleColor = '#333';
            this.edgeLabelBackground = '#e8e8e8';
            /* Sequence Diagram variables */

            this.actorBorder = 'calculated';
            this.actorBkg = 'calculated';
            this.actorTextColor = 'black';
            this.actorLineColor = 'grey';
            this.signalColor = '#333';
            this.signalTextColor = '#333';
            this.labelBoxBkgColor = 'calculated';
            this.labelBoxBorderColor = '#326932';
            this.labelTextColor = 'calculated';
            this.loopTextColor = 'calculated';
            this.noteBorderColor = 'calculated';
            this.noteBkgColor = '#fff5ad';
            this.noteTextColor = 'calculated';
            this.activationBorderColor = '#666';
            this.activationBkgColor = '#f4f4f4';
            this.sequenceNumberColor = 'white';
            /* Gantt chart variables */

            this.sectionBkgColor = '#6eaa49';
            this.altSectionBkgColor = 'white';
            this.sectionBkgColor2 = '#6eaa49';
            this.taskBorderColor = 'calculated';
            this.taskBkgColor = '#487e3a';
            this.taskTextLightColor = 'white';
            this.taskTextColor = 'calculated';
            this.taskTextDarkColor = 'black';
            this.taskTextOutsideColor = 'calculated';
            this.taskTextClickableColor = '#003163';
            this.activeTaskBorderColor = 'calculated';
            this.activeTaskBkgColor = 'calculated';
            this.gridColor = 'lightgrey';
            this.doneTaskBkgColor = 'lightgrey';
            this.doneTaskBorderColor = 'grey';
            this.critBorderColor = '#ff8888';
            this.critBkgColor = 'red';
            this.todayLineColor = 'red';
            /* state colors */

            this.labelColor = 'black';
            this.errorBkgColor = '#552222';
            this.errorTextColor = '#552222';
          }

          _createClass(Theme, [{
            key: "updateColors",
            value: function updateColors() {
              /* Flowchart variables */
              this.nodeBkg = this.mainBkg;
              this.nodeBorder = this.border1;
              this.clusterBkg = this.secondBkg;
              this.clusterBorder = this.border2;
              this.defaultLinkColor = this.lineColor;
              /* Sequence Diagram variables */

              this.actorBorder = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])(this.mainBkg, 20);
              this.actorBkg = this.mainBkg;
              this.labelBoxBkgColor = this.actorBkg;
              this.labelTextColor = this.actorTextColor;
              this.loopTextColor = this.actorTextColor;
              this.noteBorderColor = this.border2;
              this.noteTextColor = this.actorTextColor;
              /* Gantt chart variables */

              this.taskBorderColor = this.border1;
              this.taskTextColor = this.taskTextLightColor;
              this.taskTextOutsideColor = this.taskTextDarkColor;
              this.activeTaskBorderColor = this.taskBorderColor;
              this.activeTaskBkgColor = this.mainBkg;
              /* state colors */

              /* class */

              this.classText = this.primaryTextColor;
              /* journey */

              this.fillType0 = this.primaryColor;
              this.fillType1 = this.secondaryColor;
              this.fillType2 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 64
              });
              this.fillType3 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 64
              });
              this.fillType4 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: -64
              });
              this.fillType5 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: -64
              });
              this.fillType6 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 128
              });
              this.fillType7 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 128
              });
            }
          }, {
            key: "calculate",
            value: function calculate(overrides) {
              var _this = this;

              if (_typeof(overrides) !== 'object') {
                // Calculate colors form base colors
                this.updateColors();
                return;
              }

              var keys = Object.keys(overrides); // Copy values from overrides, this is mainly for base colors

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              }); // Calculate colors form base colors

              this.updateColors(); // Copy values from overrides again in case of an override of derived value

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              });
            }
          }]);

          return Theme;
        }();

        var getThemeVariables = function getThemeVariables(userOverrides) {
          var theme = new Theme();
          theme.calculate(userOverrides);
          return theme;
        };
        /***/

      },

      /***/
      "./src/themes/theme-helpers.js":
      /*!*************************************!*\
        !*** ./src/themes/theme-helpers.js ***!
        \*************************************/

      /*! exports provided: mkBorder */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "mkBorder", function () {
          return mkBorder;
        });
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! khroma */
        "khroma");
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(khroma__WEBPACK_IMPORTED_MODULE_0__);

        var mkBorder = function mkBorder(col, darkMode) {
          return darkMode ? Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(col, {
            s: -40,
            l: 10
          }) : Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(col, {
            s: -40,
            l: -10
          });
        };
        /***/

      },

      /***/
      "./src/themes/theme-neutral.js":
      /*!*************************************!*\
        !*** ./src/themes/theme-neutral.js ***!
        \*************************************/

      /*! exports provided: getThemeVariables */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getThemeVariables", function () {
          return getThemeVariables;
        });
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! khroma */
        "khroma");
        /* harmony import */


        var khroma__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(khroma__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var _theme_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./theme-helpers */
        "./src/themes/theme-helpers.js");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        } // const Color = require ( 'khroma/dist/color' ).default
        // Color.format.hex.stringify(Color.parse('hsl(210, 66.6666666667%, 95%)')); // => "#EAF2FB"


        var Theme = /*#__PURE__*/function () {
          function Theme() {
            _classCallCheck(this, Theme);

            this.primaryColor = '#eee';
            this.contrast = '#26a';
            this.secondaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.contrast, 55);
            this.background = '#ffffff'; // this.secondaryColor = adjust(this.primaryColor, { h: 120 });

            this.tertiaryColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
              h: -160
            });
            this.primaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.primaryColor, this.darkMode);
            this.secondaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.secondaryColor, this.darkMode);
            this.tertiaryBorderColor = Object(_theme_helpers__WEBPACK_IMPORTED_MODULE_1__["mkBorder"])(this.tertiaryColor, this.darkMode); // this.noteBorderColor = mkBorder(this.noteBkgColor, this.darkMode);

            this.primaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.primaryColor);
            this.secondaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.secondaryColor);
            this.tertiaryTextColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.tertiaryColor);
            this.lineColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.textColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["invert"])(this.background);
            this.altBackground = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.contrast, 55);
            this.mainBkg = '#eee';
            this.secondBkg = 'calculated';
            this.lineColor = '#666';
            this.border1 = '#999';
            this.border2 = 'calculated';
            this.note = '#ffa';
            this.text = '#333';
            this.critical = '#d42';
            this.done = '#bbb';
            this.arrowheadColor = '#333333';
            this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
            this.fontSize = '16px';
            /* Flowchart variables */

            this.nodeBkg = 'calculated';
            this.nodeBorder = 'calculated';
            this.clusterBkg = 'calculated';
            this.clusterBorder = 'calculated';
            this.defaultLinkColor = 'calculated';
            this.titleColor = 'calculated';
            this.edgeLabelBackground = 'white';
            /* Sequence Diagram variables */

            this.actorBorder = 'calculated';
            this.actorBkg = 'calculated';
            this.actorTextColor = 'calculated';
            this.actorLineColor = 'calculated';
            this.signalColor = 'calculated';
            this.signalTextColor = 'calculated';
            this.labelBoxBkgColor = 'calculated';
            this.labelBoxBorderColor = 'calculated';
            this.labelTextColor = 'calculated';
            this.loopTextColor = 'calculated';
            this.noteBorderColor = 'calculated';
            this.noteBkgColor = 'calculated';
            this.noteTextColor = 'calculated';
            this.activationBorderColor = '#666';
            this.activationBkgColor = '#f4f4f4';
            this.sequenceNumberColor = 'white';
            /* Gantt chart variables */

            this.sectionBkgColor = 'calculated';
            this.altSectionBkgColor = 'white';
            this.sectionBkgColor2 = 'calculated';
            this.taskBorderColor = 'calculated';
            this.taskBkgColor = 'calculated';
            this.taskTextLightColor = 'white';
            this.taskTextColor = 'calculated';
            this.taskTextDarkColor = 'calculated';
            this.taskTextOutsideColor = 'calculated';
            this.taskTextClickableColor = '#003163';
            this.activeTaskBorderColor = 'calculated';
            this.activeTaskBkgColor = 'calculated';
            this.gridColor = 'calculated';
            this.doneTaskBkgColor = 'calculated';
            this.doneTaskBorderColor = 'calculated';
            this.critBkgColor = 'calculated';
            this.critBorderColor = 'calculated';
            this.todayLineColor = 'calculated';
            /* state colors */

            this.labelColor = 'black';
            this.errorBkgColor = '#552222';
            this.errorTextColor = '#552222';
          }

          _createClass(Theme, [{
            key: "updateColors",
            value: function updateColors() {
              this.secondBkg = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.contrast, 55);
              this.border2 = this.contrast;
              /* Flowchart variables */

              this.nodeBkg = this.mainBkg;
              this.nodeBorder = this.border1;
              this.clusterBkg = this.secondBkg;
              this.clusterBorder = this.border2;
              this.defaultLinkColor = this.lineColor;
              this.titleColor = this.text;
              /* Sequence Diagram variables */

              this.actorBorder = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.border1, 23);
              this.actorBkg = this.mainBkg;
              this.actorTextColor = this.text;
              this.actorLineColor = this.lineColor;
              this.signalColor = this.text;
              this.signalTextColor = this.text;
              this.labelBoxBkgColor = this.actorBkg;
              this.labelBoxBorderColor = this.actorBorder;
              this.labelTextColor = this.text;
              this.loopTextColor = this.text;
              this.noteBorderColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])(this.note, 60);
              this.noteBkgColor = this.note;
              this.noteTextColor = this.actorTextColor;
              /* Gantt chart variables */

              this.sectionBkgColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.contrast, 30);
              this.sectionBkgColor2 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.contrast, 30);
              this.taskBorderColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])(this.contrast, 10);
              this.taskBkgColor = this.contrast;
              this.taskTextColor = this.taskTextLightColor;
              this.taskTextDarkColor = this.text;
              this.taskTextOutsideColor = this.taskTextDarkColor;
              this.activeTaskBorderColor = this.taskBorderColor;
              this.activeTaskBkgColor = this.mainBkg;
              this.gridColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["lighten"])(this.border1, 30);
              this.doneTaskBkgColor = this.done;
              this.doneTaskBorderColor = this.lineColor;
              this.critBkgColor = this.critical;
              this.critBorderColor = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["darken"])(this.critBkgColor, 10);
              this.todayLineColor = this.critBkgColor;
              /* state colors */

              /* class */

              this.classText = this.primaryTextColor;
              /* journey */

              this.fillType0 = this.primaryColor;
              this.fillType1 = this.secondaryColor;
              this.fillType2 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 64
              });
              this.fillType3 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 64
              });
              this.fillType4 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: -64
              });
              this.fillType5 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: -64
              });
              this.fillType6 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.primaryColor, {
                h: 128
              });
              this.fillType7 = Object(khroma__WEBPACK_IMPORTED_MODULE_0__["adjust"])(this.secondaryColor, {
                h: 128
              });
            }
          }, {
            key: "calculate",
            value: function calculate(overrides) {
              var _this = this;

              if (_typeof(overrides) !== 'object') {
                // Calculate colors form base colors
                this.updateColors();
                return;
              }

              var keys = Object.keys(overrides); // Copy values from overrides, this is mainly for base colors

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              }); // Calculate colors form base colors

              this.updateColors(); // Copy values from overrides again in case of an override of derived value

              keys.forEach(function (k) {
                _this[k] = overrides[k];
              });
            }
          }]);

          return Theme;
        }();

        var getThemeVariables = function getThemeVariables(userOverrides) {
          var theme = new Theme();
          theme.calculate(userOverrides);
          return theme;
        };
        /***/

      },

      /***/
      "./src/utils.js":
      /*!**********************!*\
        !*** ./src/utils.js ***!
        \**********************/

      /*! exports provided: detectInit, detectDirective, detectType, isSubstringInArray, interpolateToCurve, formatUrl, runFunc, getStylesFromArray, generateId, random, assignWithDepth, getTextObj, drawSimpleText, wrapLabel, calculateTextHeight, calculateTextWidth, calculateTextDimensions, calculateSvgSizeAttrs, configureSvgSize, initIdGeneratior, default */

      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        "use strict";

        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "detectInit", function () {
          return detectInit;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "detectDirective", function () {
          return detectDirective;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "detectType", function () {
          return detectType;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "isSubstringInArray", function () {
          return isSubstringInArray;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "interpolateToCurve", function () {
          return interpolateToCurve;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "formatUrl", function () {
          return formatUrl;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "runFunc", function () {
          return runFunc;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getStylesFromArray", function () {
          return getStylesFromArray;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "generateId", function () {
          return generateId;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "random", function () {
          return random;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "assignWithDepth", function () {
          return assignWithDepth;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "getTextObj", function () {
          return getTextObj;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "drawSimpleText", function () {
          return drawSimpleText;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "wrapLabel", function () {
          return wrapLabel;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "calculateTextHeight", function () {
          return calculateTextHeight;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "calculateTextWidth", function () {
          return calculateTextWidth;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "calculateTextDimensions", function () {
          return calculateTextDimensions;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "calculateSvgSizeAttrs", function () {
          return calculateSvgSizeAttrs;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "configureSvgSize", function () {
          return configureSvgSize;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "initIdGeneratior", function () {
          return initIdGeneratior;
        });
        /* harmony import */


        var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! @braintree/sanitize-url */
        "@braintree/sanitize-url");
        /* harmony import */


        var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__);
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! d3 */
        "d3");
        /* harmony import */


        var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
        /* harmony import */


        var _diagrams_common_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./diagrams/common/common */
        "./src/diagrams/common/common.js");
        /* harmony import */


        var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./logger */
        "./src/logger.js");

        var _this = undefined;

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

        function _iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        } // import cryptoRandomString from 'crypto-random-string';
        // Effectively an enum of the supported curve types, accessible by name


        var d3CurveTypes = {
          curveBasis: d3__WEBPACK_IMPORTED_MODULE_1__["curveBasis"],
          curveBasisClosed: d3__WEBPACK_IMPORTED_MODULE_1__["curveBasisClosed"],
          curveBasisOpen: d3__WEBPACK_IMPORTED_MODULE_1__["curveBasisOpen"],
          curveLinear: d3__WEBPACK_IMPORTED_MODULE_1__["curveLinear"],
          curveLinearClosed: d3__WEBPACK_IMPORTED_MODULE_1__["curveLinearClosed"],
          curveMonotoneX: d3__WEBPACK_IMPORTED_MODULE_1__["curveMonotoneX"],
          curveMonotoneY: d3__WEBPACK_IMPORTED_MODULE_1__["curveMonotoneY"],
          curveNatural: d3__WEBPACK_IMPORTED_MODULE_1__["curveNatural"],
          curveStep: d3__WEBPACK_IMPORTED_MODULE_1__["curveStep"],
          curveStepAfter: d3__WEBPACK_IMPORTED_MODULE_1__["curveStepAfter"],
          curveStepBefore: d3__WEBPACK_IMPORTED_MODULE_1__["curveStepBefore"]
        };
        var directive = /[%]{2}[{]\s*(?:(?:(\w+)\s*:|(\w+))\s*(?:(?:(\w+))|((?:(?![}][%]{2}).|\r?\n)*))?\s*)(?:[}][%]{2})?/gi;
        var directiveWithoutOpen = /\s*(?:(?:(\w+)(?=:):|(\w+))\s*(?:(?:(\w+))|((?:(?![}][%]{2}).|\r?\n)*))?\s*)(?:[}][%]{2})?/gi;
        var anyComment = /\s*%%.*\n/gm;
        /**
         * @function detectInit
         * Detects the init config object from the text
         * ```mermaid
         * %%{init: {"theme": "debug", "logLevel": 1 }}%%
         * graph LR
         *  a-->b
         *  b-->c
         *  c-->d
         *  d-->e
         *  e-->f
         *  f-->g
         *  g-->h
         * ```
         * or
         * ```mermaid
         * %%{initialize: {"theme": "dark", logLevel: "debug" }}%%
         * graph LR
         *  a-->b
         *  b-->c
         *  c-->d
         *  d-->e
         *  e-->f
         *  f-->g
         *  g-->h
         * ```
         *
         * @param {string} text The text defining the graph
         * @returns {object} the json object representing the init passed to mermaid.initialize()
         */

        var detectInit = function detectInit(text) {
          var inits = detectDirective(text, /(?:init\b)|(?:initialize\b)/);
          var results = {};

          if (Array.isArray(inits)) {
            var args = inits.map(function (init) {
              return init.args;
            });
            results = assignWithDepth(results, _toConsumableArray(args));
          } else {
            results = inits.args;
          }

          if (results) {
            var type = detectType(text);
            ['config'].forEach(function (prop) {
              if (typeof results[prop] !== 'undefined') {
                if (type === 'flowchart-v2') {
                  type = 'flowchart';
                }

                results[type] = results[prop];
                delete results[prop];
              }
            });
          }

          return results;
        };
        /**
         * @function detectDirective
         * Detects the directive from the text. Text can be single line or multiline. If type is null or omitted
         * the first directive encountered in text will be returned
         * ```mermaid
         * graph LR
         *  %%{somedirective}%%
         *  a-->b
         *  b-->c
         *  c-->d
         *  d-->e
         *  e-->f
         *  f-->g
         *  g-->h
         * ```
         *
         * @param {string} text The text defining the graph
         * @param {string|RegExp} type The directive to return (default: null)
         * @returns {object | Array} An object or Array representing the directive(s): { type: string, args: object|null } matched by the input type
         *          if a single directive was found, that directive object will be returned.
         */


        var detectDirective = function detectDirective(text) {
          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          try {
            var commentWithoutDirectives = new RegExp("[%]{2}(?![{]".concat(directiveWithoutOpen.source, ")(?=[}][%]{2}).*\n"), 'ig');
            text = text.trim().replace(commentWithoutDirectives, '').replace(/'/gm, '"');

            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug("Detecting diagram directive".concat(type !== null ? ' type:' + type : '', " based on the text:").concat(text));

            var match,
                result = [];

            while ((match = directive.exec(text)) !== null) {
              // This is necessary to avoid infinite loops with zero-width matches
              if (match.index === directive.lastIndex) {
                directive.lastIndex++;
              }

              if (match && !type || type && match[1] && match[1].match(type) || type && match[2] && match[2].match(type)) {
                var _type = match[1] ? match[1] : match[2];

                var args = match[3] ? match[3].trim() : match[4] ? JSON.parse(match[4].trim()) : null;
                result.push({
                  type: _type,
                  args: args
                });
              }
            }

            if (result.length === 0) {
              result.push({
                type: text,
                args: null
              });
            }

            return result.length === 1 ? result[0] : result;
          } catch (error) {
            _logger__WEBPACK_IMPORTED_MODULE_3__["log"].error("ERROR: ".concat(error.message, " - Unable to parse directive").concat(type !== null ? ' type:' + type : '', " based on the text:").concat(text));

            return {
              type: null,
              args: null
            };
          }
        };
        /**
         * @function detectType
         * Detects the type of the graph text. Takes into consideration the possible existence of an %%init
         * directive
         * ```mermaid
         * %%{initialize: {"startOnLoad": true, logLevel: "fatal" }}%%
         * graph LR
         *  a-->b
         *  b-->c
         *  c-->d
         *  d-->e
         *  e-->f
         *  f-->g
         *  g-->h
         * ```
         *
         * @param {string} text The text defining the graph
         * @returns {string} A graph definition key
         */


        var detectType = function detectType(text) {
          text = text.replace(directive, '').replace(anyComment, '\n');

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].debug('Detecting diagram type based on the text ' + text);

          if (text.match(/^\s*sequenceDiagram/)) {
            return 'sequence';
          }

          if (text.match(/^\s*gantt/)) {
            return 'gantt';
          }

          if (text.match(/^\s*classDiagram-v2/)) {
            return 'classDiagram';
          }

          if (text.match(/^\s*classDiagram/)) {
            return 'class';
          }

          if (text.match(/^\s*stateDiagram-v2/)) {
            return 'stateDiagram';
          }

          if (text.match(/^\s*stateDiagram/)) {
            return 'state';
          }

          if (text.match(/^\s*gitGraph/)) {
            return 'git';
          }

          if (text.match(/^\s*flowchart/)) {
            return 'flowchart-v2';
          }

          if (text.match(/^\s*info/)) {
            return 'info';
          }

          if (text.match(/^\s*pie/)) {
            return 'pie';
          }

          if (text.match(/^\s*erDiagram/)) {
            return 'er';
          }

          if (text.match(/^\s*journey/)) {
            return 'journey';
          }

          return 'flowchart';
        };

        var memoize = function memoize(fn, resolver) {
          var cache = {};
          return function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            var n = resolver ? resolver.apply(_this, args) : args[0];

            if (n in cache) {
              return cache[n];
            } else {
              var result = fn.apply(void 0, args);
              cache[n] = result;
              return result;
            }
          };
        };
        /**
         * @function isSubstringInArray
         * Detects whether a substring in present in a given array
         * @param {string} str The substring to detect
         * @param {array} arr The array to search
         * @returns {number} the array index containing the substring or -1 if not present
         **/


        var isSubstringInArray = function isSubstringInArray(str, arr) {
          for (var i = 0; i < arr.length; i++) {
            if (arr[i].match(str)) return i;
          }

          return -1;
        };

        var interpolateToCurve = function interpolateToCurve(interpolate, defaultCurve) {
          if (!interpolate) {
            return defaultCurve;
          }

          var curveName = "curve".concat(interpolate.charAt(0).toUpperCase() + interpolate.slice(1));
          return d3CurveTypes[curveName] || defaultCurve;
        };

        var formatUrl = function formatUrl(linkStr, config) {
          var url = linkStr.trim();

          if (url) {
            if (config.securityLevel !== 'loose') {
              return Object(_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__["sanitizeUrl"])(url);
            }

            return url;
          }
        };

        var runFunc = function runFunc(functionName) {
          var _obj;

          var arrPaths = functionName.split('.');
          var len = arrPaths.length - 1;
          var fnName = arrPaths[len];
          var obj = window;

          for (var i = 0; i < len; i++) {
            obj = obj[arrPaths[i]];
            if (!obj) return;
          }

          for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            params[_key2 - 1] = arguments[_key2];
          }

          (_obj = obj)[fnName].apply(_obj, params);
        };

        var distance = function distance(p1, p2) {
          return p1 && p2 ? Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)) : 0;
        };

        var traverseEdge = function traverseEdge(points) {
          var prevPoint;
          var totalDistance = 0;
          points.forEach(function (point) {
            totalDistance += distance(point, prevPoint);
            prevPoint = point;
          }); // Traverse half of total distance along points

          var remainingDistance = totalDistance / 2;
          var center = undefined;
          prevPoint = undefined;
          points.forEach(function (point) {
            if (prevPoint && !center) {
              var vectorDistance = distance(point, prevPoint);

              if (vectorDistance < remainingDistance) {
                remainingDistance -= vectorDistance;
              } else {
                // The point is remainingDistance from prevPoint in the vector between prevPoint and point
                // Calculate the coordinates
                var distanceRatio = remainingDistance / vectorDistance;
                if (distanceRatio <= 0) center = prevPoint;
                if (distanceRatio >= 1) center = {
                  x: point.x,
                  y: point.y
                };

                if (distanceRatio > 0 && distanceRatio < 1) {
                  center = {
                    x: (1 - distanceRatio) * prevPoint.x + distanceRatio * point.x,
                    y: (1 - distanceRatio) * prevPoint.y + distanceRatio * point.y
                  };
                }
              }
            }

            prevPoint = point;
          });
          return center;
        };

        var calcLabelPosition = function calcLabelPosition(points) {
          return traverseEdge(points);
        };

        var calcCardinalityPosition = function calcCardinalityPosition(isRelationTypePresent, points, initialPosition) {
          var prevPoint;
          var totalDistance = 0; // eslint-disable-line

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('our points', points);

          if (points[0] !== initialPosition) {
            points = points.reverse();
          }

          points.forEach(function (point) {
            totalDistance += distance(point, prevPoint);
            prevPoint = point;
          }); // Traverse only 25 total distance along points to find cardinality point

          var distanceToCardinalityPoint = 25;
          var remainingDistance = distanceToCardinalityPoint;
          var center;
          prevPoint = undefined;
          points.forEach(function (point) {
            if (prevPoint && !center) {
              var vectorDistance = distance(point, prevPoint);

              if (vectorDistance < remainingDistance) {
                remainingDistance -= vectorDistance;
              } else {
                // The point is remainingDistance from prevPoint in the vector between prevPoint and point
                // Calculate the coordinates
                var distanceRatio = remainingDistance / vectorDistance;
                if (distanceRatio <= 0) center = prevPoint;
                if (distanceRatio >= 1) center = {
                  x: point.x,
                  y: point.y
                };

                if (distanceRatio > 0 && distanceRatio < 1) {
                  center = {
                    x: (1 - distanceRatio) * prevPoint.x + distanceRatio * point.x,
                    y: (1 - distanceRatio) * prevPoint.y + distanceRatio * point.y
                  };
                }
              }
            }

            prevPoint = point;
          }); // if relation is present (Arrows will be added), change cardinality point off-set distance (d)

          var d = isRelationTypePresent ? 10 : 5; //Calculate Angle for x and y axis

          var angle = Math.atan2(points[0].y - center.y, points[0].x - center.x);
          var cardinalityPosition = {
            x: 0,
            y: 0
          }; //Calculation cardinality position using angle, center point on the line/curve but pendicular and with offset-distance

          cardinalityPosition.x = Math.sin(angle) * d + (points[0].x + center.x) / 2;
          cardinalityPosition.y = -Math.cos(angle) * d + (points[0].y + center.y) / 2;
          return cardinalityPosition;
        };
        /**
         * position ['start_left', 'start_right', 'end_left', 'end_right']
         */


        var calcTerminalLabelPosition = function calcTerminalLabelPosition(terminalMarkerSize, position, _points) {
          // Todo looking to faster cloning method
          var points = JSON.parse(JSON.stringify(_points));
          var prevPoint;
          var totalDistance = 0; // eslint-disable-line

          _logger__WEBPACK_IMPORTED_MODULE_3__["log"].info('our points', points);

          if (position !== 'start_left' && position !== 'start_right') {
            points = points.reverse();
          }

          points.forEach(function (point) {
            totalDistance += distance(point, prevPoint);
            prevPoint = point;
          }); // Traverse only 25 total distance along points to find cardinality point

          var distanceToCardinalityPoint = 25;
          var remainingDistance = distanceToCardinalityPoint;
          var center;
          prevPoint = undefined;
          points.forEach(function (point) {
            if (prevPoint && !center) {
              var vectorDistance = distance(point, prevPoint);

              if (vectorDistance < remainingDistance) {
                remainingDistance -= vectorDistance;
              } else {
                // The point is remainingDistance from prevPoint in the vector between prevPoint and point
                // Calculate the coordinates
                var distanceRatio = remainingDistance / vectorDistance;
                if (distanceRatio <= 0) center = prevPoint;
                if (distanceRatio >= 1) center = {
                  x: point.x,
                  y: point.y
                };

                if (distanceRatio > 0 && distanceRatio < 1) {
                  center = {
                    x: (1 - distanceRatio) * prevPoint.x + distanceRatio * point.x,
                    y: (1 - distanceRatio) * prevPoint.y + distanceRatio * point.y
                  };
                }
              }
            }

            prevPoint = point;
          }); // if relation is present (Arrows will be added), change cardinality point off-set distance (d)

          var d = 10; //Calculate Angle for x and y axis

          var angle = Math.atan2(points[0].y - center.y, points[0].x - center.x);
          var cardinalityPosition = {
            x: 0,
            y: 0
          }; //Calculation cardinality position using angle, center point on the line/curve but pendicular and with offset-distance

          cardinalityPosition.x = Math.sin(angle) * d + (points[0].x + center.x) / 2;
          cardinalityPosition.y = -Math.cos(angle) * d + (points[0].y + center.y) / 2;

          if (position === 'start_left') {
            cardinalityPosition.x = Math.sin(angle + Math.PI) * d + (points[0].x + center.x) / 2;
            cardinalityPosition.y = -Math.cos(angle + Math.PI) * d + (points[0].y + center.y) / 2;
          }

          if (position === 'end_right') {
            cardinalityPosition.x = Math.sin(angle - Math.PI) * d + (points[0].x + center.x) / 2 - 5;
            cardinalityPosition.y = -Math.cos(angle - Math.PI) * d + (points[0].y + center.y) / 2 - 5;
          }

          if (position === 'end_left') {
            cardinalityPosition.x = Math.sin(angle) * d + (points[0].x + center.x) / 2 - 5;
            cardinalityPosition.y = -Math.cos(angle) * d + (points[0].y + center.y) / 2 - 5;
          }

          return cardinalityPosition;
        };

        var getStylesFromArray = function getStylesFromArray(arr) {
          var style = '';
          var labelStyle = '';

          for (var i = 0; i < arr.length; i++) {
            if (typeof arr[i] !== 'undefined') {
              // add text properties to label style definition
              if (arr[i].startsWith('color:') || arr[i].startsWith('text-align:')) {
                labelStyle = labelStyle + arr[i] + ';';
              } else {
                style = style + arr[i] + ';';
              }
            }
          }

          return {
            style: style,
            labelStyle: labelStyle
          };
        };

        var cnt = 0;

        var generateId = function generateId() {
          cnt++;
          return 'id-' + Math.random().toString(36).substr(2, 12) + '-' + cnt;
        };

        function makeid(length) {
          var result = '';
          var characters = '0123456789abcdef';
          var charactersLength = characters.length;

          for (var i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
          }

          return result;
        }

        var random = function random(options) {
          return makeid(options.length);
        };
        /**
         * @function assignWithDepth
         * Extends the functionality of {@link ObjectConstructor.assign} with the ability to merge arbitrary-depth objects
         * For each key in src with path `k` (recursively) performs an Object.assign(dst[`k`], src[`k`]) with
         * a slight change from the typical handling of undefined for dst[`k`]: instead of raising an error,
         * dst[`k`] is auto-initialized to {} and effectively merged with src[`k`]
         * <p>
         * Additionally, dissimilar types will not clobber unless the config.clobber parameter === true. Example:
         * ```
         * let config_0 = { foo: { bar: 'bar' }, bar: 'foo' };
         * let config_1 = { foo: 'foo', bar: 'bar' };
         * let result = assignWithDepth(config_0, config_1);
         * console.log(result);
         * //-> result: { foo: { bar: 'bar' }, bar: 'bar' }
         * ```
         * <p>
         * Traditional Object.assign would have clobbered foo in config_0 with foo in config_1.
         * <p>
         * If src is a destructured array of objects and dst is not an array, assignWithDepth will apply each element of src to dst
         * in order.
         * @param dst:any - the destination of the merge
         * @param src:any - the source object(s) to merge into destination
         * @param config:{ depth: number, clobber: boolean } - depth: depth to traverse within src and dst for merging -
         * clobber: should dissimilar types clobber (default: { depth: 2, clobber: false })
         * @returns {*}
         */


        var assignWithDepth = function assignWithDepth(dst, src, config) {
          var _Object$assign = Object.assign({
            depth: 2,
            clobber: false
          }, config),
              depth = _Object$assign.depth,
              clobber = _Object$assign.clobber;

          if (Array.isArray(src) && !Array.isArray(dst)) {
            src.forEach(function (s) {
              return assignWithDepth(dst, s, config);
            });
            return dst;
          } else if (Array.isArray(src) && Array.isArray(dst)) {
            src.forEach(function (s) {
              if (dst.indexOf(s) === -1) {
                dst.push(s);
              }
            });
            return dst;
          }

          if (typeof dst === 'undefined' || depth <= 0) {
            if (dst !== undefined && dst !== null && _typeof(dst) === 'object' && _typeof(src) === 'object') {
              return Object.assign(dst, src);
            } else {
              return src;
            }
          }

          if (typeof src !== 'undefined' && _typeof(dst) === 'object' && _typeof(src) === 'object') {
            Object.keys(src).forEach(function (key) {
              if (_typeof(src[key]) === 'object' && (dst[key] === undefined || _typeof(dst[key]) === 'object')) {
                if (dst[key] === undefined) {
                  dst[key] = Array.isArray(src[key]) ? [] : {};
                }

                dst[key] = assignWithDepth(dst[key], src[key], {
                  depth: depth - 1,
                  clobber: clobber
                });
              } else if (clobber || _typeof(dst[key]) !== 'object' && _typeof(src[key]) !== 'object') {
                dst[key] = src[key];
              }
            });
          }

          return dst;
        };

        var getTextObj = function getTextObj() {
          return {
            x: 0,
            y: 0,
            fill: undefined,
            anchor: 'start',
            style: '#666',
            width: 100,
            height: 100,
            textMargin: 0,
            rx: 0,
            ry: 0,
            valign: undefined
          };
        };

        var drawSimpleText = function drawSimpleText(elem, textData) {
          // Remove and ignore br:s
          var nText = textData.text.replace(_diagrams_common_common__WEBPACK_IMPORTED_MODULE_2__["default"].lineBreakRegex, ' ');
          var textElem = elem.append('text');
          textElem.attr('x', textData.x);
          textElem.attr('y', textData.y);
          textElem.style('text-anchor', textData.anchor);
          textElem.style('font-family', textData.fontFamily);
          textElem.style('font-size', textData.fontSize);
          textElem.style('font-weight', textData.fontWeight);
          textElem.attr('fill', textData.fill);

          if (typeof textData.class !== 'undefined') {
            textElem.attr('class', textData.class);
          }

          var span = textElem.append('tspan');
          span.attr('x', textData.x + textData.textMargin * 2);
          span.attr('fill', textData.fill);
          span.text(nText);
          return textElem;
        };

        var wrapLabel = memoize(function (label, maxWidth, config) {
          if (!label) {
            return label;
          }

          config = Object.assign({
            fontSize: 12,
            fontWeight: 400,
            fontFamily: 'Arial',
            joinWith: '<br/>'
          }, config);

          if (_diagrams_common_common__WEBPACK_IMPORTED_MODULE_2__["default"].lineBreakRegex.test(label)) {
            return label;
          }

          var words = label.split(' ');
          var completedLines = [];
          var nextLine = '';
          words.forEach(function (word, index) {
            var wordLength = calculateTextWidth("".concat(word, " "), config);
            var nextLineLength = calculateTextWidth(nextLine, config);

            if (wordLength > maxWidth) {
              var _breakString = breakString(word, maxWidth, '-', config),
                  hyphenatedStrings = _breakString.hyphenatedStrings,
                  remainingWord = _breakString.remainingWord;

              completedLines.push.apply(completedLines, [nextLine].concat(_toConsumableArray(hyphenatedStrings)));
              nextLine = remainingWord;
            } else if (nextLineLength + wordLength >= maxWidth) {
              completedLines.push(nextLine);
              nextLine = word;
            } else {
              nextLine = [nextLine, word].filter(Boolean).join(' ');
            }

            var currentWord = index + 1;
            var isLastWord = currentWord === words.length;

            if (isLastWord) {
              completedLines.push(nextLine);
            }
          });
          return completedLines.filter(function (line) {
            return line !== '';
          }).join(config.joinWith);
        }, function (label, maxWidth, config) {
          return "".concat(label, "-").concat(maxWidth, "-").concat(config.fontSize, "-").concat(config.fontWeight, "-").concat(config.fontFamily, "-").concat(config.joinWith);
        });
        var breakString = memoize(function (word, maxWidth) {
          var hyphenCharacter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';
          var config = arguments.length > 3 ? arguments[3] : undefined;
          config = Object.assign({
            fontSize: 12,
            fontWeight: 400,
            fontFamily: 'Arial',
            margin: 0
          }, config);
          var characters = word.split('');
          var lines = [];
          var currentLine = '';
          characters.forEach(function (character, index) {
            var nextLine = "".concat(currentLine).concat(character);
            var lineWidth = calculateTextWidth(nextLine, config);

            if (lineWidth >= maxWidth) {
              var currentCharacter = index + 1;
              var isLastLine = characters.length === currentCharacter;
              var hyphenatedNextLine = "".concat(nextLine).concat(hyphenCharacter);
              lines.push(isLastLine ? nextLine : hyphenatedNextLine);
              currentLine = '';
            } else {
              currentLine = nextLine;
            }
          });
          return {
            hyphenatedStrings: lines,
            remainingWord: currentLine
          };
        }, function (word, maxWidth) {
          var hyphenCharacter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';
          var config = arguments.length > 3 ? arguments[3] : undefined;
          return "".concat(word, "-").concat(maxWidth, "-").concat(hyphenCharacter, "-").concat(config.fontSize, "-").concat(config.fontWeight, "-").concat(config.fontFamily);
        });
        /**
         * This calculates the text's height, taking into account the wrap breaks and
         * both the statically configured height, width, and the length of the text (in pixels).
         *
         * If the wrapped text text has greater height, we extend the height, so it's
         * value won't overflow.
         *
         * @return - The height for the given text
         * @param text the text to measure
         * @param config - the config for fontSize, fontFamily, and fontWeight all impacting the resulting size
         */

        var calculateTextHeight = function calculateTextHeight(text, config) {
          config = Object.assign({
            fontSize: 12,
            fontWeight: 400,
            fontFamily: 'Arial',
            margin: 15
          }, config);
          return calculateTextDimensions(text, config).height;
        };
        /**
         * This calculates the width of the given text, font size and family.
         *
         * @return - The width for the given text
         * @param text - The text to calculate the width of
         * @param config - the config for fontSize, fontFamily, and fontWeight all impacting the resulting size
         */


        var calculateTextWidth = function calculateTextWidth(text, config) {
          config = Object.assign({
            fontSize: 12,
            fontWeight: 400,
            fontFamily: 'Arial'
          }, config);
          return calculateTextDimensions(text, config).width;
        };
        /**
         * This calculates the dimensions of the given text, font size, font family, font weight, and margins.
         *
         * @return - The width for the given text
         * @param text - The text to calculate the width of
         * @param config - the config for fontSize, fontFamily, fontWeight, and margin all impacting the resulting size
         */


        var calculateTextDimensions = memoize(function (text, config) {
          config = Object.assign({
            fontSize: 12,
            fontWeight: 400,
            fontFamily: 'Arial'
          }, config);
          var _config = config,
              fontSize = _config.fontSize,
              fontFamily = _config.fontFamily,
              fontWeight = _config.fontWeight;

          if (!text) {
            return {
              width: 0,
              height: 0
            };
          } // We can't really know if the user supplied font family will render on the user agent;
          // thus, we'll take the max width between the user supplied font family, and a default
          // of sans-serif.


          var fontFamilies = ['sans-serif', fontFamily];
          var lines = text.split(_diagrams_common_common__WEBPACK_IMPORTED_MODULE_2__["default"].lineBreakRegex);
          var dims = [];
          var body = Object(d3__WEBPACK_IMPORTED_MODULE_1__["select"])('body'); // We don't want to leak DOM elements - if a removal operation isn't available
          // for any reason, do not continue.

          if (!body.remove) {
            return {
              width: 0,
              height: 0,
              lineHeight: 0
            };
          }

          var g = body.append('svg');

          for (var _i = 0, _fontFamilies = fontFamilies; _i < _fontFamilies.length; _i++) {
            var _fontFamily = _fontFamilies[_i];
            var cheight = 0;
            var dim = {
              width: 0,
              height: 0,
              lineHeight: 0
            };
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var line = _step.value;
                var textObj = getTextObj();
                textObj.text = line;
                var textElem = drawSimpleText(g, textObj).style('font-size', fontSize).style('font-weight', fontWeight).style('font-family', _fontFamily);
                var bBox = (textElem._groups || textElem)[0][0].getBBox();
                dim.width = Math.round(Math.max(dim.width, bBox.width));
                cheight = Math.round(bBox.height);
                dim.height += cheight;
                dim.lineHeight = Math.round(Math.max(dim.lineHeight, cheight));
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            dims.push(dim);
          }

          g.remove();
          var index = isNaN(dims[1].height) || isNaN(dims[1].width) || isNaN(dims[1].lineHeight) || dims[0].height > dims[1].height && dims[0].width > dims[1].width && dims[0].lineHeight > dims[1].lineHeight ? 0 : 1;
          return dims[index];
        }, function (text, config) {
          return "".concat(text, "-").concat(config.fontSize, "-").concat(config.fontWeight, "-").concat(config.fontFamily);
        });

        var d3Attrs = function d3Attrs(d3Elem, attrs) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = attrs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var attr = _step2.value;
              d3Elem.attr(attr[0], attr[1]);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        };

        var calculateSvgSizeAttrs = function calculateSvgSizeAttrs(height, width, useMaxWidth) {
          var attrs = new Map();
          attrs.set('height', height);

          if (useMaxWidth) {
            attrs.set('width', '100%');
            attrs.set('style', "max-width: ".concat(width, "px;"));
          } else {
            attrs.set('width', width);
          }

          return attrs;
        };

        var configureSvgSize = function configureSvgSize(svgElem, height, width, useMaxWidth) {
          var attrs = calculateSvgSizeAttrs(height, width, useMaxWidth);
          d3Attrs(svgElem, attrs);
        };

        var initIdGeneratior = function initIdGeneratior(deterministic, seed) {
          if (!deterministic) return {
            next: function next() {
              return Date.now();
            }
          };

          var iterator = /*#__PURE__*/function () {
            function iterator() {
              _classCallCheck(this, iterator);

              return this.count = seed ? seed.length : 0;
            }

            _createClass(iterator, [{
              key: "next",
              value: function next() {
                return this.count++;
              }
            }]);

            return iterator;
          }();

          return new iterator();
        };
        /* harmony default export */


        __webpack_exports__["default"] = {
          assignWithDepth: assignWithDepth,
          wrapLabel: wrapLabel,
          calculateTextHeight: calculateTextHeight,
          calculateTextWidth: calculateTextWidth,
          calculateTextDimensions: calculateTextDimensions,
          calculateSvgSizeAttrs: calculateSvgSizeAttrs,
          configureSvgSize: configureSvgSize,
          detectInit: detectInit,
          detectDirective: detectDirective,
          detectType: detectType,
          isSubstringInArray: isSubstringInArray,
          interpolateToCurve: interpolateToCurve,
          calcLabelPosition: calcLabelPosition,
          calcCardinalityPosition: calcCardinalityPosition,
          calcTerminalLabelPosition: calcTerminalLabelPosition,
          formatUrl: formatUrl,
          getStylesFromArray: getStylesFromArray,
          generateId: generateId,
          random: random,
          memoize: memoize,
          runFunc: runFunc,
          initIdGeneratior: initIdGeneratior
        };
        /***/
      },

      /***/
      "@braintree/sanitize-url":
      /*!******************************************!*\
        !*** external "@braintree/sanitize-url" ***!
        \******************************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("@braintree/sanitize-url");
        /***/
      },

      /***/
      "d3":
      /*!*********************!*\
        !*** external "d3" ***!
        \*********************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("d3");
        /***/
      },

      /***/
      "dagre":
      /*!************************!*\
        !*** external "dagre" ***!
        \************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("dagre");
        /***/
      },

      /***/
      "dagre-d3":
      /*!***************************!*\
        !*** external "dagre-d3" ***!
        \***************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("dagre-d3");
        /***/
      },

      /***/
      "dagre-d3/lib/label/add-html-label.js":
      /*!*******************************************************!*\
        !*** external "dagre-d3/lib/label/add-html-label.js" ***!
        \*******************************************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("dagre-d3/lib/label/add-html-label.js");
        /***/
      },

      /***/
      "entity-decode/browser":
      /*!****************************************!*\
        !*** external "entity-decode/browser" ***!
        \****************************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("entity-decode/browser");
        /***/
      },

      /***/
      "graphlib":
      /*!***************************!*\
        !*** external "graphlib" ***!
        \***************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("graphlib");
        /***/
      },

      /***/
      "khroma":
      /*!*************************!*\
        !*** external "khroma" ***!
        \*************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("khroma");
        /***/
      },

      /***/
      "moment-mini":
      /*!******************************!*\
        !*** external "moment-mini" ***!
        \******************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("moment-mini");
        /***/
      },

      /***/
      "stylis":
      /*!*************************!*\
        !*** external "stylis" ***!
        \*************************/

      /*! no static exports found */

      /***/
      function (module, exports) {
        module.exports = require("stylis");
        /***/
      }
      /******/

    })["default"]
  );
});
},{"@braintree/sanitize-url":"node_modules/@braintree/sanitize-url/index.js","d3":"node_modules/d3/index.js","dagre":"node_modules/dagre/index.js","dagre-d3":"node_modules/dagre-d3/index.js","dagre-d3/lib/label/add-html-label.js":"node_modules/dagre-d3/lib/label/add-html-label.js","entity-decode/browser":"node_modules/entity-decode/browser.js","graphlib":"node_modules/graphlib/index.js","khroma":"node_modules/khroma/dist/index.js","moment-mini":"node_modules/moment-mini/moment.min.js","stylis":"node_modules/stylis/stylis.js","process":"node_modules/process/browser.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "1235" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js"], null)
//# sourceMappingURL=/mermaid.core.4e4ab67b.js.map