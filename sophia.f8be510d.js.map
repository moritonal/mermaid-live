{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/sophia/sophia.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","include","whitespace","comment","doccomment","string"],"mappings":"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","file":"sophia.f8be510d.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.aes',\r\n    brackets: [\r\n        { token: 'delimiter.curly', open: '{', close: '}' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n        { token: 'delimiter.square', open: '[', close: ']' },\r\n        { token: 'delimiter.angle', open: '<', close: '>' }\r\n    ],\r\n    keywords: [\r\n        // Main keywords\r\n        'contract',\r\n        'library',\r\n        'entrypoint',\r\n        'function',\r\n        'stateful',\r\n        'state',\r\n        'hash',\r\n        'signature',\r\n        'tuple',\r\n        'list',\r\n        'address',\r\n        'string',\r\n        'bool',\r\n        'int',\r\n        'record',\r\n        'datatype',\r\n        'type',\r\n        'option',\r\n        'oracle',\r\n        'oracle_query',\r\n        'Call',\r\n        'Bits',\r\n        'Bytes',\r\n        'Oracle',\r\n        'String',\r\n        'Crypto',\r\n        'Address',\r\n        'Auth',\r\n        'Chain',\r\n        'None',\r\n        'Some',\r\n        'bits',\r\n        'bytes',\r\n        'event',\r\n        'let',\r\n        'map',\r\n        'private',\r\n        'public',\r\n        'true',\r\n        'false',\r\n        'var',\r\n        'if',\r\n        'else',\r\n        'throw'\r\n    ],\r\n    operators: [\r\n        '=',\r\n        '>',\r\n        '<',\r\n        '!',\r\n        '~',\r\n        '?',\r\n        '::',\r\n        ':',\r\n        '==',\r\n        '<=',\r\n        '>=',\r\n        '!=',\r\n        '&&',\r\n        '||',\r\n        '++',\r\n        '--',\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '&',\r\n        '|',\r\n        '^',\r\n        '%',\r\n        '<<',\r\n        '>>',\r\n        '>>>',\r\n        '+=',\r\n        '-=',\r\n        '*=',\r\n        '/=',\r\n        '&=',\r\n        '|=',\r\n        '^=',\r\n        '%=',\r\n        '<<=',\r\n        '>>=',\r\n        '>>>='\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\r\n    floatsuffix: /[fFlL]?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_]\\w*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // [[ attributes ]].\r\n            [/\\[\\[.*\\]\\]/, 'annotation'],\r\n            // Preprocessor directive\r\n            [/^\\s*#\\w+/, 'keyword'],\r\n            //DataTypes\r\n            [/int\\d*/, 'keyword'],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\r\n            [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\r\n            [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\r\n            [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\r\n            [/\\d(@integersuffix)/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        //Identical copy of comment above, except for the addition of .doc\r\n        doccomment: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ]\r\n    }\r\n};\r\n"]}