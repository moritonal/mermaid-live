{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"mappings":"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","file":"postiats.997ec033.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Artyom Shalkhakov. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *\r\n *  Based on the ATS/Postiats lexer by Hongwei Xi.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] }\r\n    ]\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.pats',\r\n    // TODO: staload and dynload are followed by a special kind of string literals\r\n    // with {$IDENTIFER} variables, and it also may make sense to highlight\r\n    // the punctuation (. and / and \\) differently.\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\r\n    keywords: [\r\n        //\r\n        'abstype',\r\n        'abst0ype',\r\n        'absprop',\r\n        'absview',\r\n        'absvtype',\r\n        'absviewtype',\r\n        'absvt0ype',\r\n        'absviewt0ype',\r\n        //\r\n        'as',\r\n        //\r\n        'and',\r\n        //\r\n        'assume',\r\n        //\r\n        'begin',\r\n        //\r\n        /*\r\n                \"case\", // CASE\r\n        */\r\n        //\r\n        'classdec',\r\n        //\r\n        'datasort',\r\n        //\r\n        'datatype',\r\n        'dataprop',\r\n        'dataview',\r\n        'datavtype',\r\n        'dataviewtype',\r\n        //\r\n        'do',\r\n        //\r\n        'end',\r\n        //\r\n        'extern',\r\n        'extype',\r\n        'extvar',\r\n        //\r\n        'exception',\r\n        //\r\n        'fn',\r\n        'fnx',\r\n        'fun',\r\n        //\r\n        'prfn',\r\n        'prfun',\r\n        //\r\n        'praxi',\r\n        'castfn',\r\n        //\r\n        'if',\r\n        'then',\r\n        'else',\r\n        //\r\n        'ifcase',\r\n        //\r\n        'in',\r\n        //\r\n        'infix',\r\n        'infixl',\r\n        'infixr',\r\n        'prefix',\r\n        'postfix',\r\n        //\r\n        'implmnt',\r\n        'implement',\r\n        //\r\n        'primplmnt',\r\n        'primplement',\r\n        //\r\n        'import',\r\n        //\r\n        /*\r\n                \"lam\", // LAM\r\n                \"llam\", // LLAM\r\n                \"fix\", // FIX\r\n        */\r\n        //\r\n        'let',\r\n        //\r\n        'local',\r\n        //\r\n        'macdef',\r\n        'macrodef',\r\n        //\r\n        'nonfix',\r\n        //\r\n        'symelim',\r\n        'symintr',\r\n        'overload',\r\n        //\r\n        'of',\r\n        'op',\r\n        //\r\n        'rec',\r\n        //\r\n        'sif',\r\n        'scase',\r\n        //\r\n        'sortdef',\r\n        /*\r\n        // HX: [sta] is now deprecated\r\n        */\r\n        'sta',\r\n        'stacst',\r\n        'stadef',\r\n        'static',\r\n        /*\r\n                \"stavar\", // T_STAVAR\r\n        */\r\n        //\r\n        'staload',\r\n        'dynload',\r\n        //\r\n        'try',\r\n        //\r\n        'tkindef',\r\n        //\r\n        /*\r\n                \"type\", // TYPE\r\n        */\r\n        'typedef',\r\n        'propdef',\r\n        'viewdef',\r\n        'vtypedef',\r\n        'viewtypedef',\r\n        //\r\n        /*\r\n                \"val\", // VAL\r\n        */\r\n        'prval',\r\n        //\r\n        'var',\r\n        'prvar',\r\n        //\r\n        'when',\r\n        'where',\r\n        //\r\n        /*\r\n                \"for\", // T_FOR\r\n                \"while\", // T_WHILE\r\n        */\r\n        //\r\n        'with',\r\n        //\r\n        'withtype',\r\n        'withprop',\r\n        'withview',\r\n        'withvtype',\r\n        'withviewtype' // WITHVIEWTYPE\r\n        //\r\n    ],\r\n    keywords_dlr: [\r\n        '$delay',\r\n        '$ldelay',\r\n        //\r\n        '$arrpsz',\r\n        '$arrptrsize',\r\n        //\r\n        '$d2ctype',\r\n        //\r\n        '$effmask',\r\n        '$effmask_ntm',\r\n        '$effmask_exn',\r\n        '$effmask_ref',\r\n        '$effmask_wrt',\r\n        '$effmask_all',\r\n        //\r\n        '$extern',\r\n        '$extkind',\r\n        '$extype',\r\n        '$extype_struct',\r\n        //\r\n        '$extval',\r\n        '$extfcall',\r\n        '$extmcall',\r\n        //\r\n        '$literal',\r\n        //\r\n        '$myfilename',\r\n        '$mylocation',\r\n        '$myfunction',\r\n        //\r\n        '$lst',\r\n        '$lst_t',\r\n        '$lst_vt',\r\n        '$list',\r\n        '$list_t',\r\n        '$list_vt',\r\n        //\r\n        '$rec',\r\n        '$rec_t',\r\n        '$rec_vt',\r\n        '$record',\r\n        '$record_t',\r\n        '$record_vt',\r\n        //\r\n        '$tup',\r\n        '$tup_t',\r\n        '$tup_vt',\r\n        '$tuple',\r\n        '$tuple_t',\r\n        '$tuple_vt',\r\n        //\r\n        '$break',\r\n        '$continue',\r\n        //\r\n        '$raise',\r\n        //\r\n        '$showtype',\r\n        //\r\n        '$vcopyenv_v',\r\n        '$vcopyenv_vt',\r\n        //\r\n        '$tempenver',\r\n        //\r\n        '$solver_assert',\r\n        '$solver_verify' // T_DLRSOLVERIFY\r\n    ],\r\n    keywords_srp: [\r\n        //\r\n        '#if',\r\n        '#ifdef',\r\n        '#ifndef',\r\n        //\r\n        '#then',\r\n        //\r\n        '#elif',\r\n        '#elifdef',\r\n        '#elifndef',\r\n        //\r\n        '#else',\r\n        '#endif',\r\n        //\r\n        '#error',\r\n        //\r\n        '#prerr',\r\n        '#print',\r\n        //\r\n        '#assert',\r\n        //\r\n        '#undef',\r\n        '#define',\r\n        //\r\n        '#include',\r\n        '#require',\r\n        //\r\n        '#pragma',\r\n        '#codegen2',\r\n        '#codegen3' // T_SRPCODEGEN3 // for level-3 codegen\r\n        //\r\n        // HX: end of special tokens\r\n        //\r\n    ],\r\n    irregular_keyword_list: [\r\n        'val+',\r\n        'val-',\r\n        'val',\r\n        'case+',\r\n        'case-',\r\n        'case',\r\n        'addr@',\r\n        'addr',\r\n        'fold@',\r\n        'free@',\r\n        'fix@',\r\n        'fix',\r\n        'lam@',\r\n        'lam',\r\n        'llam@',\r\n        'llam',\r\n        'viewt@ype+',\r\n        'viewt@ype-',\r\n        'viewt@ype',\r\n        'viewtype+',\r\n        'viewtype-',\r\n        'viewtype',\r\n        'view+',\r\n        'view-',\r\n        'view@',\r\n        'view',\r\n        'type+',\r\n        'type-',\r\n        'type',\r\n        'vtype+',\r\n        'vtype-',\r\n        'vtype',\r\n        'vt@ype+',\r\n        'vt@ype-',\r\n        'vt@ype',\r\n        'viewt@ype+',\r\n        'viewt@ype-',\r\n        'viewt@ype',\r\n        'viewtype+',\r\n        'viewtype-',\r\n        'viewtype',\r\n        'prop+',\r\n        'prop-',\r\n        'prop',\r\n        'type+',\r\n        'type-',\r\n        'type',\r\n        't@ype',\r\n        't@ype+',\r\n        't@ype-',\r\n        'abst@ype',\r\n        'abstype',\r\n        'absviewt@ype',\r\n        'absvt@ype',\r\n        'for*',\r\n        'for',\r\n        'while*',\r\n        'while'\r\n    ],\r\n    keywords_types: [\r\n        'bool',\r\n        'double',\r\n        'byte',\r\n        'int',\r\n        'short',\r\n        'char',\r\n        'void',\r\n        'unit',\r\n        'long',\r\n        'float',\r\n        'string',\r\n        'strptr'\r\n    ],\r\n    // TODO: reference for this?\r\n    keywords_effects: [\r\n        '0',\r\n        'fun',\r\n        'clo',\r\n        'prf',\r\n        'funclo',\r\n        'cloptr',\r\n        'cloref',\r\n        'ref',\r\n        'ntm',\r\n        '1' // all effects\r\n    ],\r\n    operators: [\r\n        '@',\r\n        '!',\r\n        '|',\r\n        '`',\r\n        ':',\r\n        '$',\r\n        '.',\r\n        '=',\r\n        '#',\r\n        '~',\r\n        //\r\n        '..',\r\n        '...',\r\n        //\r\n        '=>',\r\n        // \"=<\", // T_EQLT\r\n        '=<>',\r\n        '=/=>',\r\n        '=>>',\r\n        '=/=>>',\r\n        //\r\n        '<',\r\n        '>',\r\n        //\r\n        '><',\r\n        //\r\n        '.<',\r\n        '>.',\r\n        //\r\n        '.<>.',\r\n        //\r\n        '->',\r\n        //\"-<\", // T_MINUSLT\r\n        '-<>' // T_MINUSLTGT\r\n        //\r\n        /*\r\n                \":<\", // T_COLONLT\r\n        */\r\n    ],\r\n    brackets: [\r\n        { open: ',(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '`(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '%(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: \"'(\", close: ')', token: 'delimiter.parenthesis' },\r\n        { open: \"'{\", close: '}', token: 'delimiter.parenthesis' },\r\n        { open: '@(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '@{', close: '}', token: 'delimiter.brace' },\r\n        { open: '@[', close: ']', token: 'delimiter.square' },\r\n        { open: '#[', close: ']', token: 'delimiter.square' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    IDENTFST: /[a-zA-Z_]/,\r\n    IDENTRST: /[a-zA-Z0-9_'$]/,\r\n    symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\r\n    digit: /[0-9]/,\r\n    digitseq0: /@digit*/,\r\n    xdigit: /[0-9A-Za-z]/,\r\n    xdigitseq0: /@xdigit*/,\r\n    INTSP: /[lLuU]/,\r\n    FLOATSP: /[fFlL]/,\r\n    fexponent: /[eE][+-]?[0-9]+/,\r\n    fexponent_bin: /[pP][+-]?[0-9]+/,\r\n    deciexp: /\\.[0-9]*@fexponent?/,\r\n    hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\r\n    irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\r\n    ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\r\n    start: 'root',\r\n    // The main tokenizer for ATS/Postiats\r\n    // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\r\n    tokenizer: {\r\n        root: [\r\n            // lexing_blankseq0\r\n            { regex: /[ \\t\\r\\n]+/, action: { token: '' } },\r\n            // NOTE: (*) is an invalid ML-like comment!\r\n            { regex: /\\(\\*\\)/, action: { token: 'invalid' } },\r\n            {\r\n                regex: /\\(\\*/,\r\n                action: { token: 'comment', next: 'lexing_COMMENT_block_ml' }\r\n            },\r\n            {\r\n                regex: /\\(/,\r\n                action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/\r\n            },\r\n            {\r\n                regex: /\\)/,\r\n                action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/\r\n            },\r\n            {\r\n                regex: /\\[/,\r\n                action: '@brackets' /*{ token: 'delimiter.bracket' }*/\r\n            },\r\n            {\r\n                regex: /\\]/,\r\n                action: '@brackets' /*{ token: 'delimiter.bracket' }*/\r\n            },\r\n            {\r\n                regex: /\\{/,\r\n                action: '@brackets' /*{ token: 'delimiter.brace' }*/\r\n            },\r\n            {\r\n                regex: /\\}/,\r\n                action: '@brackets' /*{ token: 'delimiter.brace' }*/\r\n            },\r\n            // lexing_COMMA\r\n            {\r\n                regex: /,\\(/,\r\n                action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/\r\n            },\r\n            { regex: /,/, action: { token: 'delimiter.comma' } },\r\n            { regex: /;/, action: { token: 'delimiter.semicolon' } },\r\n            // lexing_AT\r\n            {\r\n                regex: /@\\(/,\r\n                action: '@brackets' /* { token: 'delimiter.parenthesis' }*/\r\n            },\r\n            {\r\n                regex: /@\\[/,\r\n                action: '@brackets' /* { token: 'delimiter.bracket' }*/\r\n            },\r\n            {\r\n                regex: /@\\{/,\r\n                action: '@brackets' /*{ token: 'delimiter.brace' }*/\r\n            },\r\n            // lexing_COLON\r\n            {\r\n                regex: /:</,\r\n                action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' }\r\n            },\r\n            /*\r\n            lexing_DOT:\r\n\r\n            . // SYMBOLIC => lexing_IDENT_sym\r\n            . FLOATDOT => lexing_FLOAT_deciexp\r\n            . DIGIT => T_DOTINT\r\n            */\r\n            { regex: /\\.@symbolic+/, action: { token: 'identifier.sym' } },\r\n            // FLOATDOT case\r\n            {\r\n                regex: /\\.@digit*@fexponent@FLOATSP*/,\r\n                action: { token: 'number.float' }\r\n            },\r\n            { regex: /\\.@digit+/, action: { token: 'number.float' } },\r\n            // lexing_DOLLAR:\r\n            // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\r\n            {\r\n                regex: /\\$@IDENTFST@IDENTRST*/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_dlr': { token: 'keyword.dlr' },\r\n                        '@default': { token: 'namespace' } // most likely a module qualifier\r\n                    }\r\n                }\r\n            },\r\n            // lexing_SHARP:\r\n            // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\r\n            {\r\n                regex: /\\#@IDENTFST@IDENTRST*/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_srp': { token: 'keyword.srp' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            // lexing_PERCENT:\r\n            { regex: /%\\(/, action: { token: 'delimiter.parenthesis' } },\r\n            {\r\n                regex: /^%{(#|\\^|\\$)?/,\r\n                action: {\r\n                    token: 'keyword',\r\n                    next: '@lexing_EXTCODE',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            },\r\n            { regex: /^%}/, action: { token: 'keyword' } },\r\n            // lexing_QUOTE\r\n            { regex: /'\\(/, action: { token: 'delimiter.parenthesis' } },\r\n            { regex: /'\\[/, action: { token: 'delimiter.bracket' } },\r\n            { regex: /'\\{/, action: { token: 'delimiter.brace' } },\r\n            [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, ['string', 'string.escape', 'string']],\r\n            [/'[^\\\\']'/, 'string'],\r\n            // lexing_DQUOTE\r\n            [/\"/, 'string.quote', '@lexing_DQUOTE'],\r\n            // lexing_BQUOTE\r\n            {\r\n                regex: /`\\(/,\r\n                action: '@brackets' /* { token: 'delimiter.parenthesis' }*/\r\n            },\r\n            // TODO: otherwise, try lexing_IDENT_sym\r\n            { regex: /\\\\/, action: { token: 'punctuation' } },\r\n            // lexing_IDENT_alp:\r\n            // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\r\n            // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\r\n            {\r\n                regex: /@irregular_keywords(?!@IDENTRST)/,\r\n                action: { token: 'keyword' }\r\n            },\r\n            {\r\n                regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\r\n                action: {\r\n                    cases: {\r\n                        // TODO: dynload and staload should be specially parsed\r\n                        // dynload whitespace+ \"special_string\"\r\n                        // this special string is really:\r\n                        //  '/' '\\\\' '.' => punctuation\r\n                        // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\r\n                        // [^\"] => identifier/literal\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@keywords_types': { token: 'type' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            // lexing_IDENT_sym:\r\n            {\r\n                regex: /\\/\\/\\/\\//,\r\n                action: { token: 'comment', next: '@lexing_COMMENT_rest' }\r\n            },\r\n            { regex: /\\/\\/.*$/, action: { token: 'comment' } },\r\n            {\r\n                regex: /\\/\\*/,\r\n                action: { token: 'comment', next: '@lexing_COMMENT_block_c' }\r\n            },\r\n            // AS-20160627: specifically for effect annotations\r\n            {\r\n                regex: /-<|=</,\r\n                action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' }\r\n            },\r\n            {\r\n                regex: /@symbolic+/,\r\n                action: {\r\n                    cases: {\r\n                        '@operators': 'keyword',\r\n                        '@default': 'operator'\r\n                    }\r\n                }\r\n            },\r\n            // lexing_ZERO:\r\n            // FIXME: this one is quite messy/unfinished yet\r\n            // TODO: lexing_INT_hex\r\n            // - testing_hexiexp => lexing_FLOAT_hexiexp\r\n            // - testing_fexponent_bin => lexing_FLOAT_hexiexp\r\n            // - testing_intspseq0 => T_INT_hex\r\n            // lexing_INT_hex:\r\n            {\r\n                regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\r\n                action: { token: 'number.float' }\r\n            },\r\n            { regex: /0[xX]@xdigit+@INTSP*/, action: { token: 'number.hex' } },\r\n            {\r\n                regex: /0[0-7]+(?![0-9])@INTSP*/,\r\n                action: { token: 'number.octal' }\r\n            },\r\n            //{regex: /0/, action: { token: 'number' } }, // INTZERO\r\n            // lexing_INT_dec:\r\n            // - testing_deciexp => lexing_FLOAT_deciexp\r\n            // - testing_fexponent => lexing_FLOAT_deciexp\r\n            // - otherwise => intspseq0 ([0-9]*[lLuU]?)\r\n            {\r\n                regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\r\n                action: { token: 'number.float' }\r\n            },\r\n            {\r\n                regex: /@digit@digitseq0@INTSP*/,\r\n                action: { token: 'number.decimal' }\r\n            },\r\n            // DIGIT, if followed by digitseq0, is lexing_INT_dec\r\n            { regex: /@digit+@INTSP*/, action: { token: 'number' } }\r\n        ],\r\n        lexing_COMMENT_block_ml: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            [/\\(\\*/, 'comment', '@push'],\r\n            [/\\(\\*/, 'comment.invalid'],\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\*/, 'comment']\r\n        ],\r\n        lexing_COMMENT_block_c: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\r\n            // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        lexing_COMMENT_rest: [\r\n            [/$/, 'comment', '@pop'],\r\n            [/.*/, 'comment']\r\n        ],\r\n        // NOTE: added by AS, specifically for highlighting\r\n        lexing_EFFECT_commaseq0: [\r\n            {\r\n                regex: /@IDENTFST@IDENTRST+|@digit+/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_effects': { token: 'type.effect' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            { regex: /,/, action: { token: 'punctuation' } },\r\n            { regex: />/, action: { token: '@rematch', next: '@pop' } }\r\n        ],\r\n        lexing_EXTCODE: [\r\n            {\r\n                regex: /^%}/,\r\n                action: {\r\n                    token: '@rematch',\r\n                    next: '@pop',\r\n                    nextEmbedded: '@pop'\r\n                }\r\n            },\r\n            { regex: /[^%]+/, action: '' }\r\n        ],\r\n        lexing_DQUOTE: [\r\n            { regex: /\"/, action: { token: 'string.quote', next: '@pop' } },\r\n            // AS-20160628: additional hi-lighting for variables in staload/dynload strings\r\n            {\r\n                regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\r\n                action: [\r\n                    { token: 'string.escape' },\r\n                    { token: 'identifier' },\r\n                    { token: 'string.escape' }\r\n                ]\r\n            },\r\n            { regex: /\\\\$/, action: { token: 'string.escape' } },\r\n            {\r\n                regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\r\n                action: { token: 'string.escape' }\r\n            },\r\n            { regex: /[^\\\\\"]+/, action: { token: 'string' } }\r\n        ]\r\n    }\r\n};\r\n"]}