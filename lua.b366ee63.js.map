{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/lua/lua.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","keywords","token","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","next","string"],"mappings":"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","file":"lua.b366ee63.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '--',\r\n        blockComment: ['--[[', ']]']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.lua',\r\n    keywords: [\r\n        'and',\r\n        'break',\r\n        'do',\r\n        'else',\r\n        'elseif',\r\n        'end',\r\n        'false',\r\n        'for',\r\n        'function',\r\n        'goto',\r\n        'if',\r\n        'in',\r\n        'local',\r\n        'nil',\r\n        'not',\r\n        'or',\r\n        'repeat',\r\n        'return',\r\n        'then',\r\n        'true',\r\n        'until',\r\n        'while'\r\n    ],\r\n    brackets: [\r\n        { token: 'delimiter.bracket', open: '{', close: '}' },\r\n        { token: 'delimiter.array', open: '[', close: ']' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' }\r\n    ],\r\n    operators: [\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '%',\r\n        '^',\r\n        '#',\r\n        '==',\r\n        '~=',\r\n        '<=',\r\n        '>=',\r\n        '<',\r\n        '>',\r\n        '=',\r\n        ';',\r\n        ':',\r\n        ',',\r\n        '.',\r\n        '..',\r\n        '...'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_]\\w*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // keys\r\n            [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],\r\n            [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\r\n            [/\\d+?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings: recover on non-terminated strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string.\"'],\r\n            [/'/, 'string', \"@string.'\"]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/--\\[([=]*)\\[/, 'comment', '@comment.$1'],\r\n            [/--.*$/, 'comment']\r\n        ],\r\n        comment: [\r\n            [/[^\\]]+/, 'comment'],\r\n            [\r\n                /\\]([=]*)\\]/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S2': { token: 'comment', next: '@pop' },\r\n                        '@default': 'comment'\r\n                    }\r\n                }\r\n            ],\r\n            [/./, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [\r\n                /[\"']/,\r\n                {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ]\r\n        ]\r\n    }\r\n};\r\n"]}