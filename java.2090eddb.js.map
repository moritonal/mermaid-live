{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/java/java.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","token","include","whitespace","comment","javadoc","string"],"mappings":"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","file":"java.2090eddb.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    // the default separators except `@$`\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '<', close: '>' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\r\n            end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.java',\r\n    keywords: [\r\n        'abstract',\r\n        'continue',\r\n        'for',\r\n        'new',\r\n        'switch',\r\n        'assert',\r\n        'default',\r\n        'goto',\r\n        'package',\r\n        'synchronized',\r\n        'boolean',\r\n        'do',\r\n        'if',\r\n        'private',\r\n        'this',\r\n        'break',\r\n        'double',\r\n        'implements',\r\n        'protected',\r\n        'throw',\r\n        'byte',\r\n        'else',\r\n        'import',\r\n        'public',\r\n        'throws',\r\n        'case',\r\n        'enum',\r\n        'instanceof',\r\n        'return',\r\n        'transient',\r\n        'catch',\r\n        'extends',\r\n        'int',\r\n        'short',\r\n        'try',\r\n        'char',\r\n        'final',\r\n        'interface',\r\n        'static',\r\n        'void',\r\n        'class',\r\n        'finally',\r\n        'long',\r\n        'strictfp',\r\n        'volatile',\r\n        'const',\r\n        'float',\r\n        'native',\r\n        'super',\r\n        'while',\r\n        'true',\r\n        'false'\r\n    ],\r\n    operators: [\r\n        '=',\r\n        '>',\r\n        '<',\r\n        '!',\r\n        '~',\r\n        '?',\r\n        ':',\r\n        '==',\r\n        '<=',\r\n        '>=',\r\n        '!=',\r\n        '&&',\r\n        '||',\r\n        '++',\r\n        '--',\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '&',\r\n        '|',\r\n        '^',\r\n        '%',\r\n        '<<',\r\n        '>>',\r\n        '>>>',\r\n        '+=',\r\n        '-=',\r\n        '*=',\r\n        '/=',\r\n        '&=',\r\n        '|=',\r\n        '^=',\r\n        '%=',\r\n        '<<=',\r\n        '>>=',\r\n        '>>>='\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_$][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // @ annotations.\r\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\r\n            [/0(@octaldigits)[Ll]?/, 'number.octal'],\r\n            [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\r\n            [/(@digits)[fFdD]/, 'number.float'],\r\n            [/(@digits)[lL]?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        //Identical copy of comment above, except for the addition of .doc\r\n        javadoc: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n            [/\\/\\*/, 'comment.doc.invalid'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ]\r\n    }\r\n};\r\n"]}