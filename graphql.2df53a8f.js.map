{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","offSide","language","defaultToken","tokenPostfix","keywords","typeKeywords","directiveLocations","operators","symbols","escapes","tokenizer","root","cases","include","token","log","next","nextEmbedded","bracket","mlstring","string","whitespace"],"mappings":"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","file":"graphql.2df53a8f.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"\"\"', close: '\"\"\"', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"\"\"', close: '\"\"\"' },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.gql',\r\n    keywords: [\r\n        'null',\r\n        'true',\r\n        'false',\r\n        'query',\r\n        'mutation',\r\n        'subscription',\r\n        'extend',\r\n        'schema',\r\n        'directive',\r\n        'scalar',\r\n        'type',\r\n        'interface',\r\n        'union',\r\n        'enum',\r\n        'input',\r\n        'implements',\r\n        'fragment',\r\n        'on'\r\n    ],\r\n    typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\r\n    directiveLocations: [\r\n        'SCHEMA',\r\n        'SCALAR',\r\n        'OBJECT',\r\n        'FIELD_DEFINITION',\r\n        'ARGUMENT_DEFINITION',\r\n        'INTERFACE',\r\n        'UNION',\r\n        'ENUM',\r\n        'ENUM_VALUE',\r\n        'INPUT_OBJECT',\r\n        'INPUT_FIELD_DEFINITION',\r\n        'QUERY',\r\n        'MUTATION',\r\n        'SUBSCRIPTION',\r\n        'FIELD',\r\n        'FRAGMENT_DEFINITION',\r\n        'FRAGMENT_SPREAD',\r\n        'INLINE_FRAGMENT',\r\n        'VARIABLE_DEFINITION'\r\n    ],\r\n    operators: ['=', '!', '?', ':', '&', '|'],\r\n    // we include these common regular expressions\r\n    symbols: /[=!?:&|]+/,\r\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\r\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // fields and argument names\r\n            [\r\n                /[a-z_][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'key.identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // identify typed input variables\r\n            [\r\n                /[$][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'argument.identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // to show class names nicely\r\n            [\r\n                /[A-Z][\\w\\$]*/,\r\n                {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword',\r\n                        '@default': 'type.identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],\r\n            // @ annotations.\r\n            // As an example, we emit a debugging log message on these tokens.\r\n            // Note: message are supressed during the first load -- change some lines to see them.\r\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, { token: 'annotation', log: 'annotation token: $0' }],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            [/\"\"\"/, { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }]\r\n        ],\r\n        mlstring: [\r\n            [/[^\"]+/, 'string'],\r\n            ['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/#.*$/, 'comment']\r\n        ]\r\n    }\r\n};\r\n"]}